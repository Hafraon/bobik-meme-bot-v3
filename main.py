#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ üß†üòÇüî•

–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£:
ukrainian-telegram-bot/
‚îú‚îÄ‚îÄ main.py                    # ‚Üê –¶–ï–ô –§–ê–ô–õ (–∫–æ—Ä—ñ–Ω—å)
‚îú‚îÄ‚îÄ app/main.py               # ‚Üê –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –±–æ—Ç–∞
‚îú‚îÄ‚îÄ deployment/
‚îÇ   ‚îú‚îÄ‚îÄ railway.json          # ‚Üê Railway –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
‚îÇ   ‚îú‚îÄ‚îÄ Procfile              # ‚Üê –ü—Ä–æ—Ü–µ—Å–∏
‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt      # ‚Üê –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ deployment
‚îú‚îÄ‚îÄ requirements.txt          # ‚Üê –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
‚îî‚îÄ‚îÄ app/{config,database,handlers,services,utils}/

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π async/await –∑–∞–ø—É—Å–∫ app/main.py
‚úÖ –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —ñ–º–ø–æ—Ä—Ç—É –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
‚úÖ Fallback –¥–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
‚úÖ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ Railway deployment
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É app/ –¥–æ Python path (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏)
current_dir = Path(__file__).parent
app_dir = current_dir / "app"
sys.path.insert(0, str(app_dir))
sys.path.insert(0, str(current_dir))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def main():
    """üîß –í–ò–ü–†–ê–í–õ–ï–ù–ê –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    
    print("üß†üòÇüî•" * 20)
    print("\nüöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
    print("üîß –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ó PROPER ASYNC/AWAIT")
    print("üß†üòÇüî•" * 20)
    print()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
        logger.info("üìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...")
        
        if not app_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return await run_minimal_bot()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫
        required_dirs = ["config", "database", "handlers"]
        for dir_name in required_dirs:
            dir_path = app_dir / dir_name
            if dir_path.exists():
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ app/{dir_name}/")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ app/{dir_name}/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/main.py...")
        
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É main —Ñ—É–Ω–∫—Ü—ñ—ó
            import main as app_main
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ñ—É–Ω–∫—Ü—ñ—è main
            if hasattr(app_main, 'main'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é main() –≤ app/main.py")
                # üîß –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: await –∑–∞–º—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É
                return await app_main.main()
                
            elif hasattr(app_main, 'UkrainianTelegramBot'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å UkrainianTelegramBot –≤ app/main.py")
                bot = app_main.UkrainianTelegramBot()
                return await bot.main()
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ entry point –≤ app/main.py")
                # –ü–æ—à—É–∫ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö entry points
                logger.info("üîç –ü–æ—à—É–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö entry points...")
                
                # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±—É–¥—å-—è–∫—É async —Ñ—É–Ω–∫—Ü—ñ—é
                for attr_name in dir(app_main):
                    attr = getattr(app_main, attr_name)
                    if asyncio.iscoroutinefunction(attr) and not attr_name.startswith('_'):
                        logger.info(f"üéØ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É {attr_name}()")
                        return await attr()
                
                # Fallback –¥–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
                logger.warning("‚ö†Ô∏è Entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞")
                return await run_minimal_bot()
                
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
            return await run_minimal_bot()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É app/main.py: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return await run_minimal_bot()
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return True
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return await run_minimal_bot()

async def run_minimal_bot():
    """üÜò –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç —É –≤–∏–ø–∞–¥–∫—É –ø—Ä–æ–±–ª–µ–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º"""
    
    logger.info("üÜò –ó–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        from aiogram.filters import Command
        from aiogram.types import Message
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
            return False
        
        admin_id = os.getenv("ADMIN_ID")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
        
        dp = Dispatcher()
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer(
                "üß†üòÇüî• <b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏</b>\n\n"
                "–ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏.\n"
                "–°–∫–æ—Ä–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ!"
            )
        
        @dp.message(Command("help"))
        async def cmd_help(message: Message):
            await message.answer(
                "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
                "/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
            )
        
        @dp.message(Command("status"))
        async def cmd_status(message: Message):
            await message.answer(
                "‚ö†Ô∏è <b>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º</b>\n\n"
                "–°—Ç–∞—Ç—É—Å: –ü—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\n"
                "–†–µ–∂–∏–º: –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏\n"
                "–ß–∞—Å: –ö—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω"
            )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º
        if admin_id:
            try:
                await bot.send_message(
                    int(admin_id),
                    "‚ö†Ô∏è <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û –í –ú–Ü–ù–Ü–ú–ê–õ–¨–ù–û–ú–£ –†–ï–ñ–ò–ú–Ü</b>\n\n"
                    "–ü—Ä–∏—á–∏–Ω–∞: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è\n"
                    "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
                )
            except:
                pass
        
        logger.info("‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        
        # –ó–∞–ø—É—Å–∫ polling
        await dp.start_polling(bot, skip_updates=True)
        return True
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
        return False

def sync_main():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Python"""
    try:
        # üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ async —Ñ—É–Ω–∫—Ü—ñ—ó
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    sync_main()