#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ üß†üòÇüî•
–ü–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é, –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é —Ç–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é
"""

import asyncio
import logging
import sys
import os
import signal
from datetime import datetime
from pathlib import Path
from typing import Optional

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

# Aiogram imports
try:
    from aiogram import Bot, Dispatcher
    from aiogram.enums import ParseMode
    from aiogram.client.default import DefaultBotProperties
    from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest
except ImportError as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É aiogram: {e}")
    logger.error("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install aiogram>=3.4.0")
    sys.exit(1)

class UkrainianTelegramBot:
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.scheduler_service = None
        self.is_running = False
        self.startup_time = datetime.now()
        
        # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        self.is_running = False
    
    def print_banner(self):
        """–ö—Ä–∞—Å–∏–≤–∏–π –±–∞–Ω–µ—Ä –∑–∞–ø—É—Å–∫—É"""
        banner = """
üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•

    üöÄ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ üöÄ
             –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ –¢–ê –ú–û–î–ï–†–ê–¶–Ü–Ñ–Æ

üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•üß†üòÇüî•
"""
        print(banner)
    
    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–æ–º"""
        try:
            from config.settings import settings
            logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ config.settings")
            return settings
        except ImportError:
            logger.info("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            
            class FallbackSettings:
                # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
                BOT_TOKEN = os.getenv("BOT_TOKEN", "")
                ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
                DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")
                CHANNEL_ID = os.getenv("CHANNEL_ID", "")
                OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
                
                # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
                DEBUG = os.getenv("DEBUG", "False").lower() == "true"
                LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
                TIMEZONE = os.getenv("TIMEZONE", "Europe/Kiev")
                ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
                
                # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
                POINTS_FOR_REACTION = int(os.getenv("POINTS_FOR_REACTION", "5"))
                POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "10"))
                POINTS_FOR_APPROVAL = int(os.getenv("POINTS_FOR_APPROVAL", "20"))
                POINTS_FOR_TOP_JOKE = int(os.getenv("POINTS_FOR_TOP_JOKE", "50"))
                POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "15"))
                POINTS_FOR_DAILY_ACTIVITY = int(os.getenv("POINTS_FOR_DAILY_ACTIVITY", "2"))
                
                # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
                DAILY_BROADCAST_HOUR = int(os.getenv("DAILY_BROADCAST_HOUR", "9"))
                DAILY_BROADCAST_MINUTE = int(os.getenv("DAILY_BROADCAST_MINUTE", "0"))
                
                # –î—É–µ–ª—ñ
                DUEL_VOTING_TIME = int(os.getenv("DUEL_VOTING_TIME", "300"))
                MIN_VOTES_FOR_DUEL = int(os.getenv("MIN_VOTES_FOR_DUEL", "3"))
                
                # –ï–º–æ–¥–∑—ñ
                EMOJI = {
                    "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê",
                    "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
                    "crown": "üëë", "rocket": "üöÄ", "vs": "‚öîÔ∏è", "calendar": "üìÖ"
                }
            
            return FallbackSettings()
    
    def validate_settings(self, settings):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        if not settings.BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        if not settings.ADMIN_ID:
            logger.error("‚ùå ADMIN_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        if not settings.DATABASE_URL:
            logger.error("‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω—ñ")
        return True
    
    async def init_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
        
        try:
            from database import (
                init_db, 
                check_if_migration_needed,
                migrate_database,
                verify_database_integrity
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó
            if await check_if_migration_needed():
                logger.info("üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î...")
                await migrate_database()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            await init_db()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
            if await verify_database_integrity():
                logger.info("‚úÖ –ë–î –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ë–î –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ")
                return True
                
        except ImportError:
            logger.error("‚ùå –ú–æ–¥—É–ª—å database –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return False
    
    async def create_bot(self, settings):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
        logger.info("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞...")
        
        try:
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{bot_info.username} ({bot_info.first_name})")
            
            return True
            
        except TelegramNetworkError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ Telegram: {e}")
            return False
        except TelegramBadRequest as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False
    
    async def setup_dispatcher(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–∞ middleware"""
        logger.info("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
        
        try:
            self.dp = Dispatcher()
            
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è middleware
            try:
                from middlewares.auth import LoggingMiddleware, AntiSpamMiddleware, AuthMiddleware
                
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                self.dp.message.middleware(LoggingMiddleware())
                self.dp.callback_query.middleware(LoggingMiddleware())
                
                # –ê–Ω—Ç–∏—Å–ø–∞–º
                self.dp.message.middleware(AntiSpamMiddleware(rate_limit=3))
                self.dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
                
                # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                self.dp.message.middleware(AuthMiddleware())
                self.dp.callback_query.middleware(AuthMiddleware())
                
                logger.info("‚úÖ Middleware –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Middleware –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: {e}")
            
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            try:
                from handlers import register_handlers
                register_handlers(self.dp)
                logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                
            except ImportError as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
            return False
    
    async def setup_scheduler(self, settings):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á"""
        logger.info("üìÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
        
        try:
            from services.scheduler import SchedulerService
            
            self.scheduler_service = SchedulerService(self.bot)
            await self.scheduler_service.start()
            
            logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
            
        except ImportError:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∞—Ü—é—é –±–µ–∑ –Ω—å–æ–≥–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
    
    async def startup_checks(self, settings):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É...")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from database import get_or_create_user
            
            admin_user = await get_or_create_user(
                telegram_id=settings.ADMIN_ID,
                username="admin",
                first_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
            )
            
            if admin_user:
                logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {settings.ADMIN_ID} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {settings.ADMIN_ID}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            from database import get_bot_statistics, update_bot_statistics
            
            stats = await get_bot_statistics()
            if stats:
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_users', 0)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
            await update_bot_statistics()
            
            return True
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    async def run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        try:
            self.is_running = True
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
            logger.info(f"üìä –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {self.startup_time}")
            logger.info("üõë –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(
                self.bot,
                skip_updates=True,
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            
        except KeyboardInterrupt:
            logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏ –≤—ñ–¥ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler_service:
                await self.scheduler_service.stop()
                logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("‚úÖ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
            
            self.is_running = False
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
            uptime = datetime.now() - self.startup_time
            logger.info(f"üìä –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}")
            logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")
    
    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        self.print_banner()
        
        try:
            # –ö—Ä–æ–∫ 1: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            logger.info("‚ñ∂Ô∏è üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
            settings = self.load_settings()
            
            if not self.validate_settings(settings):
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
                return False
            
            # –ö—Ä–æ–∫ 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            logger.info("‚ñ∂Ô∏è üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
            if not await self.init_database():
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ë–î")
                return False
            
            # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
            logger.info("‚ñ∂Ô∏è ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞...")
            if not await self.create_bot(settings):
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞")
                return False
            
            # –ö—Ä–æ–∫ 4: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            logger.info("‚ñ∂Ô∏è üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
            if not await self.setup_dispatcher():
                logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
                return False
            
            # –ö—Ä–æ–∫ 5: –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
            logger.info("‚ñ∂Ô∏è üìÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            await self.setup_scheduler(settings)
            
            # –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
            logger.info("‚ñ∂Ô∏è üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É...")
            await self.startup_checks(settings)
            
            # –ö—Ä–æ–∫ 7: –ó–∞–ø—É—Å–∫
            logger.info("‚ñ∂Ô∏è üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await self.run_bot()
            
            return True
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –ø—Ä–æ–≥—Ä–∞–º—É"""
    bot = UkrainianTelegramBot()
    
    try:
        result = asyncio.run(bot.main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()