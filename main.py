#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç - –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø—É—Å–∫ üß†üòÇüî•
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
from config.settings import settings, EMOJI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–ö–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.web_runner = None
        self.start_time = datetime.now()
        
    async def create_bot(self) -> Bot:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞"""
        return Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
    
    async def create_dispatcher(self) -> Dispatcher:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑ –±–∞–∑–æ–≤–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏"""
        dp = Dispatcher(storage=MemoryStorage())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        await self.register_basic_handlers(dp)
        
        return dp
    
    async def register_basic_handlers(self, dp: Dispatcher):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        from aiogram.filters import Command
        from aiogram.types import Message
        
        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer(
                f"{EMOJI['brain']}{EMOJI['laugh']}{EMOJI['fire']} <b>–í—ñ—Ç–∞—é –≤ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ!</b>\n\n"
                f"{EMOJI['rocket']} –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n"
                f"{EMOJI['fire']} –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏\n"
                f"{EMOJI['test']} –ö–æ–º–∞–Ω–¥–∞ /test –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏"
            )
            logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

        @dp.message(Command("help"))
        async def cmd_help(message: Message):
            await message.answer(
                f"{EMOJI['help']} <b>–î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£</b>\n\n"
                f"{EMOJI['star']} <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                f"‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                f"‚Ä¢ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                f"‚Ä¢ /test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É\n"
                f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                f"{EMOJI['heart']} –ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–π –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º!"
            )

        @dp.message(Command("test"))
        async def cmd_test(message: Message):
            await message.answer(
                f"{EMOJI['fire']} <b>–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n"
                f"{EMOJI['check']} –ë–æ—Ç –ø—Ä–∞—Ü—é—î\n"
                f"{EMOJI['rocket']} –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                f"{EMOJI['brain']} –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≤ –Ω–æ—Ä–º—ñ!"
            )

        @dp.message(Command("status"))
        async def cmd_status(message: Message):
            uptime = datetime.now() - self.start_time
            await message.answer(
                f"{EMOJI['stats']} <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
                f"{EMOJI['fire']} –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {str(uptime).split('.')[0]}\n"
                f"{EMOJI['rocket']} –ü–æ—Ä—Ç: {settings.PORT}\n"
                f"{EMOJI['check']} –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π\n"
                f"{EMOJI['brain']} Version: 2.0.0"
            )

        logger.info(f"{EMOJI['check']} –ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    
    async def create_web_server(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        async def health_check(request):
            uptime = datetime.now() - self.start_time
            return web.json_response({
                "status": "healthy",
                "bot": "running",
                "uptime_seconds": int(uptime.total_seconds()),
                "timestamp": datetime.now().isoformat(),
                "version": "2.0.0"
            })
        
        async def root_handler(request):
            uptime = datetime.now() - self.start_time
            html = f"""
            <!DOCTYPE html>
            <html lang="uk">
            <head>
                <meta charset="UTF-8">
                <title>{EMOJI['brain']}{EMOJI['laugh']}{EMOJI['fire']} –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –ë–æ—Ç</title>
                <style>
                    body {{ 
                        font-family: Arial, sans-serif; 
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white; margin: 0; padding: 20px; 
                        min-height: 100vh; display: flex; 
                        align-items: center; justify-content: center;
                    }}
                    .container {{ 
                        background: rgba(255,255,255,0.1); 
                        padding: 40px; border-radius: 20px; 
                        text-align: center; backdrop-filter: blur(10px);
                    }}
                    h1 {{ font-size: 3em; margin-bottom: 20px; }}
                    .status {{ margin: 20px 0; font-size: 1.2em; }}
                </style>
            </head>
            <body>
                <div class="container">
                    <h1>{EMOJI['brain']}{EMOJI['laugh']}{EMOJI['fire']}</h1>
                    <h2>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç</h2>
                    <div class="status">
                        <strong>{EMOJI['rocket']} –°—Ç–∞—Ç—É—Å:</strong> –ê–∫—Ç–∏–≤–Ω–∏–π<br>
                        <strong>{EMOJI['fire']} –ß–∞—Å —Ä–æ–±–æ—Ç–∏:</strong> {str(uptime).split('.')[0]}<br>
                        <strong>{EMOJI['check']} –ü–æ—Ä—Ç:</strong> {settings.PORT}
                    </div>
                    <p><a href="/health" style="color: #FFD700;">/health</a> - Health check</p>
                    <p>{EMOJI['heart']} –ó—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–µ–º-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏</p>
                </div>
            </body>
            </html>
            """
            return web.Response(text=html, content_type='text/html')
        
        app = web.Application()
        app.router.add_get('/', root_handler)
        app.router.add_get('/health', health_check)
        
        runner = web.AppRunner(app)
        await runner.setup()
        
        site = web.TCPSite(runner, '0.0.0.0', settings.PORT)
        await site.start()
        
        logger.info(f"{EMOJI['rocket']} –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {settings.PORT}")
        return runner
    
    async def on_startup(self):
        """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        try:
            logger.info(f"{EMOJI['rocket']} –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
            me = await self.bot.get_me()
            logger.info(f"{EMOJI['brain']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ: @{me.username} ({me.full_name})")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['fire']} <b>–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"{EMOJI['brain']} <b>–Ü–º'—è:</b> @{me.username}\n"
                    f"{EMOJI['rocket']} <b>–†–µ–∂–∏–º:</b> Production\n"
                    f"{EMOJI['check']} <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∏–π"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                
        except Exception as e:
            logger.error(f"{EMOJI['cross']} –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise
    
    async def on_shutdown(self):
        """–§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞"""
        try:
            logger.info(f"{EMOJI['thinking']} –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['cross']} <b>–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ</b>\n{EMOJI['thinking']} –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!"
                )
            except Exception:
                pass
                
            logger.info(f"{EMOJI['check']} –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}")
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.bot = await self.create_bot()
            self.dp = await self.create_dispatcher()
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è startup/shutdown —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            self.dp.startup.register(self.on_startup)
            self.dp.shutdown.register(self.on_shutdown)
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            self.web_runner = await self.create_web_server()
            
            logger.info(f"{EMOJI['fire']} –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            polling_task = asyncio.create_task(
                self.dp.start_polling(
                    self.bot,
                    skip_updates=True,
                    allowed_updates=['message', 'callback_query']
                )
            )
            
            # –ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∏–º
            web_task = asyncio.create_task(self._keep_alive())
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó –∑–∞–¥–∞—á—ñ
            done, pending = await asyncio.wait(
                [polling_task, web_task], 
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–¥–∞—á
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
        except KeyboardInterrupt:
            logger.info(f"{EMOJI['hand']} –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        except Exception as e:
            logger.error(f"{EMOJI['cross']} –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            # –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
            if self.web_runner:
                await self.web_runner.cleanup()
            if self.bot:
                await self.bot.session.close()
    
    async def _keep_alive(self):
        """–ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—é"""
        try:
            while True:
                await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        except asyncio.CancelledError:
            logger.info(f"{EMOJI['thinking']} –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –∑–∞–¥–∞—á—ñ...")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        if not settings.BOT_TOKEN:
            logger.error(f"{EMOJI['cross']} BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)
        
        if not settings.ADMIN_ID:
            logger.error(f"{EMOJI['cross']} ADMIN_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)
        
        logger.info(f"{EMOJI['star']} –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        logger.info(f"{EMOJI['rocket']} –ü–æ—Ä—Ç: {settings.PORT}")
        logger.info(f"{EMOJI['brain']} –ê–¥–º—ñ–Ω: {settings.ADMIN_ID}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = UkrainianBot()
        await bot.run()
        
    except Exception as e:
        logger.error(f"{EMOJI['cross']} –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –î–ª—è Windows —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())