#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É üß†üòÇüî•
"""

import asyncio
import logging
import signal
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

# Aiogram imports –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–æ–≤–æ—ó –≤–µ—Ä—Å—ñ—ó
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiohttp import web

# –ù–∞—à—ñ –º–æ–¥—É–ª—ñ (—Å–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏)
try:
    from settings import settings, EMOJI
except ImportError:
    try:
        from config.settings import settings, EMOJI
    except ImportError:
        # Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        import os
        class FallbackSettings:
            BOT_TOKEN = os.getenv("BOT_TOKEN", "")
            ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
            DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")
            OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
            LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
        
        settings = FallbackSettings()
        EMOJI = {"brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê", "check": "‚úÖ", "cross": "‚ùå"}

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, getattr(settings, 'LOG_LEVEL', 'INFO'), logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8') if Path.cwd().is_dir() else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.app = None
        
    async def create_bot(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ (–æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è aiogram 3.7.0+)"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            session = AiohttpSession()
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–º API
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                session=session,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            logger.info(f"ü§ñ –ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False
    
    async def setup_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        if not self.dp:
            logger.error("‚ùå –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return False
            
        try:
            handlers_registered = 0
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É
            handler_modules = [
                # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø–ª–æ—Å–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                ("basic_commands", "register_basic_handlers", "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"),
                ("content_handlers", "register_content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
                ("gamification_handlers", "register_gamification_handlers", "–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è"),
                ("moderation_handlers", "register_moderation_handlers", "–ú–æ–¥–µ—Ä–∞—Ü—ñ—è"),
                ("duel_handlers", "register_duel_handlers", "–î—É–µ–ª—ñ"),
                # –ü–æ—Ç—ñ–º –ø–∞–ø–∫–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                ("handlers.basic_commands", "register_basic_handlers", "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ (handlers/)"),
                ("handlers.content_handlers", "register_content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏ (handlers/)"),
                ("handlers.gamification_handlers", "register_gamification_handlers", "–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (handlers/)"),
                ("handlers.moderation_handlers", "register_moderation_handlers", "–ú–æ–¥–µ—Ä–∞—Ü—ñ—è (handlers/)"),
                ("handlers.duel_handlers", "register_duel_handlers", "–î—É–µ–ª—ñ (handlers/)")
            ]
            
            for module_name, func_name, description in handler_modules:
                try:
                    module = __import__(module_name, fromlist=[func_name])
                    register_func = getattr(module, func_name)
                    register_func(self.dp)
                    handlers_registered += 1
                    logger.info(f"‚úÖ {description} - –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
                    break  # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ü–µ–π –º–æ–¥—É–ª—å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
                except (ImportError, AttributeError):
                    continue
            
            # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ, –¥–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
            if handlers_registered == 0:
                logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏")
                self.register_fallback_handlers()
                handlers_registered = 1
            
            logger.info(f"üéØ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {handlers_registered} –≥—Ä—É–ø —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
            # –í—Å–µ –æ–¥–Ω–æ —Ä–µ—î—Å—Ç—Ä—É—î–º–æ fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏
            try:
                self.register_fallback_handlers()
                return True
            except Exception as fallback_error:
                logger.error(f"‚ùå –ù–∞–≤—ñ—Ç—å fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å: {fallback_error}")
                return False
    
    def register_fallback_handlers(self):
        """–ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —è–∫ fallback"""
        from aiogram import F
        from aiogram.filters import Command
        from aiogram.types import Message
        
        @self.dp.message(Command("start"))
        async def cmd_start_fallback(message: Message):
            await message.answer(
                f"{EMOJI['brain']}{EMOJI['laugh']}{EMOJI['fire']} <b>–í—ñ—Ç–∞—é –≤ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ!</b>\n\n"
                f"{EMOJI['star']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\n"
                f"{EMOJI['check']} –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω—ñ\n"
                f"{EMOJI['fire']} –ê–¥–º—ñ–Ω: {settings.ADMIN_ID}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                f"‚Ä¢ /start - –∑–∞–ø—É—Å–∫\n"
                f"‚Ä¢ /help - –¥–æ–ø–æ–º–æ–≥–∞\n"
                f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                f"‚Ä¢ /test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π"
            )
        
        @self.dp.message(Command("help"))
        async def cmd_help_fallback(message: Message):
            await message.answer(
                f"{EMOJI['star']} <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n\n"
                f"–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                f"‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
                f"‚Ä¢ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å\n"
                f"‚Ä¢ /test - —Ç–µ—Å—Ç\n\n"
                f"{EMOJI['fire']} –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\n"
                f"üîß –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –º–æ–¥—É–ª—ñ"
            )
        
        @self.dp.message(Command("status"))
        async def cmd_status_fallback(message: Message):
            await message.answer(
                f"{EMOJI['check']} <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                f"ü§ñ –ë–æ—Ç: –∞–∫—Ç–∏–≤–Ω–∏–π\n"
                f"üë• –ê–¥–º—ñ–Ω: {settings.ADMIN_ID}\n"
                f"üíæ –ë–î: {settings.DATABASE_URL.split('@')[0] if '@' in settings.DATABASE_URL else 'Local'}@***\n"
                f"üß† AI: {'‚úÖ' if getattr(settings, 'OPENAI_API_KEY', None) else '‚ùå'}\n"
                f"üî• –†–µ–∂–∏–º: –±–∞–∑–æ–≤–∏–π"
            )
        
        @self.dp.message(Command("test"))
        async def cmd_test_fallback(message: Message):
            test_msg = f"{EMOJI['fire']} <b>–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π:</b>\n\n"
            
            # –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            test_msg += f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å - OK\n"
            
            # –¢–µ—Å—Ç HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            test_msg += f"‚úÖ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è - OK\n"
            
            # –¢–µ—Å—Ç –µ–º–æ–¥–∑—ñ
            test_msg += f"‚úÖ –ï–º–æ–¥–∑—ñ {EMOJI['brain']}{EMOJI['laugh']}{EMOJI['fire']} - OK\n"
            
            # –¢–µ—Å—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            test_msg += f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è - OK\n"
            
            test_msg += f"\n{EMOJI['check']} –í—Å—ñ –±–∞–∑–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø—Ä–∞—Ü—é—é—Ç—å!"
            
            await message.answer(test_msg)
        
        # –û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @self.dp.message(F.text)
        async def fallback_handler(message: Message):
            if not message.text.startswith('/'):
                await message.answer(
                    f"{EMOJI['star']} –ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏\n"
                    f"–ê–±–æ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏"
                )
        
        logger.info("üîß Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    
    async def setup_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É –ë–î
            database_modules = [
                ("database", "init_db"),
                ("database.database", "init_db"),
                ("models", "init_db")
            ]
            
            for module_name, func_name in database_modules:
                try:
                    module = __import__(module_name, fromlist=[func_name])
                    init_db = getattr(module, func_name)
                    await init_db()
                    logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
                    return True
                except (ImportError, AttributeError):
                    continue
            
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å database –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ë–î
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —ñ–º–ø–æ—Ä—Ç—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            scheduler_modules = [
                ("scheduler", "SchedulerService"),
                ("services.scheduler", "SchedulerService")
            ]
            
            for module_name, class_name in scheduler_modules:
                try:
                    module = __import__(module_name, fromlist=[class_name])
                    SchedulerService = getattr(module, class_name)
                    self.scheduler = SchedulerService(self.bot)
                    await self.scheduler.start()
                    logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
                    return True
                except (ImportError, AttributeError):
                    continue
            
            logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å scheduler –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    
    async def create_webapp(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –¥–ª—è Railway"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è aiohttp –¥–æ–¥–∞—Ç–∫—É
            self.app = web.Application()
            
            # Health check endpoint
            async def health_check(request):
                return web.json_response({
                    "status": "healthy",
                    "bot": "ukrainian_telegram_bot",
                    "version": "1.0.0",
                    "admin_id": settings.ADMIN_ID,
                    "bot_ready": self.bot is not None
                })
            
            # –°—Ç–∞—Ç–∏—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            async def index(request):
                return web.Response(
                    text=f"""
                    <html>
                        <head>
                            <title>üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç</title>
                            <style>
                                body {{ font-family: Arial; text-align: center; padding: 50px; background: #f0f8ff; }}
                                .status {{ color: {'green' if self.bot else 'red'}; }}
                            </style>
                        </head>
                        <body>
                            <h1>üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç</h1>
                            <div class="status">
                                <p>‚úÖ –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if self.bot else '–ü–æ–º–∏–ª–∫–∞'}</p>
                                <p>ü§ñ –í–µ—Ä—Å—ñ—è: 1.0.0</p>
                                <p>üë• –ê–¥–º—ñ–Ω: {settings.ADMIN_ID}</p>
                                <p>üìä <a href="/health">Health Check</a></p>
                            </div>
                            <hr>
                            <p>üá∫üá¶ –ó—Ä–æ–±–ª–µ–Ω–æ –∑ ‚ù§Ô∏è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–µ–º-—Å–ø—ñ–ª—å–Ω–æ—Ç–∏!</p>
                        </body>
                    </html>
                    """,
                    content_type='text/html'
                )
            
            self.app.router.add_get('/', index)
            self.app.router.add_get('/health', health_check)
            
            logger.info("üåê –í–µ–±-–¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É: {e}")
            return False
    
    async def start_webapp(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway"""
        try:
            port = int(os.getenv("PORT", 8000))
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            runner = web.AppRunner(self.app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', port)
            await site.start()
            
            logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        if not self.bot:
            raise ValueError("–ë–æ—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook —è–∫—â–æ –±—É–≤
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ polling: {e}")
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            if hasattr(self, 'scheduler') and self.scheduler:
                await self.scheduler.stop()
                logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            if self.bot:
                await self.bot.session.close()
                logger.info("ü§ñ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É"""
        logger.info("üß†üòÇüî• –ó–ê–ü–£–°–ö –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û TELEGRAM-–ë–û–¢–ê üß†üòÇüî•")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            if not settings.BOT_TOKEN:
                raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
            if not settings.ADMIN_ID:
                raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
            
            logger.info(f"üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
            logger.info(f"   üì± –ê–¥–º—ñ–Ω ID: {settings.ADMIN_ID}")
            logger.info(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {settings.DATABASE_URL.split('@')[0] if '@' in settings.DATABASE_URL else 'Local'}@***")
            logger.info(f"   üß† OpenAI: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' if getattr(settings, 'OPENAI_API_KEY', None) else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—î'}")
            
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            steps = [
                ("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞", self.create_bot()),
                ("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î", self.setup_database()),
                ("üéØ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤", self.setup_handlers()),
                ("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", self.setup_scheduler()),
                ("üåê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É", self.create_webapp()),
                ("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞", self.start_webapp())
            ]
            
            success_count = 0
            for step_name, step_coro in steps:
                logger.info(f"‚ñ∂Ô∏è {step_name}...")
                result = await step_coro
                if not result:
                    logger.warning(f"‚ö†Ô∏è {step_name} - –ø—Ä–æ–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É")
                else:
                    logger.info(f"‚úÖ {step_name} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    success_count += 1
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if not self.bot:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞!")
            if not self.dp:
                raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä!")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"üéâ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n"
                    f"ü§ñ <b>–ë–æ—Ç:</b> @{bot_info.username}\n"
                    f"üíæ <b>–ë–î:</b> {'‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if hasattr(self, 'database_ok') else '‚ö†Ô∏è –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º'}\n"
                    f"‚è∞ <b>–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if hasattr(self, 'scheduler') else '‚ö†Ô∏è –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                    f"üß† <b>AI:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if getattr(settings, 'OPENAI_API_KEY', None) else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                    f"üéØ <b>–£—Å–ø—ñ—à–Ω–∏—Ö –∫—Ä–æ–∫—ñ–≤:</b> {success_count}/6\n\n"
                    f"üìä –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
                    f"‚Ä¢ /start - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏\n"
                    f"‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\n"
                    f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                    f"‚Ä¢ /test - —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–π"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
            await self.start_polling()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            await self.shutdown()

def setup_signal_handlers(bot_instance):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        loop = asyncio.get_event_loop()
        loop.create_task(bot_instance.shutdown())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
        bot_instance = UkrainianBot()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
        setup_signal_handlers(bot_instance)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot_instance.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    try:
        Path("logs").mkdir(exist_ok=True)
        Path("data").mkdir(exist_ok=True)
    except:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    
    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        sys.exit(1)