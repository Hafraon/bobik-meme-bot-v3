#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é üß†üòÇüî•
–ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–µ–º–∞–º–∏, –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏, –±–∞–ª–∞–º–∏, —Ä–∞–Ω–≥–∞–º–∏, –¥—É–µ–ª—è–º–∏ —Ç–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é
"""

import asyncio
import logging
import sys
import os
import signal
from datetime import datetime
from pathlib import Path

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

# Aiogram imports –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π
try:
    from aiogram import Bot, Dispatcher
    from aiogram.enums import ParseMode
    from aiogram.client.default import DefaultBotProperties
    from aiogram.client.session.aiohttp import AiohttpSession
except ImportError as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É aiogram: {e}")
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install aiogram>=3.4.0")
    sys.exit(1)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏
settings = None
EMOJI = {}

def load_settings():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö –¥–∂–µ—Ä–µ–ª"""
    global settings, EMOJI
    
    # –°–ø—Ä–æ–±–∞ 1: –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ config/settings.py
    try:
        from config.settings import Settings
        settings = Settings()
        
        # –î–æ–¥–∞—î–º–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        if not hasattr(settings, 'ADMIN_ID'):
            settings.ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        if not hasattr(settings, 'DATABASE_URL'):
            settings.DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
        if not hasattr(settings, 'DEBUG'):
            settings.DEBUG = os.getenv("DEBUG", "False").lower() == "true"
        
        print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ config.settings")
        
    except ImportError:
        # –°–ø—Ä–æ–±–∞ 2: –°—Ç–∞—Ä–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç settings.py
        try:
            from settings import settings as old_settings, EMOJI as old_emoji
            settings = old_settings
            EMOJI = old_emoji
            print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ settings.py")
        except ImportError:
            # –°–ø—Ä–æ–±–∞ 3: Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            print("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            
            class FallbackSettings:
                def __init__(self):
                    self.BOT_TOKEN = os.getenv("BOT_TOKEN", "")
                    self.ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
                    self.DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
                    self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
                    self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
                    self.DEBUG = os.getenv("DEBUG", "False").lower() == "true"
                    self.CHANNEL_ID = os.getenv("CHANNEL_ID", "")
                    
                    # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
                    self.POINTS_FOR_REACTION = int(os.getenv("POINTS_FOR_REACTION", "5"))
                    self.POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "10"))
                    self.POINTS_FOR_APPROVAL = int(os.getenv("POINTS_FOR_APPROVAL", "20"))
                    self.POINTS_FOR_TOP_JOKE = int(os.getenv("POINTS_FOR_TOP_JOKE", "50"))
                    self.POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "15"))
                    self.POINTS_FOR_DAILY_ACTIVITY = int(os.getenv("POINTS_FOR_DAILY_ACTIVITY", "2"))
                    
                    # –û–±–º–µ–∂–µ–Ω–Ω—è
                    self.MAX_JOKE_LENGTH = int(os.getenv("MAX_JOKE_LENGTH", "1000"))
                    self.MAX_MEME_CAPTION_LENGTH = int(os.getenv("MAX_MEME_CAPTION_LENGTH", "200"))
                    
                    # –î—É–µ–ª—ñ
                    self.DUEL_VOTING_TIME = int(os.getenv("DUEL_VOTING_TIME", "300"))
                    self.MIN_VOTES_FOR_DUEL = int(os.getenv("MIN_VOTES_FOR_DUEL", "3"))
                    
                    # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
                    self.DAILY_BROADCAST_HOUR = int(os.getenv("DAILY_BROADCAST_HOUR", "9"))
                    self.DAILY_BROADCAST_MINUTE = int(os.getenv("DAILY_BROADCAST_MINUTE", "0"))
            
            settings = FallbackSettings()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è EMOJI —è–∫—â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
    if not EMOJI:
        EMOJI = {
            "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê", 
            "heart": "‚ù§Ô∏è", "trophy": "üèÜ", "crown": "üëë", "rocket": "üöÄ",
            "party": "üéâ", "boom": "üí•", "like": "üëç", "dislike": "üëé",
            "thinking": "ü§î", "cool": "üòé", "wink": "üòâ", "eye": "üëÅÔ∏è",
            "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
            "new": "üÜï", "top": "üîù", "vs": "‚öîÔ∏è", "time": "‚è∞",
            "calendar": "üìÖ", "stats": "üìä", "profile": "üë§", "help": "‚ùì"
        }

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–ª—è –ª–æ–≥—ñ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    log_level = getattr(logging, getattr(settings, 'LOG_LEVEL', 'INFO'), logging.INFO)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)
    
    # –§–∞–π–ª–æ–≤–∏–π handler
    file_handler = logging.FileHandler('logs/bot.log', encoding='utf-8')
    file_handler.setFormatter(formatter)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(log_level)
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    
    # –ó–º–µ–Ω—à–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self._shutdown_event = asyncio.Event()
    
    async def validate_environment(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Ç–æ—á–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        errors = []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
        if not settings.BOT_TOKEN:
            errors.append("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
        if not settings.ADMIN_ID:
            errors.append("ADMIN_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤
        required_dirs = ['handlers', 'database', 'config']
        for dir_name in required_dirs:
            if not os.path.exists(dir_name):
                errors.append(f"–ü–∞–ø–∫–∞ '{dir_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        if errors:
            logger.error("‚ùå –ü–æ–º–∏–ª–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            for error in errors:
                logger.error(f"  - {error}")
            return False
        
        logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω—ñ")
        return True
    
    async def create_bot(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
            session = AiohttpSession()
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                session=session,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    link_preview_is_disabled=True
                )
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{bot_info.username} ({bot_info.first_name})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False
    
    async def setup_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É database –º–æ–¥—É–ª—è
            try:
                from database.database import init_db
                await init_db()
                logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
                return True
            except ImportError:
                logger.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å database.database –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î")
                return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return False
    
    async def setup_dispatcher(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            self.dp = Dispatcher()
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è middleware (—è–∫—â–æ —î)
            try:
                from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware
                
                self.dp.message.middleware(LoggingMiddleware())
                self.dp.callback_query.middleware(LoggingMiddleware())
                
                self.dp.message.middleware(AntiSpamMiddleware(rate_limit=3))
                self.dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
                
                self.dp.message.middleware(AuthMiddleware())
                self.dp.callback_query.middleware(AuthMiddleware())
                
                logger.info("üîß Middleware –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            except ImportError:
                logger.warning("‚ö†Ô∏è Middleware –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∞—Ü—é—é –±–µ–∑ –Ω–∏—Ö")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            try:
                from handlers import register_handlers
                register_handlers(self.dp)
                logger.info("üéØ –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
                return True
            except ImportError:
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∏")
                # –°–ø—Ä–æ–±–∞ fallback —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                return await self.setup_fallback_handlers()
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞: {e}")
            return False
    
    async def setup_fallback_handlers(self):
        """Fallback —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            from aiogram.filters import Command
            
            # –ë–∞–∑–æ–≤–∏–π /start —Ö–µ–Ω–¥–ª–µ—Ä
            @self.dp.message(Command("start"))
            async def cmd_start(message):
                await message.answer(
                    f"{EMOJI.get('fire', 'üî•')} <b>–í—ñ—Ç–∞—é!</b>\n\n"
                    f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É fallback —Ä–µ–∂–∏–º—ñ.\n"
                    f"–î–æ–¥–∞–π—Ç–µ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ."
                )
            
            logger.info("üîÑ Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ fallback —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
            return False
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            from services.scheduler import SchedulerService
            self.scheduler = SchedulerService(self.bot)
            await self.scheduler.start()
            logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
        except ImportError:
            logger.info("‚ÑπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–∞—Ü—é—é –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
    
    async def notify_admin_startup(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫"""
        if not self.bot or not settings.ADMIN_ID:
            return
        
        try:
            startup_message = (
                f"{EMOJI.get('rocket', 'üöÄ')} <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û!</b>\n\n"
                f"{EMOJI.get('check', '‚úÖ')} –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å\n"
                f"{EMOJI.get('brain', 'üß†')} –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞\n"
                f"{EMOJI.get('fire', 'üî•')} –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞\n"
                f"{EMOJI.get('vs', '‚öîÔ∏è')} –î—É–µ–ª—ñ –≥–æ—Ç–æ–≤—ñ\n\n"
                f"{EMOJI.get('calendar', 'üìÖ')} –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
            
            await self.bot.send_message(settings.ADMIN_ID, startup_message)
            logger.info("üì§ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.notify_admin_startup()
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è graceful shutdown
            def signal_handler(signum, frame):
                logger.info(f"üì∂ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}")
                self._shutdown_event.set()
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            polling_task = asyncio.create_task(
                self.dp.start_polling(
                    self.bot,
                    skip_updates=True,
                    allowed_updates=["message", "callback_query", "inline_query"]
                )
            )
            
            shutdown_task = asyncio.create_task(self._shutdown_event.wait())
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            done, pending = await asyncio.wait(
                [polling_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ–≤–∏–∫–æ–Ω–∞–Ω–∏—Ö –∑–∞–¥–∞—á
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if self.bot and settings.ADMIN_ID:
                try:
                    await self.bot.send_message(
                        settings.ADMIN_ID,
                        f"{EMOJI.get('cross', '‚ùå')} <b>–ë–û–¢ –ó–£–ü–ò–ù–ï–ù–û</b>\n\n"
                        f"{EMOJI.get('time', '‚è∞')} –ß–∞—Å –∑—É–ø–∏–Ω–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
                except:
                    pass
            
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("ü§ñ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        logger.info(f"{EMOJI.get('rocket', 'üöÄ')} –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞")
        
        # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        steps = [
            ("üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ—Ç–æ—á–µ–Ω–Ω—è", self.validate_environment),
            ("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞", self.create_bot),
            ("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î", self.setup_database),
            ("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", self.setup_dispatcher),
            ("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", self.setup_scheduler),
        ]
        
        for step_name, step_func in steps:
            logger.info(f"‚ñ∂Ô∏è {step_name}...")
            try:
                result = await step_func()
                if result is False:
                    logger.error(f"‚ùå –ù–µ–≤–¥–∞–ª–∏–π –∫—Ä–æ–∫: {step_name}")
                    return False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–æ—Ü—ñ '{step_name}': {e}")
                return False
        
        logger.info(f"{EMOJI.get('party', 'üéâ')} –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        await self.start_polling()
        return True

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    
    # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    print("üß†üòÇüî•" * 20)
    print("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
    print("üß†üòÇüî•" * 20)
    print()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    load_settings()
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    setup_logging()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = UkrainianBot()
    try:
        success = await bot.run()
        if not success:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∑–º—ñ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó Python
        if sys.version_info < (3, 8):
            print("‚ùå –ü–æ—Ç—Ä—ñ–±–µ–Ω Python 3.8 –∞–±–æ –Ω–æ–≤—ñ—à–∏–π")
            sys.exit(1)
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
        asyncio.run(main())
        
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)