#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ö–û–†–ï–ù–ï–í–ò–ô MAIN.PY –î–õ–Ø RAILWAY üöÄ

–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£:
ukrainian-telegram-bot/
‚îú‚îÄ‚îÄ main.py                    # ‚Üê –¶–ï–ô –§–ê–ô–õ (Railway –∑–∞–ø—É—Å–∫–∞—î –π–æ–≥–æ)
‚îú‚îÄ‚îÄ Procfile                   # ‚Üê "web: python main.py"
‚îú‚îÄ‚îÄ requirements.txt           # ‚Üê –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
‚îî‚îÄ‚îÄ app/
    ‚îú‚îÄ‚îÄ main.py               # ‚Üê –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –±–æ—Ç–∞ (–∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –∑–≤—ñ–¥—Å–∏)
    ‚îú‚îÄ‚îÄ config/               # ‚Üê –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    ‚îú‚îÄ‚îÄ database/             # ‚Üê –ú–æ–¥–µ–ª—ñ –ë–î
    ‚îú‚îÄ‚îÄ handlers/             # ‚Üê –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    ‚îî‚îÄ‚îÄ services/             # ‚Üê –°–µ—Ä–≤—ñ—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó

‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Railway
‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—Å–∫—É
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞ stdout/stderr
‚úÖ Heartbeat —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
"""

import os
import sys
import asyncio
import logging
import signal
import traceback
from pathlib import Path
from datetime import datetime

# ===== –ü–†–û–§–ï–°–Ü–ô–ù–ï RAILWAY –õ–û–ì–£–í–ê–ù–ù–Ø =====

def setup_railway_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è Railway"""
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π formatter –¥–ª—è Railway
    formatter = logging.Formatter(
        '%(asctime)s - **%(name)s** - %(levelname)s - %(message)s'
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ handler —â–æ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥–∞—î –ª–æ–≥–∏ –≤ Railway
    handler = logging.StreamHandler(sys.stdout)
    handler.setFormatter(formatter)
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ root logger
    root_logger = logging.getLogger()
    root_logger.handlers.clear()  # –û—á–∏—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ handlers
    root_logger.addHandler(handler)
    root_logger.setLevel(logging.INFO)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ logger –¥–ª—è —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É
    logger = logging.getLogger('railway_launcher')
    
    return logger

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–¥—Ä–∞–∑—É
logger = setup_railway_logging()

# ===== –î–û–î–ê–í–ê–ù–ù–Ø APP/ –î–û PYTHON PATH =====

def setup_python_path():
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è app/ –ø–∞–ø–∫–∏ –¥–æ Python path"""
    current_dir = Path(__file__).parent
    app_dir = current_dir / "app"
    
    if not app_dir.exists():
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ {current_dir}")
        print(f"‚ùå CRITICAL: app/ directory not found in {current_dir}", flush=True)
        return False
    
    # –î–æ–¥–∞—î–º–æ app/ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ sys.path
    sys.path.insert(0, str(app_dir))
    
    logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {app_dir} –¥–æ Python path")
    print(f"‚úÖ Added {app_dir} to Python path", flush=True)
    
    return True

# ===== –ü–ï–†–ï–í–Ü–†–ö–ê –°–ï–†–ï–î–û–í–ò–©–ê =====

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ Railway...")
    print("üîç Checking Railway environment...", flush=True)
    
    critical_vars = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'ADMIN_ID': 'ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    }
    
    missing_vars = []
    
    for var, description in critical_vars.items():
        value = os.getenv(var)
        if value:
            # –ú–∞—Å–∫—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            masked = value[:10] + "..." if len(value) > 10 else value
            logger.info(f"‚úÖ {var}: {masked}")
            print(f"‚úÖ {var}: {masked}", flush=True)
        else:
            logger.error(f"‚ùå {var} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({description})")
            print(f"‚ùå {var} not set ({description})", flush=True)
            missing_vars.append(var)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Railway —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
    railway_vars = ['RAILWAY_ENVIRONMENT', 'DATABASE_URL', 'PORT']
    for var in railway_vars:
        value = os.getenv(var)
        if value:
            # –ú–∞—Å–∫—É—î–º–æ DATABASE_URL –¥–ª—è –±–µ–∑–ø–µ–∫–∏
            if var == 'DATABASE_URL' and len(value) > 20:
                masked = value[:20] + "..."
            else:
                masked = value
            logger.info(f"üì° Railway {var}: {masked}")
            print(f"üì° Railway {var}: {masked}", flush=True)
    
    if missing_vars:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {', '.join(missing_vars)}")
        print(f"‚ùå Missing critical variables: {', '.join(missing_vars)}", flush=True)
        return False
    
    logger.info("‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    print("‚úÖ Environment check passed", flush=True)
    return True

# ===== RAILWAY –°–¢–ê–¢–£–° –†–ï–ü–û–†–¢–ï–† =====

class RailwayStatusReporter:
    """–ö–ª–∞—Å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ Railway –ª–æ–≥–∏"""
    
    def __init__(self):
        self.start_time = datetime.now()
        self.is_running = False
    
    def start_reporting(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É"""
        self.is_running = True
        
        # –°—Ç–∞—Ä—Ç–æ–≤–∏–π —Ä–µ–ø–æ—Ä—Ç
        logger.info("üöÄ RAILWAY STATUS REPORTER STARTED")
        print("üöÄ RAILWAY STATUS REPORTER STARTED", flush=True)
        
        # –ü–µ—Ä—à–∏–π —Å—Ç–∞—Ç—É—Å –æ–¥—Ä–∞–∑—É
        self.report_status()
    
    def report_status(self):
        """–†–µ–ø–æ—Ä—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É"""
        uptime = datetime.now() - self.start_time
        uptime_str = f"{uptime.days}d {uptime.seconds//3600}h {(uptime.seconds//60)%60}m"
        
        logger.info(f"üíì RAILWAY HEARTBEAT - Uptime: {uptime_str} - Status: Active")
        print(f"üíì RAILWAY HEARTBEAT - Uptime: {uptime_str} - Status: Active", flush=True)
    
    def stop_reporting(self):
        """–ó—É–ø–∏–Ω–∫–∞ —Ä–µ–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è"""
        if self.is_running:
            self.is_running = False
            logger.info("üõë RAILWAY STATUS REPORTER STOPPED")
            print("üõë RAILWAY STATUS REPORTER STOPPED", flush=True)

# ===== SIGNAL HANDLERS =====

def setup_signal_handlers(status_reporter):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
    
    def signal_handler(signum, frame):
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        print(f"üõë Received signal {signum}, shutting down...", flush=True)
        
        status_reporter.stop_reporting()
        
        # –î–∞—î–º–æ —á–∞—Å –¥–ª—è graceful shutdown
        logger.info("‚è≥ Graceful shutdown in progress...")
        print("‚è≥ Graceful shutdown in progress...", flush=True)
        
        sys.exit(0)
    
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("‚úÖ Signal handlers –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    print("‚úÖ Signal handlers configured", flush=True)

# ===== –û–°–ù–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£ =====

async def launch_app_main():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥—É –∑ app/main.py"""
    
    logger.info("üîÑ –Ü–º–ø–æ—Ä—Ç —Ç–∞ –∑–∞–ø—É—Å–∫ app/main.py...")
    print("üîÑ Importing and launching app/main.py...", flush=True)
    
    try:
        # –Ü–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        from main import main as app_main
        
        logger.info("‚úÖ app/main.py —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        print("‚úÖ app/main.py imported successfully", flush=True)
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥—É
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞...")
        print("üöÄ Starting main bot function...", flush=True)
        
        await app_main()
        
        logger.info("‚úÖ app/main.py –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        print("‚úÖ app/main.py finished successfully", flush=True)
        
    except ImportError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
        print(f"‚ùå Import error app/main.py: {e}", flush=True)
        logger.error(traceback.format_exc())
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è app/main.py: {e}")
        print(f"‚ùå Execution error app/main.py: {e}", flush=True)
        logger.error(traceback.format_exc())
        raise

# ===== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø =====

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ main.py"""
    
    # –ù–µ–≥–∞–π–Ω–∏–π —Å–∏–≥–Ω–∞–ª Railway —â–æ –º–∏ –ø–æ—á–∞–ª–∏
    print("=" * 80, flush=True)
    print("üß†üòÇüî• UKRAINIAN TELEGRAM BOT - RAILWAY PROFESSIONAL LAUNCHER üß†üòÇüî•", flush=True)
    print("=" * 80, flush=True)
    
    logger.info("üöÄ –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ Railway...")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–µ—Ä
    status_reporter = RailwayStatusReporter()
    
    try:
        # 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è signal handlers
        setup_signal_handlers(status_reporter)
        
        # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if not check_environment():
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            print("‚ùå Critical environment errors", flush=True)
            sys.exit(1)
        
        # 3. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Python path
        if not setup_python_path():
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Python path")
            print("‚ùå Failed to setup Python path", flush=True)
            sys.exit(1)
        
        # 4. –ó–∞–ø—É—Å–∫ —Å—Ç–∞—Ç—É—Å —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
        status_reporter.start_reporting()
        
        # 5. –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥—É
        logger.info("üéØ –í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ, –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥...")
        print("üéØ All checks passed, launching main code...", flush=True)
        
        await launch_app_main()
        
        # –Ø–∫—â–æ –¥—ñ–π—à–ª–∏ —Å—é–¥–∏ - —É—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        logger.info("üéâ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É —É—Å–ø—ñ—à–Ω–æ")
        print("üéâ Bot finished successfully", flush=True)
        
    except KeyboardInterrupt:
        logger.info("üõë –ü–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        print("üõë User interruption", flush=True)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print(f"üí• Critical error: {e}", flush=True)
        logger.error(traceback.format_exc())
        sys.exit(1)
    finally:
        # –ó–∞–≤–∂–¥–∏ –∑—É–ø–∏–Ω—è—î–º–æ —Ä–µ–ø–æ—Ä—Ç–µ—Ä
        status_reporter.stop_reporting()
        
        logger.info("üßπ –ö–æ—Ä–µ–Ω–µ–≤–∏–π –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print("üßπ Root process finished", flush=True)

# ===== ENTRY POINT =====

if __name__ == "__main__":
    # –û–¥—Ä–∞–∑—É —Å–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ Railway —â–æ –º–∏ –∂–∏–≤—ñ
    print("üü¢ RAILWAY BOOT SEQUENCE INITIATED", flush=True)
    print(f"üêç Python version: {sys.version}", flush=True)
    print(f"üìÇ Working directory: {os.getcwd()}", flush=True)
    print(f"‚è∞ Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", flush=True)
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"üí• RAILWAY BOOT FAILED: {e}", flush=True)
        sys.exit(1)