#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ üß†üòÇüî•

–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Railway deployment
–Ü–º–ø–æ—Ä—Ç—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ –∑ –ø–∞–ø–∫–∏ app/
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É app/ –¥–æ Python path
app_dir = Path(__file__).parent / "app"
sys.path.insert(0, str(app_dir))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    
    print("üß†üòÇüî•" * 20)
    print("\nüöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ\n")
    print("üß†üòÇüî•" * 20)
    print()
    
    try:
        # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –∑ app/
        logger.info("üìÇ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤ –∑ app/...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ app/ –ø–∞–ø–∫–∏
        if not app_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            logger.info("üìÅ –ü–æ—Ç–æ—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è:", os.getcwd())
            logger.info("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤:", os.listdir("."))
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ app/
        required_dirs = ["config", "database", "handlers"]
        missing_dirs = []
        
        for dir_name in required_dirs:
            dir_path = app_dir / dir_name
            if not dir_path.exists():
                missing_dirs.append(dir_name)
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ app/{dir_name}/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            else:
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ app/{dir_name}/")
        
        if missing_dirs:
            logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–∞–ø–∫–∏: {missing_dirs}")
            logger.info("üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É fallback –≤–µ—Ä—Å—ñ—ó...")
            return run_fallback_bot()
        
        # –Ü–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/
        try:
            from main import UkrainianTelegramBot
            logger.info("‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ UkrainianTelegramBot –∑ app/main.py")
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∑ app/main.py: {e}")
            return run_fallback_bot()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
        bot = UkrainianTelegramBot()
        asyncio.run(bot.start())
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:")
        return run_fallback_bot()

def run_fallback_bot():
    """Fallback –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—é"""
    
    logger.info("üÜò –ó–∞–ø—É—Å–∫ FALLBACK –±–æ—Ç–∞...")
    
    try:
        # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É bobik_bot.py –∑ –∫–æ—Ä–µ–Ω—è
        if os.path.exists("bobik_bot.py"):
            logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ bobik_bot.py, –∑–∞–ø—É—Å–∫–∞—é...")
            import bobik_bot
            bobik_bot.main()
            return
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î bobik_bot.py, —Å—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç
        logger.info("üîß –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
        return run_minimal_bot()
        
    except Exception as e:
        logger.error(f"‚ùå Fallback –±–æ—Ç —Ç–∞–∫–æ–∂ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–≤—Å—è: {e}")
        logger.info("üì± –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è BOT_TOKEN –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

def run_minimal_bot():
    """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç —Ç—ñ–ª—å–∫–∏ –∑ –±–∞–∑–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
    
    import os
    from aiogram import Bot, Dispatcher
    from aiogram.enums import ParseMode
    from aiogram.filters import Command
    from aiogram.types import Message
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
    bot = Bot(token=bot_token, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    
    @dp.message(Command("start"))
    async def cmd_start(message: Message):
        await message.answer(
            "üß†üòÇüî• <b>–í—ñ—Ç–∞—é!</b>\n\n"
            "–¶–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.\n"
            "–ü–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
            "üîß <i>–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.</i>"
        )
    
    @dp.message(Command("help"))
    async def cmd_help(message: Message):
        await message.answer(
            "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
            "/start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
            "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
            "üöß <i>–Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —É —Ä–æ–∑—Ä–æ–±—Ü—ñ...</i>"
        )
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª—ñ–Ω–≥—É
    logger.info("ü§ñ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ polling...")
    
    async def start_polling():
        try:
            await dp.start_polling(bot)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ polling: {e}")
    
    asyncio.run(start_polling())

if __name__ == "__main__":
    main()