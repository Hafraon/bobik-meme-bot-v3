#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É üß†üòÇüî•
"""

import asyncio
import logging
import signal
import sys
import os
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

# Aiogram imports
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—à—ñ –º–æ–¥—É–ª—ñ
from config.settings import settings, EMOJI
from database.database import init_db
from handlers import register_handlers
from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware
from services.scheduler import SchedulerService

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL, logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/bot.log', encoding='utf-8') if Path('logs').exists() else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.app = None
        
    async def create_bot(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            session = AiohttpSession()
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                session=session,
                parse_mode=ParseMode.HTML
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            logger.info(f"ü§ñ –ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False
    
    async def setup_middleware(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware"""
        try:
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            self.dp.message.middleware(LoggingMiddleware())
            self.dp.callback_query.middleware(LoggingMiddleware())
            
            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            self.dp.message.middleware(AuthMiddleware())
            self.dp.callback_query.middleware(AuthMiddleware())
            
            # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É
            self.dp.message.middleware(AntiSpamMiddleware(rate_limit=3))
            self.dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
            
            logger.info("üõ°Ô∏è Middleware –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware: {e}")
            return False
    
    async def setup_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            register_handlers(self.dp)
            logger.info("üéØ –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
            return False
    
    async def setup_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            await init_db()
            logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return False
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á"""
        try:
            self.scheduler = SchedulerService(self.bot)
            await self.scheduler.start()
            logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return False
    
    async def create_webapp(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –¥–ª—è Railway"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è aiohttp –¥–æ–¥–∞—Ç–∫—É
            self.app = web.Application()
            
            # Health check endpoint
            async def health_check(request):
                return web.json_response({
                    "status": "healthy",
                    "bot": "ukrainian_telegram_bot",
                    "version": "1.0.0"
                })
            
            # Webhook endpoint (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
            async def webhook_handler(request):
                return web.Response(text="Webhook endpoint")
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
            self.app.router.add_get('/health', health_check)
            self.app.router.add_post('/webhook', webhook_handler)
            
            # –°—Ç–∞—Ç–∏—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
            async def index(request):
                return web.Response(
                    text=f"""
                    <html>
                        <head><title>üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç</title></head>
                        <body style="font-family: Arial; text-align: center; padding: 50px;">
                            <h1>üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç</h1>
                            <p>‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î!</p>
                            <p>ü§ñ –í–µ—Ä—Å—ñ—è: 1.0.0</p>
                            <p>üìä <a href="/health">Health Check</a></p>
                        </body>
                    </html>
                    """,
                    content_type='text/html'
                )
            
            self.app.router.add_get('/', index)
            
            logger.info("üåê –í–µ–±-–¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        try:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook —è–∫—â–æ –±—É–≤
            await self.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(
                self.bot,
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ polling: {e}")
            raise
    
    async def start_webapp(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway"""
        try:
            port = int(os.getenv("PORT", 8000))
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
            runner = web.AppRunner(self.app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', port)
            await site.start()
            
            logger.info(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            if self.bot:
                await self.bot.session.close()
                logger.info("ü§ñ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É"""
        logger.info("üß†üòÇüî• –ó–ê–ü–£–°–ö –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û TELEGRAM-–ë–û–¢–ê üß†üòÇüî•")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            if not settings.BOT_TOKEN:
                raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
            if not settings.ADMIN_ID:
                raise ValueError("ADMIN_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
            
            logger.info(f"üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
            logger.info(f"   üì± –ê–¥–º—ñ–Ω ID: {settings.ADMIN_ID}")
            logger.info(f"   üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {settings.DATABASE_URL.split('@')[0]}@***")
            logger.info(f"   üß† OpenAI: {'‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ' if settings.OPENAI_API_KEY else '‚ùå –í—ñ–¥—Å—É—Ç–Ω—î'}")
            
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            steps = [
                ("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞", self.create_bot()),
                ("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î", self.setup_database()),
                ("üõ°Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware", self.setup_middleware()),
                ("üéØ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤", self.setup_handlers()),
                ("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", self.setup_scheduler()),
                ("üåê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É", self.create_webapp()),
                ("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞", self.start_webapp())
            ]
            
            for step_name, step_coro in steps:
                logger.info(f"‚ñ∂Ô∏è {step_name}...")
                result = await step_coro
                if not result:
                    raise Exception(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞ –µ—Ç–∞–ø—ñ: {step_name}")
                logger.info(f"‚úÖ {step_name} - –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"üéâ –ë–æ—Ç @{bot_info.username} –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!</b>\n\n"
                    f"ü§ñ <b>–ë–æ—Ç:</b> @{bot_info.username}\n"
                    f"üíæ <b>–ë–î:</b> ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞\n"
                    f"‚è∞ <b>–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:</b> ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n"
                    f"üß† <b>AI:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if settings.OPENAI_API_KEY else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n\n"
                    f"üìä /admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    f"üõ†Ô∏è /moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
            await self.start_polling()
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            await self.shutdown()

def setup_signal_handlers(bot_instance):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤"""
    def signal_handler(signum, frame):
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}")
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        loop = asyncio.get_event_loop()
        loop.create_task(bot_instance.shutdown())
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
        bot_instance = UkrainianBot()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
        setup_signal_handlers(bot_instance)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await bot_instance.run()
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    Path("logs").mkdir(exist_ok=True)
    Path("data").mkdir(exist_ok=True)
    
    # –ó–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")