#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ üß†üòÇüî•

–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–ª—è Railway deployment
–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ –∑ –ø–∞–ø–∫–∏ app/
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É app/ –¥–æ Python path
app_dir = Path(__file__).parent / "app"
sys.path.insert(0, str(app_dir))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    
    print("üß†üòÇüî•" * 20)
    print("\nüöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ\n")
    print("üß†üòÇüî•" * 20)
    print()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
        logger.info("üìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...")
        
        if not app_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return run_minimal_bot()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫
        required_dirs = ["config", "database", "handlers"]
        for dir_name in required_dirs:
            dir_path = app_dir / dir_name
            if dir_path.exists():
                logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ app/{dir_name}/")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ app/{dir_name}/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        
        # –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/main.py
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/main.py...")
        
        # –Ü–º–ø–æ—Ä—Ç —Ç–∞ –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑ app/main.py
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É main —Ñ—É–Ω–∫—Ü—ñ—ó
            import main as app_main
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ñ—É–Ω–∫—Ü—ñ—è main
            if hasattr(app_main, 'main'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é main() –≤ app/main.py")
                app_main.main()
            elif hasattr(app_main, 'UkrainianTelegramBot'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å UkrainianTelegramBot –≤ app/main.py")
                bot = app_main.UkrainianTelegramBot()
                asyncio.run(bot.main())
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ entry point –≤ app/main.py")
                # –ü–æ—à—É–∫ —ñ–Ω—à–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö entry points
                logger.info("üîç –ü–æ—à—É–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö entry points...")
                
                # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —ñ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±—É–¥—å-—è–∫—É async —Ñ—É–Ω–∫—Ü—ñ—é
                for attr_name in dir(app_main):
                    attr = getattr(app_main, attr_name)
                    if asyncio.iscoroutinefunction(attr) and not attr_name.startswith('_'):
                        logger.info(f"üéØ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É {attr_name}()")
                        asyncio.run(attr())
                        return
                
                # Fallback –¥–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞
                logger.warning("‚ö†Ô∏è Entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞")
                return run_minimal_bot()
                
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
            return run_minimal_bot()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É app/main.py: {e}")
            return run_minimal_bot()
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return run_minimal_bot()

def run_minimal_bot():
    """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç —É –≤–∏–ø–∞–¥–∫—É –ø—Ä–æ–±–ª–µ–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º"""
    
    logger.info("üÜò –ó–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        from aiogram.filters import Command
        from aiogram.types import Message
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
            return
        
        admin_id = os.getenv("ADMIN_ID")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º API
        bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
        )
        dp = Dispatcher()
        
        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer(
                "üß†üòÇüî• <b>–í—ñ—Ç–∞—é!</b>\n\n"
                "–¶–µ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞.\n"
                "–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                "üîß <i>–ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.</i>\n\n"
                f"üë§ <b>–í–∞—à ID:</b> <code>{message.from_user.id}</code>"
            )
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è fallback
            if admin_id:
                try:
                    await bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è <b>FALLBACK –ë–û–¢ –ê–ö–¢–ò–í–ù–ò–ô</b>\n\n"
                        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.full_name} "
                        f"(ID: {message.from_user.id}) –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start\n\n"
                        f"–û—Å–Ω–æ–≤–Ω–∏–π –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é."
                    )
                except:
                    pass
        
        @dp.message(Command("help"))
        async def cmd_help(message: Message):
            await message.answer(
                "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n\n"
                "/start - –ø–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏\n"
                "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "üöß <i>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —É —Ä–æ–∑—Ä–æ–±—Ü—ñ...</i>"
            )
        
        @dp.message(Command("status"))
        async def cmd_status(message: Message):
            await message.answer(
                "üîß <b>–°—Ç–∞—Ç—É—Å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n\n"
                "‚úÖ –ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∞—Ü—é—é—Ç—å\n"
                "‚ùå –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                "‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
                "‚ùå –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                "üîÑ <i>–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</i>"
            )
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("ü§ñ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
        
        async def start_minimal_polling():
            try:
                # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
                bot_info = await bot.get_me()
                logger.info(f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{bot_info.username}")
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
                if admin_id:
                    try:
                        await bot.send_message(
                            admin_id,
                            "üÜò <b>–ú–Ü–ù–Ü–ú–ê–õ–¨–ù–ò–ô –ë–û–¢ –ó–ê–ü–£–©–ï–ù–û</b>\n\n"
                            "–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                            "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é app/main.py\n\n"
                            "üîß –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /help, /status"
                        )
                    except:
                        pass
                
                # Polling
                await dp.start_polling(bot)
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
        
        asyncio.run(start_minimal_polling())
        
    except ImportError as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - aiogram –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()