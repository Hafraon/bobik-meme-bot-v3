#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç –∑ –º–µ–º–∞–º–∏ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ üß†üòÇüî•
–ê–≤—Ç–æ—Ä: BobikFun Team
–í–µ—Ä—Å—ñ—è: 1.0.0
"""

import asyncio
import logging
import sys
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config.settings import settings
from database.database import init_db
from handlers import register_handlers
from middlewares.auth import AuthMiddleware
from services.scheduler import SchedulerService

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
        bot = Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è middleware
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        await init_db()
        logger.info("üî• –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        register_handlers(dp)
        logger.info("üòÇ –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        scheduler = SchedulerService(bot)
        await scheduler.start()
        logger.info("üß† –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞
        bot_info = await bot.get_me()
        logger.info(f"üî• –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ: @{bot_info.username}")
        
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await bot.send_message(
                settings.ADMIN_ID,
                "üß†üòÇüî• <b>–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                f"ü§ñ <b>–Ü–º'—è:</b> {bot_info.first_name}\n"
                f"üìõ <b>Username:</b> @{bot_info.username}\n"
                f"‚è∞ <b>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üòÇ –ü–æ—á–∞—Ç–æ–∫ polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"üî• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üß† –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üòÇ –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)