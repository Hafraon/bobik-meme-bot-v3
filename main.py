#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ üß†üòÇüî•

–ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ Proper async/await –∑–∞–ø—É—Å–∫ app/main.py  
‚úÖ UTF-8 Safe –∫–æ–¥—É–≤–∞–Ω–Ω—è
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚úÖ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ Railway deployment
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É app/ –¥–æ Python path
current_dir = Path(__file__).parent
app_dir = current_dir / "app"
if app_dir.exists():
    sys.path.insert(0, str(app_dir))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    required_vars = ['BOT_TOKEN', 'ADMIN_ID']
    missing_vars = []
    
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
    
    if missing_vars:
        logger.error(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞: {', '.join(missing_vars)}")
        return False
    
    logger.info("‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ")
    return True

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/main.py"""
    try:
        logger.info("üîç –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è app/main.py...")
        
        # –Ü–º–ø–æ—Ä—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –∑ app/main.py
        from main import main as app_main
        
        logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é main() –≤ app/main.py")
        
        # –ü–†–ê–í–ò–õ–¨–ù–ò–ô async/await –≤–∏–∫–ª–∏–∫
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
        await app_main()
        
    except ImportError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
        raise
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

async def fallback_mode():
    """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö"""
    logger.warning("‚ö†Ô∏è –ó–∞–ø—É—Å–∫ —É fallback —Ä–µ–∂–∏–º—ñ...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        from aiogram.filters import Command
        from aiogram.types import Message
        
        bot = Bot(
            token=os.getenv('BOT_TOKEN'),
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        dp = Dispatcher()
        
        @dp.message(Command("start"))
        async def start_handler(message: Message):
            await message.answer(
                "ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.\n"
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
            )
        
        logger.info("‚úÖ Fallback –±–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"‚ùå –ù–∞–≤—ñ—Ç—å fallback —Ä–µ–∂–∏–º –Ω–µ –ø—Ä–∞—Ü—é—î: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –ü–†–ê–í–ò–õ–¨–ù–ò–ô async/await"""
    print("üß†üòÇüî•" * 20)
    print("\nüöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ü–†–û–§–ï–°–Ü–ô–ù–ò–ú–ò –§–£–ù–ö–¶–Ü–Ø–ú–ò üöÄ")
    print("üîß –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø - CRITICAL FIXES APPLIED")
    print("üß†üòÇüî•" * 20)
    print()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        if not check_environment():
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
        if not app_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            logger.info("üìÅ –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
            for item in current_dir.iterdir():
                logger.info(f"  - {item.name}")
            return
        
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        await start_bot()
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.info("üîÑ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —É fallback —Ä–µ–∂–∏–º—ñ...")
        
        try:
            await fallback_mode()
        except Exception as fallback_error:
            logger.error(f"‚ùå Fallback —Ç–∞–∫–æ–∂ –Ω–µ –ø—Ä–∞—Ü—é—î: {fallback_error}")

if __name__ == "__main__":
    # –ü–†–ê–í–ò–õ–¨–ù–ò–ô –∑–∞–ø—É—Å–∫ async —Ñ—É–Ω–∫—Ü—ñ—ó
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)