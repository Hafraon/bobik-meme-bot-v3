#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç - –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É üß†üòÇüî•
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from datetime import datetime

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.insert(0, str(Path(__file__).parent))

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
from config.settings import settings, EMOJI

# –Ü–º–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
from handlers import register_handlers

# –Ü–º–ø–æ—Ä—Ç middleware
from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware

# –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
from services.scheduler import SchedulerService

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('logs/bot.log', encoding='utf-8') if Path('logs').exists() else logging.NullHandler()
    ]
)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–ö–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        
    async def create_bot(self) -> Bot:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞"""
        return Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML
            )
        )
    
    async def create_dispatcher(self) -> Dispatcher:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑ middleware —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏"""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑ –ø–∞–º'—è—Ç—Ç—é
        dp = Dispatcher(storage=MemoryStorage())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è middleware
        dp.message.middleware(AuthMiddleware())
        dp.callback_query.middleware(AuthMiddleware())
        dp.message.middleware(AntiSpamMiddleware(rate_limit=3))
        dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
        dp.message.middleware(LoggingMiddleware())
        dp.callback_query.middleware(LoggingMiddleware())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        register_handlers(dp)
        
        return dp
    
    async def on_startup(self):
        """–§—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        try:
            logger.info(f"{EMOJI['rocket']} –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            try:
                from database.database import init_db
                await init_db()
                logger.info(f"{EMOJI['check']} –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            except Exception as e:
                logger.error(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ë–î –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
            me = await self.bot.get_me()
            logger.info(f"{EMOJI['brain']} –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ: @{me.username} ({me.full_name})")
            
            # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            try:
                self.scheduler = SchedulerService(self.bot)
                await self.scheduler.start()
                logger.info(f"{EMOJI['calendar']} –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"{EMOJI['warning']} –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ: {e}")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['fire']} <b>–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"{EMOJI['brain']} <b>–Ü–º'—è:</b> @{me.username}\n"
                    f"{EMOJI['rocket']} <b>–†–µ–∂–∏–º:</b> Production\n"
                    f"{EMOJI['calendar']} <b>–ß–∞—Å:</b> {asyncio.get_event_loop().time()}"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
                
        except Exception as e:
            logger.error(f"{EMOJI['cross']} –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            raise
    
    async def on_shutdown(self):
        """–§—É–Ω–∫—Ü—ñ—è –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞"""
        try:
            logger.info(f"{EMOJI['thinking']} –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞...")
            
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                await self.scheduler.stop()
                logger.info(f"{EMOJI['check']} –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['cross']} <b>–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ</b>\n\n"
                    f"{EMOJI['thinking']} –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!"
                )
            except Exception:
                pass
                
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            await self.bot.session.close()
            logger.info(f"{EMOJI['check']} –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞: {e}")
    
    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.bot = await self.create_bot()
            self.dp = await self.create_dispatcher()
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è startup/shutdown —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            self.dp.startup.register(self.on_startup)
            self.dp.shutdown.register(self.on_shutdown)
            
            # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway
            try:
                from web_server import BotWebServer
                web_server = BotWebServer(self.bot)
                web_runner = await web_server.start_server()
            except ImportError:
                # –Ø–∫—â–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π
                web_runner = await self._create_simple_web_server()
            except Exception as e:
                logger.warning(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ: {e}")
                web_runner = None
            
            logger.info(f"{EMOJI['fire']} –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∑ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            tasks = [
                asyncio.create_task(self.dp.start_polling(
                    self.bot,
                    skip_updates=True,
                    allowed_updates=['message', 'callback_query']
                )),
                asyncio.create_task(self._keep_web_server_alive())
            ]
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó –∑–∞–¥–∞—á—ñ
            done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)
            
            # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –∑–∞–¥–∞—á
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
            # –û—á–∏—â–µ–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
            if web_runner:
                await web_runner.cleanup()
            
        except KeyboardInterrupt:
            logger.info(f"{EMOJI['hand']} –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        except Exception as e:
            logger.error(f"{EMOJI['cross']} –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            if self.bot:
                await self.bot.session.close()
    
    async def _create_simple_web_server(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            from aiohttp import web
            
            async def health_check(request):
                return web.json_response({
                    "status": "healthy",
                    "bot": "running", 
                    "timestamp": datetime.now().isoformat()
                })
            
            app = web.Application()
            app.router.add_get('/health', health_check)
            app.router.add_get('/', lambda req: web.Response(text="üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –ø—Ä–∞—Ü—é—î!"))
            
            runner = web.AppRunner(app)
            await runner.setup()
            
            site = web.TCPSite(runner, '0.0.0.0', settings.PORT)
            await site.start()
            
            logger.info(f"{EMOJI['rocket']} –ü—Ä–æ—Å—Ç–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {settings.PORT}")
            return runner
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    async def _keep_web_server_alive(self):
        """–ü—ñ–¥—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∏–º"""
        try:
            while True:
                await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        except asyncio.CancelledError:
            logger.info(f"{EMOJI['thinking']} –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    try:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        if not settings.BOT_TOKEN:
            logger.error(f"{EMOJI['cross']} BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
            sys.exit(1)
        
        if not settings.ADMIN_ID:
            logger.error(f"{EMOJI['cross']} ADMIN_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
            sys.exit(1)
        
        logger.info(f"{EMOJI['star']} –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
        bot = UkrainianBot()
        await bot.run()
        
    except Exception as e:
        logger.error(f"{EMOJI['cross']} –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –î–ª—è Windows —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫
    asyncio.run(main())