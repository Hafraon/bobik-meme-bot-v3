#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é üß†üòÇüî•
–ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –º–µ–º–∞–º–∏, –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏, –±–∞–ª–∞–º–∏, —Ä–∞–Ω–≥–∞–º–∏, –¥—É–µ–ª—è–º–∏ —Ç–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from config.settings import settings, EMOJI, validate_settings
from database.database import init_db
from handlers import register_handlers
from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class UkrainianBot:
    """–û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
    
    async def create_bot(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏"""
        self.bot = Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(
                parse_mode=ParseMode.HTML,
                link_preview_is_disabled=True
            )
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram API
        try:
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π: @{bot_info.username} ({bot_info.first_name})")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram API: {e}")
            return False
    
    async def setup_dispatcher(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑ middleware"""
        self.dp = Dispatcher()
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è middleware (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–ª–∏–≤–∏–π!)
        self.dp.message.middleware(LoggingMiddleware())  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–∏–º
        self.dp.callback_query.middleware(LoggingMiddleware())
        
        self.dp.message.middleware(AntiSpamMiddleware(rate_limit=3))  # –ê–Ω—Ç–∏-—Å–ø–∞–º
        self.dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
        
        self.dp.message.middleware(AuthMiddleware())  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ—Å—Ç–∞–Ω–Ω—å–æ—é
        self.dp.callback_query.middleware(AuthMiddleware())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        register_handlers(self.dp)
        
        logger.info("üîß –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        try:
            from services.scheduler import SchedulerService
            self.scheduler = SchedulerService(self.bot)
            await self.scheduler.start()
            logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        except ImportError:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    
    async def setup_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            await init_db()
            logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return False
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º—ñ polling...")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['rocket']} <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û!</b>\n\n"
                    f"{EMOJI['check']} –í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å\n"
                    f"{EMOJI['brain']} –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞\n"
                    f"{EMOJI['fire']} –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞\n"
                    f"{EMOJI['vs']} –î—É–µ–ª—ñ –≥–æ—Ç–æ–≤—ñ\n\n"
                    f"{EMOJI['calendar']} –ß–∞—Å –∑–∞–ø—É—Å–∫—É: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(
                self.bot,
                skip_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                allowed_updates=["message", "callback_query", "inline_query"]
            )
            
        except KeyboardInterrupt:
            logger.info("üëã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if self.bot:
                try:
                    await self.bot.send_message(
                        settings.ADMIN_ID,
                        f"{EMOJI['cross']} <b>–ë–û–¢ –ó–£–ü–ò–ù–ï–ù–û</b>\n\n"
                        f"{EMOJI['time']} –ß–∞—Å –∑—É–ø–∏–Ω–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
                    )
                except:
                    pass
                
                # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
                await self.bot.session.close()
                logger.info("ü§ñ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")
    
    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        logger.info(f"{EMOJI['rocket']} –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        if not validate_settings():
            logger.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
            sys.exit(1)
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        steps = [
            ("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞", self.create_bot),
            ("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î", self.setup_database),
            ("üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞", self.setup_dispatcher),
            ("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", self.setup_scheduler),
        ]
        
        for step_name, step_func in steps:
            logger.info(f"‚ñ∂Ô∏è {step_name}...")
            try:
                result = await step_func()
                if result is False:  # –î–ª—è —Ñ—É–Ω–∫—Ü—ñ–π —â–æ –ø–æ–≤–µ—Ä—Ç–∞—é—Ç—å bool
                    logger.error(f"‚ùå –ù–µ–≤–¥–∞–ª–∏–π –∫—Ä–æ–∫: {step_name}")
                    sys.exit(1)
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∫—Ä–æ—Ü—ñ '{step_name}': {e}")
                sys.exit(1)
        
        logger.info(f"{EMOJI['party']} –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        await self.start_polling()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π –¥–ª—è –ª–æ–≥—ñ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –í—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    print("üß†üòÇüî•" * 20)
    print("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
    print("üß†üòÇüî•" * 20)
    print()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
    if not settings.BOT_TOKEN:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
        print("üìù –î–æ–¥–∞–π—Ç–µ BOT_TOKEN –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        sys.exit(1)
    
    if not settings.ADMIN_ID:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ!")
        print("üìù –î–æ–¥–∞–π—Ç–µ ADMIN_ID –¥–æ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    bot = UkrainianBot()
    try:
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)