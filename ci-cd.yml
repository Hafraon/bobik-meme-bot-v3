# 🧠😂🔥 GitHub Actions CI/CD для україномовного бота 🧠😂🔥

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===== ТЕСТУВАННЯ ТА ЯКІСТЬ КОДУ =====
  test:
    name: 🧪 Тестування та лінтинг
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📚 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy
    
    - name: 🧹 Code formatting check (Black)
      run: |
        black --check --diff .
    
    - name: 🔍 Linting (Flake8)
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🔒 Type checking (MyPy)
      run: |
        mypy --ignore-missing-imports .
      continue-on-error: true
    
    - name: 🧪 Run tests
      env:
        BOT_TOKEN: "123456789:test-token-for-ci"
        ADMIN_ID: "123456789"
        DATABASE_URL: "postgresql://testuser:testpass@localhost:5432/testdb"
        REDIS_URL: "redis://localhost:6379/0"
      run: |
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: 📈 Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  # ===== SECURITY SCAN =====
  security:
    name: 🔒 Безпека
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📚 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
    
    - name: 🛡️ Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: 🔍 Security linting (Bandit)
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
    
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # ===== DOCKER BUILD =====
  docker:
    name: 🐳 Docker build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 📊 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/ukrainian-telegram-bot
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🔨 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DEPLOYMENT =====
  deploy:
    name: 🚀 Deployment
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚂 Deploy to Railway
      if: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: 🟣 Deploy to Heroku
      if: ${{ secrets.HEROKU_API_KEY }}
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
    
    - name: 🔔 Notify deployment success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🎉 Успішний деплой україномовного бота!
          Коміт: ${{ github.sha }}
          Автор: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ===== RELEASE =====
  release:
    name: 🏷️ Create Release
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📚 Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: 📊 Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: 🏷️ Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          🧠😂🔥 Україномовний Telegram-бот версія ${{ github.ref_name }}
          
          ## Зміни в цій версії:
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Встановлення:
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd ukrainian-telegram-bot
          git checkout ${{ github.ref_name }}
          python setup.py
          ```
          
          ## Docker:
          ```bash
          docker pull ${{ secrets.DOCKER_USERNAME }}/ukrainian-telegram-bot:${{ github.ref_name }}
          ```
        draft: false
        prerelease: false

  # ===== PERFORMANCE TESTS =====
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📚 Install dependencies
      run: |
        pip install -r requirements.txt
        pip install locust
    
    - name: ⚡ Run performance tests
      run: |
        # Додайте тут команди для performance тестів
        echo "Performance tests placeholder"
    
    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance/

  # ===== NOTIFICATIONS =====
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()
    
    steps:
    - name: 📧 Send email notification
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: 🚨 CI/CD Failed - Ukrainian Telegram Bot
        body: |
          Помилка в CI/CD пайплайні для україномовного Telegram-бота.
          
          Репозиторій: ${{ github.repository }}
          Коміт: ${{ github.sha }}
          Автор: ${{ github.actor }}
          
          Перевірте деталі: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions