#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üÜò –°–ö–†–ò–ü–¢ –ï–ö–°–¢–†–ï–ù–û–ì–û –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏:
‚úÖ –í–∏–¥–∞–ª—è—î –Ω–µ—ñ—Å–Ω—É—é—á–∏–π sqlalchemy-pool –∑ requirements.txt
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î async/await –≤ main.py
‚úÖ –°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Procfile
‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î UTF-8 –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime

def print_header():
    print("üÜò" * 25)
    print("\nüö® –ï–ö–°–¢–†–ï–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ö–†–ò–¢–ò–ß–ù–ò–• –ü–û–ú–ò–õ–û–ö")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è Railway deployment –ø–æ–º–∏–ª–æ–∫")
    print("üÜò" * 25)
    print()

def backup_files():
    """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó —Ñ–∞–π–ª—ñ–≤"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = Path(f"backup_{timestamp}")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = ['main.py', 'requirements.txt', 'Procfile']
    
    for file_path in files_to_backup:
        if Path(file_path).exists():
            shutil.copy2(file_path, backup_dir / file_path)
            print(f"‚úÖ {file_path} ‚Üí {backup_dir}/{file_path}")
        else:
            print(f"‚ö†Ô∏è {file_path} –Ω–µ —ñ—Å–Ω—É—î")
    
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {backup_dir}")

def fix_requirements():
    """–í–∏–ø—Ä–∞–≤–ª—è—î requirements.txt"""
    print("\nüì¶ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø REQUIREMENTS.TXT:")
    
    # –ß–∏—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ñ–∞–π–ª
    requirements_path = Path("requirements.txt")
    if not requirements_path.exists():
        print("‚ùå requirements.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return False
    
    with open(requirements_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π —Ä—è–¥–æ–∫
    if 'sqlalchemy-pool' in content:
        print("üîç –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω–∏–π sqlalchemy-pool")
        lines = content.split('\n')
        fixed_lines = []
        
        for line in lines:
            if 'sqlalchemy-pool' in line:
                print(f"üóëÔ∏è –í–∏–¥–∞–ª—è—î–º–æ: {line.strip()}")
                fixed_lines.append(f"# ‚ùå –í–ò–î–ê–õ–ï–ù–û: {line.strip()} - –ø–∞–∫–µ—Ç –Ω–µ —ñ—Å–Ω—É—î!")
            else:
                fixed_lines.append(line)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(requirements_path, 'w', encoding='utf-8') as f:
            f.write('\n'.join(fixed_lines))
        
        print("‚úÖ requirements.txt –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        return True
    else:
        print("‚úÖ sqlalchemy-pool –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –≤—Å–µ –≥–∞—Ä–∞–∑–¥")
        return True

def fix_main_py():
    """–í–∏–ø—Ä–∞–≤–ª—è—î main.py –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º async/await"""
    print("\nüöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø MAIN.PY:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–ü–£–°–ö üß†üòÇüî•
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ app/ –¥–æ Python path
app_dir = Path(__file__).parent / "app"
if app_dir.exists():
    sys.path.insert(0, str(app_dir))

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

async def main():
    """–í–ò–ü–†–ê–í–õ–ï–ù–ê async —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    print("üß†üòÇüî• Starting Ukrainian Telegram Bot...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö
        if not os.getenv('BOT_TOKEN'):
            logger.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return
        
        # –Ü–º–ø–æ—Ä—Ç app/main.py
        logger.info("üìÇ Importing app/main.py...")
        from main import main as app_main
        
        logger.info("‚úÖ Found main() function in app/main.py")
        
        # –ü–†–ê–í–ò–õ–¨–ù–ò–ô async –≤–∏–∫–ª–∏–∫
        await app_main()
        
    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        
        # Fallback –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            from aiogram.filters import Command
            from aiogram.types import Message
            
            bot = Bot(
                token=os.getenv('BOT_TOKEN'),
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            dp = Dispatcher()
            
            @dp.message(Command("start"))
            async def start_cmd(message: Message):
                await message.answer("ü§ñ Bot is working in basic mode!")
            
            logger.info("‚úÖ Fallback bot started")
            await dp.start_polling(bot)
            
        except Exception as fallback_error:
            logger.error(f"‚ùå Fallback error: {fallback_error}")

if __name__ == "__main__":
    asyncio.run(main())'''
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π main.py
    with open("main.py", 'w', encoding='utf-8') as f:
        f.write(main_content)
    
    print("‚úÖ main.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º async/await")

def create_procfile():
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Procfile"""
    print("\nüö¢ –°–¢–í–û–†–ï–ù–ù–Ø PROCFILE:")
    
    procfile_content = "web: python main.py"
    
    with open("Procfile", 'w', encoding='utf-8') as f:
        f.write(procfile_content)
    
    print("‚úÖ Procfile —Å—Ç–≤–æ—Ä–µ–Ω–æ")

def check_utf8_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤"""
    print("\nüî§ –ü–ï–†–ï–í–Ü–†–ö–ê UTF-8 –ö–û–î–£–í–ê–ù–ù–Ø:")
    
    critical_files = [
        "main.py", "requirements.txt", "Procfile", 
        "app/main.py", "app/config/settings.py"
    ]
    
    for file_path in critical_files:
        path = Path(file_path)
        if path.exists():
            try:
                with open(path, 'r', encoding='utf-8') as f:
                    f.read()
                print(f"‚úÖ {file_path} - UTF-8 OK")
            except UnicodeDecodeError:
                print(f"‚ùå {file_path} - UTF-8 –ü–†–û–ë–õ–ï–ú–ò!")
                try:
                    # –°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
                    with open(path, 'r', encoding='cp1251') as f:
                        content = f.read()
                    with open(path, 'w', encoding='utf-8') as f:
                        f.write(content)
                    print(f"üîß {file_path} - –ø–µ—Ä–µ–∫–æ–¥–æ–≤–∞–Ω–æ –≤ UTF-8")
                except Exception as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ {file_path}: {e}")
        else:
            print(f"‚ö†Ô∏è {file_path} - –Ω–µ —ñ—Å–Ω—É—î")

def verify_fixes():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ"""
    print("\n‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
    
    issues = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ requirements.txt
    try:
        with open("requirements.txt", 'r', encoding='utf-8') as f:
            content = f.read()
        if 'sqlalchemy-pool' in content and not content.count('‚ùå –í–ò–î–ê–õ–ï–ù–û:'):
            issues.append("sqlalchemy-pool –¥–æ—Å—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π")
        else:
            print("‚úÖ requirements.txt –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        issues.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è requirements.txt: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ main.py
    try:
        with open("main.py", 'r', encoding='utf-8') as f:
            content = f.read()
        if 'asyncio.run(main())' in content:
            print("‚úÖ main.py –º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π async –∑–∞–ø—É—Å–∫")
        else:
            issues.append("main.py –Ω–µ –º–∞—î asyncio.run()")
    except Exception as e:
        issues.append(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è main.py: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Procfile
    if Path("Procfile").exists():
        print("‚úÖ Procfile —ñ—Å–Ω—É—î")
    else:
        issues.append("Procfile –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
    
    return issues

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –µ–∫—Å—Ç—Ä–µ–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    try:
        # –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
        backup_files()
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è
        fix_requirements()
        fix_main_py()
        create_procfile()
        check_utf8_files()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
        issues = verify_fixes()
        
        print("\nüéØ –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
        print("=" * 50)
        
        if not issues:
            print("üéâ –í–°–Ü –ö–†–ò–¢–ò–ß–ù–Ü –ü–û–ú–ò–õ–ö–ò –í–ò–ü–†–ê–í–õ–ï–ù–û!")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ deploy –Ω–∞ Railway")
            print("\nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print("1. git add .")
            print("2. git commit -m 'üÜò Critical fixes: removed sqlalchemy-pool, fixed async/await'")
            print("3. git push")
            print("4. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å")
        else:
            print("‚ö†Ô∏è –ó–ê–õ–ò–®–ò–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–ò:")
            for issue in issues:
                print(f"- {issue}")
    
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
        return False
    
    return len(issues) == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)