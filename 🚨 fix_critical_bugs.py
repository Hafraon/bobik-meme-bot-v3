#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ö–†–ò–¢–ò–ß–ù–ò–• –ë–ê–ì–Ü–í

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ –≤–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏:
‚úÖ –î–æ–¥–∞—î typing —ñ–º–ø–æ—Ä—Ç–∏ –≤ main.py
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î aiohttp session cleanup  
‚úÖ –ü–æ–∫—Ä–∞—â—É—î database/__init__.py –∑ fallback —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
‚úÖ –£—Å—É–≤–∞—î –ø–æ–º–∏–ª–∫—É "name 'List' is not defined"
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime

def print_header():
    print("üö®" * 25)
    print("\nüõ†Ô∏è –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ö–†–ò–¢–ò–ß–ù–ò–• –ë–ê–ì–Ü–í")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É—Å—É–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑ Railway –ª–æ–≥—ñ–≤")
    print("üö®" * 25)
    print()

def backup_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = Path(f"backup_bugfix_{timestamp}")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = [
        "app/main.py",
        "app/database/__init__.py"
    ]
    
    for file_path in files_to_backup:
        path = Path(file_path)
        if path.exists():
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ backup
            backup_file = backup_dir / file_path
            backup_file.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(path, backup_file)
            print(f"‚úÖ {file_path} ‚Üí {backup_file}")
        else:
            print(f"‚ö†Ô∏è {file_path} –Ω–µ —ñ—Å–Ω—É—î")
    
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó: {backup_dir}")

def fix_main_py():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è app/main.py –∑ typing —ñ–º–ø–æ—Ä—Ç–∞–º–∏ —Ç–∞ aiohttp cleanup"""
    print("\nüîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/MAIN.PY:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ü–û–í–ù–û–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ ü§ñ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–ê–ì–Ü–í:
‚úÖ –î–æ–¥–∞–Ω–æ typing —ñ–º–ø–æ—Ä—Ç–∏ (List, Dict, Any)
‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ aiohttp session cleanup
‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ë–î
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional, List, Dict, Any  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –¥–æ–¥–∞–Ω–æ List
import signal

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.handlers_status = {}
        self.shutdown_event = asyncio.Event()
        
        # –°–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.scheduler = None
        self.broadcast_system = None
        self.automation_active = False
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from config.settings import settings
            admin_ids = [settings.ADMIN_ID]
            if hasattr(settings, 'ADDITIONAL_ADMINS'):
                admin_ids.extend(settings.ADDITIONAL_ADMINS)
            return user_id in admin_ids
        except ImportError:
            admin_id = int(os.getenv('ADMIN_ID', 0))
            return user_id == admin_id

    async def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        logger.info("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        try:
            from config.settings import settings
            logger.info("‚úÖ Settings loaded from config.settings")
            return settings
        except ImportError:
            logger.warning("‚ö†Ô∏è Using fallback settings from environment")
            import types
            fallback_settings = types.SimpleNamespace()
            fallback_settings.BOT_TOKEN = os.getenv('BOT_TOKEN')
            fallback_settings.ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
            fallback_settings.DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///bot.db')
            fallback_settings.DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
            return fallback_settings

    async def initialize_bot(self, settings):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        logger.info("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞...")
        
        if not settings.BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return False
        
        try:
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            
            self.dp = Dispatcher()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot creation failed: {e}")
            return False

    async def initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
        
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É database –º–æ–¥—É–ª—è –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º
            import database
            logger.info("‚úÖ Database module imported successfully")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –º–æ–¥—É–ª—è
            if hasattr(database, 'FUNCTIONS_LOADED'):
                logger.info(f"üìã Database functions loaded: {database.FUNCTIONS_LOADED}")
            if hasattr(database, 'MODELS_LOADED'):
                logger.info(f"üìã Database models loaded: {database.MODELS_LOADED}")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            if hasattr(database, 'init_db'):
                db_result = await database.init_db()
                if db_result:
                    logger.info("‚úÖ Database initialized successfully")
                    self.db_available = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Database initialization returned False - using fallback")
                    self.db_available = False
                    return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ fallback
            else:
                logger.warning("‚ö†Ô∏è init_db function not found - using fallback")
                self.db_available = False
                return True
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Database module not available: {e}")
            logger.warning("‚ö†Ô∏è Working without full database support")
            self.db_available = False
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ë–î
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}")
            self.db_available = False
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ fallback

    async def initialize_automation(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        
        try:
            from services.automated_scheduler import AutomatedScheduler
            from services.broadcast_system import BroadcastSystem
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            self.scheduler = AutomatedScheduler(self.bot, self.db_available)
            logger.info("‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
            self.broadcast_system = BroadcastSystem(self.bot, self.db_available)
            logger.info("‚úÖ Broadcast system —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            if await self.scheduler.start():
                self.automation_active = True
                logger.info("ü§ñ –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!")
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Automation services not available: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Automation initialization error: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ handlers/__init__.py
            from handlers import register_handlers
            register_handlers(self.dp)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
            await self.register_automation_handlers()
            
            logger.info("‚úÖ All handlers registered with automation support")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers registration failed: {e}")
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –±–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —è–∫ fallback
            await self.register_fallback_handlers()
            return True

    async def register_fallback_handlers(self):
        """Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω—ñ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å"""
        logger.warning("‚ö†Ô∏è Registering fallback handlers")
        
        @self.dp.message(Command("start"))
        async def fallback_start(message: Message):
            text = (
                f"ü§ñ <b>–ë–æ—Ç –ø—Ä–∞—Ü—é—î!</b>\\n\\n"
                f"‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback —Ä–µ–∂–∏–º'}\\n\\n"
                f"üîß –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞—Ü—é—î –≤ –æ–±–º–µ–∂–µ–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.\\n"
                f"–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –ø–æ—Å—Ç—É–ø–æ–≤–æ."
            )
            await message.answer(text)

    async def register_automation_handlers(self):
        """–•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        from aiogram import F
        from aiogram.filters import Command
        from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
        
        @self.dp.message(Command("start"))
        async def automated_start(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            user_id = message.from_user.id
            first_name = message.from_user.first_name or "–î—Ä—É–∂–µ"
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.db_available:
                try:
                    from database import get_or_create_user
                    await get_or_create_user(
                        telegram_id=user_id,
                        username=message.from_user.username,
                        first_name=first_name
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è User registration failed: {e}")
            
            # –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                    InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="moderation")
                ],
                [
                    InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="users"),
                    InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content")
                ],
                [
                    InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="trending"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
                ],
                [
                    InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="bulk_actions"),
                    InlineKeyboardButton(text="üì¶ –ë–µ–∫–∞–ø", callback_data="backup")
                ]
            ])
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω–∞
            if self.is_admin(user_id):
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è", callback_data="automation"),
                    InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∏", callback_data="broadcasts")
                ])
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é", callback_data="disable_admin_menu")
                ])
            
            scheduler_jobs = len(self.scheduler.get_jobs()) if self.scheduler else 0
            
            text = (
                f"ü§ñ <b>–í—ñ—Ç–∞—é, {first_name}!</b>\\n\\n"
                f"üß†üòÇüî• <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê</b>\\n\\n"
                f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ\\n"
                f"üìù –ó–∞–≤–¥–∞–Ω—å —É —á–µ—Ä–∑—ñ: {scheduler_jobs}\\n\\n"
                f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\\n"
                f"‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É\\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π\\n"
                f"‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\\n"
                f"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è\\n"
                f"‚Ä¢ –¢–∏–∂–Ω–µ–≤—ñ —Ç–∞ –º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏\\n\\n"
                f"üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
            )
            
            await message.answer(text, reply_markup=keyboard)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            if self.is_admin(user_id) and self.automation_active:
                admin_text = (
                    f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ!</b>\\n\\n"
                    f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:</b>\\n"
                    f"üìÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\\n"
                    f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback —Ä–µ–∂–∏–º'}\\n\\n"
                    f"üîß <b>–°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:</b>\\n"
                    f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ typing —ñ–º–ø–æ—Ä—Ç–∏\\n"
                    f"‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ aiohttp cleanup\\n"
                    f"‚úÖ –î–æ–¥–∞–Ω–æ database fallback —Ñ—É–Ω–∫—Ü—ñ—ó\\n"
                    f"‚úÖ –£—Å—É–Ω–µ–Ω–æ –ø–æ–º–∏–ª–∫—É 'List is not defined'"
                )
                await message.answer(admin_text)

        # Callback –æ–±—Ä–æ–±–Ω–∏–∫
        @self.dp.callback_query(F.data.startswith(("stats", "moderation", "users", "content", "trending", "settings", "bulk_actions", "backup", "automation", "broadcasts", "disable_admin_menu")))
        async def enhanced_callback_handler(callback: CallbackQuery):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π callback –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            await callback.answer()
            
            data = callback.data
            user_id = callback.from_user.id
            
            if data == "stats":
                uptime = datetime.now() - self.startup_time
                stats_text = (
                    f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\\n\\n"
                    f"‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}\\n"
                    f"üíæ –ë–î: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback —Ä–µ–∂–∏–º'}\\n"
                    f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\\n"
                    f"üìÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {len(self.scheduler.get_jobs()) if self.scheduler else 0} –∑–∞–≤–¥–∞–Ω—å\\n\\n"
                    f"üîß <b>–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ:</b>\\n"
                    f"‚úÖ Typing —ñ–º–ø–æ—Ä—Ç–∏\\n"
                    f"‚úÖ aiohttp cleanup\\n"
                    f"‚úÖ Database fallback\\n"
                    f"‚úÖ Handler registration"
                )
                await callback.message.edit_text(stats_text)
            
            else:
                await callback.message.edit_text(f"üîß –§—É–Ω–∫—Ü—ñ—è '{data}' –ø—Ä–∞—Ü—é—î!\\n\\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞ –ø—Ä–∞—Ü—é—î —É —Ñ–æ–Ω—ñ.")
        
        logger.info("‚úÖ Automation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ä–µ—Å—É—Ä—Å—ñ–≤ - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
        logger.info("üßπ Cleanup resources...")
        
        try:
            # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚úÖ Scheduler stopped")
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                if not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
                else:
                    logger.info("‚úÖ Bot session already closed")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")

    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
        logger.info("ü§ñ Starting Automated Ukrainian Telegram Bot...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            settings = await self.load_settings()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            if not await self.initialize_bot(settings):
                logger.error("‚ùå Failed to initialize bot")
                return False
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î (–∑ fallback)
            await self.initialize_database()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            automation_success = await self.initialize_automation()
            if automation_success:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ (–∑ fallback)
            await self.register_handlers()
            
            logger.info("‚úÖ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)'''
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    main_path = Path("app/main.py")
    if main_path.exists():
        with open(main_path, 'w', encoding='utf-8') as f:
            f.write(main_content)
        print("‚úÖ app/main.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ typing —ñ–º–ø–æ—Ä—Ç–∞–º–∏ —Ç–∞ aiohttp cleanup")
    else:
        print("‚ùå app/main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")

def fix_database_init():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è app/database/__init__.py –∑ fallback —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
    print("\nüì¶ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/DATABASE/__INIT__.PY:")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É "üì¶ app/database/__init__.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô"
    database_init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ Database –º–æ–¥—É–ª—å - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ï–ö–°–ü–û–†–¢

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ Graceful fallback –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —ñ–º–ø–æ—Ä—Ç—É
‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É
‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
"""

import logging

logger = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
FUNCTIONS_LOADED = False
MODELS_LOADED = False

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô =====
try:
    from .models import (
        Base, User, Content, Rating, Duel, DuelVote, 
        AdminAction, BotStatistics, ContentType, ContentStatus, DuelStatus
    )
    
    MODELS_LOADED = True
    logger.info("‚úÖ Database models –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
except ImportError as e:
    MODELS_LOADED = False
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É models: {e}")

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –§–£–ù–ö–¶–Ü–ô =====
try:
    from .database import (
        init_db, get_db_session, get_or_create_user, get_user_by_id,
        update_user_points, get_rank_by_points, add_content_for_moderation,
        get_pending_content, moderate_content, get_random_approved_content,
        ensure_admin_exists, add_initial_data
    )
    
    FUNCTIONS_LOADED = True
    logger.info("‚úÖ Database functions –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
except ImportError as e:
    FUNCTIONS_LOADED = False
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É database functions: {e}")

# ===== –°–¢–í–û–†–ï–ù–ù–Ø FALLBACK –§–£–ù–ö–¶–Ü–ô =====
if not FUNCTIONS_LOADED:
    logger.warning("‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback database functions")
    
    async def init_db():
        logger.warning("‚ö†Ô∏è Using fallback init_db - database not fully available")
        return False
    
    def get_db_session():
        from contextlib import contextmanager
        
        @contextmanager
        def dummy_session():
            yield None
        
        return dummy_session()
    
    async def get_or_create_user(telegram_id, username=None, first_name=None):
        logger.warning(f"‚ö†Ô∏è User {telegram_id} not saved - database not available")
        return None
    
    async def get_user_by_id(telegram_id):
        return None
    
    async def update_user_points(telegram_id, points_delta):
        logger.warning(f"‚ö†Ô∏è Points update for {telegram_id} skipped - database not available")
        return False
    
    async def get_rank_by_points(points):
        if points >= 5000:
            return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
        elif points >= 3000:
            return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
        elif points >= 1500:
            return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
        elif points >= 750:
            return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
        elif points >= 350:
            return "üé≠ –ö–æ–º—ñ–∫"
        elif points >= 150:
            return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
        elif points >= 50:
            return "üòÑ –°–º—ñ—Ö—É–Ω"
        else:
            return "ü§° –ù–æ–≤–∞—á–æ–∫"
    
    async def add_content_for_moderation(author_id, content_type, text):
        logger.warning(f"‚ö†Ô∏è Content from {author_id} not saved - database not available")
        return None
    
    async def get_pending_content():
        return []
    
    async def moderate_content(content_id, approved, moderator_id, reason=None):
        logger.warning(f"‚ö†Ô∏è Content {content_id} moderation skipped - database not available")
        return False
    
    async def get_random_approved_content(content_type):
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        import random, types
        
        demo_content = [
            "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\\n- –ê –¥–µ —Å–∞–º–µ?\\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
            "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\\n- –ê —â–æ —Ä–æ–±–∏—à?\\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ"
        ]
        
        demo_obj = types.SimpleNamespace()
        demo_obj.text = random.choice(demo_content)
        demo_obj.id = 0
        demo_obj.author_id = 1
        
        return demo_obj
    
    async def ensure_admin_exists():
        logger.warning("‚ö†Ô∏è Admin creation skipped - database not available")
        return
    
    async def add_initial_data():
        logger.warning("‚ö†Ô∏è Initial data skipped - database not available")
        return

# ===== –°–¢–í–û–†–ï–ù–ù–Ø FALLBACK –ú–û–î–ï–õ–ï–ô =====
if not MODELS_LOADED:
    logger.warning("‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback models")
    
    import enum
    
    class ContentType(enum.Enum):
        JOKE = "joke"
        MEME = "meme"
        ANEKDOT = "anekdot"
    
    class ContentStatus(enum.Enum):
        PENDING = "pending"
        APPROVED = "approved"
        REJECTED = "rejected"
    
    class DuelStatus(enum.Enum):
        ACTIVE = "active"
        FINISHED = "finished"
        CANCELLED = "cancelled"

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'init_db', 'get_db_session', 'get_or_create_user', 'get_user_by_id',
    'update_user_points', 'get_rank_by_points', 'add_content_for_moderation',
    'get_pending_content', 'moderate_content', 'get_random_approved_content',
    'ensure_admin_exists', 'add_initial_data', 'ContentType', 'ContentStatus', 'DuelStatus',
    'FUNCTIONS_LOADED', 'MODELS_LOADED'
]

if MODELS_LOADED:
    __all__.extend(['Base', 'User', 'Content', 'Rating', 'Duel', 'DuelVote', 'AdminAction', 'BotStatistics'])

logger.info(f"üì¶ Database –º–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
logger.info(f"üìã Functions: {'‚úÖ' if FUNCTIONS_LOADED else '‚ùå'}, Models: {'‚úÖ' if MODELS_LOADED else '‚ùå'}")

if FUNCTIONS_LOADED and MODELS_LOADED:
    logger.info("üéâ Database module: –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
elif FUNCTIONS_LOADED or MODELS_LOADED:
    logger.warning("‚ö†Ô∏è Database module: —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∏–π (fallback —Ä–µ–∂–∏–º)")
else:
    logger.warning("‚ö†Ô∏è Database module: fallback —Ä–µ–∂–∏–º (–±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")'''
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    db_init_path = Path("app/database/__init__.py")
    if db_init_path.exists() or db_init_path.parent.exists():
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        db_init_path.parent.mkdir(parents=True, exist_ok=True)
        
        with open(db_init_path, 'w', encoding='utf-8') as f:
            f.write(database_init_content)
        print("‚úÖ app/database/__init__.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –∑ fallback —Ñ—É–Ω–∫—Ü—ñ—è–º–∏")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ app/database/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")

def verify_fixes():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"""
    print("\n‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
    
    issues = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ main.py
    main_path = Path("app/main.py")
    if main_path.exists():
        with open(main_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'from typing import Optional, List, Dict, Any' in content:
            print("‚úÖ app/main.py: typing —ñ–º–ø–æ—Ä—Ç–∏ –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("typing —ñ–º–ø–æ—Ä—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ main.py")
        
        if 'await self.bot.session.close()' in content:
            print("‚úÖ app/main.py: aiohttp cleanup –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("aiohttp cleanup –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ main.py")
    else:
        issues.append("app/main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ database/__init__.py
    db_init_path = Path("app/database/__init__.py")
    if db_init_path.exists():
        with open(db_init_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'FUNCTIONS_LOADED' in content and 'fallback' in content:
            print("‚úÖ app/database/__init__.py: fallback —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("fallback —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ database/__init__.py")
    else:
        issues.append("app/database/__init__.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return issues

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥—É–º–æ–≤
        if not Path("app").exists():
            print("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
        backup_files()
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        fix_main_py()
        fix_database_init()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        issues = verify_fixes()
        
        print("\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
        print("=" * 50)
        
        if not issues:
            print("üéâ –í–°–Ü –ö–†–ò–¢–ò–ß–ù–Ü –ë–ê–ì–ò –í–ò–ü–†–ê–í–õ–ï–ù–û!")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ deploy –Ω–∞ Railway")
            print("\nüöÄ –û–ß–Ü–ö–£–í–ê–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
            print("‚úÖ –ó–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞: name 'List' is not defined")
            print("‚úÖ –ó–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞: Unclosed client session")
            print("‚úÖ –ë–î –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ fallback —Ñ—É–Ω–∫—Ü—ñ—è–º–∏")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é")
            print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print("1. git add .")
            print("2. git commit -m 'üö® Critical bugfixes: typing imports, aiohttp cleanup, database fallback'")
            print("3. git push")
            print("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Railway –ª–æ–≥–∏ - –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–∏–Ω–Ω—ñ –∑–Ω–∏–∫–Ω—É—Ç–∏")
        else:
            print("‚ö†Ô∏è –ó–ê–õ–ò–®–ò–õ–ò–°–¨ –ü–†–û–ë–õ–ï–ú–ò:")
            for issue in issues:
                print(f"- {issue}")
        
        return len(issues) == 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)