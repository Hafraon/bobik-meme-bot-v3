#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–í–ò–ü–†–ê–í–õ–ï–ù–û get_or_create_user) üß†üòÇüî•
"""

import logging
import time
from datetime import datetime, timedelta
from typing import Callable, Dict, Any, Awaitable, Optional, Set

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery

logger = logging.getLogger(__name__)

class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if isinstance(event, Message):
            user_info = f"{event.from_user.first_name} (@{event.from_user.username}) ID:{event.from_user.id}"
            if event.text:
                logger.info(f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_info}: {event.text}")
            elif event.photo:
                logger.info(f"üì∏ –§–æ—Ç–æ –≤—ñ–¥ {user_info}")
            elif event.document:
                logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –≤—ñ–¥ {user_info}")
            else:
                logger.info(f"üí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user_info}")
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è callback –∑–∞–ø–∏—Ç—ñ–≤
        elif isinstance(event, CallbackQuery):
            user_info = f"{event.from_user.first_name} (@{event.from_user.username}) ID:{event.from_user.id}"
            logger.info(f"üîò Callback –≤—ñ–¥ {user_info}: {event.data}")
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ handler
        return await handler(event, data)

class AntiSpamMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É"""
    
    def __init__(self, messages_per_second: int = 3):
        self.messages_per_second = messages_per_second
        self.user_last_message = {}
        self.user_message_count = {}
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è user_id
        user_id = None
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        if user_id:
            current_second = int(time.time())
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Å–µ–∫—É–Ω–¥—É
            if user_id in self.user_last_message:
                if self.user_last_message[user_id] == current_second:
                    self.user_message_count[user_id] += 1
                    
                    # –ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
                    if self.user_message_count[user_id] > self.messages_per_second:
                        logger.warning(f"üö´ –°–ø–∞–º –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                        
                        if isinstance(event, Message):
                            await event.answer(
                                "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏...",
                                show_alert=True
                            )
                        elif isinstance(event, CallbackQuery):
                            await event.answer(
                                "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏...", 
                                show_alert=True
                            )
                        
                        return  # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ handler
                else:
                    # –ù–æ–≤–∞ —Å–µ–∫—É–Ω–¥–∞ - —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
                    self.user_last_message[user_id] = current_second
                    self.user_message_count[user_id] = 1
            else:
                # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                self.user_last_message[user_id] = current_second
                self.user_message_count[user_id] = 1
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ handler
        return await handler(event, data)

class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    def __init__(self):
        self.banned_users: Set[int] = set()  # –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        self.admin_users: Set[int] = set()   # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ–≤
        try:
            from config.settings import Settings
            settings = Settings()
            if hasattr(settings, 'ADMIN_ID') and settings.ADMIN_ID:
                self.admin_users.add(settings.ADMIN_ID)
        except ImportError:
            import os
            admin_id = os.getenv("ADMIN_ID")
            if admin_id:
                self.admin_users.add(int(admin_id))
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        
        if not user:
            return await handler(event, data)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–Ω—É
        if user.id in self.banned_users:
            logger.warning(f"üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –±–æ—Ç–∞")
            
            if isinstance(event, Message):
                await event.answer(
                    "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –≤ —Ü—å–æ–º—É –±–æ—Ç—ñ.\n"
                    "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            elif isinstance(event, CallbackQuery):
                await event.answer(
                    "üö´ –í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ –≤ —Ü—å–æ–º—É –±–æ—Ç—ñ!",
                    show_alert=True
                )
            
            return  # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ handler
        
        # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            from database import get_or_create_user
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ò–ô –í–ò–ö–õ–ò–ö - telegram_id —è–∫ –ø–µ—Ä—à–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
            db_user = await get_or_create_user(
                telegram_id=user.id,  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –±—É–≤ user.id —è–∫ –ø–æ–∑–∏—Ü—ñ–π–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            if db_user:
                # –î–æ–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                data["user"] = db_user
                data["is_admin"] = user.id in self.admin_users
                data["user_permissions"] = self._get_user_permissions(db_user)
                
                logger.debug(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ middleware")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id} –≤ middleware")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            # –ù–µ –±–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ handler
        return await handler(event, data)
    
    def _get_user_permissions(self, user) -> Dict[str, bool]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        permissions = {
            "can_submit_content": True,
            "can_vote_in_duels": True,
            "can_use_daily_subscription": True,
            "can_moderate": user.id in self.admin_users if hasattr(user, 'id') else False,
            "can_ban_users": user.id in self.admin_users if hasattr(user, 'id') else False,
        }
        
        return permissions
    
    def ban_user(self, user_id: int):
        """–ó–∞–±–æ—Ä–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.banned_users.add(user_id)
        logger.info(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ")
    
    def unban_user(self, user_id: int):
        """–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.banned_users.discard(user_id)
        logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ")
    
    def add_admin(self, user_id: int):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.admin_users.add(user_id)
        logger.info(f"üëë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    def remove_admin(self, user_id: int):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.admin_users.discard(user_id)
        logger.info(f"üë§ –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–±—Ä–∞–Ω–æ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

class UserTrackingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    def __init__(self):
        self.user_stats = {}  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è user_id
        user_id = None
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        
        if user_id:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if user_id not in self.user_stats:
                self.user_stats[user_id] = {
                    "first_seen": datetime.now(),
                    "last_seen": datetime.now(),
                    "message_count": 0,
                    "callback_count": 0,
                    "session_start": datetime.now()
                }
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.user_stats[user_id]["last_seen"] = datetime.now()
            
            if isinstance(event, Message):
                self.user_stats[user_id]["message_count"] += 1
            elif isinstance(event, CallbackQuery):
                self.user_stats[user_id]["callback_count"] += 1
            
            # –î–æ–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            data["user_stats"] = self.user_stats[user_id]
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ handler
        return await handler(event, data)
    
    def get_active_users(self, hours: int = 24) -> list:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ X –≥–æ–¥–∏–Ω"""
        threshold = datetime.now() - timedelta(hours=hours)
        
        active_users = []
        for user_id, stats in self.user_stats.items():
            if stats["last_seen"] >= threshold:
                active_users.append({
                    "user_id": user_id,
                    "last_seen": stats["last_seen"],
                    "message_count": stats["message_count"],
                    "callback_count": stats["callback_count"]
                })
        
        return sorted(active_users, key=lambda x: x["last_seen"], reverse=True)

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ middleware
def is_admin(data: Dict[str, Any]) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return data.get("is_admin", False)

def get_user_permissions(data: Dict[str, Any]) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return data.get("user_permissions", {})

def get_user_stats_from_context(data: Dict[str, Any]) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
    return data.get("user_stats", {})

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –µ–∫–∑–µ–º–ø–ª—è—Ä–∏ middleware –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
auth_middleware = AuthMiddleware()
tracking_middleware = UserTrackingMiddleware()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
def ban_user(user_id: int):
    """–ó–∞–±–æ—Ä–æ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return auth_middleware.ban_user(user_id)

def unban_user(user_id: int):
    """–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    return auth_middleware.unban_user(user_id)

def add_admin(user_id: int):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return auth_middleware.add_admin(user_id)

def remove_admin(user_id: int):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return auth_middleware.remove_admin(user_id)

def get_active_users(hours: int = 24) -> list:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    return tracking_middleware.get_active_users(hours)

# –ï–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤
__all__ = [
    "LoggingMiddleware",
    "AntiSpamMiddleware", 
    "AuthMiddleware",
    "UserTrackingMiddleware",
    "is_admin",
    "get_user_permissions",
    "ban_user",
    "unban_user",
    "add_admin",
    "remove_admin",
    "get_active_users"
]