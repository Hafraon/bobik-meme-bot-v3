#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ –®–≤–∏–¥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–∏—Å—Ç–µ–º–∏

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–∏—Å—Ç–µ–º–∏
"""

import sys
import os
from pathlib import Path

def print_header():
    print("üß™" * 20)
    print("\nüé≠ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–û–ù–¢–ï–ù–¢-–°–ò–°–¢–ï–ú–ò")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    print("üß™" * 20)
    print()

def test_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    print("üì¶ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ú–ü–û–†–¢–Ü–í:")
    
    # –î–æ–¥–∞—î–º–æ app/ –¥–æ path
    app_dir = Path("app")
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
        print("‚úÖ app/ –¥–æ–¥–∞–Ω–æ –¥–æ Python path")
    
    tests = [
        ("config.settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        ("database.models", "–ú–æ–¥–µ–ª—ñ –ë–î"),
        ("database.services", "–°–µ—Ä–≤—ñ—Å–∏ –ë–î"),
        ("handlers.content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("handlers", "–°–∏—Å—Ç–µ–º–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤")
    ]
    
    success_count = 0
    for module, description in tests:
        try:
            __import__(module)
            print(f"‚úÖ {module} - {description}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {module} - {description} ({e})")
    
    print(f"\nüìä –Ü–º–ø–æ—Ä—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ: {success_count}/{len(tests)}")
    return success_count == len(tests)

def test_content_data():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    print("\nüé≠ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –î–ï–ú–û –ö–û–ù–¢–ï–ù–¢–£:")
    
    try:
        from handlers.content_handlers import DEMO_MEMES, DEMO_JOKES, DEMO_ANEKDOTS
        
        print(f"üòÇ –î–µ–º–æ –º–µ–º—ñ–≤: {len(DEMO_MEMES)}")
        print(f"ü§£ –î–µ–º–æ –∂–∞—Ä—Ç—ñ–≤: {len(DEMO_JOKES)}")
        print(f"üß† –î–µ–º–æ –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤: {len(DEMO_ANEKDOTS)}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–∏–∫–ª–∞–¥–∏
        if DEMO_MEMES:
            print(f"\nüìù –ü—Ä–∏–∫–ª–∞–¥ –º–µ–º—É:\n{DEMO_MEMES[0][:100]}...")
        if DEMO_JOKES:
            print(f"\nüìù –ü—Ä–∏–∫–ª–∞–¥ –∂–∞—Ä—Ç—É:\n{DEMO_JOKES[0][:100]}...")
        if DEMO_ANEKDOTS:
            print(f"\nüìù –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–µ–∫–¥–æ—Ç—É:\n{DEMO_ANEKDOTS[0][:100]}...")
        
        print("\n‚úÖ –î–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î"""
    print("\nüíæ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•:")
    
    try:
        from database.services import init_database, test_database_connection
        
        # –¢–µ—Å—Ç–æ–≤–∏–π URL –ë–î
        test_db_url = os.getenv('DATABASE_URL', 'sqlite:///test_bot.db')
        print(f"üîó URL –ë–î: {test_db_url}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        if init_database(test_db_url):
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
            # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
            if test_database_connection():
                print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —É—Å–ø—ñ—à–Ω–µ")
                return True
            else:
                print("‚ùå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –Ω–µ–º–æ–∂–ª–∏–≤–µ")
                return False
        else:
            print("‚ùå –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î –Ω–µ–≤–¥–∞–ª–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        return False

def test_content_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π"""
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–û–ù–¢–ï–ù–¢–ù–ò–• –§–£–ù–ö–¶–Ü–ô:")
    
    try:
        from handlers.content_handlers import get_content_keyboard
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
        keyboard = get_content_keyboard(1, "demo")
        if keyboard:
            print("‚úÖ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è FSM —Å—Ç–∞–Ω—ñ–≤
        from handlers.content_handlers import ContentSubmissionStates
        print("‚úÖ FSM —Å—Ç–∞–Ω–∏ –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–æ—Å—Ç—É–ø–Ω—ñ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π: {e}")
        return False

def test_handlers_registration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    print("\nüìã –¢–ï–°–¢–£–í–ê–ù–ù–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –•–ï–ù–î–õ–ï–†–Ü–í:")
    
    try:
        from aiogram import Dispatcher
        from handlers import register_all_handlers
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        dp = Dispatcher()
        
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏
        register_all_handlers(dp)
        print("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        print(f"üìä –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {len(dp.message.handlers) + len(dp.callback_query.handlers)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print_header()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤
    tests = [
        ("–Ü–º–ø–æ—Ä—Ç–∏", test_imports),
        ("–î–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç", test_content_data),
        ("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö", test_database_connection),
        ("–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", test_content_functions),
        ("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤", test_handlers_registration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π—à–æ–≤")
        except Exception as e:
            print(f"üí• –¢–µ—Å—Ç '{test_name}' –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("üöÄ –ö–æ–Ω—Ç–µ–Ω—Ç-—Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≤ –±–æ—Ç—ñ:")
        print("   /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º")
        print("   /joke - —Å–º—ñ—à–Ω–∏–π –∂–∞—Ä—Ç") 
        print("   /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç")
        print("   üìù –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥–∞—á—ñ –≤–ª–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    else:
        print("\n‚ö†Ô∏è –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö")
    
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)