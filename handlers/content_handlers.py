#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (–º–µ–º–∏ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–∏) üß†üòÇüî•
"""

import logging
import random
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# Fallback —ñ–º–ø–æ—Ä—Ç–∏
try:
    from config.settings import Settings
    settings = Settings()
    
    # –î–æ–¥–∞—î–º–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏
    if not hasattr(settings, 'POINTS_FOR_SUBMISSION'):
        settings.POINTS_FOR_SUBMISSION = 10
    if not hasattr(settings, 'POINTS_FOR_REACTION'):
        settings.POINTS_FOR_REACTION = 5
    if not hasattr(settings, 'MAX_JOKE_LENGTH'):
        settings.MAX_JOKE_LENGTH = 1000
    if not hasattr(settings, 'MAX_MEME_CAPTION_LENGTH'):
        settings.MAX_MEME_CAPTION_LENGTH = 200
        
except ImportError:
    # Fallback settings
    import os
    class FallbackSettings:
        POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "10"))
        POINTS_FOR_REACTION = int(os.getenv("POINTS_FOR_REACTION", "5"))
        MAX_JOKE_LENGTH = int(os.getenv("MAX_JOKE_LENGTH", "1000"))
        MAX_MEME_CAPTION_LENGTH = int(os.getenv("MAX_MEME_CAPTION_LENGTH", "200"))
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    
    settings = FallbackSettings()

# EMOJI –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
EMOJI = {
    "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê", 
    "heart": "‚ù§Ô∏è", "like": "üëç", "dislike": "üëé", "thinking": "ü§î",
    "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
    "new": "üÜï", "time": "‚è∞", "profile": "üë§", "vs": "‚öîÔ∏è"
}

# FSM –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
class SubmissionStates(StatesGroup):
    waiting_for_content = State()

# –ü—Ä–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö (fallback)
class ContentItem:
    def __init__(self, id, text, views=0, likes=0, dislikes=0, file_id=None):
        self.id = id
        self.text = text
        self.views = views
        self.likes = likes
        self.dislikes = dislikes
        self.file_id = file_id

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ë–î)
SAMPLE_JOKES = [
    ContentItem(1, "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ —Ç–∞–º –Ω–µ–º–∞—î –±–∞–≥—ñ–≤!", 150, 23, 2),
    ContentItem(2, "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∫–æ–ª–∏ –Ω–µ –º–æ–∂–µ –∑–∞—Å–Ω—É—Ç–∏? –†–∞—Ö—É—î –æ–≤–µ—Ü—å –≤—ñ–¥ –Ω—É–ª—è!", 89, 15, 1),
    ContentItem(3, "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è!", 234, 45, 3),
    ContentItem(4, "–©–æ —Ç–∞–∫–µ —Ä–µ–∫—É—Ä—Å—ñ—è? –î–∏–≤–∏—Å—å –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∫—É—Ä—Å—ñ—ó!", 67, 12, 0),
    ContentItem(5, "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É? –ñ–æ–¥–Ω–æ–≥–æ - —Ü–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!", 178, 34, 2)
]

SAMPLE_MEMES = [
    ContentItem(6, "–ö–æ–ª–∏ –∫–æ–¥ –Ω–∞—Ä–µ—à—Ç—ñ –∑–∞–ø—Ä–∞—Ü—é–≤–∞–≤ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É", 345, 67, 4),
    ContentItem(7, "–ö–æ–ª–∏ –∑–Ω–∞–π—à–æ–≤ –±–∞–≥ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ –æ 17:59 –≤ –ø'—è—Ç–Ω–∏—Ü—é", 289, 54, 8),
    ContentItem(8, "–ö–æ–ª–∏ –∑–∞–º–æ–≤–Ω–∏–∫ –∫–∞–∂–µ '—à–≤–∏–¥–∫–∞ –∑–º—ñ–Ω–∞'", 123, 28, 3)
]

async def get_random_joke():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_random_joke as db_get_joke
        joke = await db_get_joke()
        if joke:
            return joke
    except ImportError:
        pass
    
    # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
    joke = random.choice(SAMPLE_JOKES)
    joke.views += 1
    return joke

async def get_random_meme():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_random_meme as db_get_meme
        meme = await db_get_meme()
        if meme:
            return meme
    except ImportError:
        pass
    
    # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
    meme = random.choice(SAMPLE_MEMES)
    meme.views += 1
    return meme

async def update_user_points(user_id: int, points: int, reason: str):
    """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        from database.database import update_user_points as db_update_points
        await db_update_points(user_id, points, reason)
    except ImportError:
        # Fallback - –ª–æ–≥—É–≤–∞–Ω–Ω—è
        logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: +{points} –±–∞–ª—ñ–≤ –∑–∞ {reason}")

# –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /meme"""
    await send_meme(message)

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /anekdot"""
    await send_joke(message)

async def send_meme(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É –∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞–ª—ñ–≤"""
    user_id = message.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É
    meme = await get_random_meme()
    
    if not meme:
        await message.answer("üòÖ –ú–µ–º–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—ó —á–µ—Ä–µ–∑ /submit")
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        greeting = f"{EMOJI['fire']} –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
    elif 12 <= current_hour < 18:
        greeting = f"{EMOJI['laugh']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
    elif 18 <= current_hour < 23:
        greeting = f"{EMOJI['star']} –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
    else:
        greeting = f"{EMOJI['thinking']} –î–æ–±—Ä–æ—ó –Ω–æ—á—ñ!"
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è (+{settings.POINTS_FOR_REACTION})", 
                callback_data=f"like_content:{meme.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                callback_data=f"dislike_content:{meme.id}"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –©–µ –º–µ–º", callback_data="get_meme"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
        ]
    ])
    
    caption = (
        f"{greeting}\n\n"
        f"{meme.text}\n\n"
        f"{EMOJI['fire']} –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {meme.views} | "
        f"{EMOJI['like']} {meme.likes} | "
        f"{EMOJI['dislike']} {meme.dislikes}"
    )
    
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–º—É
    if meme.file_id:
        try:
            await message.answer_photo(
                photo=meme.file_id,
                caption=caption,
                reply_markup=keyboard
            )
        except:
            await message.answer(caption, reply_markup=keyboard)
    else:
        await message.answer(caption, reply_markup=keyboard)
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
    await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É")
    
    if not from_callback:
        logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –º–µ–º {meme.id}")

async def send_joke(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É –∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞–ª—ñ–≤"""
    user_id = message.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É
    joke = await get_random_joke()
    
    if not joke:
        await message.answer("üòÖ –ê–Ω–µ–∫–¥–æ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è! –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤–æ—ó —á–µ—Ä–µ–∑ /submit")
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        greeting = f"{EMOJI['fire']} –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
    elif 12 <= current_hour < 18:
        greeting = f"{EMOJI['brain']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
    elif 18 <= current_hour < 23:
        greeting = f"{EMOJI['star']} –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
    else:
        greeting = f"{EMOJI['thinking']} –î–æ–±—Ä–æ—ó –Ω–æ—á—ñ!"
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è (+{settings.POINTS_FOR_REACTION})", 
                callback_data=f"like_content:{joke.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                callback_data=f"dislike_content:{joke.id}"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –©–µ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –î—É–µ–ª—å", callback_data="start_duel")
        ]
    ])
    
    response_text = (
        f"{greeting}\n\n"
        f"{joke.text}\n\n"
        f"{EMOJI['fire']} –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {joke.views} | "
        f"{EMOJI['like']} {joke.likes} | "
        f"{EMOJI['dislike']} {joke.dislikes}"
    )
    
    await message.answer(response_text, reply_markup=keyboard)
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
    await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–µ–∫–¥–æ—Ç—É")
    
    if not from_callback:
        logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç {joke.id}")

async def cmd_submit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /submit –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    text_parts = message.text.split(' ', 1)
    if len(text_parts) > 1:
        # –Ñ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ - —Ü–µ –∞–Ω–µ–∫–¥–æ—Ç
        joke_text = text_parts[1].strip()
        
        if len(joke_text) > settings.MAX_JOKE_LENGTH:
            await message.answer(
                f"{EMOJI['warning']} –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
                f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É
        await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –∞–Ω–µ–∫–¥–æ—Ç—É")
        
        await message.answer(
            f"{EMOJI['check']} <b>–î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç!</b>\n\n"
            f"{EMOJI['brain']} –í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n"
            f"{EMOJI['fire']} –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤\n\n"
            f"{EMOJI['info']} –ü—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞—î—à —â–µ –±–∞–ª–∏!"
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if settings.ADMIN_ID:
            try:
                await message.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                    f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} "
                    f"(@{message.from_user.username or '–±–µ–∑ username'})\n"
                    f"{EMOJI['brain']} <b>–¢–µ–∫—Å—Ç:</b>\n{joke_text}"
                )
            except Exception as e:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
        
    else:
        # –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É - –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="submit_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="submit_meme")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['star']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
            ]
        ])
        
        await message.answer(
            f"{EMOJI['fire']} <b>–©–æ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?</b>\n\n"
            f"{EMOJI['brain']} <b>–ê–Ω–µ–∫–¥–æ—Ç</b> - —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∂–∞—Ä—Ç (+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤)\n"
            f"{EMOJI['laugh']} <b>–ú–µ–º</b> - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º (+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤)\n\n"
            f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–µ–∫–¥–æ—Ç—É:</b>\n"
            f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è!</code>",
            reply_markup=keyboard
        )

async def handle_photo_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ —è–∫ –º–µ–º—É"""
    if not message.photo:
        return
    
    user_id = message.from_user.id
    photo = message.photo[-1]  # –ù–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä
    caption = message.caption or f"{EMOJI['laugh']} –ú–µ–º –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É"
    
    if len(caption) > settings.MAX_MEME_CAPTION_LENGTH:
        await message.answer(
            f"{EMOJI['warning']} –ü—ñ–¥–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
            f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É
    await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –º–µ–º—É")
    
    await message.answer(
        f"{EMOJI['check']} <b>–î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –º–µ–º!</b>\n\n"
        f"{EMOJI['laugh']} –í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n"
        f"{EMOJI['fire']} –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤\n\n"
        f"{EMOJI['info']} –ü—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞—î—à —â–µ –±–∞–ª–∏!"
    )
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if settings.ADMIN_ID:
        try:
            await message.bot.send_photo(
                settings.ADMIN_ID,
                photo=photo.file_id,
                caption=f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                       f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
                       f"{EMOJI['laugh']} <b>–ü—ñ–¥–ø–∏—Å:</b> {caption}"
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_like_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ª–∞–π–∫
    await update_user_points(user_id, settings.POINTS_FOR_REACTION, "–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    
    await callback_query.answer(
        f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤"
    )

async def callback_dislike_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id
    
    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –±–∞–ª–∏ –∑–∞ –¥–∏–∑–ª–∞–π–∫ (—Ç–µ–∂ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
    await update_user_points(user_id, 1, "–¥–∏–∑–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    
    await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! +1 –±–∞–ª")

async def callback_get_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
    await send_meme(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_get_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É"""
    await send_joke(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_submit_content(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback_query.message.answer(
        f"{EMOJI['fire']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
        f"{EMOJI['brain']} <b>–ê–Ω–µ–∫–¥–æ—Ç:</b> /submit —ñ —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n"
        f"{EMOJI['laugh']} <b>–ú–µ–º:</b> –Ω–∞–¥—ñ—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n\n"
        f"{EMOJI['star']} –ó–∞ –∫–æ–∂–Ω—É –ø–æ–¥–∞—á—É: +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ —Ç–∞–º –Ω–µ–º–∞—î –±–∞–≥—ñ–≤!</code>"
    )
    await callback_query.answer()

async def callback_submit_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    await callback_query.message.answer(
        f"{EMOJI['brain']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç!</b>\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ\n"
        f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ –≤ –Ω—ñ–π –Ω–µ–º–∞—î –±–∞–≥—ñ–≤!"
    )
    await callback_query.answer()

async def callback_submit_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –º–µ–º—É"""
    await callback_query.message.answer(
        f"{EMOJI['laugh']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –º–µ–º!</b>\n\n"
        f"–ü—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n"
        f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø—ñ–¥–ø–∏—Å—ñ\n\n"
        f"{EMOJI['brain']} –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –ø—ñ–¥–ø–∏—Å = –≥–æ—Ç–æ–≤–∏–π –º–µ–º!"
    )
    await callback_query.answer()

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
    dp.message.register(handle_photo_submission, F.photo)
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_like_content, F.data.startswith("like_content:"))
    dp.callback_query.register(callback_dislike_content, F.data.startswith("dislike_content:"))
    dp.callback_query.register(callback_get_meme, F.data == "get_meme")
    dp.callback_query.register(callback_get_joke, F.data == "get_joke")
    dp.callback_query.register(callback_submit_content, F.data == "submit_content")
    dp.callback_query.register(callback_submit_joke, F.data == "submit_joke")
    dp.callback_query.register(callback_submit_meme, F.data == "submit_meme")
    
    logger.info("‚úÖ Content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")