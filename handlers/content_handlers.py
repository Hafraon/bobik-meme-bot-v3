#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–Ü –•–ï–ù–î–õ–ï–†–ò –ö–û–ù–¢–ï–ù–¢–£ –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üß†üòÇüî•
"""

import logging
import random
from datetime import datetime
from typing import Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)

logger = logging.getLogger(__name__)

# Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
try:
    from config.settings import settings, EMOJI
    POINTS_FOR_VIEW = getattr(settings, 'POINTS_FOR_VIEW', 1)
    POINTS_FOR_REACTION = getattr(settings, 'POINTS_FOR_REACTION', 5)
    POINTS_FOR_SUBMISSION = getattr(settings, 'POINTS_FOR_SUBMISSION', 10)
except ImportError:
    import os
    POINTS_FOR_VIEW = int(os.getenv("POINTS_FOR_VIEW", "1"))
    POINTS_FOR_REACTION = int(os.getenv("POINTS_FOR_REACTION", "5"))
    POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "10"))
    
    EMOJI = {
        "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê",
        "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
        "crown": "üëë", "rocket": "üöÄ", "vs": "‚öîÔ∏è", "calendar": "üìÖ",
        "thumbs_up": "üëç", "thumbs_down": "üëé", "heart": "‚ù§Ô∏è"
    }

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

def get_content_keyboard(content_id: int, content_type: str = "joke") -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI.get('thumbs_up', 'üëç')} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è (+{POINTS_FOR_REACTION})",
                callback_data=f"like_{content_type}_{content_id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI.get('thumbs_down', 'üëé')} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è (+{POINTS_FOR_REACTION})",
                callback_data=f"dislike_{content_type}_{content_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI.get('rocket', 'üöÄ')} –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è",
                callback_data=f"share_{content_type}_{content_id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI.get('fire', 'üî•')} –©–µ –æ–¥–∏–Ω!",
                callback_data=f"get_{content_type}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI.get('vs', '‚öîÔ∏è')} –î—É–µ–ª—å –∑ —Ü–∏–º –∂–∞—Ä—Ç–æ–º",
                callback_data=f"duel_with_{content_id}"
            )
        ]
    ])

def get_content_submission_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI.get('laugh', 'üòÇ')} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç (+{POINTS_FOR_SUBMISSION})",
                callback_data="submit_joke"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI.get('fire', 'üî•')} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º (+{POINTS_FOR_SUBMISSION})",
                callback_data="submit_meme"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI.get('info', '‚ÑπÔ∏è')} –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?",
                callback_data="submission_help"
            )
        ]
    ])

async def award_points(user_id: int, points: int, reason: str) -> bool:
    """–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        from database import update_user_points
        
        result = await update_user_points(user_id, points, reason)
        if result:
            logger.info(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: +{points} –±–∞–ª—ñ–≤ –∑–∞ {reason}")
            return True
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ {user_id}: {e}")
        return False

async def record_content_interaction(user_id: int, content_id: int, action: str) -> bool:
    """–ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    try:
        from database import add_content_rating
        
        result = await add_content_rating(
            user_id=user_id,
            content_id=content_id,
            action_type=action,
            points_awarded=POINTS_FOR_REACTION if action in ['like', 'dislike'] else 0
        )
        
        return result is not None
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤–∑–∞—î–º–æ–¥—ñ—ó: {e}")
        return False

# ===== –ö–û–ú–ê–ù–î–ò –ö–û–ù–¢–ï–ù–¢–£ =====

async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º"""
    await send_random_content(message, "MEME")

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /anekdot - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç"""
    await send_random_content(message, "JOKE")

async def send_random_content(message: Message, content_type: str = "JOKE"):
    """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    user_id = message.from_user.id
    
    try:
        from database import get_random_approved_content
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        content = await get_random_approved_content(content_type=content_type, user_id=user_id)
        
        if not content:
            await message.answer(
                f"{EMOJI.get('warning', '‚ö†Ô∏è')} –ù–∞ –∂–∞–ª—å, –ø–æ–∫–∏ –Ω–µ–º–∞—î {'–º–µ–º—ñ–≤' if content_type == 'MEME' else '–∞–Ω–µ–∫–¥–æ—Ç—ñ–≤'}.\n\n"
                f"–ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º —Ö—Ç–æ –¥–æ–¥–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç! /submit"
            )
            return
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
        points_awarded = await award_points(user_id, POINTS_FOR_VIEW, "–ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        
        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        content_emoji = EMOJI.get('fire', 'üî•') if content_type == 'MEME' else EMOJI.get('laugh', 'üòÇ')
        
        response_text = f"{content_emoji} <b>{'–ú–µ–º' if content_type == 'MEME' else '–ê–Ω–µ–∫–¥–æ—Ç'}:</b>\n\n"
        response_text += f"{content.text}\n\n"
        
        if points_awarded:
            response_text += f"üí∞ <i>+{POINTS_FOR_VIEW} –±–∞–ª –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥!</i>\n"
        
        response_text += f"üëÅ‚Äçüó® –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {content.views}\n"
        response_text += f"üëç –õ–∞–π–∫—ñ–≤: {content.likes} | üëé –î–∏–∑–ª–∞–π–∫—ñ–≤: {content.dislikes}"
        
        # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
        keyboard = get_content_keyboard(content.id, content_type.lower())
        
        if content.file_id:
            # –Ø–∫—â–æ —î —Ñ–∞–π–ª (–º–µ–º-–∫–∞—Ä—Ç–∏–Ω–∫–∞)
            await message.answer_photo(
                photo=content.file_id,
                caption=response_text,
                reply_markup=keyboard
            )
        else:
            # –¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await message.answer(
                text=response_text,
                reply_markup=keyboard
            )
        
        logger.info(f"üìù –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ {content_type.lower()} #{content.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        await message.answer(
            f"{EMOJI.get('warning', '‚ö†Ô∏è')} –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ {'–º–µ–º–∞' if content_type == 'MEME' else '–∞–Ω–µ–∫–¥–æ—Ç—É'}.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

async def cmd_submit(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /submit - –ø–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    command_args = message.text.split(' ', 1)
    
    if len(command_args) > 1:
        # –Ñ —Ç–µ–∫—Å—Ç - –¥–æ–¥–∞—Ç–∏ —è–∫ –∞–Ω–µ–∫–¥–æ—Ç
        content_text = command_args[1].strip()
        await submit_content_text(message, content_text, "JOKE")
    else:
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –≤–∏–±–æ—Ä—É
        await message.answer(
            f"{EMOJI.get('star', '‚≠ê')} <b>–ü—Ä–∏–≤—ñ—Ç, {first_name}!</b>\n\n"
            f"–•–æ—á–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤–æ—ó–º –≥—É–º–æ—Ä–æ–º? –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:\n\n"
            f"üéØ <b>–ó–∞ —É—Å–ø—ñ—à–Ω—É –ø–æ–¥–∞—á—É –∫–æ–Ω—Ç–µ–Ω—Ç—É:</b>\n"
            f"‚Ä¢ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É\n"
            f"‚Ä¢ +20 –±–∞–ª—ñ–≤ —è–∫—â–æ —Å—Ö–≤–∞–ª—è—Ç—å\n"
            f"‚Ä¢ +50 –±–∞–ª—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –≤ –¢–û–ü\n\n"
            f"–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?",
            reply_markup=get_content_submission_keyboard()
        )

async def submit_content_text(message: Message, content_text: str, content_type: str = "JOKE"):
    """–ü–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"
    
    try:
        from database import add_content_for_moderation
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if len(content_text) < 10:
            await message.answer(
                f"{EMOJI.get('warning', '‚ö†Ô∏è')} {'–ñ–∞—Ä—Ç' if content_type == 'JOKE' else '–ú–µ–º'} –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π!\n"
                f"–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            return
        
        if len(content_text) > 1000:
            await message.answer(
                f"{EMOJI.get('warning', '‚ö†Ô∏è')} {'–ñ–∞—Ä—Ç' if content_type == 'JOKE' else '–ú–µ–º'} –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π!\n"
                f"–ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤. –°–∫–æ—Ä–æ—Ç—ñ—Ç—å —Ç–µ–∫—Å—Ç."
            )
            return
        
        # –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
        content = await add_content_for_moderation(
            author_id=user_id,
            content_text=content_text,
            content_type=content_type
        )
        
        if content:
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∑–∞ –ø–æ–¥–∞—á—É
            points_awarded = await award_points(user_id, POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            
            response_text = (
                f"{EMOJI.get('check', '‚úÖ')} <b>{'–ñ–∞—Ä—Ç' if content_type == 'JOKE' else '–ú–µ–º'} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                f"üìù <i>–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:</i>\n{content_text[:100]}{'...' if len(content_text) > 100 else ''}\n\n"
            )
            
            if points_awarded:
                response_text += f"üí∞ <b>+{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É!</b>\n"
                response_text += f"üíé –î–æ–¥–∞—Ç–∫–æ–≤–æ +20 –±–∞–ª—ñ–≤ —è–∫—â–æ —Å—Ö–≤–∞–ª—è—Ç—å\n\n"
            
            response_text += (
                f"‚è≥ –ó–∞—Ä–∞–∑ {'–∂–∞—Ä—Ç' if content_type == 'JOKE' else '–º–µ–º'} —Ä–æ–∑–≥–ª—è–¥–∞—î –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.\n"
                f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
                f"üöÄ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —â–µ –∫–æ–Ω—Ç–µ–Ω—Ç —â–æ–± –∑–±–∏—Ä–∞—Ç–∏ –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤!"
            )
            
            await message.answer(response_text)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            try:
                from config.settings import settings
                admin_id = getattr(settings, 'ADMIN_ID', None)
                
                if admin_id:
                    admin_text = (
                        f"{EMOJI.get('crown', 'üëë')} <b>–ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                        f"üë§ –ê–≤—Ç–æ—Ä: {message.from_user.first_name} (@{username})\n"
                        f"üÜî ID: {user_id}\n"
                        f"üìù –¢–∏–ø: {'–ñ–∞—Ä—Ç' if content_type == 'JOKE' else '–ú–µ–º'}\n\n"
                        f"<i>{content_text}</i>\n\n"
                        f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /pending –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"
                    )
                    
                    from aiogram import Bot
                    bot = message.bot
                    await bot.send_message(admin_id, admin_text)
                    
            except Exception:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            
            logger.info(f"üì§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ {content_type.lower()} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
            
        else:
            await message.answer(
                f"{EMOJI.get('cross', '‚ùå')} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ {'–∂–∞—Ä—Ç—É' if content_type == 'JOKE' else '–º–µ–º—É'}.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        await message.answer(
            f"{EMOJI.get('cross', '‚ùå')} –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

# ===== CALLBACK –•–ï–ù–î–õ–ï–†–ò =====

async def callback_like_content(callback_query: CallbackQuery):
    """–õ–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await handle_content_reaction(callback_query, "like", "–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è")

async def callback_dislike_content(callback_query: CallbackQuery):
    """–î–∏–∑–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await handle_content_reaction(callback_query, "dislike", "–Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è")

async def handle_content_reaction(callback_query: CallbackQuery, action: str, action_text: str):
    """–û–±—Ä–æ–±–∏—Ç–∏ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    user_id = callback_query.from_user.id
    data_parts = callback_query.data.split('_')
    
    if len(data_parts) != 3:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
        return
    
    content_id = int(data_parts[2])
    
    try:
        # –ó–∞–ø–∏—Å–∞—Ç–∏ –≤–∑–∞—î–º–æ–¥—ñ—é
        interaction_recorded = await record_content_interaction(user_id, content_id, action)
        
        if interaction_recorded:
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏
            points_awarded = await award_points(user_id, POINTS_FOR_REACTION, f"—Ä–µ–∞–∫—Ü—ñ—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç")
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            from database import get_content_by_id
            content = await get_content_by_id(content_id)
            
            if content:
                # –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏
                if action == "like":
                    content.likes += 1
                elif action == "dislike":
                    content.dislikes += 1
                
                # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏
                from database import get_db_session
                with get_db_session() as session:
                    session.merge(content)
                    session.commit()
            
            emoji = EMOJI.get('thumbs_up', 'üëç') if action == 'like' else EMOJI.get('thumbs_down', 'üëé')
            points_text = f" (+{POINTS_FOR_REACTION} –±–∞–ª—ñ–≤)" if points_awarded else ""
            
            await callback_query.answer(
                f"{emoji} {action_text.capitalize()}{points_text}!",
                show_alert=False
            )
            
            logger.info(f"üëç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—Å—Ç–∞–≤–∏–≤ {action} –∫–æ–Ω—Ç–µ–Ω—Ç—É #{content_id}")
        else:
            await callback_query.answer(
                f"‚ö†Ô∏è –í–∏ –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!",
                show_alert=True
            )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: {e}")
        await callback_query.answer(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ü—ñ–Ω—Ü—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É",
            show_alert=True
        )

async def callback_share_content(callback_query: CallbackQuery):
    """–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    user_id = callback_query.from_user.id
    data_parts = callback_query.data.split('_')
    
    if len(data_parts) != 3:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
        return
    
    content_id = int(data_parts[2])
    
    try:
        from database import get_content_by_id
        content = await get_content_by_id(content_id)
        
        if content:
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—ñ–ª–µ–Ω–Ω—è
            share_text = f"üòÇ –ö–ª–∞—Å–Ω–∏–π –∂–∞—Ä—Ç –∑ @BobikFun_bot:\n\n{content.text}"
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
            share_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üì¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è",
                    url=f"https://t.me/share/url?url={share_text.replace(' ', '%20')}"
                )]
            ])
            
            await callback_query.message.edit_reply_markup(reply_markup=share_keyboard)
            await callback_query.answer("üöÄ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –ø–æ–¥—ñ–ª–µ–Ω–Ω—è!")
            
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∞–≤—Ç–æ—Ä—É –∑–∞ –ø–æ–¥—ñ–ª–µ–Ω–Ω—è
            await award_points(content.author_id, 2, "–ø–æ–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            
        else:
            await callback_query.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–¥—ñ–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", show_alert=True)

async def callback_get_more_content(callback_query: CallbackQuery):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —â–µ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    data_parts = callback_query.data.split('_')
    
    if len(data_parts) != 2:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)
        return
    
    content_type = data_parts[1].upper()
    
    # –Ü–º—ñ—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    await send_random_content(callback_query.message, content_type)
    await callback_query.answer("üî• –û—Å—å –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç!")

async def callback_submit_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –∂–∞—Ä—Ç—É"""
    await callback_query.message.answer(
        f"{EMOJI.get('laugh', 'üòÇ')} <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç!</b>\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç –∂–∞—Ä—Ç—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.\n\n"
        f"üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n"
        f"‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"‚Ä¢ –ë–µ–∑ –æ–±—Ä–∞–∑–ª–∏–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        f"‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–∞ —Å–º—ñ—à–Ω–∏–π\n\n"
        f"üí∞ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É!"
    )
    await callback_query.answer()

async def callback_submit_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –º–µ–º—É"""
    await callback_query.message.answer(
        f"{EMOJI.get('fire', 'üî•')} <b>–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –º–µ–º!</b>\n\n"
        f"–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏:\n"
        f"‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n"
        f"‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–∏–π –º–µ–º\n"
        f"‚Ä¢ GIF –∑ –æ–ø–∏—Å–æ–º\n\n"
        f"üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n"
        f"‚Ä¢ –Ø–∫—ñ—Å–Ω–∏–π —Ç–∞ —Å–º—ñ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"‚Ä¢ –ë–µ–∑ –∞–≤—Ç–æ—Ä—Å—å–∫–∏—Ö –ø—Ä–∞–≤\n"
        f"‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n\n"
        f"üí∞ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É!"
    )
    await callback_query.answer()

async def callback_submission_help(callback_query: CallbackQuery):
    """–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    help_text = (
        f"{EMOJI.get('info', '‚ÑπÔ∏è')} <b>–Ø–∫ –ø—Ä–∞—Ü—é—î –ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É:</b>\n\n"
        f"1Ô∏è‚É£ <b>–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è</b>\n"
        f"   ‚Ä¢ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        f"   ‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –∂–∞—Ä—Ç –∞–±–æ –º–µ–º\n"
        f"   ‚Ä¢ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –≤—ñ–¥—Ä–∞–∑—É\n\n"
        f"2Ô∏è‚É£ <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è</b>\n"
        f"   ‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"   ‚Ä¢ –°—Ö–≤–∞–ª—é—î –∞–±–æ –≤—ñ–¥—Ö–∏–ª—è—î\n"
        f"   ‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        f"3Ô∏è‚É£ <b>–ù–∞–≥–æ—Ä–æ–¥–∏</b>\n"
        f"   ‚Ä¢ +20 –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è\n"
        f"   ‚Ä¢ +50 –±–∞–ª—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä–∞–ø–∏—Ç—å –≤ –¢–û–ü\n"
        f"   ‚Ä¢ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –±–∞—á–∞—Ç—å –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n\n"
        f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –¢—ñ–ª—å–∫–∏ —è–∫—ñ—Å–Ω–∏–π —Ç–∞ —Å–º—ñ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
        f"‚Ä¢ –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏\n"
        f"‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        f"üöÄ –ß–∏–º –±—ñ–ª—å—à–µ —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É - —Ç–∏–º –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤!"
    )
    
    await callback_query.message.answer(help_text)
    await callback_query.answer()

# ===== –û–ë–†–û–ë–ö–ê –ú–ï–î–Ü–ê =====

async def handle_photo_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ (–º–µ–º)"""
    if message.caption:
        # –§–æ—Ç–æ –∑ –ø—ñ–¥–ø–∏—Å–æ–º
        content_text = message.caption.strip()
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        if len(content_text) < 5:
            await message.answer(
                f"{EMOJI.get('warning', '‚ö†Ô∏è')} –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ –º–µ–º—É!\n"
                f"–ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        user_id = message.from_user.id
        
        try:
            from database import add_content_for_moderation
            
            # –î–æ–¥–∞—Ç–∏ –º–µ–º –∑ —Ñ–∞–π–ª–æ–º
            content = await add_content_for_moderation(
                author_id=user_id,
                content_text=content_text,
                content_type="MEME",
                file_id=message.photo[-1].file_id  # –ù–∞–π–±—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä
            )
            
            if content:
                await award_points(user_id, POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –º–µ–º—É")
                
                await message.answer(
                    f"{EMOJI.get('check', '‚úÖ')} <b>–ú–µ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                    f"üí∞ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É!\n"
                    f"‚è≥ –ß–µ–∫–∞–π—Ç–µ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
                )
                
                logger.info(f"üì∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –º–µ–º –∑ —Ñ–æ—Ç–æ")
            else:
                await message.answer(
                    f"{EMOJI.get('cross', '‚ùå')} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –º–µ–º—É."
                )
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                f"{EMOJI.get('cross', '‚ùå')} –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –º–µ–º—É."
            )
    else:
        await message.answer(
            f"{EMOJI.get('info', '‚ÑπÔ∏è')} –î–æ–¥–∞–π—Ç–µ –æ–ø–∏—Å –¥–æ –º–µ–º—É –≤ –ø—ñ–¥–ø–∏—Å—ñ –¥–æ —Ñ–æ—Ç–æ!"
        )

async def handle_text_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
    if message.text.startswith('/'):
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ–≤–∂–∏–Ω—É
    if len(message.text) >= 10:
        # –ó–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∏ —è–∫ –∂–∞—Ä—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"‚úÖ –¢–∞–∫, –¥–æ–¥–∞—Ç–∏ —è–∫ –∂–∞—Ä—Ç (+{POINTS_FOR_SUBMISSION})",
                    callback_data=f"confirm_submit_joke_{message.message_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ù—ñ, —Ü–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                    callback_data="cancel_submit"
                )
            ]
        ])
        
        await message.answer(
            f"{EMOJI.get('star', '‚≠ê')} –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ –∂–∞—Ä—Ç!\n\n"
            f"–•–æ—á–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é?\n"
            f"üí∞ +{POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É!",
            reply_markup=keyboard
        )

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_like_content, F.data.startswith("like_"))
    dp.callback_query.register(callback_dislike_content, F.data.startswith("dislike_"))
    dp.callback_query.register(callback_share_content, F.data.startswith("share_"))
    dp.callback_query.register(callback_get_more_content, F.data.startswith("get_"))
    
    dp.callback_query.register(callback_submit_joke, F.data == "submit_joke")
    dp.callback_query.register(callback_submit_meme, F.data == "submit_meme")
    dp.callback_query.register(callback_submission_help, F.data == "submission_help")
    
    # –û–±—Ä–æ–±–∫–∞ –º–µ–¥—ñ–∞
    dp.message.register(handle_photo_submission, F.photo)
    
    # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É (–º–∞—î –±—É—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–º)
    dp.message.register(handle_text_submission, F.text & ~F.text.startswith("/"))
    
    logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")