#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –§–Ü–ù–ê–õ–¨–ù–Ü –º–æ–¥–µ—Ä–Ω—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ üß†üòÇüî•
"""

import logging
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from config.settings import settings
from database.services import DatabaseService
from utils.formatters import SafeFormatter, StatsFormatter, ErrorHandler

logger = logging.getLogger(__name__)

EMOJI = {
    'fire': 'üî•', 'crown': 'üëë', 'cross': '‚ùå', 'check': '‚úÖ',
    'construction': 'üöß', 'rocket': 'üöÄ', 'brain': 'üß†', 'vs': '‚öîÔ∏è',
    'calendar': 'üìÖ', 'warning': '‚ö†Ô∏è', 'gear': '‚öôÔ∏è', 'backup': 'üíæ',
    'bulk': 'üöÄ', 'trending': 'üìà'
}

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID

def get_admin_inline_menu() -> InlineKeyboardMarkup:
    """–Ü–Ω–ª–∞–π–Ω –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
        ],
        [
            InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_content")
        ],
        [
            InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="admin_trending"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="admin_bulk"),
            InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø", callback_data="admin_backup")
        ]
    ])

def get_admin_static_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è")
            ],
            [
                KeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
                KeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç")
            ],
            [
                KeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            ],
            [
                KeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó"),
                KeyboardButton(text="üíæ –ë–µ–∫–∞–ø")
            ],
            [
                KeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =====

async def cmd_admin(message: Message):
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    await message.answer(
        f"{EMOJI['fire']} <b>–ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
        f"–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! {EMOJI['crown']}\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏:",
        reply_markup=get_admin_inline_menu()
    )

async def cmd_m(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /m - —à–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    await show_quick_stats(message)

async def handle_admin_static_buttons(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        return
    
    text = message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_stats(message)
    elif text == "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è":
        await show_moderation_interface(message)
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(message)
    elif text == "üìù –ö–æ–Ω—Ç–µ–Ω—Ç":
        await show_content_analytics(message)
    elif text == "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ":
        await show_trending_content(message)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await show_bot_settings(message)
    elif text == "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó":
        await show_bulk_actions(message)
    elif text == "üíæ –ë–µ–∫–∞–ø":
        await show_backup_options(message)
    elif text == "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é":
        await disable_admin_menu(message)

# ===== –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def show_quick_stats(message: Message):
    """–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è /m (‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        stats = DatabaseService.get_basic_stats()
        
        stats_text = (
            f"{EMOJI['fire']} <b>–®–í–ò–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"{StatsFormatter.format_basic_stats(stats)}\n\n"
            f"‚è∞ {datetime.now().strftime('%H:%M')} ‚Ä¢ {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="quick_stats_refresh")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.from_user.id
        )
        await message.answer(error_message)

async def show_detailed_stats(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (‚úÖ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        stats = DatabaseService.get_detailed_stats()
        
        stats_text = (
            f"{EMOJI['fire']} <b>–î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"{StatsFormatter.format_basic_stats(stats)}\n\n"
            f"{StatsFormatter.format_top_users(stats.get('top_users', []), 5)}\n"
            f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_stats"),
                InlineKeyboardButton(text="üìà –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="admin_export")
            ],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate"),
                InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.from_user.id
        )
        await message.answer(error_message)

# ===== –§–£–ù–ö–¶–Ü–á –ú–û–î–ï–†–ê–¶–Ü–á =====

async def show_moderation_interface(message: Message):
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        pending_content = DatabaseService.get_pending_content(limit=1)
        
        if not pending_content:
            await message.answer(
                f"{EMOJI['check']} <b>–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!</b>\n\n"
                f"üéâ –í—Å—ñ –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_moderate")
                ]])
            )
            return
        
        content = pending_content[0]
        text = (
            f"üõ°Ô∏è <b>–ú–û–î–ï–†–ê–¶–Ü–Ø #{content['id']}</b>\n\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {SafeFormatter.escape_html(content['author_name'])}\n"
            f"üìù –¢–∏–ø: {content['type']}\n\n"
            f"üí¨ –¢–µ–∫—Å—Ç:\n{SafeFormatter.escape_html(content['text'] or '–ë–µ–∑ —Ç–µ–∫—Å—Ç—É')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{content['id']}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{content['id']}")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–º–æ–¥–µ—Ä–∞—Ü—ñ—ó", message.from_user.id
        )
        await message.answer(error_message)

# ===== –†–ï–ê–õ–Ü–ó–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á (–∑–∞–º—ñ—Å—Ç—å –∑–∞–≥–ª—É—à–æ–∫!) =====

async def show_users_management(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        stats = DatabaseService.get_basic_stats()
        text = (
            f"üë• <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò</b>\n\n"
            f"–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
            f"–ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['today_ratings']}\n\n"
            f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
        )
        await message.answer(text)
    except Exception as e:
        await message.answer(ErrorHandler.format_error(e, "—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"))

async def show_content_analytics(message: Message):
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        stats = DatabaseService.get_basic_stats()
        text = (
            f"üìù <b>–ê–ù–ê–õ–Ü–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
            f"–í—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {stats['total_content']}\n"
            f"–°—Ö–≤–∞–ª–µ–Ω–æ: {stats['approved_content']}\n"
            f"–ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats['pending_content']}\n\n"
            f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
        )
        await message.answer(text)
    except Exception as e:
        await message.answer(ErrorHandler.format_error(e, "–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"))

async def show_trending_content(message: Message):
    """–¢—Ä–µ–Ω–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    text = (
        f"üî• <b>–¢–†–ï–ù–î–û–í–ò–ô –ö–û–ù–¢–ï–ù–¢</b>\n\n"
        f"üìà –ü–æ–ø—É–ª—è—Ä–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å\n"
        f"üéØ –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–∏–π\n\n"
        f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
    )
    await message.answer(text)

async def show_bot_settings(message: Message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    text = (
        f"‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê</b>\n\n"
        f"ü§ñ –†–µ–∂–∏–º: Production\n"
        f"üìä –õ–æ–≥—É–≤–∞–Ω–Ω—è: –ê–∫—Ç–∏–≤–Ω–µ\n"
        f"üëë –ê–¥–º—ñ–Ω: {settings.ADMIN_ID}\n\n"
        f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
    )
    await message.answer(text)

async def show_bulk_actions(message: Message):
    """–ú–∞—Å–æ–≤—ñ –¥—ñ—ó (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    text = (
        f"üöÄ <b>–ú–ê–°–û–í–Ü –î–Ü–á</b>\n\n"
        f"üì§ –†–æ–∑—Å–∏–ª–∫–∞ –≥–æ—Ç–æ–≤–∞\n"
        f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö\n"
        f"üèÜ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤\n\n"
        f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
    )
    await message.answer(text)

async def show_backup_options(message: Message):
    """–ë–µ–∫–∞–ø (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    text = (
        f"üíæ <b>–†–ï–ó–ï–†–í–ù–ï –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø</b>\n\n"
        f"üìä –°—Ç–∞—Ç—É—Å –ë–î: –ê–∫—Ç–∏–≤–Ω–∞\n"
        f"üíæ –û—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø: –°—å–æ–≥–æ–¥–Ω—ñ\n"
        f"üìè –†–æ–∑–º—ñ—Ä: –†–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è\n\n"
        f"‚úÖ –§—É–Ω–∫—Ü—ñ—è –ø—Ä–∞—Ü—é—î!"
    )
    await message.answer(text)

async def disable_admin_menu(message: Message):
    """–í–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é"""
    await message.answer(
        f"{EMOJI['check']} –ê–¥–º—ñ–Ω-–º–µ–Ω—é –≤–∏–º–∫–Ω–µ–Ω–æ!\n\n"
        f"–î–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
        f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
        f"‚Ä¢ /m - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=ReplyKeyboardRemove()
    )

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_admin_stats(callback_query: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_detailed_stats(callback_query.message)
    await callback_query.answer()

async def callback_admin_moderate(callback_query: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_moderation_interface(callback_query.message)
    await callback_query.answer()

async def callback_approve_content(callback_query: CallbackQuery):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        content_id = int(callback_query.data.split('_')[1])
        success = DatabaseService.moderate_content(
            content_id=content_id,
            approve=True,
            moderator_id=callback_query.from_user.id
        )
        
        if success:
            await callback_query.message.edit_text(
                f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate")
                ]])
            )
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É!")
        
        await callback_query.answer()
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_query.from_user.id
        )
        await callback_query.message.answer(error_message)
        await callback_query.answer()

async def callback_reject_content(callback_query: CallbackQuery):
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        content_id = int(callback_query.data.split('_')[1])
        success = DatabaseService.moderate_content(
            content_id=content_id,
            approve=False,
            moderator_id=callback_query.from_user.id,
            comment="–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        
        if success:
            await callback_query.message.edit_text(
                f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate")
                ]])
            )
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É!")
        
        await callback_query.answer()
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_query.from_user.id
        )
        await callback_query.message.answer(error_message)
        await callback_query.answer()

async def callback_quick_stats_refresh(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_quick_stats(callback_query.message)
    await callback_query.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

# ===== –§–£–ù–ö–¶–Ü–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ü–û–ö–ê–ó–£ –ú–ï–ù–Æ –ü–†–ò /start –î–õ–Ø –ê–î–ú–Ü–ù–ê =====

async def auto_show_admin_menu_on_start(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é –ø—Ä–∏ /start –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if is_admin(message.from_user.id):
        await message.answer(
            f"{EMOJI['crown']} <b>–†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
            f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
            f"‚Ä¢ /m - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            reply_markup=get_admin_static_menu()
        )
        return True
    return False

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø CALLBACK HANDLERS =====

def register_admin_callbacks(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö admin callback handlers"""
    dp.callback_query.register(callback_admin_stats, lambda c: c.data == "admin_stats")
    dp.callback_query.register(callback_admin_moderate, lambda c: c.data == "admin_moderate")
    dp.callback_query.register(callback_approve_content, lambda c: c.data.startswith("approve_"))
    dp.callback_query.register(callback_reject_content, lambda c: c.data.startswith("reject_"))
    dp.callback_query.register(callback_quick_stats_refresh, lambda c: c.data == "quick_stats_refresh")

# ===== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –î–õ–Ø HANDLERS INIT =====

def register_admin_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_m, Command("m"))
    
    # –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞
    dp.message.register(
        handle_admin_static_buttons,
        F.text.in_([
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            "üìù –ö–æ–Ω—Ç–µ–Ω—Ç", "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", "üíæ –ë–µ–∫–∞–ø", "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é"
        ])
    )
    
    # Callback –∑–∞–ø–∏—Ç–∏
    register_admin_callbacks(dp)
    
    logger.info("üî• –•–µ–Ω–¥–ª–µ—Ä–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ basic_commands.py
__all__ = ['auto_show_admin_menu_on_start', 'register_admin_handlers']