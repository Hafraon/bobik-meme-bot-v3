#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –°—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é + —Ä–æ–∑—à–∏—Ä–µ–Ω–∞ –ø–∞–Ω–µ–ª—å üß†üòÇüî•
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)

from config.settings import settings, EMOJI

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID

def get_admin_static_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞ (–∑–∞–≤–∂–¥–∏ –≤–∏–¥–∏–º–µ)"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è"),
                KeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
            ],
            [
                KeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç"),
                KeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            ],
            [
                KeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó"),
                KeyboardButton(text="üíæ –ë–µ–∫–∞–ø"),
                KeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É..."
    )

def get_admin_inline_menu() -> InlineKeyboardMarkup:
    """–Ü–Ω–ª–∞–π–Ω –º–µ–Ω—é –∞–¥–º—ñ–Ω–∞ (–∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /admin)"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
        ],
        [
            InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_content")
        ],
        [
            InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="admin_trending"),
            InlineKeyboardButton(text="‚≠ê –ü–æ–ø—É–ª—è—Ä–Ω–µ", callback_data="admin_popular")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings"),
            InlineKeyboardButton(text="üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="admin_analytics")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="admin_bulk"),
            InlineKeyboardButton(text="üíæ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", callback_data="admin_backup")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä–∏—Ç–∏", callback_data="admin_close")
        ]
    ])

# ===== –ö–û–ú–ê–ù–î–ò –ê–î–ú–Ü–ù–ê =====

async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –ø–æ–≤–Ω–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    await message.answer(
        f"{EMOJI['fire']} <b>–ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
        f"–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! {EMOJI['crown']}\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏:",
        reply_markup=get_admin_inline_menu()
    )

async def cmd_m(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /m - —à–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await show_quick_stats(message)

async def handle_admin_static_buttons(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        return
    
    text = message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_stats(message)
    elif text == "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è":
        await show_moderation_interface(message)
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(message)
    elif text == "üìù –ö–æ–Ω—Ç–µ–Ω—Ç":
        await show_content_analytics(message)
    elif text == "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ":
        await show_trending_content(message)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await show_bot_settings(message)
    elif text == "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó":
        await show_bulk_actions(message)
    elif text == "üíæ –ë–µ–∫–∞–ø":
        await show_backup_options(message)
    elif text == "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é":
        await disable_admin_menu(message)

# ===== –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def show_quick_stats(message: Message):
    """–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è /m"""
    try:
        from database.database import get_db_session
        
        with get_db_session() as session:
            from database.models import User, Content, Rating
            
            # –®–≤–∏–¥–∫—ñ –º–µ—Ç—Ä–∏–∫–∏
            total_users = session.query(User).count()
            total_content = session.query(Content).count()
            pending_content = session.query(Content).filter(Content.status == "pending").count()
            
            # –°—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            today = datetime.utcnow().date()
            today_ratings = session.query(Rating).filter(
                Rating.created_at >= datetime.combine(today, datetime.min.time())
            ).count()
        
        stats_text = (
            f"{EMOJI['fire']} <b>–®–í–ò–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {total_content}\n"
            f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_content}\n"
            f"üíñ –û—Ü—ñ–Ω–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_ratings}\n\n"
            f"‚è∞ {datetime.now().strftime('%H:%M')} ‚Ä¢ {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="quick_stats_refresh")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def show_detailed_stats(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        from database.database import get_db_session
        
        with get_db_session() as session:
            from database.models import User, Content, Rating
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = session.query(User).count()
            total_content = session.query(Content).count()
            pending_content = session.query(Content).filter(Content.status == "pending").count()
            approved_content = session.query(Content).filter(Content.status == "approved").count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.utcnow().date()
            today_ratings = session.query(Rating).filter(
                Rating.created_at >= datetime.combine(today, datetime.min.time())
            ).count()
            
            # –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            week_ago = datetime.utcnow() - timedelta(days=7)
            active_users = session.query(User).filter(User.last_active >= week_ago).count()
            
            # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            top_users = session.query(User).order_by(User.points.desc()).limit(5).all()
        
        stats_text = (
            f"{EMOJI['fire']} <b>–î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ (7 –¥–Ω—ñ–≤): {active_users}\n\n"
            f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
            f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_content}\n"
            f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_content}\n"
            f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_content}\n\n"
            f"üìä <b>–°—å–æ–≥–æ–¥–Ω—ñ:</b>\n"
            f"‚Ä¢ –û—Ü—ñ–Ω–æ–∫: {today_ratings}\n\n"
            f"üèÜ <b>–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
        )
        
        for i, user in enumerate(top_users, 1):
            name = user.first_name or user.username or f"ID{user.id}"
            stats_text += f"{i}. {name}: {user.points} –±–∞–ª—ñ–≤\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_stats"),
                InlineKeyboardButton(text="üìà –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="admin_export")
            ],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate"),
                InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –ú–û–î–ï–†–ê–¶–Ü–á =====

async def show_moderation_interface(message: Message):
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        from database.database import get_db_session
        
        with get_db_session() as session:
            from database.models import Content, User
            
            pending_content = session.query(Content).filter(Content.status == "pending").all()
            
            if not pending_content:
                await message.answer(
                    f"{EMOJI['check']} <b>–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!</b>\n\n"
                    f"üéâ –í—Å—ñ –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_moderate")
                    ]])
                )
                return
            
            content = pending_content[0]  # –ü–µ—Ä—à–∏–π –≤ —á–µ—Ä–∑—ñ
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
            author = session.query(User).filter(User.id == content.author_id).first()
            
            author_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            author_stats = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            if author:
                author_name = author.first_name or author.username or f"ID{author.id}"
                author_stats = f"–ë–∞–ª—ñ–≤: {author.points}"
            
            content_type = "–ê–Ω–µ–∫–¥–æ—Ç" if content.content_type == "joke" else "–ú–µ–º"
            
            moderation_text = (
                f"{EMOJI['brain']} <b>–ú–û–î–ï–†–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
                f"üìù <b>–¢–∏–ø:</b> {content_type}\n"
                f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author_name}\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {author_stats}\n"
                f"üïê <b>–ù–∞–¥—ñ—Å–ª–∞–Ω–æ:</b> {content.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üìÑ <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n{content.text}\n\n"
                f"‚è≥ <b>–í —á–µ—Ä–∑—ñ:</b> {len(pending_content)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{content.id}"),
                    InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{content.id}")
                ],
                [
                    InlineKeyboardButton(text="‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate"),
                    InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_moderate")
                ]
            ])
            
            await message.answer(moderation_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")

# ===== STUB –§–£–ù–ö–¶–Ü–á (–ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ) =====

async def show_users_management(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def show_content_analytics(message: Message):
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def show_trending_content(message: Message):
    """–¢—Ä–µ–Ω–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def show_bot_settings(message: Message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def show_bulk_actions(message: Message):
    """–ú–∞—Å–æ–≤—ñ –¥—ñ—ó - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def show_backup_options(message: Message):
    """–ë–µ–∫–∞–ø - –ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∞"""
    await message.answer(f"{EMOJI['construction']} –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...")

async def disable_admin_menu(message: Message):
    """–í–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é"""
    await message.answer(
        f"{EMOJI['check']} –ê–¥–º—ñ–Ω-–º–µ–Ω—é –≤–∏–º–∫–Ω–µ–Ω–æ!\n\n"
        f"–î–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
        f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
        f"‚Ä¢ /m - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=ReplyKeyboardRemove()
    )

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_admin_stats(callback_query: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_detailed_stats(callback_query.message)
    await callback_query.answer()

async def callback_admin_moderate(callback_query: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_moderation_interface(callback_query.message)
    await callback_query.answer()

async def callback_approve_content(callback_query: CallbackQuery):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        content_id = int(callback_query.data.split("_")[1])
        
        # –°—Ö–≤–∞–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ë–î
        from database.database import get_db_session
        
        with get_db_session() as session:
            from database.models import Content
            
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                content.status = "approved"
                session.commit()
                
                await callback_query.answer(f"{EMOJI['check']} –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ!")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                await show_moderation_interface(callback_query.message)
            else:
                await callback_query.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è")

async def callback_reject_content(callback_query: CallbackQuery):
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        content_id = int(callback_query.data.split("_")[1])
        
        # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ë–î
        from database.database import get_db_session
        
        with get_db_session() as session:
            from database.models import Content
            
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                content.status = "rejected"
                session.commit()
                
                await callback_query.answer(f"{EMOJI['cross']} –ö–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")
                
                # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                await show_moderation_interface(callback_query.message)
            else:
                await callback_query.answer("–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")

async def callback_quick_stats_refresh(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_quick_stats(callback_query.message)
    await callback_query.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

# ===== –§–£–ù–ö–¶–Ü–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ü–û–ö–ê–ó–£ –ú–ï–ù–Æ –ü–†–ò /start –î–õ–Ø –ê–î–ú–Ü–ù–ê =====

async def auto_show_admin_menu_on_start(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é –ø—Ä–∏ /start –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if is_admin(message.from_user.id):
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é
        await message.answer(
            f"{EMOJI['crown']} <b>–†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
            f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
            f"‚Ä¢ /m - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            reply_markup=get_admin_static_menu()
        )
        return True
    return False

def register_admin_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_m, Command("m"))
    
    # –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞
    dp.message.register(
        handle_admin_static_buttons,
        F.text.in_([
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
            "üìù –ö–æ–Ω—Ç–µ–Ω—Ç", "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
            "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", "üíæ –ë–µ–∫–∞–ø", "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é"
        ])
    )
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_admin_stats, F.data == "admin_stats")
    dp.callback_query.register(callback_admin_moderate, F.data == "admin_moderate")
    dp.callback_query.register(callback_approve_content, F.data.startswith("approve_"))
    dp.callback_query.register(callback_reject_content, F.data.startswith("reject_"))
    dp.callback_query.register(callback_quick_stats_refresh, F.data == "quick_stats_refresh")
    
    logger.info("üî• –•–µ–Ω–¥–ª–µ—Ä–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")

# –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ basic_commands.py
__all__ = ['auto_show_admin_menu_on_start', 'register_admin_handlers']