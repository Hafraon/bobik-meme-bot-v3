#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ú–æ–¥–µ—Ä–Ω—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ (–í–ò–ü–†–ê–í–õ–ï–ù–û SQLAlchemy detached objects) üß†üòÇüî•
"""

import logging
from datetime import datetime
from typing import List, Dict, Any

from aiogram import types
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, 
    KeyboardButton, ReplyKeyboardRemove
)

from config.settings import settings
from database.services import DatabaseService
from utils.formatters import (
    SafeFormatter, StatsFormatter, ErrorHandler, 
    TableFormatter, ProgressFormatter
)

logger = logging.getLogger(__name__)

# –ï–º–æ–¥–∑—ñ –¥–ª—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
EMOJI = {
    'fire': 'üî•',
    'crown': 'üëë', 
    'cross': '‚ùå',
    'check': '‚úÖ',
    'construction': 'üöß',
    'rocket': 'üöÄ',
    'brain': 'üß†',
    'vs': '‚öîÔ∏è',
    'calendar': 'üìÖ',
    'warning': '‚ö†Ô∏è',
    'gear': '‚öôÔ∏è',
    'backup': 'üíæ',
    'bulk': 'üöÄ',
    'trending': 'üìà'
}

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_ids = [settings.ADMIN_ID]
    if hasattr(settings, 'ADDITIONAL_ADMINS'):
        admin_ids.extend(settings.ADDITIONAL_ADMINS)
    return user_id in admin_ids

def get_admin_inline_menu() -> InlineKeyboardMarkup:
    """–Ü–Ω–ª–∞–π–Ω –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
        ],
        [
            InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_content")
        ],
        [
            InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="admin_trending"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="admin_bulk"),
            InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø", callback_data="admin_backup")
        ]
    ])

def get_admin_static_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è")
            ],
            [
                KeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
                KeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç")
            ],
            [
                KeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ"),
                KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
            ],
            [
                KeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó"),
                KeyboardButton(text="üíæ –ë–µ–∫–∞–ø")
            ],
            [
                KeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
            ]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =====

async def cmd_admin(message: Message):
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(
            f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!"
        )
        return
    
    await message.answer(
        f"{EMOJI['fire']} <b>–ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨</b>\n\n"
        f"–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ! {EMOJI['crown']}\n"
        f"–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏:",
        reply_markup=get_admin_inline_menu()
    )

async def cmd_m(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /m - —à–≤–∏–¥–∫–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    await show_quick_stats(message)

async def handle_admin_static_buttons(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        return
    
    text = message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_stats(message)
    elif text == "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è":
        await show_moderation_interface(message)
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(message)
    elif text == "üìù –ö–æ–Ω—Ç–µ–Ω—Ç":
        await show_content_analytics(message)
    elif text == "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ":
        await show_trending_content(message)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await show_bot_settings(message)
    elif text == "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó":
        await show_bulk_actions(message)
    elif text == "üíæ –ë–µ–∫–∞–ø":
        await show_backup_options(message)
    elif text == "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é":
        await disable_admin_menu(message)

# ===== –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def show_quick_stats(message: Message):
    """–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è /m (‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
        stats = DatabaseService.get_basic_stats()
        
        stats_text = (
            f"{EMOJI['fire']} <b>–®–í–ò–î–ö–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"{StatsFormatter.format_basic_stats(stats)}\n\n"
            f"‚è∞ {datetime.now().strftime('%H:%M')} ‚Ä¢ {datetime.now().strftime('%d.%m.%Y')}"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="quick_stats_refresh")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.from_user.id
        )
        await message.answer(error_message)

async def show_detailed_stats(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (‚úÖ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        # ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–µ–∑–ø–µ—á–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
        stats = DatabaseService.get_detailed_stats()
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ë–ï–ó —Ä–æ–±–æ—Ç–∏ –∑ detached objects
        stats_text = (
            f"{EMOJI['fire']} <b>–î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            f"{StatsFormatter.format_basic_stats(stats)}\n\n"
            f"{StatsFormatter.format_top_users(stats.get('top_users', []), 5)}\n"
            f"‚è∞ –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        # –î–æ–¥–∞—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–∏–∂–Ω–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        weekly_activity = stats.get('weekly_activity', [])
        if weekly_activity:
            stats_text += f"\n\n{ProgressFormatter.format_weekly_activity(weekly_activity)}"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_stats"),
                InlineKeyboardButton(text="üìà –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö", callback_data="admin_export")
            ],
            [
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate"),
                InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", message.from_user.id
        )
        await message.answer(error_message)

# ===== –§–£–ù–ö–¶–Ü–á –ú–û–î–ï–†–ê–¶–Ü–á =====

async def show_moderation_interface(message: Message):
    """–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û)"""
    try:
        # ‚úÖ –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
        pending_content = DatabaseService.get_pending_content(limit=1)
        
        if not pending_content:
            await message.answer(
                f"{EMOJI['check']} <b>–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!</b>\n\n"
                f"üéâ –í—Å—ñ –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_moderate")
                ]])
            )
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        moderation_text = TableFormatter.format_pending_content(pending_content)
        
        content_id = pending_content[0]['id']
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", 
                    callback_data=f"approve_{content_id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", 
                    callback_data=f"reject_{content_id}"
                )
            ],
            [
                InlineKeyboardButton(text="‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
            ]
        ])
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–¥—ñ–∞ —è–∫—â–æ —î
        if pending_content[0].get('file_id'):
            await message.answer_photo(
                photo=pending_content[0]['file_id'],
                caption=moderation_text,
                reply_markup=keyboard
            )
        else:
            await message.answer(moderation_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–º–æ–¥–µ—Ä–∞—Ü—ñ—ó", message.from_user.id
        )
        await message.answer(error_message)

# ===== –†–ï–ê–õ–Ü–ó–û–í–ê–ù–Ü –§–£–ù–ö–¶–Ü–á (—Ä–∞–Ω—ñ—à–µ –±—É–ª–∏ stub) =====

async def show_users_management(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        users_data = DatabaseService.get_users_management_data(page=1, per_page=10)
        
        users_text = TableFormatter.format_users_table(users_data)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚óÄÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data="users_page_0"),
                InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", callback_data="users_page_2")
            ],
            [
                InlineKeyboardButton(text="üîç –ü–æ—à—É–∫", callback_data="users_search"),
                InlineKeyboardButton(text="üìä –ï–∫—Å–ø–æ—Ä—Ç", callback_data="users_export")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_users")
            ]
        ])
        
        await message.answer(users_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏", message.from_user.id
        )
        await message.answer(error_message)

async def show_content_analytics(message: Message):
    """–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        analytics = DatabaseService.get_content_analytics()
        
        analytics_text = StatsFormatter.format_content_analytics(analytics)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç", callback_data="content_detailed"),
                InlineKeyboardButton(text="üìä –ó–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏", callback_data="content_categories")
            ],
            [
                InlineKeyboardButton(text="üî• –ü–æ–ø—É–ª—è—Ä–Ω–µ", callback_data="content_popular"),
                InlineKeyboardButton(text="üìâ –ü—Ä–æ–±–ª–µ–º–Ω–µ", callback_data="content_issues")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_content")
            ]
        ])
        
        await message.answer(analytics_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É", message.from_user.id
        )
        await message.answer(error_message)

async def show_trending_content(message: Message):
    """–¢—Ä–µ–Ω–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        trending = DatabaseService.get_trending_content(days=7)
        
        trending_text = StatsFormatter.format_trending_content(trending)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –ó–∞ –¥–µ–Ω—å", callback_data="trending_1"),
                InlineKeyboardButton(text="üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="trending_7"),
                InlineKeyboardButton(text="üìÖ –ó–∞ –º—ñ—Å—è—Ü—å", callback_data="trending_30")
            ],
            [
                InlineKeyboardButton(text="üèÜ –ó—Ä–æ–±–∏—Ç–∏ –¢–û–ü–æ–º", callback_data="make_top"),
                InlineKeyboardButton(text="üì§ –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏", callback_data="publish_trending")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_trending")
            ]
        ])
        
        await message.answer(trending_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É", message.from_user.id
        )
        await message.answer(error_message)

async def show_bot_settings(message: Message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        settings_text = (
            f"{EMOJI['gear']} <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê</b>\n\n"
            f"ü§ñ –†–µ–∂–∏–º: {'–í–∏—Ä–æ–±–Ω–∏—á–∏–π' if settings.ENVIRONMENT == 'production' else '–†–æ–∑—Ä–æ–±–∫–∞'}\n"
            f"üìä –õ–æ–≥—É–≤–∞–Ω–Ω—è: {settings.LOG_LEVEL}\n"
            f"üïê –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {getattr(settings, 'TIMEZONE', 'UTC')}\n"
            f"üëë –ì–æ–ª–æ–≤–Ω–∏–π –∞–¥–º—ñ–Ω: {settings.ADMIN_ID}\n"
            f"üì¢ –ö–∞–Ω–∞–ª: {getattr(settings, 'CHANNEL_ID', '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ')}\n\n"
            f"‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="settings_notifications"),
                InlineKeyboardButton(text="‚è∞ –†–æ–∑–∫–ª–∞–¥", callback_data="settings_schedule")
            ],
            [
                InlineKeyboardButton(text="üéÆ –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è", callback_data="settings_gamification"),
                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="settings_moderation")
            ],
            [
                InlineKeyboardButton(text="ü§ñ OpenAI", callback_data="settings_ai"),
                InlineKeyboardButton(text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", callback_data="settings_analytics")
            ],
            [
                InlineKeyboardButton(text="üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="settings_save"),
                InlineKeyboardButton(text="üîÑ –°–∫–∏–Ω—É—Ç–∏", callback_data="settings_reset")
            ]
        ])
        
        await message.answer(settings_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", message.from_user.id
        )
        await message.answer(error_message)

async def show_bulk_actions(message: Message):
    """–ú–∞—Å–æ–≤—ñ –¥—ñ—ó (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        bulk_text = (
            f"{EMOJI['bulk']} <b>–ú–ê–°–û–í–Ü –î–Ü–á</b>\n\n"
            f"‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –ú–∞—Å–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –º–æ–∂—É—Ç—å –≤–ø–ª–∏–Ω—É—Ç–∏ –Ω–∞ –±–∞–≥–∞—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.\n"
            f"–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è–º.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì§ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="bulk_broadcast"),
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="bulk_cleanup")
            ],
            [
                InlineKeyboardButton(text="üèÜ –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤", callback_data="bulk_points"),
                InlineKeyboardButton(text="üìä –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∞–Ω–≥—ñ–≤", callback_data="bulk_ranks")
            ],
            [
                InlineKeyboardButton(text="üö´ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="bulk_ban"),
                InlineKeyboardButton(text="‚úÖ –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è", callback_data="bulk_unban")
            ],
            [
                InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="bulk_delete"),
                InlineKeyboardButton(text="üìà –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="bulk_stats")
            ],
            [
                InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_menu")
            ]
        ])
        
        await message.answer(bulk_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–º–∞—Å–æ–≤–∏—Ö –¥—ñ–π", message.from_user.id
        )
        await message.answer(error_message)

async def show_backup_options(message: Message):
    """–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è (‚úÖ –†–ï–ê–õ–Ü–ó–û–í–ê–ù–û)"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–∫–∞–∑—É –≤ backup —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
        stats = DatabaseService.get_basic_stats()
        
        backup_text = (
            f"{EMOJI['backup']} <b>–†–ï–ó–ï–†–í–ù–ï –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø</b>\n\n"
            f"üìä –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:\n"
            f"{StatsFormatter.format_basic_stats(stats)}\n\n"
            f"üíæ –û—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø: {'–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö'}\n"
            f"üìè –†–æ–∑–º—ñ—Ä –ë–î: {'–†–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è...'}\n\n"
            f"–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø", callback_data="backup_create"),
                InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="backup_download")
            ],
            [
                InlineKeyboardButton(text="üîÑ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏", callback_data="backup_restore"),
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –±–µ–∫–∞–ø—ñ–≤", callback_data="backup_list")
            ],
            [
                InlineKeyboardButton(text="‚öôÔ∏è –ê–≤—Ç–æ–±–µ–∫–∞–ø", callback_data="backup_auto"),
                InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö", callback_data="backup_cleanup")
            ],
            [
                InlineKeyboardButton(text="üì§ –ï–∫—Å–ø–æ—Ä—Ç CSV", callback_data="backup_export_csv"),
                InlineKeyboardButton(text="üìä –ï–∫—Å–ø–æ—Ä—Ç JSON", callback_data="backup_export_json")
            ],
            [
                InlineKeyboardButton(text="‚ùå –ù–∞–∑–∞–¥", callback_data="admin_menu")
            ]
        ])
        
        await message.answer(backup_text, reply_markup=keyboard)
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", message.from_user.id
        )
        await message.answer(error_message)

async def disable_admin_menu(message: Message):
    """–í–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é"""
    await message.answer(
        f"{EMOJI['check']} –ê–¥–º—ñ–Ω-–º–µ–Ω—é –≤–∏–º–∫–Ω–µ–Ω–æ!\n\n"
        f"–î–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:\n"
        f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
        f"‚Ä¢ /m - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        reply_markup=ReplyKeyboardRemove()
    )

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_admin_stats(callback_query: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_detailed_stats(callback_query.message)
    await callback_query.answer()

async def callback_admin_moderate(callback_query: CallbackQuery):
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ callback"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_moderation_interface(callback_query.message)
    await callback_query.answer()

async def callback_approve_content(callback_query: CallbackQuery):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ callback_data
        content_id = int(callback_query.data.split('_')[1])
        
        # –ú–æ–¥–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        success = DatabaseService.moderate_content(
            content_id=content_id,
            approve=True,
            moderator_id=callback_query.from_user.id
        )
        
        if success:
            await callback_query.message.edit_text(
                f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate")
                ]])
            )
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É!")
        
        await callback_query.answer()
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_query.from_user.id
        )
        await callback_query.message.answer(error_message)
        await callback_query.answer()

async def callback_reject_content(callback_query: CallbackQuery):
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    try:
        # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ callback_data
        content_id = int(callback_query.data.split('_')[1])
        
        # –ú–æ–¥–µ—Ä—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        success = DatabaseService.moderate_content(
            content_id=content_id,
            approve=False,
            moderator_id=callback_query.from_user.id,
            comment="–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        )
        
        if success:
            await callback_query.message.edit_text(
                f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="admin_moderate")
                ]])
            )
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É!")
        
        await callback_query.answer()
        
    except Exception as e:
        error_message = ErrorHandler.log_and_format_error(
            e, "–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_query.from_user.id
        )
        await callback_query.message.answer(error_message)
        await callback_query.answer()

# ===== –®–í–ò–î–ö–ï –û–ù–û–í–õ–ï–ù–ù–Ø =====

async def callback_quick_stats_refresh(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await show_quick_stats(callback_query.message)
    await callback_query.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

# ===== –ï–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–Ü–á =====

async def export_data_handler(callback_query: CallbackQuery):
    """–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    await callback_query.answer("üìà –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó!")

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø CALLBACK HANDLERS =====

def register_admin_callbacks(dp):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö admin callback handlers"""
    dp.callback_query.register(callback_admin_stats, lambda c: c.data == "admin_stats")
    dp.callback_query.register(callback_admin_moderate, lambda c: c.data == "admin_moderate") 
    dp.callback_query.register(callback_approve_content, lambda c: c.data.startswith("approve_"))
    dp.callback_query.register(callback_reject_content, lambda c: c.data.startswith("reject_"))
    dp.callback_query.register(callback_quick_stats_refresh, lambda c: c.data == "quick_stats_refresh")
    dp.callback_query.register(export_data_handler, lambda c: c.data == "admin_export")