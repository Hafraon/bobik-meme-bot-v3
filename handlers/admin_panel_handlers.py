#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ê –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ –ó –ú–û–î–ï–†–ê–¶–Ü–Ñ–Æ üß†üòÇüî•
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)

logger = logging.getLogger(__name__)

# Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
try:
    from config.settings import settings
    ADMIN_ID = settings.ADMIN_ID
except ImportError:
    import os
    ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))

EMOJI = {
    "crown": "üëë", "fire": "üî•", "check": "‚úÖ", "cross": "‚ùå",
    "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è", "stats": "üìä", "gear": "‚öôÔ∏è",
    "hammer": "üî®", "shield": "üõ°Ô∏è", "rocket": "üöÄ", "gem": "üíé"
}

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

# ===== –ê–î–ú–Ü–ù –ú–ï–ù–Æ =====

def get_admin_main_menu() -> InlineKeyboardMarkup:
    """–ì–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderation")
        ],
        [
            InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users"),
            InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="admin_content")
        ],
        [
            InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ", callback_data="admin_duels"),
            InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="admin_settings"),
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_refresh")
        ]
    ])

def get_admin_static_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(keyboard=[
        [
            KeyboardButton(text="üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"),
            KeyboardButton(text="üìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        ],
        [
            KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è"),
            KeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
        ],
        [
            KeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
        ]
    ], resize_keyboard=True)

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò –ê–î–ú–Ü–ù–ê =====

async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –≥–æ–ª–æ–≤–Ω–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    
    admin_text = (
        f"{EMOJI['crown']} <b>–ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–ê –ü–ê–ù–ï–õ–¨</b>\n\n"
        f"–í—ñ—Ç–∞—é, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä! –í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏:\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –∑–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        f"üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è</b> - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</b> - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n"
        f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç</b> - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n"
        f"‚öîÔ∏è <b>–î—É–µ–ª—ñ</b> - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥—É–µ–ª—è–º–∏\n"
        f"üì¢ <b>–†–æ–∑—Å–∏–ª–∫–∞</b> - –º–∞—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É"
    )
    
    await message.answer(
        admin_text,
        reply_markup=get_admin_main_menu()
    )
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é
    await message.answer(
        f"{EMOJI['info']} –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É:",
        reply_markup=get_admin_static_menu()
    )

async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —à–≤–∏–¥–∫–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    await show_bot_statistics(message)

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

async def show_bot_statistics(message: Message, detailed: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        from database import get_db_session
        from database.models import User, Content, Duel, Rating
        from sqlalchemy import func, and_
        
        with get_db_session() as session:
            # –û—Å–Ω–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_users = session.query(User).count()
            total_content = session.query(Content).count()
            approved_content = session.query(Content).filter(Content.status == 'APPROVED').count()
            pending_content = session.query(Content).filter(Content.status == 'PENDING').count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            today = datetime.utcnow().date()
            users_today = session.query(User).filter(func.date(User.created_at) == today).count()
            content_today = session.query(Content).filter(func.date(Content.created_at) == today).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
            week_ago = datetime.utcnow() - timedelta(days=7)
            active_users_week = session.query(User).filter(User.last_active >= week_ago).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª—ñ–≤
            total_duels = session.query(Duel).count()
            active_duels = session.query(Duel).filter(Duel.status == 'ACTIVE').count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            total_jokes = session.query(Content).filter(Content.content_type == 'JOKE').count()
            total_memes = session.query(Content).filter(Content.content_type == 'MEME').count()
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"{EMOJI['stats']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_text += f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users:,}\n"
            stats_text += f"‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: +{users_today}\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {active_users_week:,}\n\n"
            
            stats_text += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_content:,}\n"
            stats_text += f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_content:,}\n"
            stats_text += f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_content:,}\n"
            stats_text += f"‚Ä¢ –°—å–æ–≥–æ–¥–Ω—ñ: +{content_today}\n\n"
            
            stats_text += f"üé≠ <b>–¢–∏–ø–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É:</b>\n"
            stats_text += f"‚Ä¢ –ñ–∞—Ä—Ç–∏: {total_jokes:,}\n"
            stats_text += f"‚Ä¢ –ú–µ–º–∏: {total_memes:,}\n\n"
            
            stats_text += f"‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_duels:,}\n"
            stats_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_duels:,}\n\n"
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
            if detailed:
                # –¢–æ–ø –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                top_users = session.query(User).order_by(User.points.desc()).limit(5).all()
                stats_text += f"üèÜ <b>–¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
                for i, user in enumerate(top_users, 1):
                    stats_text += f"{i}. {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}: {user.points:,} –±–∞–ª—ñ–≤\n"
                
                stats_text += "\n"
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
                rejected_content = session.query(Content).filter(Content.status == 'REJECTED').count()
                approval_rate = (approved_content / total_content * 100) if total_content > 0 else 0
                
                stats_text += f"üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:</b>\n"
                stats_text += f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_content:,}\n"
                stats_text += f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected_content:,}\n"
                stats_text += f"‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {approval_rate:.1f}%\n"
            
            # –ß–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            stats_text += f"\nüïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            keyboard = get_stats_keyboard()
            
            await message.answer(stats_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def get_stats_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats"),
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_stats")
        ],
        [
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="stats_charts"),
            InlineKeyboardButton(text="üìã –ï–∫—Å–ø–æ—Ä—Ç", callback_data="export_stats")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")
        ]
    ])

# ===== –ú–û–î–ï–†–ê–¶–Ü–Ø =====

async def show_moderation_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        from database import get_pending_content
        
        pending_content = await get_pending_content()
        
        moderation_text = f"{EMOJI['shield']} <b>–ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–Ü–á</b>\n\n"
        
        if not pending_content:
            moderation_text += f"{EMOJI['check']} –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!\n\n"
            moderation_text += "–í—Å—ñ –ø–æ–¥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω—ñ. –ì–∞—Ä–Ω–∞ —Ä–æ–±–æ—Ç–∞! üëè"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_moderation")],
                [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")]
            ])
        else:
            moderation_text += f"üìã <b>–ö–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ: {len(pending_content)}</b>\n\n"
            
            for i, content in enumerate(pending_content[:5], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5
                content_type = "–ñ–∞—Ä—Ç" if content.content_type.value == "JOKE" else "–ú–µ–º"
                
                moderation_text += f"#{content.id} - {content_type}\n"
                moderation_text += f"üë§ –ê–≤—Ç–æ—Ä ID: {content.author_id}\n"
                moderation_text += f"üìÖ {content.created_at.strftime('%d.%m %H:%M')}\n"
                moderation_text += f"üìù {content.text[:100]}{'...' if len(content.text) > 100 else ''}\n\n"
            
            if len(pending_content) > 5:
                moderation_text += f"... —Ç–∞ —â–µ {len(pending_content) - 5} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n\n"
            
            moderation_text += "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            
            keyboard = get_moderation_keyboard(pending_content[0].id if pending_content else None)
        
        await message.answer(moderation_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")

def get_moderation_keyboard(content_id: Optional[int]) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if content_id:
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve_{content_id}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{content_id}")
            ],
            [
                InlineKeyboardButton(text="üëÅ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_content_{content_id}"),
                InlineKeyboardButton(text="‚è≠ –ù–∞—Å—Ç—É–ø–Ω–∏–π", callback_data="next_content")
            ],
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_moderation"),
                InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")
            ]
        ])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_moderation")],
            [InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")]
        ])

async def moderate_content_item(callback_query: CallbackQuery, action: str, content_id: int):
    """–ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    try:
        from database import moderate_content, get_content_by_id
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        content = await get_content_by_id(content_id)
        if not content:
            await callback_query.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!", show_alert=True)
            return
        
        # –ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏
        success = await moderate_content(
            content_id=content_id,
            action=action.upper(),
            moderator_id=callback_query.from_user.id,
            comment=f"–ú–æ–¥–µ—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"
        )
        
        if success:
            action_text = "—Å—Ö–≤–∞–ª–µ–Ω–æ" if action == "approve" else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞
            try:
                bot = callback_query.bot
                author_message = (
                    f"{EMOJI['info']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥–µ—Ä–∞—Ü—ñ—ó</b>\n\n"
                    f"–í–∞—à {'–∂–∞—Ä—Ç' if content.content_type.value == 'JOKE' else '–º–µ–º'} "
                    f"<b>{action_text}</b> –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                )
                
                if action == "approve":
                    author_message += f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–µ–ø–µ—Ä –±–∞—á–∞—Ç—å –≤—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ!\n"
                    author_message += f"üí∞ +20 –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è!\n\n"
                else:
                    author_message += f"üòî –ù–∞ –∂–∞–ª—å, –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.\n"
                    author_message += f"–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ—Å—å —ñ–Ω—à–µ!\n\n"
                
                author_message += f"üìù <i>–í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:</i>\n{content.text[:200]}..."
                
                await bot.send_message(content.author_id, author_message)
                
            except Exception:
                pass  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞
            
            await callback_query.answer(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç {action_text}!")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            await show_moderation_panel(callback_query.message)
            
            logger.info(f"üõ°Ô∏è –ê–¥–º—ñ–Ω {callback_query.from_user.id} {action_text} –∫–æ–Ω—Ç–µ–Ω—Ç #{content_id}")
            
        else:
            await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!", show_alert=True)

# ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def show_user_management(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        from database import get_db_session
        from database.models import User
        from sqlalchemy import desc
        
        with get_db_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            total_users = session.query(User).count()
            active_today = session.query(User).filter(
                func.date(User.last_active) == datetime.utcnow().date()
            ).count()
            
            # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            top_users = session.query(User).order_by(desc(User.points)).limit(10).all()
            
            users_text = f"{EMOJI['crown']} <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò</b>\n\n"
            users_text += f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users:,}\n"
            users_text += f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {active_today:,}\n\n"
            
            users_text += f"üèÜ <b>–¢–û–ü-10 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n"
            for i, user in enumerate(top_users, 1):
                status = "üü¢" if user.last_active.date() == datetime.utcnow().date() else "üî¥"
                users_text += f"{i}. {status} {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} ({user.points:,} –±–∞–ª—ñ–≤)\n"
            
            keyboard = get_user_management_keyboard()
            await message.answer(users_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏: {e}")
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")

def get_user_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="search_user"),
            InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="user_detailed_stats")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏", callback_data="award_points"),
            InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏", callback_data="ban_user")
        ],
        [
            InlineKeyboardButton(text="üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", callback_data="user_activity"),
            InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_users")
        ],
        [
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")
        ]
    ])

# ===== –†–û–ó–°–ò–õ–ö–ê =====

async def show_broadcast_panel(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø–∞–Ω–µ–ª—å —Ä–æ–∑—Å–∏–ª–∫–∏"""
    if not is_admin(message.from_user.id):
        return
    
    broadcast_text = (
        f"{EMOJI['rocket']} <b>–ü–ê–ù–ï–õ–¨ –†–û–ó–°–ò–õ–ö–ò</b>\n\n"
        f"üì¢ –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n\n"
        f"‚ö†Ô∏è <b>–£–≤–∞–≥–∞!</b> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ä–æ–∑—Å–∏–ª–∫—É –æ–±–µ—Ä–µ–∂–Ω–æ:\n"
        f"‚Ä¢ –¢—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è\n"
        f"‚Ä¢ –ù–µ —Å–ø–∞–º\n"
        f"‚Ä¢ –Ø–∫—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        f"üìã –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ä–æ–∑—Å–∏–ª–∫–∏:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¢ –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", callback_data="broadcast_all"),
            InlineKeyboardButton(text="üü¢ –¢—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–º", callback_data="broadcast_active")
        ],
        [
            InlineKeyboardButton(text="üèÜ –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", callback_data="broadcast_top"),
            InlineKeyboardButton(text="üÜï –ù–æ–≤–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º", callback_data="broadcast_new")
        ],
        [
            InlineKeyboardButton(text="üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫", callback_data="broadcast_stats"),
            InlineKeyboardButton(text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="admin_main")
        ]
    ])
    
    await message.answer(broadcast_text, reply_markup=keyboard)

# ===== CALLBACK –•–ï–ù–î–õ–ï–†–ò =====

async def callback_admin_stats(callback_query: CallbackQuery):
    """Callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await show_bot_statistics(callback_query.message)
    await callback_query.answer()

async def callback_admin_moderation(callback_query: CallbackQuery):
    """Callback –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await show_moderation_panel(callback_query.message)
    await callback_query.answer()

async def callback_admin_users(callback_query: CallbackQuery):
    """Callback –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await show_user_management(callback_query.message)
    await callback_query.answer()

async def callback_admin_broadcast(callback_query: CallbackQuery):
    """Callback —Ä–æ–∑—Å–∏–ª–∫–∏"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", show_alert=True)
        return
    
    await show_broadcast_panel(callback_query.message)
    await callback_query.answer()

async def callback_approve_content(callback_query: CallbackQuery):
    """–°—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 2:
        content_id = int(data_parts[1])
        await moderate_content_item(callback_query, "approve", content_id)

async def callback_reject_content(callback_query: CallbackQuery):
    """–í—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 2:
        content_id = int(data_parts[1])
        await moderate_content_item(callback_query, "reject", content_id)

async def auto_show_admin_menu_on_start(message: Message) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –∞–¥–º—ñ–Ω-–º–µ–Ω—é –ø—Ä–∏ /start –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if is_admin(message.from_user.id):
        await message.answer(
            f"{EMOJI['crown']} <b>–†–µ–∂–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!</b>\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂—á–µ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
            f"‚Ä¢ /admin - –ø–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å\n"
            f"‚Ä¢ /stats - —à–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üõ°Ô∏è –í–∏ –º–∞—î—Ç–µ –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º.",
            reply_markup=get_admin_static_menu()
        )
        return True
    return False

# ===== –û–ë–†–û–ë–ö–ê –°–¢–ê–¢–ò–ß–ù–ò–• –ö–ù–û–ü–û–ö =====

async def handle_admin_static_buttons(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∞–¥–º—ñ–Ω –∫–Ω–æ–ø–æ–∫"""
    if not is_admin(message.from_user.id):
        return
    
    text = message.text
    
    if text == "üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å":
        await cmd_admin(message)
    elif text == "üìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_bot_statistics(message)
    elif text == "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è":
        await show_moderation_panel(message)
    elif text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞":
        await show_broadcast_panel(message)
    elif text == "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é":
        from aiogram.types import ReplyKeyboardRemove
        await message.answer(
            "‚úÖ –ê–¥–º—ñ–Ω –º–µ–Ω—é –≤–∏–º–∫–Ω–µ–Ω–æ.\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º.",
            reply_markup=ReplyKeyboardRemove()
        )

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_admin_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_stats, Command("stats"))
    
    # –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏
    dp.message.register(
        handle_admin_static_buttons,
        F.text.in_([
            "üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", "üìä –®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è",
            "üì¢ –†–æ–∑—Å–∏–ª–∫–∞", "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é"
        ])
    )
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_admin_stats, F.data == "admin_stats")
    dp.callback_query.register(callback_admin_moderation, F.data == "admin_moderation")
    dp.callback_query.register(callback_admin_users, F.data == "admin_users")
    dp.callback_query.register(callback_admin_broadcast, F.data == "admin_broadcast")
    
    dp.callback_query.register(callback_approve_content, F.data.startswith("approve_"))
    dp.callback_query.register(callback_reject_content, F.data.startswith("reject_"))
    
    logger.info("‚úÖ –ê–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

# –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ basic_commands.py
__all__ = ['auto_show_admin_menu_on_start', 'register_admin_handlers', 'is_admin']