#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –±–æ—Ç–∞ üß†üòÇüî•
"""

import logging
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    
    handlers_to_register = [
        ("basic_commands", "register_basic_handlers", "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"),
        ("content_handlers", "register_content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("gamification_handlers", "register_gamification_handlers", "–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è"),
        ("moderation_handlers", "register_moderation_handlers", "–ú–æ–¥–µ—Ä–∞—Ü—ñ—è"),
        ("duel_handlers", "register_duel_handlers", "–î—É–µ–ª—ñ")
    ]
    
    registered_count = 0
    
    for module_name, func_name, description in handlers_to_register:
        try:
            # –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—é
            module = __import__(f"handlers.{module_name}", fromlist=[func_name])
            register_func = getattr(module, func_name)
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            register_func(dp)
            logger.info(f"‚úÖ {description} - –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            registered_count += 1
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ {module_name}: {e}")
        except AttributeError as e:
            logger.warning(f"‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è {func_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ {module_name}: {e}")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó {description}: {e}")
    
    logger.info(f"üéØ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ {registered_count}/{len(handlers_to_register)} –≥—Ä—É–ø —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤")
    
    if registered_count == 0:
        logger.warning("‚ö†Ô∏è –ñ–æ–¥–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Ö–µ–Ω–¥–ª–µ—Ä —è–∫ fallback
        register_fallback_handlers(dp)

def register_fallback_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ —è–∫ fallback"""
    from aiogram import F
    from aiogram.filters import Command
    from aiogram.types import Message
    
    @dp.message(Command("start"))
    async def cmd_start_fallback(message: Message):
        await message.answer(
            "üß†üòÇüî• <b>–í—ñ—Ç–∞—é –≤ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–º—É –±–æ—Ç—ñ!</b>\n\n"
            "‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\n"
            "üîß –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n\n"
            "üìû –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
        )
    
    @dp.message(Command("help"))
    async def cmd_help_fallback(message: Message):
        await message.answer(
            "‚ùì <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "‚Ä¢ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "‚Ä¢ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
            "üîß –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ"
        )
    
    @dp.message(F.text)
    async def fallback_handler(message: Message):
        await message.answer(
            "ü§î –ù–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏"
        )
    
    logger.info("üîß Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")