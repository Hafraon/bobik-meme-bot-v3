#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–û–í–ù–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í üß†üòÇüî•
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton
)

logger = logging.getLogger(__name__)

# Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
try:
    from config.settings import settings
    DUEL_VOTING_TIME = getattr(settings, 'DUEL_VOTING_TIME', 300)  # 5 —Ö–≤–∏–ª–∏–Ω
    MIN_VOTES_FOR_DUEL = getattr(settings, 'MIN_VOTES_FOR_DUEL', 3)
    POINTS_FOR_DUEL_WIN = getattr(settings, 'POINTS_FOR_DUEL_WIN', 15)
    POINTS_FOR_DUEL_PARTICIPATION = getattr(settings, 'POINTS_FOR_DUEL_PARTICIPATION', 5)
except ImportError:
    import os
    DUEL_VOTING_TIME = int(os.getenv("DUEL_VOTING_TIME", "300"))
    MIN_VOTES_FOR_DUEL = int(os.getenv("MIN_VOTES_FOR_DUEL", "3"))
    POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "15"))
    POINTS_FOR_DUEL_PARTICIPATION = int(os.getenv("POINTS_FOR_DUEL_PARTICIPATION", "5"))

EMOJI = {
    "vs": "‚öîÔ∏è", "fire": "üî•", "crown": "üëë", "trophy": "üèÜ",
    "star": "‚≠ê", "gem": "üíé", "rocket": "üöÄ", "timer": "‚è∞",
    "vote": "üó≥Ô∏è", "winner": "üéâ", "thumbs_up": "üëç", "thumbs_down": "üëé"
}

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò –î–£–ï–õ–Ü–í =====

async def cmd_duel(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /duel - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –¥—É–µ–ª—ñ"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    command_args = message.text.split(' ', 1)
    
    if len(command_args) > 1:
        # –Ñ —Ç–µ–∫—Å—Ç - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å –∑ —Ü–∏–º –∂–∞—Ä—Ç–æ–º
        joke_text = command_args[1].strip()
        await create_duel_with_text(message, joke_text)
    else:
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤
        await show_duel_menu(message)

async def show_duel_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
    user_id = message.from_user.id
    first_name = message.from_user.first_name or "–ë–æ—î—Ü—å"
    
    try:
        from database import get_active_duels, get_user_by_id
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_user_by_id(user_id)
        active_duels = await get_active_duels()
        
        duel_text = f"{EMOJI['vs']} <b>–ê–†–ï–ù–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í</b>\n\n"
        duel_text += f"üé≠ –í—ñ—Ç–∞—é, {first_name}!\n\n"
        
        if user:
            win_rate = (user.duels_won / (user.duels_won + user.duels_lost) * 100) if (user.duels_won + user.duels_lost) > 0 else 0
            duel_text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            duel_text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥: {user.duels_won}\n"
            duel_text += f"üíî –ü–æ—Ä–∞–∑–æ–∫: {user.duels_lost}\n"
            duel_text += f"üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%\n\n"
        
        duel_text += f"‚öîÔ∏è <b>–©–æ —Ç–∞–∫–µ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤?</b>\n"
        duel_text += f"–î–≤–∞ —É—á–∞—Å–Ω–∏–∫–∏ –∑–º–∞–≥–∞—é—Ç—å—Å—è –∂–∞—Ä—Ç–∞–º–∏, –∞ —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≥–æ–ª–æ—Å—É—é—Ç—å –∑–∞ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π!\n\n"
        
        duel_text += f"üéØ <b>–ù–∞–≥–æ—Ä–æ–¥–∏:</b>\n"
        duel_text += f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: +{POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤\n"
        duel_text += f"‚Ä¢ –£—á–∞—Å–Ω–∏–∫: +{POINTS_FOR_DUEL_PARTICIPATION} –±–∞–ª—ñ–≤\n"
        duel_text += f"‚Ä¢ –ì–æ–ª–æ—Å—É—é—á–∏–π: +2 –±–∞–ª–∏\n\n"
        
        if active_duels:
            duel_text += f"üî• <b>–ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤: {len(active_duels)}</b>\n"
            duel_text += f"–ü—Ä–∏—î–¥–Ω–∞–π—Ç–µ—Å—å –¥–æ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è!\n\n"
        
        duel_text += f"–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?"
        
        keyboard = get_duel_menu_keyboard(len(active_duels) > 0)
        await message.answer(duel_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –¥—É–µ–ª—ñ–≤: {e}")

def get_duel_menu_keyboard(has_active_duels: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
    keyboard = [
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å",
                callback_data="create_duel"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['rocket']} –í–∏–ø–∞–¥–∫–æ–≤–∏–π –¥—É–µ–ª—å",
                callback_data="random_duel"
            )
        ]
    ]
    
    if has_active_duels:
        keyboard.append([
            InlineKeyboardButton(
                text=f"{EMOJI['vote']} –ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –≤ –¥—É–µ–ª—è—Ö",
                callback_data="show_active_duels"
            )
        ])
    
    keyboard.extend([
        [
            InlineKeyboardButton(
                text=f"{EMOJI['trophy']} –¢–û–ü –¥—É–µ–ª—è–Ω—Ç—ñ–≤",
                callback_data="duel_leaderboard"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['star']} –Ü—Å—Ç–æ—Ä—ñ—è –¥—É–µ–ª—ñ–≤",
                callback_data="duel_history"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùì –Ø–∫ –≥—Ä–∞—Ç–∏",
                callback_data="duel_help"
            )
        ]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# ===== –°–¢–í–û–†–ï–ù–ù–Ø –î–£–ï–õ–Ü–í =====

async def create_duel_with_text(message: Message, joke_text: str):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∂–∞—Ä—Ç–æ–º"""
    user_id = message.from_user.id
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∂–∞—Ä—Ç—É
    if len(joke_text) < 10:
        await message.answer(
            f"‚ùå –ñ–∞—Ä—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –¥—É–µ–ª—ñ!\n"
            f"–ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        return
    
    if len(joke_text) > 500:
        await message.answer(
            f"‚ùå –ñ–∞—Ä—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –¥–ª—è –¥—É–µ–ª—ñ!\n"
            f"–ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤. –°–∫–æ—Ä–æ—Ç—ñ—Ç—å —Ç–µ–∫—Å—Ç."
        )
        return
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å
    await create_new_duel(message, user_id, joke_text)

async def create_new_duel(message: Message, challenger_id: int, joke_text: str):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥—É–µ–ª—å"""
    try:
        from database import create_duel, add_content_for_moderation
        
        # –î–æ–¥–∞—Ç–∏ –∂–∞—Ä—Ç —è–∫ –∫–æ–Ω—Ç–µ–Ω—Ç (–≤—ñ–Ω –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–∏–π –¥–ª—è –¥—É–µ–ª—ñ)
        content = await add_content_for_moderation(
            author_id=challenger_id,
            content_text=joke_text,
            content_type="JOKE"
        )
        
        if not content:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥—É–µ–ª—ñ")
            return
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥—É–µ–ª—ñ
        from database import moderate_content
        await moderate_content(
            content_id=content.id,
            action="APPROVE",
            moderator_id=challenger_id,
            comment="–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ –¥–ª—è –¥—É–µ–ª—ñ"
        )
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å
        duel = await create_duel(
            challenger_id=challenger_id,
            challenger_content_id=content.id
        )
        
        if duel:
            duel_text = (
                f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –°–¢–í–û–†–ï–ù–û!</b>\n\n"
                f"üé≠ –í–∞—à –∂–∞—Ä—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –±–æ—é!\n\n"
                f"üìù <i>–í–∞—à –∂–∞—Ä—Ç:</i>\n{joke_text}\n\n"
                f"‚è≥ –ß–µ–∫–∞—î–º–æ –Ω–∞ —Å—É–ø–µ—Ä–Ω–∏–∫–∞...\n"
                f"üî• –î—É–µ–ª—å –ø–æ—á–Ω–µ—Ç—å—Å—è –∫–æ–ª–∏ —Ö—Ç–æ—Å—å –ø—Ä–∏–π–º–µ –≤–∏–∫–ª–∏–∫!\n\n"
                f"üéØ –ù–∞–≥–æ—Ä–æ–¥–∏:\n"
                f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: +{POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤\n"
                f"‚Ä¢ –£—á–∞—Å–Ω–∏–∫: +{POINTS_FOR_DUEL_PARTICIPATION} –±–∞–ª—ñ–≤"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì¢ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –¥—É–µ–ª–ª—é",
                        callback_data=f"share_duel_{duel.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥—É–µ–ª—å",
                        callback_data=f"cancel_duel_{duel.id}"
                    )
                ]
            ])
            
            await message.answer(duel_text, reply_markup=keyboard)
            
            # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç –ø—Ä–æ –Ω–æ–≤–∏–π –¥—É–µ–ª—å
            await announce_new_duel(message.bot, duel, joke_text)
            
            logger.info(f"‚öîÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {challenger_id} —Å—Ç–≤–æ—Ä–∏–≤ –¥—É–µ–ª—å #{duel.id}")
            
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")

async def announce_new_duel(bot, duel, joke_text: str):
    """–ê–Ω–æ–Ω—Å—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π –¥—É–µ–ª—å"""
    try:
        # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤ –∫–∞–Ω–∞–ª –∞–±–æ –≥—Ä—É–ø—É
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
        logger.info(f"üì¢ –ù–æ–≤–∏–π –¥—É–µ–ª—å #{duel.id} —Å—Ç–≤–æ—Ä–µ–Ω–æ: {joke_text[:50]}...")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–æ–Ω—Å—É–≤–∞–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")

# ===== –ü–†–ò–Ñ–î–ù–ê–ù–ù–Ø –î–û –î–£–ï–õ–Ü =====

async def join_random_duel(callback_query: CallbackQuery):
    """–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –¥—É–µ–ª—ñ"""
    user_id = callback_query.from_user.id
    
    try:
        from database import get_active_duels
        
        # –ó–Ω–∞–π—Ç–∏ –¥—É–µ–ª—ñ –±–µ–∑ —Å—É–ø–µ—Ä–Ω–∏–∫–∞
        active_duels = await get_active_duels()
        available_duels = [d for d in active_duels if not d.opponent_id and d.challenger_id != user_id]
        
        if not available_duels:
            await callback_query.answer(
                "üòî –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—É–µ–ª—ñ–≤!\n–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –¥—É–µ–ª—å.",
                show_alert=True
            )
            return
        
        # –í–∏–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –¥—É–µ–ª—å
        import random
        selected_duel = random.choice(available_duels)
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥—É–µ–ª—å –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è
        await show_duel_for_joining(callback_query.message, selected_duel)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –¥—É–µ–ª—ñ: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –¥—É–µ–ª—ñ", show_alert=True)

async def show_duel_for_joining(message: Message, duel):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥—É–µ–ª—å –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è"""
    try:
        from database import get_content_by_id, get_user_by_id
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç challenger'–∞
        challenger_content = await get_content_by_id(duel.challenger_content_id)
        challenger = await get_user_by_id(duel.challenger_id)
        
        if not challenger_content or not challenger:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ")
            return
        
        duel_text = (
            f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –û–ß–Ü–ö–£–Ñ –°–£–ü–ï–†–ù–ò–ö–ê!</b>\n\n"
            f"üé≠ Challenger: {challenger.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
            f"üí∞ –ë–∞–ª–∏: {challenger.points:,}\n\n"
            f"üìù <b>–á—Ö –∂–∞—Ä—Ç:</b>\n<i>{challenger_content.text}</i>\n\n"
            f"‚öîÔ∏è –ì–æ—Ç–æ–≤—ñ –ø—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫?\n"
            f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç –¥–ª—è —É—á–∞—Å—Ç—ñ –≤ –¥—É–µ–ª—ñ!\n\n"
            f"üéØ –ù–∞–≥–æ—Ä–æ–¥–∏:\n"
            f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: +{POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤\n"
            f"‚Ä¢ –£—á–∞—Å–Ω–∏–∫: +{POINTS_FOR_DUEL_PARTICIPATION} –±–∞–ª—ñ–≤"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ü—Ä–∏–π–Ω—è—Ç–∏ –≤–∏–∫–ª–∏–∫!",
                    callback_data=f"accept_duel_{duel.id}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîç –Ü–Ω—à—ñ –¥—É–µ–ª—ñ",
                    callback_data="show_active_duels"
                ),
                InlineKeyboardButton(
                    text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                    callback_data="duel_main_menu"
                )
            ]
        ])
        
        await message.answer(duel_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥—É–µ–ª—ñ: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ")

# ===== –ì–û–õ–û–°–£–í–ê–ù–ù–Ø –í –î–£–ï–õ–Ø–• =====

async def show_active_duels_for_voting(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"""
    try:
        from database import get_active_duels
        
        active_duels = await get_active_duels()
        voting_duels = [d for d in active_duels if d.opponent_id is not None]
        
        if not voting_duels:
            await message.answer(
                f"üò¥ –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è.\n\n"
                f"üî• –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –¥—É–µ–ª—å –∞–±–æ –ø–æ—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ —ñ–Ω—à—ñ —Å—Ç–≤–æ—Ä—è—Ç—å!"
            )
            return
        
        duels_text = f"{EMOJI['vote']} <b>–ê–ö–¢–ò–í–ù–Ü –î–£–ï–õ–Ü</b>\n\n"
        duels_text += f"–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π –∂–∞—Ä—Ç! (+2 –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å)\n\n"
        
        for i, duel in enumerate(voting_duels[:5], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
            time_left = duel.ends_at - datetime.utcnow() if duel.ends_at else timedelta(minutes=5)
            time_left_str = f"{int(time_left.total_seconds() // 60)}—Ö–≤" if time_left.total_seconds() > 0 else "–∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è"
            
            duels_text += f"#{duel.id} - {EMOJI['timer']} {time_left_str}\n"
            duels_text += f"üëç {duel.challenger_votes} vs {duel.opponent_votes} üëé\n\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üó≥Ô∏è –ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –≤ –¥—É–µ–ª—ñ #{voting_duels[0].id}",
                    callback_data=f"vote_duel_{voting_duels[0].id}"
                )
            ] if voting_duels else [],
            [
                InlineKeyboardButton(
                    text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫",
                    callback_data="refresh_active_duels"
                ),
                InlineKeyboardButton(
                    text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
                    callback_data="duel_main_menu"
                )
            ]
        ])
        
        await message.answer(duels_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤")

async def show_duel_for_voting(message: Message, duel_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥—É–µ–ª—å –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è"""
    try:
        from database import get_db_session
        from database.models import Duel, Content, User
        
        with get_db_session() as session:
            duel = session.query(Duel).filter(Duel.id == duel_id).first()
            
            if not duel or not duel.opponent_id:
                await message.answer("‚ùå –î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π")
                return
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∞ —É—á–∞—Å–Ω–∏–∫—ñ–≤
            challenger_content = session.query(Content).filter(Content.id == duel.challenger_content_id).first()
            opponent_content = session.query(Content).filter(Content.id == duel.opponent_content_id).first()
            challenger = session.query(User).filter(User.id == duel.challenger_id).first()
            opponent = session.query(User).filter(User.id == duel.opponent_id).first()
            
            if not all([challenger_content, opponent_content, challenger, opponent]):
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥—É–µ–ª—ñ")
                return
            
            # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∞—Å —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è
            time_left = duel.ends_at - datetime.utcnow() if duel.ends_at else timedelta(minutes=5)
            time_left_str = f"{int(time_left.total_seconds() // 60)}—Ö–≤ {int(time_left.total_seconds() % 60)}—Å" if time_left.total_seconds() > 0 else "–∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è"
            
            duel_text = (
                f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ #{duel.id}</b>\n\n"
                f"{EMOJI['timer']} –ó–∞–ª–∏—à–∏–ª–æ—Å—è: {time_left_str}\n\n"
                f"üîµ <b>{challenger.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b> ({duel.challenger_votes} –≥–æ–ª–æ—Å—ñ–≤)\n"
                f"<i>{challenger_content.text}</i>\n\n"
                f"üî¥ <b>{opponent.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b> ({duel.opponent_votes} –≥–æ–ª–æ—Å—ñ–≤)\n"
                f"<i>{opponent_content.text}</i>\n\n"
                f"üó≥Ô∏è –Ø–∫–∏–π –∂–∞—Ä—Ç —Å–º—ñ—à–Ω—ñ—à–∏–π? –ì–æ–ª–æ—Å—É–π—Ç–µ!\n"
                f"üí∞ +2 –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f"üîµ –ó–∞ {challenger.first_name or '–ü–µ—Ä—à–æ–≥–æ'} ({duel.challenger_votes})",
                        callback_data=f"vote_challenger_{duel.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üî¥ –ó–∞ {opponent.first_name or '–î—Ä—É–≥–æ–≥–æ'} ({duel.opponent_votes})",
                        callback_data=f"vote_opponent_{duel.id}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                        callback_data=f"duel_results_{duel.id}"
                    ),
                    InlineKeyboardButton(
                        text="üîÑ –û–Ω–æ–≤–∏—Ç–∏",
                        callback_data=f"refresh_duel_{duel.id}"
                    )
                ]
            ])
            
            await message.answer(duel_text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥—É–µ–ª—ñ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ")

# ===== –û–ë–†–û–ë–ö–ê –ì–û–õ–û–°–Ü–í =====

async def process_vote(callback_query: CallbackQuery, vote_for: str, duel_id: int):
    """–û–±—Ä–æ–±–∏—Ç–∏ –≥–æ–ª–æ—Å –≤ –¥—É–µ–ª—ñ"""
    user_id = callback_query.from_user.id
    
    try:
        from database import vote_in_duel, update_user_points
        
        # –ó–∞–ø–∏—Å–∞—Ç–∏ –≥–æ–ª–æ—Å
        success = await vote_in_duel(duel_id, user_id, vote_for)
        
        if success:
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
            await update_user_points(user_id, 2, "–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ")
            
            vote_text = "üîµ challenger" if vote_for == "challenger" else "üî¥ opponent"
            await callback_query.answer(f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ {vote_text} –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π! (+2 –±–∞–ª–∏)")
            
            # –û–Ω–æ–≤–∏—Ç–∏ –¥—É–µ–ª—å
            await show_duel_for_voting(callback_query.message, duel_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥—É–µ–ª—å –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
            await check_duel_completion(callback_query.bot, duel_id)
            
        else:
            await callback_query.answer("‚ö†Ô∏è –í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –≤ —Ü—ñ–π –¥—É–µ–ª—ñ!", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è", show_alert=True)

async def check_duel_completion(bot, duel_id: int):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –¥—É–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—è"""
    try:
        from database import get_db_session
        from database.models import Duel
        
        with get_db_session() as session:
            duel = session.query(Duel).filter(Duel.id == duel_id).first()
            
            if not duel or duel.status != 'ACTIVE':
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É–º–æ–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            total_votes = duel.challenger_votes + duel.opponent_votes
            time_expired = duel.ends_at and datetime.utcnow() >= duel.ends_at
            
            if total_votes >= MIN_VOTES_FOR_DUEL * 2 or time_expired:
                await complete_duel(bot, duel)
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")

async def complete_duel(bot, duel):
    """–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É–µ–ª—å —Ç–∞ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è"""
    try:
        from database import get_db_session, update_user_points, get_user_by_id
        from database.models import User
        
        with get_db_session() as session:
            # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è
            if duel.challenger_votes > duel.opponent_votes:
                winner_id = duel.challenger_id
                loser_id = duel.opponent_id
            elif duel.opponent_votes > duel.challenger_votes:
                winner_id = duel.opponent_id
                loser_id = duel.challenger_id
            else:
                # –ù—ñ—á–∏—è
                winner_id = None
                loser_id = None
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥—É–µ–ª—ñ
            duel.status = 'COMPLETED'
            duel.completed_at = datetime.utcnow()
            duel.winner_id = winner_id
            
            session.commit()
            
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ —Ç–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if winner_id:
                await update_user_points(winner_id, POINTS_FOR_DUEL_WIN, "–ø–µ—Ä–µ–º–æ–≥–∞ –≤ –¥—É–µ–ª—ñ")
                await update_user_points(loser_id, POINTS_FOR_DUEL_PARTICIPATION, "—É—á–∞—Å—Ç—å –≤ –¥—É–µ–ª—ñ")
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–µ–ª—ñ–≤
                winner = session.query(User).filter(User.id == winner_id).first()
                loser = session.query(User).filter(User.id == loser_id).first()
                
                if winner:
                    winner.duels_won += 1
                if loser:
                    loser.duels_lost += 1
                
                session.commit()
                
                # –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤
                await notify_duel_participants(bot, duel, winner_id, loser_id)
                
            else:
                # –ù—ñ—á–∏—è
                await update_user_points(duel.challenger_id, POINTS_FOR_DUEL_PARTICIPATION, "–Ω—ñ—á–∏—è –≤ –¥—É–µ–ª—ñ")
                await update_user_points(duel.opponent_id, POINTS_FOR_DUEL_PARTICIPATION, "–Ω—ñ—á–∏—è –≤ –¥—É–µ–ª—ñ")
                
                await notify_duel_draw(bot, duel)
            
            logger.info(f"üèÅ –î—É–µ–ª—å #{duel.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner_id or '–Ω—ñ—á–∏—è'}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")

async def notify_duel_participants(bot, duel, winner_id: int, loser_id: int):
    """–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥—É–µ–ª—ñ"""
    try:
        from database import get_user_by_id
        
        winner = await get_user_by_id(winner_id)
        loser = await get_user_by_id(loser_id)
        
        if winner:
            winner_text = (
                f"{EMOJI['winner']} <b>–ü–ï–†–ï–ú–û–ì–ê –í –î–£–ï–õ–Ü!</b>\n\n"
                f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ –¥—É–µ–ª—å #{duel.id}!\n"
                f"üó≥Ô∏è –ì–æ–ª–æ—Å—ñ–≤: {duel.challenger_votes if winner_id == duel.challenger_id else duel.opponent_votes}\n"
                f"üí∞ +{POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É!\n\n"
                f"üî• –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
            )
            
            await bot.send_message(winner_id, winner_text)
        
        if loser:
            loser_text = (
                f"üòî <b>–ü–æ—Ä–∞–∑–∫–∞ –≤ –¥—É–µ–ª—ñ</b>\n\n"
                f"–ù–∞ –∂–∞–ª—å, –≤–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ –¥—É–µ–ª—å #{duel.id}.\n"
                f"üó≥Ô∏è –ì–æ–ª–æ—Å—ñ–≤: {duel.challenger_votes if loser_id == duel.challenger_id else duel.opponent_votes}\n"
                f"üí∞ +{POINTS_FOR_DUEL_PARTICIPATION} –±–∞–ª—ñ–≤ –∑–∞ —É—á–∞—Å—Ç—å!\n\n"
                f"üí™ –ù–µ –∑–∞—Å–º—É—á—É–π—Ç–µ—Å—å! –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –¥—É–µ–ª—å!"
            )
            
            await bot.send_message(loser_id, loser_text)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫—ñ–≤: {e}")

# ===== CALLBACK –•–ï–ù–î–õ–ï–†–ò =====

async def callback_create_duel(callback_query: CallbackQuery):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å"""
    await callback_query.message.answer(
        f"{EMOJI['fire']} <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ</b>\n\n"
        f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç –¥–ª—è –¥—É–µ–ª—ñ!\n\n"
        f"üìã –í–∏–º–æ–≥–∏:\n"
        f"‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"‚Ä¢ –°–º—ñ—à–Ω–æ —Ç–∞ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ\n\n"
        f"üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –∂–∞—Ä—Ç –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"
    )
    await callback_query.answer()

async def callback_random_duel(callback_query: CallbackQuery):
    """–í–∏–ø–∞–¥–∫–æ–≤–∏–π –¥—É–µ–ª—å"""
    await join_random_duel(callback_query)

async def callback_show_active_duels(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
    await show_active_duels_for_voting(callback_query.message)
    await callback_query.answer()

async def callback_vote_challenger(callback_query: CallbackQuery):
    """–ì–æ–ª–æ—Å –∑–∞ challenger"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 3:
        duel_id = int(data_parts[2])
        await process_vote(callback_query, "challenger", duel_id)

async def callback_vote_opponent(callback_query: CallbackQuery):
    """–ì–æ–ª–æ—Å –∑–∞ opponent"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 3:
        duel_id = int(data_parts[2])
        await process_vote(callback_query, "opponent", duel_id)

async def callback_duel_main_menu(callback_query: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
    await show_duel_menu(callback_query.message)
    await callback_query.answer()

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_duel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥—É–µ–ª—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_duel, Command("duel"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_create_duel, F.data == "create_duel")
    dp.callback_query.register(callback_random_duel, F.data == "random_duel")
    dp.callback_query.register(callback_show_active_duels, F.data == "show_active_duels")
    dp.callback_query.register(callback_duel_main_menu, F.data == "duel_main_menu")
    
    dp.callback_query.register(callback_vote_challenger, F.data.startswith("vote_challenger_"))
    dp.callback_query.register(callback_vote_opponent, F.data.startswith("vote_opponent_"))
    
    # –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ —á–µ—Ä–µ–∑ callback –∑ content_handlers
    dp.callback_query.register(
        lambda cq: show_duel_for_voting(cq.message, int(cq.data.split('_')[2])),
        F.data.startswith("duel_with_")
    )
    
    logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –¥—É–µ–ª—ñ–≤ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")