#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–û–í–ù–ê –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø - –ü–†–û–§–Ü–õ–Ü, –†–ê–ù–ì–ò, –õ–Ü–î–ï–†–ë–û–†–î üß†üòÇüî•
"""

import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, 
    InlineKeyboardButton, User as TelegramUser
)

logger = logging.getLogger(__name__)

# Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
try:
    from config.settings import settings, EMOJI
except ImportError:
    import os
    EMOJI = {
        "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê",
        "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
        "crown": "üëë", "rocket": "üöÄ", "vs": "‚öîÔ∏è", "calendar": "üìÖ",
        "profile": "üë§", "trophy": "üèÜ", "medal": "ü•á", "gem": "üíé"
    }

# ===== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –†–ê–ù–ì–Ü–í =====

RANK_SYSTEM = [
    {"name": "ü§° –ù–æ–≤–∞—á–æ–∫", "min_points": 0, "emoji": "ü§°", "description": "–¢—ñ–ª—å–∫–∏ –ø–æ—á–∞–ª–∏ —Å–≤—ñ–π —à–ª—è—Ö –≤ —Å–≤—ñ—Ç—ñ –≥—É–º–æ—Ä—É"},
    {"name": "üòÑ –°–º—ñ—Ö—É–Ω", "min_points": 50, "emoji": "üòÑ", "description": "–†–æ–∑—É–º—ñ—î—Ç–µ —â–æ —Ç–∞–∫–µ —Å–º—ñ—à–Ω–æ"},
    {"name": "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç", "min_points": 150, "emoji": "üòÇ", "description": "–í–∂–µ –º–æ–∂–µ—Ç–µ —Ä–æ–∑—Å–º—ñ—à–∏—Ç–∏ –¥—Ä—É–∑—ñ–≤"},
    {"name": "üé≠ –ö–æ–º—ñ–∫", "min_points": 350, "emoji": "üé≠", "description": "–°–ø—Ä–∞–≤–∂–Ω—ñ–π –º–∞–π—Å—Ç–µ—Ä –∂–∞—Ä—Ç—ñ–≤"},
    {"name": "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É", "min_points": 750, "emoji": "üëë", "description": "–ö–æ—Ä–æ–ª—å –º—ñ—Å—Ü–µ–≤–æ–≥–æ —Å—Ç–µ–Ω–¥-–∞–ø—É"},
    {"name": "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É", "min_points": 1500, "emoji": "üèÜ", "description": "–õ–µ–≥–µ–Ω–¥–∞ –∫–æ–º–µ–¥—ñ–π–Ω–æ–≥–æ —Ü–µ—Ö—É"},
    {"name": "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤", "min_points": 3000, "emoji": "üåü", "description": "–í–∞—à—ñ –º–µ–º–∏ —Ä–æ–∑—Ö–æ–¥—è—Ç—å—Å—è –ø–æ –≤—Å—å–æ–º—É —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É"},
    {"name": "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π", "min_points": 5000, "emoji": "üöÄ", "description": "–ê–±—Å–æ–ª—é—Ç–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä –∫–æ–º–µ–¥—ñ—ó"}
]

def get_rank_by_points(points: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞–Ω–≥ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–∞–ª—ñ–≤"""
    current_rank = RANK_SYSTEM[0]
    next_rank = None
    
    for i, rank in enumerate(RANK_SYSTEM):
        if points >= rank["min_points"]:
            current_rank = rank
            next_rank = RANK_SYSTEM[i + 1] if i + 1 < len(RANK_SYSTEM) else None
        else:
            break
    
    return {
        "current": current_rank,
        "next": next_rank,
        "progress": points - current_rank["min_points"],
        "next_threshold": next_rank["min_points"] - points if next_rank else 0
    }

def get_achievement_badge(user_stats: Dict[str, Any]) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
    badges = []
    
    # –ó–Ω–∞—á–∫–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    if user_stats.get("jokes_approved", 0) >= 10:
        badges.append("üìù –ê–≤—Ç–æ—Ä")
    if user_stats.get("reactions_given", 0) >= 100:
        badges.append("üëç –ö—Ä–∏—Ç–∏–∫")
    if user_stats.get("duels_won", 0) >= 5:
        badges.append("‚öîÔ∏è –ë–æ—î—Ü—å")
    if user_stats.get("points", 0) >= 1000:
        badges.append("üíé –ë–∞–≥–∞—Ç—ñ–π")
    
    # –ó–Ω–∞—á–∫–∏ –∑–∞ —á–∞—Å
    if user_stats.get("days_active", 0) >= 30:
        badges.append("üìÖ –í–µ—Ç–µ—Ä–∞–Ω")
    if user_stats.get("daily_streak", 0) >= 7:
        badges.append("üî• –ü–æ—Å—Ç—ñ–π–Ω–∏–π")
    
    return " ".join(badges) if badges else "üÜï –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å"

# ===== –ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê =====

async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await show_user_profile(message, message.from_user.id)

async def show_user_profile(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from database import get_user_by_id, get_user_stats
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_user_by_id(user_id)
        if not user:
            await message.answer(
                f"{EMOJI.get('warning', '‚ö†Ô∏è')} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ /start –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é."
            )
            return
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_user_stats(user_id)
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–∞–Ω–≥
        rank_info = get_rank_by_points(user.points)
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        days_since_registration = (datetime.utcnow() - user.created_at).days
        days_active = max(1, days_since_registration)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_stats = {
            "points": user.points,
            "jokes_approved": user.jokes_approved,
            "memes_approved": user.memes_approved,
            "reactions_given": user.reactions_given,
            "duels_won": user.duels_won,
            "duels_lost": user.duels_lost,
            "days_active": days_active,
            "daily_streak": 0  # TODO: —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ streak
        }
        
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
        achievements = get_achievement_badge(user_stats)
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
        profile_text = f"{EMOJI.get('profile', 'üë§')} <b>–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        profile_text += f"üé≠ <b>{user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b>"
        if user.username:
            profile_text += f" (@{user.username})"
        profile_text += f"\n"
        
        # –†–∞–Ω–≥ —Ç–∞ –±–∞–ª–∏
        profile_text += f"üèÜ <b>–†–∞–Ω–≥:</b> {rank_info['current']['name']}\n"
        profile_text += f"üí∞ <b>–ë–∞–ª–∏:</b> {user.points:,}\n"
        
        # –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É
        if rank_info['next']:
            progress_percent = (rank_info['progress'] / (rank_info['progress'] + rank_info['next_threshold'])) * 100
            progress_bar = "‚ñà" * int(progress_percent / 10) + "‚ñë" * (10 - int(progress_percent / 10))
            profile_text += f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å:</b> {progress_bar} {progress_percent:.1f}%\n"
            profile_text += f"üéØ <b>–î–æ {rank_info['next']['name']}:</b> {rank_info['next_threshold']:,} –±–∞–ª—ñ–≤\n"
        else:
            profile_text += f"üåü <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∞–Ω–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ!</b>\n"
        
        profile_text += "\n"
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        profile_text += f"üèÖ <b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:</b> {achievements}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É:</b>\n"
        profile_text += f"‚Ä¢ üìù –ñ–∞—Ä—Ç—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user.jokes_approved}\n"
        profile_text += f"‚Ä¢ üñº –ú–µ–º—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user.memes_approved}\n"
        profile_text += f"‚Ä¢ üì§ –í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {user.jokes_submitted + user.memes_submitted}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        profile_text += f"\nüéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>\n"
        profile_text += f"‚Ä¢ üëç –†–µ–∞–∫—Ü—ñ–π –¥–∞–Ω–æ: {user.reactions_given}\n"
        profile_text += f"‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ–≤ –≤–∏–≥—Ä–∞–Ω–æ: {user.duels_won}\n"
        profile_text += f"‚Ä¢ ü•ä –î—É–µ–ª—ñ–≤ –ø—Ä–æ–≥—Ä–∞–Ω–æ: {user.duels_lost}\n"
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        total_duels = user.duels_won + user.duels_lost
        win_rate = (user.duels_won / total_duels * 100) if total_duels > 0 else 0
        
        profile_text += f"\nüìà <b>–ó–∞–≥–∞–ª—å–Ω–µ:</b>\n"
        profile_text += f"‚Ä¢ üóì –î–Ω—ñ–≤ –≤ –±–æ—Ç—ñ: {days_active}\n"
        profile_text += f"‚Ä¢ üéØ –í–∏–Ω—Ä–µ–π—Ç –¥—É–µ–ª—ñ–≤: {win_rate:.1f}%\n"
        profile_text += f"‚Ä¢ üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {user.created_at.strftime('%d.%m.%Y')}\n"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        keyboard = get_profile_keyboard(user_id)
        
        await message.answer(profile_text, reply_markup=keyboard)
        
        logger.info(f"üë§ –ü–æ–∫–∞–∑–∞–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é: {e}")
        await message.answer(
            f"{EMOJI.get('cross', '‚ùå')} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—é.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

def get_profile_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üèÜ –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤",
                callback_data="show_leaderboard"
            ),
            InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data=f"detailed_stats_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üéØ –ú–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
                callback_data=f"achievements_{user_id}"
            ),
            InlineKeyboardButton(
                text="üìà –Ü—Å—Ç–æ—Ä—ñ—è –±–∞–ª—ñ–≤",
                callback_data=f"points_history_{user_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å",
                callback_data=f"refresh_profile_{user_id}"
            )
        ]
    ])

# ===== –¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í =====

async def cmd_top(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /top - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤"""
    await show_leaderboard(message)

async def show_leaderboard(message: Message, page: int = 1):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤"""
    try:
        from database import get_db_session
        from database.models import User
        from sqlalchemy import desc
        
        with get_db_session() as session:
            # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = session.query(User).order_by(desc(User.points)).limit(20).all()
            
            if not users:
                await message.answer(
                    f"{EMOJI.get('warning', '‚ö†Ô∏è')} –ü–æ–∫–∏ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É.\n"
                    f"–ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º! –ó–±–∏—Ä–∞–π—Ç–µ –±–∞–ª–∏ —ñ –ø—ñ–¥–Ω—ñ–º–∞—Ç—å—Å—è –≤ –¢–û–ü!"
                )
                return
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É
            leaderboard_text = f"{EMOJI.get('trophy', 'üèÜ')} <b>–¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í</b>\n\n"
            
            for i, user in enumerate(users, 1):
                # –í–∏–∑–Ω–∞—á–∏—Ç–∏ –º–µ–¥–∞–ª—å
                if i == 1:
                    medal = "ü•á"
                elif i == 2:
                    medal = "ü•à"
                elif i == 3:
                    medal = "ü•â"
                else:
                    medal = f"{i}Ô∏è‚É£"
                
                # –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞–Ω–≥
                rank_info = get_rank_by_points(user.points)
                rank_emoji = rank_info['current']['emoji']
                
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–æ–∫
                username = user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                if len(username) > 15:
                    username = username[:12] + "..."
                
                leaderboard_text += f"{medal} {rank_emoji} <b>{username}</b>\n"
                leaderboard_text += f"    üí∞ {user.points:,} –±–∞–ª—ñ–≤\n"
                
                # –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–æ–ø-3
                if i <= 3:
                    total_approved = user.jokes_approved + user.memes_approved
                    leaderboard_text += f"    üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {total_approved} | ‚öîÔ∏è –î—É–µ–ª—ñ–≤: {user.duels_won}\n"
                
                leaderboard_text += "\n"
            
            # –î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            current_user_id = message.from_user.id
            current_user_position = None
            
            # –ó–Ω–∞–π—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            all_users = session.query(User).order_by(desc(User.points)).all()
            for i, user in enumerate(all_users, 1):
                if user.id == current_user_id:
                    current_user_position = i
                    break
            
            if current_user_position:
                leaderboard_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                leaderboard_text += f"üìç <b>–í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è: #{current_user_position}</b>\n"
                
                current_user = session.query(User).filter(User.id == current_user_id).first()
                if current_user:
                    rank_info = get_rank_by_points(current_user.points)
                    leaderboard_text += f"üí∞ –í–∞—à—ñ –±–∞–ª–∏: {current_user.points:,}\n"
                    leaderboard_text += f"üèÜ –í–∞—à —Ä–∞–Ω–≥: {rank_info['current']['name']}"
            
            # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
            keyboard = get_leaderboard_keyboard(page)
            
            await message.answer(leaderboard_text, reply_markup=keyboard)
            
            logger.info(f"üèÜ –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É: {e}")
        await message.answer(
            f"{EMOJI.get('cross', '‚ùå')} –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
        )

def get_leaderboard_keyboard(page: int = 1) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥—É"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å",
                callback_data="show_my_profile"
            ),
            InlineKeyboardButton(
                text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ –¢–û–ü",
                callback_data="refresh_leaderboard"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –¢–û–ü –ø–æ –∂–∞—Ä—Ç–∞—Ö",
                callback_data="top_jokes"
            ),
            InlineKeyboardButton(
                text="üñº –¢–û–ü –ø–æ –º–µ–º–∞—Ö",
                callback_data="top_memes"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚öîÔ∏è –¢–û–ü –¥—É–µ–ª—è–Ω—Ç—ñ–≤",
                callback_data="top_duels"
            ),
            InlineKeyboardButton(
                text="üéØ –¢–û–ü —Ç–∏–∂–¥–µ–Ω—å",
                callback_data="top_week"
            )
        ]
    ])

# ===== CALLBACK –•–ï–ù–î–õ–ï–†–ò =====

async def callback_show_profile(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —á–µ—Ä–µ–∑ callback"""
    user_id = callback_query.from_user.id
    await show_user_profile(callback_query.message, user_id)
    await callback_query.answer()

async def callback_show_leaderboard(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥ —á–µ—Ä–µ–∑ callback"""
    await show_leaderboard(callback_query.message)
    await callback_query.answer()

async def callback_refresh_profile(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 3:
        user_id = int(data_parts[2])
        await show_user_profile(callback_query.message, user_id)
        await callback_query.answer("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)

async def callback_refresh_leaderboard(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–∏—Ç–∏ –ª—ñ–¥–µ—Ä–±–æ—Ä–¥"""
    await show_leaderboard(callback_query.message)
    await callback_query.answer("‚úÖ –õ—ñ–¥–µ—Ä–±–æ—Ä–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ!")

async def callback_detailed_stats(callback_query: CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 3:
        user_id = int(data_parts[2])
        await show_detailed_stats(callback_query.message, user_id)
        await callback_query.answer()
    else:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)

async def show_detailed_stats(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        from database import get_user_by_id, get_db_session
        from database.models import Content, Rating
        from sqlalchemy import func, and_
        
        user = await get_user_by_id(user_id)
        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        with get_db_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            total_content = session.query(Content).filter(Content.author_id == user_id).count()
            approved_content = session.query(Content).filter(
                and_(Content.author_id == user_id, Content.status == 'APPROVED')
            ).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
            total_views = session.query(func.sum(Content.views)).filter(
                and_(Content.author_id == user_id, Content.status == 'APPROVED')
            ).scalar() or 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞–π–∫—ñ–≤
            total_likes = session.query(func.sum(Content.likes)).filter(
                and_(Content.author_id == user_id, Content.status == 'APPROVED')
            ).scalar() or 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
            ratings_given = session.query(Rating).filter(Rating.user_id == user_id).count()
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = f"üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            stats_text += f"üë§ <b>{user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b>\n\n"
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            stats_text += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {total_content}\n"
            stats_text += f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_content}\n"
            stats_text += f"‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {(approved_content/total_content*100):.1f}%\n" if total_content > 0 else "‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: 0%\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {total_views:,}\n"
            stats_text += f"‚Ä¢ –í—Å—å–æ–≥–æ –ª–∞–π–∫—ñ–≤: {total_likes:,}\n\n"
            
            # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
            stats_text += f"üéÆ <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>\n"
            stats_text += f"‚Ä¢ –†–µ–∞–∫—Ü—ñ–π –¥–∞–Ω–æ: {ratings_given}\n"
            stats_text += f"‚Ä¢ –î—É–µ–ª—ñ–≤ –≤–∏–≥—Ä–∞–Ω–æ: {user.duels_won}\n"
            stats_text += f"‚Ä¢ –î—É–µ–ª—ñ–≤ –ø—Ä–æ–≥—Ä–∞–Ω–æ: {user.duels_lost}\n"
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏
            total_duels = user.duels_won + user.duels_lost
            win_rate = (user.duels_won / total_duels * 100) if total_duels > 0 else 0
            avg_views = (total_views / approved_content) if approved_content > 0 else 0
            
            stats_text += f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç –¥—É–µ–ª—ñ–≤: {win_rate:.1f}%\n"
            stats_text += f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: {avg_views:.1f}\n\n"
            
            # –ë–∞–ª–∏
            stats_text += f"üí∞ <b>–ë–∞–ª–∏:</b>\n"
            stats_text += f"‚Ä¢ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {user.points:,}\n"
            
            # –ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω—ñ –±–∞–ª–∏
            estimated_content_points = approved_content * 30  # 10 –∑–∞ –ø–æ–¥–∞—á—É + 20 –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
            estimated_reaction_points = ratings_given * 5
            estimated_duel_points = user.duels_won * 15
            
            stats_text += f"‚Ä¢ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: {estimated_content_points}\n"
            stats_text += f"‚Ä¢ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ —Ä–µ–∞–∫—Ü—ñ—ó: {estimated_reaction_points}\n"
            stats_text += f"‚Ä¢ –û—Ä—ñ—î–Ω—Ç–æ–≤–Ω–æ –∑–∞ –¥—É–µ–ª—ñ: {estimated_duel_points}\n"
            
            await message.answer(stats_text)
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def callback_achievements(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"""
    data_parts = callback_query.data.split('_')
    if len(data_parts) >= 2:
        user_id = int(data_parts[1])
        await show_achievements(callback_query.message, user_id)
        await callback_query.answer()
    else:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–∞–Ω–∏—Ö", show_alert=True)

async def show_achievements(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        from database import get_user_by_id
        
        user = await get_user_by_id(user_id)
        if not user:
            await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
        
        achievements_text = f"üèÖ <b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è</b>\n\n"
        achievements_text += f"üë§ <b>{user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b>\n\n"
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—è–≥–Ω–µ–Ω—å
        achievements = []
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
        if user.jokes_approved >= 1:
            achievements.append({"name": "üìù –ü–µ—Ä—à–∏–π –∂–∞—Ä—Ç", "desc": "–°—Ö–≤–∞–ª–µ–Ω–æ –ø–µ—Ä—à–∏–π –∂–∞—Ä—Ç"})
        if user.jokes_approved >= 10:
            achievements.append({"name": "üòÇ –ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫", "desc": "–°—Ö–≤–∞–ª–µ–Ω–æ 10+ –∂–∞—Ä—Ç—ñ–≤"})
        if user.jokes_approved >= 50:
            achievements.append({"name": "üé≠ –ö–æ–º–µ–¥—ñ–∞–Ω—Ç", "desc": "–°—Ö–≤–∞–ª–µ–Ω–æ 50+ –∂–∞—Ä—Ç—ñ–≤"})
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –º–µ–º—ã
        if user.memes_approved >= 1:
            achievements.append({"name": "üñº –ü–µ—Ä—à–∏–π –º–µ–º", "desc": "–°—Ö–≤–∞–ª–µ–Ω–æ –ø–µ—Ä—à–∏–π –º–µ–º"})
        if user.memes_approved >= 10:
            achievements.append({"name": "üî• –ú–µ–º–æ–ª–æ—Ä–¥", "desc": "–°—Ö–≤–∞–ª–µ–Ω–æ 10+ –º–µ–º—ñ–≤"})
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –¥—É–µ–ª—ñ
        if user.duels_won >= 1:
            achievements.append({"name": "‚öîÔ∏è –ü–µ—Ä—à–∞ –ø–µ—Ä–µ–º–æ–≥–∞", "desc": "–í–∏–≥—Ä–∞–Ω–æ –ø–µ—Ä—à–∏–π –¥—É–µ–ª—å"})
        if user.duels_won >= 10:
            achievements.append({"name": "üèÜ –î—É–µ–ª—è–Ω—Ç", "desc": "–í–∏–≥—Ä–∞–Ω–æ 10+ –¥—É–µ–ª—ñ–≤"})
        if user.duels_won >= 50:
            achievements.append({"name": "üëë –ß–µ–º–ø—ñ–æ–Ω", "desc": "–í–∏–≥—Ä–∞–Ω–æ 50+ –¥—É–µ–ª—ñ–≤"})
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –±–∞–ª–∏
        if user.points >= 100:
            achievements.append({"name": "üí∞ –ü–µ—Ä—à–∞ —Å–æ—Ç–Ω—è", "desc": "–ó—ñ–±—Ä–∞–Ω–æ 100+ –±–∞–ª—ñ–≤"})
        if user.points >= 1000:
            achievements.append({"name": "üíé –¢–∏—Å—è—á–Ω–∏–∫", "desc": "–ó—ñ–±—Ä–∞–Ω–æ 1000+ –±–∞–ª—ñ–≤"})
        if user.points >= 5000:
            achievements.append({"name": "üöÄ –ú—ñ–ª—å–π–æ–Ω–µ—Ä", "desc": "–ó—ñ–±—Ä–∞–Ω–æ 5000+ –±–∞–ª—ñ–≤"})
        
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        if user.reactions_given >= 50:
            achievements.append({"name": "üëç –ê–∫—Ç–∏–≤–Ω–∏–π –∫—Ä–∏—Ç–∏–∫", "desc": "–î–∞–Ω–æ 50+ —Ä–µ–∞–∫—Ü—ñ–π"})
        if user.reactions_given >= 200:
            achievements.append({"name": "üéØ –°—É–ø–µ—Ä –∫—Ä–∏—Ç–∏–∫", "desc": "–î–∞–Ω–æ 200+ —Ä–µ–∞–∫—Ü—ñ–π"})
        
        # –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        if achievements:
            for achievement in achievements:
                achievements_text += f"{achievement['name']}\n"
                achievements_text += f"<i>{achievement['desc']}</i>\n\n"
        else:
            achievements_text += "–î–æ—Å—è–≥–Ω–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.\n–ü–æ—á–Ω—ñ—Ç—å –∑–±–∏—Ä–∞—Ç–∏ –±–∞–ª–∏ —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏!"
        
        await message.answer(achievements_text)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å")

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_gamification_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_top, Command("top"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_show_profile, F.data == "show_profile")
    dp.callback_query.register(callback_show_profile, F.data == "show_my_profile")
    dp.callback_query.register(callback_show_leaderboard, F.data == "show_leaderboard")
    dp.callback_query.register(callback_refresh_profile, F.data.startswith("refresh_profile_"))
    dp.callback_query.register(callback_refresh_leaderboard, F.data == "refresh_leaderboard")
    dp.callback_query.register(callback_detailed_stats, F.data.startswith("detailed_stats_"))
    dp.callback_query.register(callback_achievements, F.data.startswith("achievements_"))
    
    logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")