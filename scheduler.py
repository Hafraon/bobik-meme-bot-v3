#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –±–æ—Ç–∞ üß†üòÇüî•
"""

import asyncio
import logging
from datetime import datetime, time
from typing import List

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config.settings import EMOJI, settings, TIME_GREETINGS
from database.database import get_db_session, get_random_joke, get_random_meme, update_user_points
from database.models import User

logger = logging.getLogger(__name__)

class SchedulerService:
    """–°–µ—Ä–≤—ñ—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone='Europe/Kiev')  # –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —á–∞—Å–æ–≤–∞ –∑–æ–Ω–∞
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞
            self.scheduler.add_job(
                self.daily_broadcast,
                CronTrigger(
                    hour=settings.DAILY_BROADCAST_HOUR,
                    minute=settings.DAILY_BROADCAST_MINUTE
                ),
                id='daily_broadcast',
                name='–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É'
            )
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
            self.scheduler.add_job(
                self.finish_expired_duels,
                CronTrigger(minute='*/5'),
                id='finish_duels',
                name='–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π'
            )
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—â–æ—Ç–∏–∂–Ω—è)
            self.scheduler.add_job(
                self.weekly_cleanup,
                CronTrigger(day_of_week=0, hour=2, minute=0),  # –ù–µ–¥—ñ–ª—è 02:00
                id='weekly_cleanup',
                name='–¢–∏–∂–Ω–µ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è'
            )
            
            # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (—â–æ–¥–Ω—è –æ 20:00)
            self.scheduler.add_job(
                self.activity_reminder,
                CronTrigger(hour=20, minute=0),
                id='activity_reminder',
                name='–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å'
            )
            
            self.scheduler.start()
            logger.info("üî• –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    async def daily_broadcast(self):
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
        logger.info("üìÖ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏...")
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
            subscribers = await self.get_daily_subscribers()
            
            if not subscribers:
                logger.info("üì≠ –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–Ω—è
            daily_joke = await get_random_joke()
            daily_meme = await get_random_meme()
            
            if not daily_joke and not daily_meme:
                logger.warning("üì≠ –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            current_hour = datetime.now().hour
            if 6 <= current_hour < 12:
                greeting = f"{EMOJI['fire']} –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
                mood_text = "–ó–∞—Ä—è–¥–∂–∞–π—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!"
            elif 12 <= current_hour < 18:
                greeting = f"{EMOJI['laugh']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
                mood_text = "–ß–∞—Å –¥–ª—è –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ—ó –ø–∞—É–∑–∏!"
            else:
                greeting = f"{EMOJI['brain']} –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
                mood_text = "–†–æ–∑—Å–ª–∞–±—Å—è –∑ —Ö–æ—Ä–æ—à–∏–º –≥—É–º–æ—Ä–æ–º!"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü—ñ—ó
            stats_text = await self.get_daily_stats()
            
            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
            success_count = 0
            for subscriber in subscribers:
                try:
                    # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    personal_greeting = f"{greeting}\n\n{EMOJI['star']} {subscriber.first_name or '–î—Ä—É–∂–µ'}, {mood_text}\n\n"
                    
                    # –ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è
                    if daily_joke:
                        joke_message = (
                            f"{personal_greeting}"
                            f"{EMOJI['brain']} <b>–ê–ù–ï–ö–î–û–¢ –î–ù–Ø:</b>\n\n"
                            f"{daily_joke.text}\n\n"
                            f"{stats_text}"
                        )
                        
                        await self.bot.send_message(
                            subscriber.id,
                            joke_message
                        )
                        
                        # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                        await asyncio.sleep(0.5)
                    
                    # –ú–µ–º –¥–Ω—è (—è–∫—â–æ —î)
                    if daily_meme:
                        meme_caption = f"{EMOJI['laugh']} <b>–ú–ï–ú –î–ù–Ø:</b>\n\n{daily_meme.text}"
                        
                        if daily_meme.file_id:
                            await self.bot.send_photo(
                                subscriber.id,
                                photo=daily_meme.file_id,
                                caption=meme_caption
                            )
                        elif daily_meme.file_url:
                            await self.bot.send_photo(
                                subscriber.id,
                                photo=daily_meme.file_url,
                                caption=meme_caption
                            )
                        else:
                            await self.bot.send_message(
                                subscriber.id,
                                meme_caption
                            )
                        
                        await asyncio.sleep(0.5)
                    
                    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    await update_user_points(subscriber.id, 2, "—â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")
                    
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {subscriber.id}: {e}")
                    continue
            
            logger.info(f"üì§ –©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {success_count}/{len(subscribers)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    async def get_daily_subscribers(self) -> List[User]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        with get_db_session() as session:
            return session.query(User).filter(User.daily_subscription == True).all()
    
    async def get_daily_stats(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü—ñ—ó"""
        with get_db_session() as session:
            total_users = session.query(User).count()
            total_points = session.query(User.points).filter(User.points > 0).count()
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ñ—Ä–∞–∑–∞
            motivational_phrases = [
                f"{EMOJI['rocket']} –°—å–æ–≥–æ–¥–Ω—ñ {total_users} –ª—é–¥–µ–π —Å–º—ñ—é—Ç—å—Å—è —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏!",
                f"{EMOJI['fire']} –í–∂–µ {total_points} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞—Ä–æ–±–∏–ª–∏ –±–∞–ª–∏!",
                f"{EMOJI['star']} –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –≥—É–º–æ—Ä–∏—Å—Ç—ñ–≤!",
                f"{EMOJI['trophy']} –ö–æ–∂–µ–Ω –¥–µ–Ω—å - –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ—Å–º—ñ—è—Ç–∏—Å—è!",
                f"{EMOJI['heart']} –ì—É–º–æ—Ä –æ–±'—î–¥–Ω—É—î –Ω–∞—Å –≤—Å—ñ—Ö!"
            ]
            
            import random
            return random.choice(motivational_phrases)
    
    async def finish_expired_duels(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π"""
        try:
            from database.models import Duel, DuelStatus
            from handlers.duel_handlers import finish_duel
            
            with get_db_session() as session:
                expired_duels = session.query(Duel).filter(
                    Duel.status == DuelStatus.ACTIVE,
                    Duel.voting_ends_at <= datetime.utcnow()
                ).all()
                
                for duel in expired_duels:
                    try:
                        result = await finish_duel(duel.id)
                        
                        if result:
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞–º –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            result_text = (
                                f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
                                f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê: {result['initiator_votes']} –≥–æ–ª–æ—Å—ñ–≤\n"
                                f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë: {result['opponent_votes']} –≥–æ–ª–æ—Å—ñ–≤\n\n"
                            )
                            
                            if result['winner_id']:
                                result_text += f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ +15 –±–∞–ª—ñ–≤!</b>"
                            else:
                                result_text += f"{EMOJI['thinking']} <b>–ù—ñ—á–∏—è! –û–±–∏–¥–≤–∞ —É—á–∞—Å–Ω–∏–∫–∏ –º–æ–ª–æ–¥—Ü—ñ!</b>"
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä—É
                            try:
                                await self.bot.send_message(duel.initiator_id, result_text)
                            except:
                                pass
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–æ–Ω–µ–Ω—Ç—É
                            if duel.opponent_id:
                                try:
                                    await self.bot.send_message(duel.opponent_id, result_text)
                                except:
                                    pass
                        
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ {duel.id}: {e}")
                
                if expired_duels:
                    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(expired_duels)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π: {e}")
    
    async def weekly_cleanup(self):
        """–¢–∏–∂–Ω–µ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è —Ç–∞ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
        logger.info("üßπ –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è...")
        
        try:
            from database.models import Rating, BotStatistics
            
            with get_db_session() as session:
                # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ (—Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤)
                month_ago = datetime.utcnow() - timedelta(days=30)
                old_ratings = session.query(Rating).filter(
                    Rating.created_at < month_ago
                ).delete()
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∏–∂–Ω—è
                weekly_stats = BotStatistics(
                    total_users=session.query(User).count(),
                    active_users_today=session.query(User).filter(
                        User.last_active >= datetime.utcnow() - timedelta(days=7)
                    ).count(),
                    # –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ –º–µ—Ç—Ä–∏–∫–∏
                )
                session.add(weekly_stats)
                session.commit()
                
                logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {old_ratings} —Å—Ç–∞—Ä–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
    
    async def activity_reminder(self):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
        try:
            from datetime import timedelta
            
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –Ω–µ –±—É–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ 3 –¥–Ω—ñ
            three_days_ago = datetime.utcnow() - timedelta(days=3)
            
            with get_db_session() as session:
                inactive_users = session.query(User).filter(
                    User.last_active < three_days_ago,
                    User.daily_subscription == False  # –ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É
                ).limit(50).all()  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                
                reminder_text = (
                    f"{EMOJI['thinking']} <b>–°—É–º—É—î–º–æ –∑–∞ —Ç–æ–±–æ—é!</b>\n\n"
                    f"{EMOJI['brain']} –ü–æ–∫–∏ —Ç–∏ –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑'—è–≤–∏–ª–æ—Å—è –±–∞–≥–∞—Ç–æ –Ω–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤\n"
                    f"{EMOJI['fire']} –¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—è\n"
                    f"{EMOJI['star']} –ü–æ–≤–µ—Ä—Ç–∞–π—Å—è —à–≤–∏–¥—à–µ!\n\n"
                    f"{EMOJI['laugh']} /meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–º\n"
                    f"{EMOJI['calendar']} /daily - –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É"
                )
                
                sent_count = 0
                for user in inactive_users:
                    try:
                        await self.bot.send_message(user.id, reminder_text)
                        sent_count += 1
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    except:
                        continue
                
                if sent_count > 0:
                    logger.info(f"üì¨ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å {sent_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è

async def send_broadcast_message(bot, message_text: str, target_users: List[int] = None):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–±–æ –≤–∏–±—Ä–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    try:
        if target_users is None:
            # –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            with get_db_session() as session:
                all_users = session.query(User).all()
                target_users = [user.id for user in all_users]
        
        success_count = 0
        for user_id in target_users:
            try:
                await bot.send_message(user_id, message_text)
                success_count += 1
                await asyncio.sleep(0.1)  # –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–∞—É–∑–∞
            except:
                continue
        
        logger.info(f"üì¢ –†–æ–∑—Å–∏–ª–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {success_count}/{len(target_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return success_count
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        return 0