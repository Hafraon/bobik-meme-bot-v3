#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –°–ö–†–ò–ü–¢ –ú–Ü–ì–†–ê–¶–Ü–á –ë–î (–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø ENUM –ü–†–û–ë–õ–ï–ú) üß†üòÇüî•
–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ–±–ª–µ–º –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
"""

import os
import sys
import logging
from datetime import datetime

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ —à–ª—è—Ö—É
sys.path.insert(0, os.path.dirname(__file__))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('migration.log')
    ]
)

logger = logging.getLogger(__name__)

def get_database_url():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞!")
        sys.exit(1)
    
    logger.info(f"üîó –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {database_url[:50]}...")
    return database_url

def backup_existing_data():
    """–†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö"""
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(get_database_url())
        
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """))
            
            tables = [row[0] for row in result]
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—ñ: {tables}")
            
            # –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if 'users' in tables:
                users_result = conn.execute(text("SELECT COUNT(*) FROM users"))
                users_count = users_result.scalar()
                logger.info(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –ë–î: {users_count}")
                
                if users_count > 0:
                    # –ï–∫—Å–ø–æ—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    users_data = conn.execute(text("""
                        SELECT id, username, first_name, points, rank, created_at 
                        FROM users 
                        ORDER BY created_at
                    """))
                    
                    backup_file = f"users_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                    with open(backup_file, 'w', encoding='utf-8') as f:
                        f.write("# –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n")
                        f.write("# ID, Username, First Name, Points, Rank, Created At\n")
                        for row in users_data:
                            f.write(f"{row[0]},{row[1]},{row[2]},{row[3]},{row[4]},{row[5]}\n")
                    
                    logger.info(f"üíæ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {backup_file}")
            
            # –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            if 'content' in tables:
                content_result = conn.execute(text("SELECT COUNT(*) FROM content"))
                content_count = content_result.scalar()
                logger.info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É –≤ –ë–î: {content_count}")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: {e}")
        logger.info("–ü—Ä–æ–¥–æ–≤–∂—É—é –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è...")

def drop_all_tables():
    """–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ"""
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(get_database_url())
        
        with engine.begin() as conn:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ –∫–ª—é—á—ñ)
            tables_to_drop = [
                'duel_votes',
                'admin_actions', 
                'bot_statistics',
                'ratings',
                'duels',
                'content',
                'users'
            ]
            
            for table in tables_to_drop:
                try:
                    conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {table}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è {table}: {e}")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö enum —Ç–∏–ø—ñ–≤
            enum_types = ['contentstatus', 'contenttype', 'duelstatus']
            for enum_type in enum_types:
                try:
                    conn.execute(text(f"DROP TYPE IF EXISTS {enum_type} CASCADE"))
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ enum —Ç–∏–ø: {enum_type}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è enum {enum_type}: {e}")
            
        logger.info("‚úÖ –í—Å—ñ —Å—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        raise

def create_new_tables():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º–∏ enum"""
    try:
        # –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
        from database.models import Base
        from sqlalchemy import create_engine
        
        engine = create_engine(get_database_url())
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ –ù–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        raise

def add_initial_admin():
    """–î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin_id = os.getenv("ADMIN_ID")
        if not admin_id:
            logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞")
            return
        
        admin_id = int(admin_id)
        
        from database.database import get_or_create_user
        import asyncio
        
        async def create_admin():
            admin_user = await get_or_create_user(
                telegram_id=admin_id,
                username="admin",
                first_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                last_name="–ë–æ—Ç–∞"
            )
            
            if admin_user:
                logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞ {admin_id}")
        
        asyncio.run(create_admin())
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {e}")

def add_sample_content():
    """–î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        from database.database import add_content_for_moderation, moderate_content
        import asyncio
        
        admin_id = int(os.getenv("ADMIN_ID", "0"))
        if not admin_id:
            logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑—Ä–∞–∑–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return
        
        sample_jokes = [
            "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∫–æ–ª–∏ –Ω–µ –º–æ–∂–µ –∑–∞—Å–Ω—É—Ç–∏? –†–∞—Ö—É—î –æ–≤–µ—Ü—å —É —Ü–∏–∫–ª—ñ while!",
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å —Ç–µ–º–Ω–∏–π —Ä–µ–∂–∏–º? –¢–æ–º—É —â–æ —Å–≤—ñ—Ç–ª–æ –ø—Ä–∏–≤–∞–±–ª—é—î –∂—É–∫—ñ–≤!",
            "–©–æ —Å–∫–∞–∑–∞–≤ HTML CSS? –ë–µ–∑ —Ç–µ–±–µ —è –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞—á—É!",
            "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –±–∞—Ä —ñ –∑–∞–º–æ–≤–ª—è—î 1 –ø–∏–≤–æ, 0 –ø–∏–≤, -1 –ø–∏–≤–æ, NULL –ø–∏–≤...",
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ñ–Ω —ñ –†—ñ–∑–¥–≤–æ? –¢–æ–º—É —â–æ 31 OCT = 25 DEC!",
        ]
        
        async def create_sample_content():
            for joke in sample_jokes:
                # –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
                content = await add_content_for_moderation(
                    author_id=admin_id,
                    content_text=joke,
                    content_type="JOKE"
                )
                
                if content:
                    # –û–¥—Ä–∞–∑—É —Å—Ö–≤–∞–ª–∏—Ç–∏
                    await moderate_content(
                        content_id=content.id,
                        action="APPROVE", 
                        moderator_id=admin_id,
                        comment="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                    )
                    logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –∑—Ä–∞–∑–∫–æ–≤–∏–π –∂–∞—Ä—Ç: {joke[:50]}...")
        
        asyncio.run(create_sample_content())
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")

def verify_migration():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(get_database_url())
        
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            
            tables = [row[0] for row in result]
            expected_tables = ['users', 'content', 'ratings', 'duels', 'duel_votes', 'admin_actions', 'bot_statistics']
            
            logger.info(f"üìã –°—Ç–≤–æ—Ä–µ–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {tables}")
            
            missing_tables = set(expected_tables) - set(tables)
            if missing_tables:
                logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {missing_tables}")
            else:
                logger.info("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ enum —Ç–∏–ø—ñ–≤
            enum_result = conn.execute(text("""
                SELECT typname FROM pg_type 
                WHERE typtype = 'e' 
                ORDER BY typname
            """))
            
            enums = [row[0] for row in enum_result]
            logger.info(f"üî¢ Enum —Ç–∏–ø–∏: {enums}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            if 'users' in tables:
                users_count = conn.execute(text("SELECT COUNT(*) FROM users")).scalar()
                logger.info(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –ë–î: {users_count}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            if 'content' in tables:
                content_count = conn.execute(text("SELECT COUNT(*) FROM content")).scalar()
                approved_count = conn.execute(text("SELECT COUNT(*) FROM content WHERE status = 'APPROVED'")).scalar()
                logger.info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É –≤ –ë–î: {content_count} (—Å—Ö–≤–∞–ª–µ–Ω–æ: {approved_count})")
        
        logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    print("üß†üòÇüî• –ú–Ü–ì–†–ê–¶–Ü–Ø –ë–ê–ó–ò –î–ê–ù–ò–• –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê üß†üòÇüî•")
    print("=" * 60)
    
    try:
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        
        # –ö—Ä–æ–∫ 1: –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
        logger.info("üìã –ö—Ä–æ–∫ 1: –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        backup_existing_data()
        
        # –ö—Ä–æ–∫ 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        logger.info("üóëÔ∏è –ö—Ä–æ–∫ 2: –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–±–ª–∏—Ü—å")
        drop_all_tables()
        
        # –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        logger.info("üèóÔ∏è –ö—Ä–æ–∫ 3: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å")
        create_new_tables()
        
        # –ö—Ä–æ–∫ 4: –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("üëë –ö—Ä–æ–∫ 4: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        add_initial_admin()
        
        # –ö—Ä–æ–∫ 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        logger.info("üìù –ö—Ä–æ–∫ 5: –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        add_sample_content()
        
        # –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        logger.info("‚úÖ –ö—Ä–æ–∫ 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó")
        verify_migration()
        
        print("\n" + "=" * 60)
        print("üéâ –ú–Ü–ì–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        print("üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª—ñ migration.log")
        print("=" * 60)
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ú–Ü–ì–†–ê–¶–Ü–á: {e}")
        print(f"\n‚ùå –ú–Ü–ì–†–ê–¶–Ü–Ø –ù–ï–£–°–ü–Ü–®–ù–ê: {e}")
        print("üìù –î–µ—Ç–∞–ª—ñ –≤ —Ñ–∞–π–ª—ñ migration.log")
        sys.exit(1)

if __name__ == "__main__":
    main()