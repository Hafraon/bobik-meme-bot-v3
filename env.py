#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• Alembic —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ–π –ë–î üß†üòÇüî•
"""

from logging.config import fileConfig
import os
import sys
from pathlib import Path

from sqlalchemy import engine_from_config
from sqlalchemy import pool

from alembic import context

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ PATH
sys.path.insert(0, str(Path(__file__).parent.parent))

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ç–∞ –º–æ–¥–µ–ª–µ–π
from config.settings import settings
from database.models import Base

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def get_database_url():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    return settings.DATABASE_URL

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well.  By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.

    """
    url = get_database_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        compare_type=True,
        compare_server_default=True,
        render_as_batch=True  # –î–ª—è SQLite
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.

    """
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è URL –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    database_url = get_database_url()
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ —Ä–µ–∞–ª—å–Ω–∏–º URL
    config.set_main_option("sqlalchemy.url", database_url)
    
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            render_as_batch=True,  # –î–ª—è SQLite
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏
            transaction_per_migration=True,
            # –í–∫–ª—é—á–µ–Ω–Ω—è —ñ–º–µ–Ω —ñ–Ω–¥–µ–∫—Å—ñ–≤
            include_name=lambda name, type_, parent_names: True,
            # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∫–æ–ª–æ–Ω–æ–∫
            compare_type=lambda context, inspected_column, metadata_column, inspected_type, metadata_type: True
        )

        with context.begin_transaction():
            context.run_migrations()

def include_name(name, type_, parent_names):
    """
    –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—ñ –æ–±'—î–∫—Ç–∏ –≤–∫–ª—é—á–∞—Ç–∏ –≤ –º—ñ–≥—Ä–∞—Ü—ñ—ó
    """
    if type_ == "table":
        # –í–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ
        return True
    elif type_ == "column":
        # –í–∫–ª—é—á–∞—î–º–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏
        return True
    elif type_ == "index":
        # –í–∫–ª—é—á–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å–∏
        return True
    elif type_ == "unique_constraint":
        # –í–∫–ª—é—á–∞—î–º–æ unique constraints
        return True
    elif type_ == "foreign_key_constraint":
        # –í–∫–ª—é—á–∞—î–º–æ foreign keys
        return True
    else:
        return True

def compare_type(context, inspected_column, metadata_column, inspected_type, metadata_type):
    """
    –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∏–ø—ñ–≤ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º—ñ–≥—Ä–∞—Ü—ñ–π
    """
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∑–Ω–∞—á–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ —É —Ç–∏–ø–∞—Ö
    if str(inspected_type).lower() == str(metadata_type).lower():
        return False
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è SQLite
    if "sqlite" in str(context.connection.engine.url):
        # SQLite –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ INTEGER —è–∫ INTEGER, –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É
        if "INTEGER" in str(inspected_type).upper() and "INTEGER" in str(metadata_type).upper():
            return False
        
        # SQLite –Ω–µ —Ä–æ–∑—Ä—ñ–∑–Ω—è—î VARCHAR —Ç–∞ TEXT
        if ("VARCHAR" in str(inspected_type).upper() or "TEXT" in str(inspected_type).upper()) and \
           ("VARCHAR" in str(metadata_type).upper() or "TEXT" in str(metadata_type).upper()):
            return False
    
    return True

def compare_server_default(context, inspected_column, metadata_column, inspected_default, metadata_default, rendered_metadata_default):
    """
    –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    """
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –Ω–µ–∑–Ω–∞—á–Ω—ñ –≤—ñ–¥–º—ñ–Ω–Ω–æ—Å—Ç—ñ
    if inspected_default is None and metadata_default is None:
        return False
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ë–î
    return True

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()