#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É üß†üòÇüî•
"""

import logging
import re

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from config.settings import EMOJI, TEXTS, settings
from database.database import (
    get_pending_content, moderate_content, update_user_points, get_db_session
)
from database.models import Content, ContentStatus, User

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID

async def cmd_pending(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /pending - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await message.answer(f"{EMOJI['check']} –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!")
        return
    
    await message.answer(
        f"{EMOJI['brain']} <b>–ö–û–ù–¢–ï–ù–¢ –ù–ê –ú–û–î–ï–†–ê–¶–Ü–á</b>\n\n"
        f"{EMOJI['fire']} –ó–Ω–∞–π–¥–µ–Ω–æ: {len(pending_content)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /moderate –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É"
    )

async def cmd_moderate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ —á–µ—Ä–∑—ñ"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await message.answer(f"{EMOJI['check']} –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    content = pending_content[0]
    await show_content_for_moderation(message, content)

async def show_content_for_moderation(message: Message, content: Content):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    with get_db_session() as session:
        author = session.query(User).filter(User.id == content.author_id).first()
    
    author_info = f"{author.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}"
    if author.username:
        author_info += f" (@{author.username})"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∞
    author_stats = f"–ë–∞–ª—ñ–≤: {author.points} | –†–∞–Ω–≥: {author.rank}"
    approval_stats = f"–°—Ö–≤–∞–ª–µ–Ω–æ: {author.jokes_approved + author.memes_approved} –∑ {author.jokes_submitted + author.memes_submitted}"
    
    content_type_emoji = EMOJI['brain'] if content.content_type.value == 'joke' else EMOJI['laugh']
    content_type_name = "–ê–Ω–µ–∫–¥–æ—Ç" if content.content_type.value == 'joke' else "–ú–µ–º"
    
    moderation_text = (
        f"{EMOJI['new']} <b>–ú–û–î–ï–†–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
        f"{content_type_emoji} <b>–¢–∏–ø:</b> {content_type_name}\n"
        f"{EMOJI['profile']} <b>–ê–≤—Ç–æ—Ä:</b> {author_info}\n"
        f"{EMOJI['star']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> {author_stats}\n"
        f"{EMOJI['check']} <b>–°—Ö–≤–∞–ª–µ–Ω–Ω—è:</b> {approval_stats}\n"
        f"{EMOJI['calendar']} <b>–ù–∞–¥—ñ—Å–ª–∞–Ω–æ:</b> {content.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"{EMOJI['fire']} <b>–ö–û–ù–¢–ï–ù–¢:</b>\n{content.text}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['check']} –°—Ö–≤–∞–ª–∏—Ç–∏",
                callback_data=f"approve:{content.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['cross']} –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                callback_data=f"reject:{content.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['thinking']} –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
                callback_data=f"skip:{content.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['stats']} –ù–∞—Å—Ç—É–ø–Ω–∏–π",
                callback_data="next_moderation"
            )
        ]
    ])
    
    if content.content_type.value == 'meme' and content.file_id:
        # –Ø–∫—â–æ —Ü–µ –º–µ–º –∑ —Ñ–∞–π–ª–æ–º
        try:
            await message.answer_photo(
                photo=content.file_id,
                caption=moderation_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫–∞–∑—É –º–µ–º—É: {e}")
            await message.answer(moderation_text, reply_markup=keyboard)
    else:
        # –¢–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        await message.answer(moderation_text, reply_markup=keyboard)

async def cmd_approve_content(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /approve_ID - —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ ID"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
    match = re.search(r'/approve_(\d+)', message.text)
    if not match:
        await message.answer(f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /approve_ID")
        return
    
    content_id = int(match.group(1))
    await approve_content(message, content_id)

async def cmd_reject_content(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /reject_ID - –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ ID"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
    match = re.search(r'/reject_(\d+)', message.text)
    if not match:
        await message.answer(f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /reject_ID")
        return
    
    content_id = int(match.group(1))
    await reject_content(message, content_id)

async def approve_content(message: Message, content_id: int, comment: str = ""):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤ –ë–î
        await moderate_content(
            content_id=content_id,
            moderator_id=message.from_user.id,
            approve=True,
            comment=comment
        )
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if content:
                # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∞–≤—Ç–æ—Ä—É
                await update_user_points(
                    content.author_id,
                    settings.POINTS_FOR_APPROVAL,
                    "—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"
                )
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
                try:
                    await message.bot.send_message(
                        content.author_id,
                        TEXTS["submission_approved"]
                    )
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        await message.answer(
            f"{EMOJI['check']} <b>–ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ!</b>\n"
            f"{EMOJI['fire']} –ê–≤—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤"
        )
        
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç {content_id}")
        
    except Exception as e:
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")

async def reject_content(message: Message, content_id: int, comment: str = ""):
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –≤ –ë–î
        await moderate_content(
            content_id=content_id,
            moderator_id=message.from_user.id,
            approve=False,
            comment=comment
        )
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if content:
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
                try:
                    rejection_text = TEXTS["submission_rejected"]
                    if comment:
                        rejection_text += f"\n\n{EMOJI['info']} <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> {comment}"
                    
                    await message.bot.send_message(content.author_id, rejection_text)
                except Exception as e:
                    logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        await message.answer(
            f"{EMOJI['cross']} <b>–ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n"
            f"{EMOJI['thinking']} –ê–≤—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
        )
        
        logger.info(f"‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç {content_id}")
        
    except Exception as e:
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")

async def cmd_admin_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    with get_db_session() as session:
        # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = session.query(User).count()
        active_users_today = session.query(User).filter(
            User.last_active >= session.query(User.last_active).filter(
                User.last_active >= '2024-01-01'  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è today
            )
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        pending_count = session.query(Content).filter(
            Content.status == ContentStatus.PENDING
        ).count()
        
        approved_count = session.query(Content).filter(
            Content.status == ContentStatus.APPROVED
        ).count()
        
        rejected_count = session.query(Content).filter(
            Content.status == ContentStatus.REJECTED
        ).count()
        
        # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        top_users = session.query(User).order_by(User.points.desc()).limit(5).all()
    
    stats_text = (
        f"{EMOJI['crown']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\n\n"
        f"{EMOJI['profile']} <b>–ö–û–†–ò–°–¢–£–í–ê–ß–Ü:</b>\n"
        f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {active_users_today}\n\n"
        
        f"{EMOJI['brain']} <b>–ö–û–ù–¢–ï–ù–¢:</b>\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n"
        f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_count}\n"
        f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected_count}\n\n"
        
        f"{EMOJI['trophy']} <b>–¢–û–ü-5 –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í:</b>\n"
    )
    
    for i, user in enumerate(top_users, 1):
        stats_text += f"{i}. {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} - {user.points} –±–∞–ª—ñ–≤\n"
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏", callback_data="start_moderation"),
            InlineKeyboardButton(text=f"{EMOJI['stats']} –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_admin_stats")
        ]
    ])
    
    await message.answer(stats_text, reply_markup=keyboard)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_approve_content(callback_query):
    """Callback —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    content_id = int(callback_query.data.split(':')[1])
    await approve_content(callback_query.message, content_id)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    await callback_next_moderation(callback_query)

async def callback_reject_content(callback_query):
    """Callback –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    content_id = int(callback_query.data.split(':')[1])
    await reject_content(callback_query.message, content_id)
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    await callback_next_moderation(callback_query)

async def callback_skip_content(callback_query):
    """Callback –ø—Ä–æ–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await callback_query.answer("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await callback_next_moderation(callback_query)

async def callback_next_moderation(callback_query):
    """Callback –ø–æ–∫–∞–∑—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await callback_query.message.edit_text(
            f"{EMOJI['check']} <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"{EMOJI['fire']} –ù–µ–º–∞—î –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
    content = pending_content[0]
    await show_content_for_moderation(callback_query.message, content)
    await callback_query.answer()

async def callback_start_moderation(callback_query):
    """Callback –ø–æ—á–∞—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await callback_next_moderation(callback_query)

async def callback_refresh_admin_stats(callback_query):
    """Callback –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await cmd_admin_stats(callback_query.message)
    await callback_query.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

def register_moderation_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(cmd_pending, Command("pending"))
    dp.message.register(cmd_moderate, Command("moderate"))
    dp.message.register(cmd_admin_stats, Command("admin_stats"))
    
    # –ö–æ–º–∞–Ω–¥–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∑–∞ ID
    dp.message.register(cmd_approve_content, F.text.regexp(r'/approve_\d+'))
    dp.message.register(cmd_reject_content, F.text.regexp(r'/reject_\d+'))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_approve_content, F.data.startswith("approve:"))
    dp.callback_query.register(callback_reject_content, F.data.startswith("reject:"))
    dp.callback_query.register(callback_skip_content, F.data.startswith("skip:"))
    dp.callback_query.register(callback_next_moderation, F.data == "next_moderation")
    dp.callback_query.register(callback_start_moderation, F.data == "start_moderation")
    dp.callback_query.register(callback_refresh_admin_stats, F.data == "refresh_admin_stats")