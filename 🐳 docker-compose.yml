# üê≥ DOCKER COMPOSE –î–õ–Ø –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê üê≥
# –ü–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö, –∫–µ—à–µ–º —Ç–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º

version: '3.8'

# ===== –ú–ï–†–ï–ñ–Ü =====
networks:
  bot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===== VOLUMES =====
volumes:
  # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö PostgreSQL
  postgres_data:
    driver: local
  
  # –î–∞–Ω—ñ –±–æ—Ç–∞
  bot_data:
    driver: local
  
  # –õ–æ–≥–∏
  bot_logs:
    driver: local
  
  # –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
  bot_backups:
    driver: local
  
  # Redis –¥–∞–Ω—ñ
  redis_data:
    driver: local
  
  # Prometheus –¥–∞–Ω—ñ
  prometheus_data:
    driver: local
  
  # Grafana –¥–∞–Ω—ñ
  grafana_data:
    driver: local

# ===== –°–ï–†–í–Ü–°–ò =====
services:

  # ===== –ì–û–õ–û–í–ù–ò–ô –ë–û–¢ =====
  telegram-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ukrainian-telegram-bot
    restart: unless-stopped
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment:
      # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_USERNAME=${BOT_USERNAME:-BobikFun_bot}
      - ADMIN_ID=${ADMIN_ID:-603047391}
      - ADDITIONAL_ADMINS=${ADDITIONAL_ADMINS:-}
      
      # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
      - DATABASE_URL=postgresql://bot_user:${POSTGRES_PASSWORD:-bot_password}@postgres:5432/${POSTGRES_DB:-ukrainian_bot}
      - DB_POOL_SIZE=10
      - DB_MAX_OVERFLOW=20
      
      # Redis –∫–µ—à
      - REDIS_URL=redis://redis:6379/0
      - CACHE_ENABLED=true
      - CACHE_TTL_SECONDS=3600
      
      # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      
      # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è
      - AUTOMATION_ENABLED=true
      - TIMEZONE=Europe/Kiev
      - MORNING_BROADCAST_HOUR=9
      - EVENING_STATS_HOUR=20
      
      # –†–æ–∑—Å–∏–ª–∫–∏
      - BROADCAST_ENABLED=true
      - BROADCAST_RATE_LIMIT=30
      - DAILY_DIGEST_ENABLED=true
      - WEEKLY_DIGEST_ENABLED=true
      
      # –ë–µ–∑–ø–µ–∫–∞
      - RATE_LIMITING_ENABLED=true
      - MAX_MESSAGES_PER_MINUTE=10
      - MAX_WARNINGS_BEFORE_BAN=3
      
      # –ö–æ–Ω—Ç–µ–Ω—Ç
      - MAX_CONTENT_LENGTH=2000
      - MAX_SUBMISSIONS_PER_DAY=10
      - AUTO_MODERATION_ENABLED=false
      
      # –î—É–µ–ª—ñ
      - DUEL_ENABLED=true
      - DUEL_DURATION_HOURS=24
      - TOURNAMENT_ENABLED=true
      
      # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
      - POINTS_FOR_SUBMISSION=5
      - POINTS_FOR_APPROVAL=15
      - POINTS_FOR_DUEL_WIN=20
      
      # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
      - METRICS_ENABLED=true
      - SENTRY_DSN=${SENTRY_DSN:-}
      
      # –§–∞–π–ª–∏ —Ç–∞ –º–µ–¥—ñ–∞
      - MAX_FILE_SIZE_MB=20
      - AUTO_CLEANUP_ENABLED=true
      - CLEANUP_OLDER_THAN_DAYS=30
    
    # –ü–æ—Ä—Ç–∏
    ports:
      - "8000:8000"  # –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å/webhook
      - "9090:9090"  # –ú–µ—Ç—Ä–∏–∫–∏ Prometheus
    
    # Volumes
    volumes:
      - bot_data:/app/data
      - bot_logs:/app/logs
      - bot_backups:/app/backups
      - ./config:/app/config:ro  # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏
    
    # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # ===== –ë–ê–ó–ê –î–ê–ù–ò–• POSTGRESQL =====
  postgres:
    image: postgres:15-alpine
    container_name: ukrainian-bot-postgres
    restart: unless-stopped
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ukrainian_bot}
      - POSTGRES_USER=${POSTGRES_USER:-bot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bot_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=uk_UA.UTF-8
      - TZ=Europe/Kiev
    
    # –ü–æ—Ä—Ç–∏ (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    # ports:
    #   - "5432:5432"
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bot_user} -d ${POSTGRES_DB:-ukrainian_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫—É –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è–º–∏
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  # ===== REDIS –ö–ï–® =====
  redis:
    image: redis:7-alpine
    container_name: ukrainian-bot-redis
    restart: unless-stopped
    
    # –ü–æ—Ä—Ç–∏ (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    # ports:
    #   - "6379:6379"
    
    # Volumes
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    # –ö–æ–º–∞–Ω–¥–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
    command: redis-server /usr/local/etc/redis/redis.conf

  # ===== NGINX REVERSE PROXY =====
  nginx:
    image: nginx:alpine
    container_name: ukrainian-bot-nginx
    restart: unless-stopped
    
    # –ü–æ—Ä—Ç–∏
    ports:
      - "80:80"
      - "443:443"
    
    # Volumes
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
      - ./static:/var/www/static:ro  # –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏
    
    # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    depends_on:
      - telegram-bot
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== PROMETHEUS –ú–û–ù–Ü–¢–û–†–ò–ù–ì =====
  prometheus:
    image: prom/prometheus:latest
    container_name: ukrainian-bot-prometheus
    restart: unless-stopped
    
    # –ü–æ—Ä—Ç–∏
    ports:
      - "9091:9090"
    
    # Volumes
    volumes:
      - prometheus_data:/prometheus
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network
    
    # –ö–æ–º–∞–Ω–¥–∞
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ===== GRAFANA –î–ê–®–ë–û–†–î–ò =====
  grafana:
    image: grafana/grafana:latest
    container_name: ukrainian-bot-grafana
    restart: unless-stopped
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    # –ü–æ—Ä—Ç–∏
    ports:
      - "3000:3000"
    
    # Volumes
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    depends_on:
      - prometheus
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network

  # ===== BACKUP –°–ï–†–í–Ü–° =====
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile.backup
    container_name: ukrainian-bot-backup
    restart: unless-stopped
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-ukrainian_bot}
      - POSTGRES_USER=${POSTGRES_USER:-bot_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-bot_password}
      - BACKUP_SCHEDULE=0 2 * * *  # –©–æ–¥–Ω—è –æ 2:00
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${S3_BACKUP_BUCKET:-}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY:-}
      - S3_SECRET_KEY=${S3_SECRET_KEY:-}
    
    # Volumes
    volumes:
      - bot_backups:/backups
      - /var/run/docker.sock:/var/run/docker.sock:ro
    
    # –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    depends_on:
      - postgres
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network

  # ===== LOGROTATE –î–õ–Ø –õ–û–ì–Ü–í =====
  logrotate:
    image: alpine:latest
    container_name: ukrainian-bot-logrotate
    restart: unless-stopped
    
    # Volumes
    volumes:
      - bot_logs:/logs
      - ./config/logrotate.conf:/etc/logrotate.conf:ro
    
    # –ö–æ–º–∞–Ω–¥–∞
    command: >
      sh -c "
      while true; do
        logrotate /etc/logrotate.conf
        sleep 3600
      done
      "

  # ===== WATCHTOWER –î–õ–Ø –ê–í–¢–û–û–ù–û–í–õ–ï–ù–¨ =====
  watchtower:
    image: containrrr/watchtower
    container_name: ukrainian-bot-watchtower
    restart: unless-stopped
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    environment:
      - WATCHTOWER_POLL_INTERVAL=300  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${EMAIL_FROM:-bot@example.com}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${EMAIL_TO:-admin@example.com}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${SMTP_USER:-}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${SMTP_PASSWORD:-}
    
    # Volumes
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    
    # –ú–µ—Ä–µ–∂–∞
    networks:
      - bot-network

# ===== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –î–õ–Ø –†–Ü–ó–ù–ò–• –°–ï–†–ï–î–û–í–ò–© =====

# Development override
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# Production override
# docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

# ===== –ö–û–ú–ê–ù–î–ò –î–õ–Ø –ö–ï–†–£–í–ê–ù–ù–Ø =====

# –ó–∞–ø—É—Å–∫ –≤—Å—å–æ–≥–æ —Å—Ç–µ–∫—É:
# docker-compose up -d

# –ó–∞–ø—É—Å–∫ —Ç—ñ–ª—å–∫–∏ –±–æ—Ç–∞ —Ç–∞ –ë–î:
# docker-compose up -d telegram-bot postgres redis

# –ü–µ—Ä–µ–≥–ª—è–¥ –ª–æ–≥—ñ–≤:
# docker-compose logs -f telegram-bot

# Backup –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:
# docker-compose exec backup /scripts/backup.sh

# Restart –±–æ—Ç–∞:
# docker-compose restart telegram-bot

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–∞–∑—ñ–≤:
# docker-compose pull && docker-compose up -d

# –û—á–∏—Å—Ç–∫–∞:
# docker-compose down -v --remove-orphans

# ===== –ú–û–ù–Ü–¢–û–†–ò–ù–ì –¢–ê –ê–õ–ï–†–¢–ò =====

# Prometheus –º–µ—Ç—Ä–∏–∫–∏: http://localhost:9091
# Grafana –¥–∞—à–±–æ—Ä–¥–∏: http://localhost:3000 (admin/admin123)
# Bot webhook/API: http://localhost:8000
# Nginx —Å—Ç–∞—Ç—É—Å: http://localhost/nginx_status

# ===== BACKUP –¢–ê –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø =====

# –†—É—á–Ω–∏–π backup:
# docker-compose exec postgres pg_dump -U bot_user ukrainian_bot > backup.sql

# –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:
# cat backup.sql | docker-compose exec -T postgres psql -U bot_user -d ukrainian_bot

# ===== –ë–ï–ó–ü–ï–ö–ê =====

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
# 1. –ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–æ–ª—ñ –≤ .env —Ñ–∞–π–ª—ñ
# 2. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
# 3. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ firewall
# 4. –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–Ω–æ–≤–ª—é–π—Ç–µ –æ–±—Ä–∞–∑–∏
# 5. –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ –ª–æ–≥–∏ —Ç–∞ –º–µ—Ç—Ä–∏–∫–∏

# ===== PRODUCTION –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø =====

# –î–ª—è production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ:
# - –ó–æ–≤–Ω—ñ—à–Ω—ñ–π PostgreSQL (RDS, Cloud SQL)
# - Redis cluster –¥–ª—è –≤–∏—Å–æ–∫–æ—ó –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
# - Load balancer –ø–µ—Ä–µ–¥ Nginx
# - External secrets management
# - Proper SSL/TLS —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
# - Monitoring —Ç–∞ alerting
# - Automated backups –¥–æ cloud storage