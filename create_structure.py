#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É –ë–æ–±—ñ–∫ 2.0
–ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π —Ñ–∞–π–ª —É –∫–æ—Ä–µ–Ω—ñ –≤–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
"""

import os
import shutil
from pathlib import Path

def create_project_structure():
    """–°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É"""
    
    print("üêï –°—Ç–≤–æ—Ä—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É –ë–æ–±—ñ–∫ 2.0...")
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫
    folders = [
        "config",
        "database", 
        "handlers",
        "services",
        "utils",
        "api",
        "tests",
        "scripts",
        "docs",
        "docker",
        "deployment",
        "monitoring",
        "data",
        "logs",
        ".github/workflows",
        ".github/ISSUE_TEMPLATE",
        ".vscode"
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫–∏
    for folder in folders:
        Path(folder).mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞–ø–∫—É: {folder}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ __init__.py —Ñ–∞–π–ª–∏ –¥–ª—è Python –ø–∞–∫–µ—Ç—ñ–≤
    python_packages = [
        "config",
        "database",
        "handlers", 
        "services",
        "utils",
        "api",
        "tests"
    ]
    
    for package in python_packages:
        init_file = Path(package) / "__init__.py"
        init_file.write_text("# -*- coding: utf-8 -*-\n")
        print(f"üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ __init__.py –≤ {package}")
    
    # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏
    move_existing_files()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏
    create_main_files()
    
    print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    print("üéØ –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("1. –†–æ–∑–±–∏–π—Ç–µ bobik_bot.py –Ω–∞ –æ–∫—Ä–µ–º—ñ –º–æ–¥—É–ª—ñ")
    print("2. –û–Ω–æ–≤—ñ—Ç—å imports —É –∫–æ–¥—ñ")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞")

def move_existing_files():
    """–ü–µ—Ä–µ–º—ñ—â—É—î —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–∞–ø–∫–∏"""
    
    # –§–∞–π–ª–∏ –¥–ª—è –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è
    file_moves = {
        # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
        "CONTRIBUTING.md": "docs/CONTRIBUTING.md",
        "SECURITY.md": "docs/SECURITY.md", 
        "QUICK_START.md": "docs/QUICK_START.md",
        "FILES_SUMMARY.md": "docs/FILES_SUMMARY.md",
        
        # Docker
        "Dockerfile": "docker/Dockerfile",
        "docker-compose.yml": "docker/docker-compose.yml", 
        ".dockerignore": "docker/.dockerignore",
        
        # Deployment
        "railway.json": "deployment/railway.json",
        "Procfile": "deployment/Procfile",
        
        # –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
        "monitoring prometheus.yml": "monitoring/prometheus.yml",
        "monitoring grafana-dashboard.json": "monitoring/grafana-dashboard.json"
    }
    
    for source, destination in file_moves.items():
        if os.path.exists(source):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
            dest_dir = os.path.dirname(destination)
            if dest_dir:
                os.makedirs(dest_dir, exist_ok=True)
            
            shutil.move(source, destination)
            print(f"üì¶ –ü–µ—Ä–µ–º—ñ—â–µ–Ω–æ: {source} ‚Üí {destination}")

def create_main_files():
    """–°—Ç–≤–æ—Ä—é—î –æ—Å–Ω–æ–≤–Ω—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–µ–∫—Ç—É"""
    
    # main.py
    main_py_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É –ë–æ–±—ñ–∫ 2.0 - AI –ú–µ–º-–ë–æ—Ç
"""

import asyncio
import logging
import sys
import os

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    
    try:
        # –ü–æ–∫–∏ —â–æ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ–¥
        from bobik_bot import main as old_main
        old_main()
    except ImportError:
        print("‚ùå –§–∞–π–ª bobik_bot.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        print("üìù –°—Ç–≤–æ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–≥—ñ–¥–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó")
        sys.exit(1)

if __name__ == "__main__":
    main()
'''
    
    with open("main.py", "w", encoding="utf-8") as f:
        f.write(main_py_content)
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ main.py")
    
    # config/settings.py
    settings_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –ë–æ–±—ñ–∫ 2.0
"""

import os
from typing import Optional

class Settings:
    """–ö–ª–∞—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–æ—Ç–∞"""
    
    def __init__(self):
        # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
        self.CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID", "@BobikFun")
        
        # AI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
        self.OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
        
        # –ß–∞—Å–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.TIMEZONE = os.getenv("TIMEZONE", "Europe/Kiev")
        self.POSTS_PER_DAY = int(os.getenv("POSTS_PER_DAY", "11"))
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
        
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
        self._validate()
    
    def _validate(self):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        if not self.BOT_TOKEN:
            raise ValueError("‚ö†Ô∏è TELEGRAM_BOT_TOKEN –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞")
        
        if not self.CHANNEL_ID:
            raise ValueError("‚ö†Ô∏è TELEGRAM_CHANNEL_ID –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π")
        
        print(f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª—É: {self.CHANNEL_ID}")
'''
    
    with open("config/settings.py", "w", encoding="utf-8") as f:
        f.write(settings_content)
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ config/settings.py")
    
    # config/localization.py
    localization_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –ë–æ–±—ñ–∫ 2.0
"""

# –¢–µ–∫—Å—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
TEXTS = {
    'start_message': """üêï **–ü—Ä–∏–≤—ñ—Ç! –Ø –ë–æ–±—ñ–∫ 2.0!**

üöÄ **–ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:**
‚Ä¢ ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–º—ñ–≤
‚Ä¢ üì° –í—ñ–¥–º–æ–≤–æ—Å—Ç—ñ–π–∫—ñ API
‚Ä¢ üá∫üá¶ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥ –£–∫—Ä–∞—ó–Ω—É
‚Ä¢ üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞

üì± **–ú–µ–Ω—é –∑'—è–≤–∏–ª–æ—Å—è –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω—É!**
üîó **–ö–∞–Ω–∞–ª:** @BobikFun""",

    'menu_restored': "üì± **–ü–æ—Å—Ç—ñ–π–Ω–µ –º–µ–Ω—é –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ!**",
    
    'test_post_success': "‚úÖ **–¢–µ—Å—Ç–æ–≤–∏–π –º–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!**",
    'test_post_error': "‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó**",
    
    'scheduler_started': "‚úÖ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∑–∞–ø—É—â–µ–Ω–æ!**",
    'scheduler_stopped': "‚èπÔ∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –∑—É–ø–∏–Ω–µ–Ω–æ**",
    
    'api_checking': "üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é API...",
    'ai_active': "ü§ñ **AI –∞–∫—Ç–∏–≤–Ω–∏–π**",
    'ai_disabled': "ü§ñ **AI –≤–∏–º–∫–Ω–µ–Ω–∏–π**"
}

def get_text(key: str) -> str:
    """–û—Ç—Ä–∏–º—É—î –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç"""
    return TEXTS.get(key, f"‚ùå –¢–µ–∫—Å—Ç '{key}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
'''
    
    with open("config/localization.py", "w", encoding="utf-8") as f:
        f.write(localization_content)
    print("üìÑ –°—Ç–≤–æ—Ä–µ–Ω–æ config/localization.py")

if __name__ == "__main__":
    create_project_structure()