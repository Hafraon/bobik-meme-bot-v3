#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ú—ñ–≥—Ä–∞—Ü—ñ–π–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∫—Ä–∞—â–µ–Ω—å üß†üòÇüî•
"""

import logging
import asyncio
from datetime import datetime
from contextlib import contextmanager

from sqlalchemy import create_engine, text, Column, Integer, BigInteger, String, DateTime, Float, Boolean
from sqlalchemy.orm import sessionmaker

from config.settings import settings

logger = logging.getLogger(__name__)

def get_migration_session():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Å—ñ—é –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    engine = create_engine(
        settings.DATABASE_URL,
        echo=True if settings.DEBUG else False,  # –ü–æ–∫–∞–∑—É—î–º–æ SQL –≤ debug —Ä–µ–∂–∏–º—ñ
        pool_pre_ping=True,
        connect_args={"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {}
    )
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    return SessionLocal(), engine

async def run_migration():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    logger.info("üöÄ –ü–æ—á–∏–Ω–∞—î–º–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    session, engine = get_migration_session()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å
        existing_tables = await check_existing_tables(session)
        logger.info(f"üìã –Ü—Å–Ω—É—é—á—ñ —Ç–∞–±–ª–∏—Ü—ñ: {existing_tables}")
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —ñ—Å–Ω—É—é—á–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        await migrate_users_table(session)
        await migrate_content_table(session)
        await migrate_ratings_table(session)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ
        if 'content_views' not in existing_tables:
            await create_content_views_table(session)
        
        if 'user_preferences' not in existing_tables:
            await create_user_preferences_table(session)
        
        if 'content_popularity' not in existing_tables:
            await create_content_popularity_table(session)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ
        await update_existing_content_data(session)
        await add_sample_enhanced_content(session)
        
        session.commit()
        logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        raise
    finally:
        session.close()

async def check_existing_tables(session) -> list:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —è–∫—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å"""
    try:
        if "postgresql" in settings.DATABASE_URL:
            result = session.execute(text("""
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public'
            """))
        else:  # SQLite
            result = session.execute(text("""
                SELECT name FROM sqlite_master WHERE type='table'
            """))
        
        tables = [row[0] for row in result.fetchall()]
        return tables
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—å: {e}")
        return []

async def migrate_users_table(session):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ users"""
    logger.info("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ users...")
    
    new_columns = [
        ("preferred_content_type", "VARCHAR(20) DEFAULT 'mixed'"),
        ("reset_history_days", "INTEGER DEFAULT 7"),
        ("last_history_reset", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
    ]
    
    for column_name, column_def in new_columns:
        try:
            await add_column_if_not_exists(session, "users", column_name, column_def)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {column_name}: {e}")

async def migrate_content_table(session):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ content"""
    logger.info("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ content...")
    
    new_columns = [
        ("topic", "VARCHAR(100)"),
        ("style", "VARCHAR(100)"), 
        ("difficulty", "INTEGER DEFAULT 1"),
        ("unique_views", "INTEGER DEFAULT 0"),
        ("shares", "INTEGER DEFAULT 0"),
        ("popularity_score", "FLOAT DEFAULT 0.0"),
        ("trending_score", "FLOAT DEFAULT 0.0"), 
        ("quality_score", "FLOAT DEFAULT 0.8"),
        ("last_shown", "TIMESTAMP")
    ]
    
    for column_name, column_def in new_columns:
        try:
            await add_column_if_not_exists(session, "content", column_name, column_def)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {column_name}: {e}")

async def migrate_ratings_table(session):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ ratings"""
    logger.info("üîÑ –ú—ñ–≥—Ä–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ ratings...")
    
    new_columns = [
        ("reaction_time", "FLOAT"),
        ("comment", "TEXT"),
        ("emotion_detected", "VARCHAR(50)")
    ]
    
    for column_name, column_def in new_columns:
        try:
            await add_column_if_not_exists(session, "ratings", column_name, column_def)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É {column_name}: {e}")

async def add_column_if_not_exists(session, table_name: str, column_name: str, column_def: str):
    """–î–æ–¥–∞—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î"""
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ–ª–æ–Ω–∫–∞
        if "postgresql" in settings.DATABASE_URL:
            check_sql = text(f"""
                SELECT column_name FROM information_schema.columns 
                WHERE table_name = '{table_name}' AND column_name = '{column_name}'
            """)
        else:  # SQLite
            check_sql = text(f"PRAGMA table_info({table_name})")
        
        result = session.execute(check_sql)
        
        if "postgresql" in settings.DATABASE_URL:
            existing_columns = [row[0] for row in result.fetchall()]
        else:
            existing_columns = [row[1] for row in result.fetchall()]
        
        if column_name not in existing_columns:
            alter_sql = text(f"ALTER TABLE {table_name} ADD COLUMN {column_name} {column_def}")
            session.execute(alter_sql)
            logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–∫—É {column_name} –¥–æ {table_name}")
        else:
            logger.info(f"‚è≠Ô∏è –ö–æ–ª–æ–Ω–∫–∞ {column_name} –≤–∂–µ —ñ—Å–Ω—É—î –≤ {table_name}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
        raise

async def create_content_views_table(session):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é content_views"""
    logger.info("üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ content_views...")
    
    try:
        if "postgresql" in settings.DATABASE_URL:
            create_sql = text("""
                CREATE TABLE content_views (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES users(id),
                    content_id INTEGER NOT NULL REFERENCES content(id),
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    view_duration INTEGER,
                    device_type VARCHAR(50),
                    source VARCHAR(50) DEFAULT 'random',
                    session_id VARCHAR(100)
                )
            """)
            
            index_sql = text("""
                CREATE INDEX idx_user_content_date ON content_views(user_id, content_id, viewed_at)
            """)
        else:  # SQLite
            create_sql = text("""
                CREATE TABLE content_views (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    content_id INTEGER NOT NULL,
                    viewed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    view_duration INTEGER,
                    device_type VARCHAR(50),
                    source VARCHAR(50) DEFAULT 'random',
                    session_id VARCHAR(100),
                    FOREIGN KEY (user_id) REFERENCES users(id),
                    FOREIGN KEY (content_id) REFERENCES content(id)
                )
            """)
            
            index_sql = text("""
                CREATE INDEX idx_user_content_date ON content_views(user_id, content_id, viewed_at)
            """)
        
        session.execute(create_sql)
        session.execute(index_sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è content_views —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è content_views: {e}")
        raise

async def create_user_preferences_table(session):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é user_preferences"""
    logger.info("üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ user_preferences...")
    
    try:
        if "postgresql" in settings.DATABASE_URL:
            create_sql = text("""
                CREATE TABLE user_preferences (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL REFERENCES users(id),
                    preference_type VARCHAR(50) NOT NULL,
                    preference_value VARCHAR(100) NOT NULL,
                    weight FLOAT DEFAULT 1.0,
                    source VARCHAR(50) DEFAULT 'implicit',
                    confidence FLOAT DEFAULT 0.5,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, preference_type, preference_value)
                )
            """)
        else:  # SQLite
            create_sql = text("""
                CREATE TABLE user_preferences (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    preference_type VARCHAR(50) NOT NULL,
                    preference_value VARCHAR(100) NOT NULL,
                    weight FLOAT DEFAULT 1.0,
                    source VARCHAR(50) DEFAULT 'implicit',
                    confidence FLOAT DEFAULT 0.5,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id),
                    UNIQUE(user_id, preference_type, preference_value)
                )
            """)
        
        session.execute(create_sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è user_preferences —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è user_preferences: {e}")
        raise

async def create_content_popularity_table(session):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é content_popularity"""
    logger.info("üÜï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ content_popularity...")
    
    try:
        if "postgresql" in settings.DATABASE_URL:
            create_sql = text("""
                CREATE TABLE content_popularity (
                    id SERIAL PRIMARY KEY,
                    content_id INTEGER NOT NULL REFERENCES content(id),
                    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    period_type VARCHAR(20) DEFAULT 'daily',
                    views_count INTEGER DEFAULT 0,
                    unique_views_count INTEGER DEFAULT 0,
                    likes_count INTEGER DEFAULT 0,
                    dislikes_count INTEGER DEFAULT 0,
                    shares_count INTEGER DEFAULT 0,
                    engagement_rate FLOAT DEFAULT 0.0,
                    satisfaction_rate FLOAT DEFAULT 0.0,
                    virality_score FLOAT DEFAULT 0.0
                )
            """)
        else:  # SQLite
            create_sql = text("""
                CREATE TABLE content_popularity (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_id INTEGER NOT NULL,
                    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    period_type VARCHAR(20) DEFAULT 'daily',
                    views_count INTEGER DEFAULT 0,
                    unique_views_count INTEGER DEFAULT 0,
                    likes_count INTEGER DEFAULT 0,
                    dislikes_count INTEGER DEFAULT 0,
                    shares_count INTEGER DEFAULT 0,
                    engagement_rate FLOAT DEFAULT 0.0,
                    satisfaction_rate FLOAT DEFAULT 0.0,
                    virality_score FLOAT DEFAULT 0.0,
                    FOREIGN KEY (content_id) REFERENCES content(id)
                )
            """)
        
        session.execute(create_sql)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—è content_popularity —Å—Ç–≤–æ—Ä–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è content_popularity: {e}")
        raise

async def update_existing_content_data(session):
    """–û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏"""
    logger.info("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –¥–∞–Ω–∏—Ö...")
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        session.execute(text("""
            UPDATE users 
            SET preferred_content_type = 'mixed',
                reset_history_days = 7,
                last_history_reset = CURRENT_TIMESTAMP
            WHERE preferred_content_type IS NULL OR preferred_content_type = ''
        """))
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        session.execute(text("""
            UPDATE content 
            SET popularity_score = 0.5,
                quality_score = 0.8,
                difficulty = 1,
                unique_views = views
            WHERE popularity_score IS NULL OR popularity_score = 0
        """))
        
        # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–µ–º–∞—Ç–∏–∫–∏ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_mappings = [
            (['–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç', '–∫–æ–¥', 'async', 'GitHub', '–∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è', '–∫–æ–º–ø—é—Ç–µ—Ä', 'IT'], 'programming', 'irony'),
            (['–∑–∞—Ä–ø–ª–∞—Ç', '–æ—Ñ—ñ—Å', '—Ä–æ–±–æ—Ç', '–ø–æ–≤–µ—Ä—Ö', '—Å–ø—ñ–≤–±–µ—Å—ñ–¥', '—Ä–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å'], 'work', 'sarcasm'),
            (['–¥—Ä—É–∂–∏–Ω–∞', '—á–æ–ª–æ–≤—ñ–∫', '–º–∞–º–∞', '–±–∞—Ç—å–∫', '—Å–∏–Ω', '–¥–æ—á–∫–∞', "—Å—ñ–º'—è"], 'family', 'kind'),
            (['–ª—ñ–∫–∞—Ä', '–∞–ø—Ç–µ–∫', '—Ö–≤–æ—Ä–∏–π', '–ø–∞—Ü—ñ—î–Ω—Ç', '—Ç–∞–±–ª–µ—Ç–∫'], 'life', 'sarcasm'),
            (['—Å—Ç—É–¥–µ–Ω—Ç', '–µ–∫–∑–∞–º–µ–Ω', '—É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–Ω–∞–≤—á–∞–Ω–Ω—è', '–≤—á–∏—Ç–µ–ª—å'], 'education', 'irony')
        ]
        
        for keywords, topic, style in content_mappings:
            for keyword in keywords:
                session.execute(text(f"""
                    UPDATE content 
                    SET topic = '{topic}', style = '{style}'
                    WHERE text LIKE '%{keyword}%' AND (topic IS NULL OR topic = '')
                """))
        
        # –î–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ —Ç–µ–º–∞—Ç–∏–∫–∏
        session.execute(text("""
            UPDATE content 
            SET topic = 'life', style = 'irony'
            WHERE topic IS NULL OR topic = ''
        """))
        
        logger.info("‚úÖ –Ü—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
        raise

async def add_sample_enhanced_content(session):
    """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    logger.info("üÜï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –±–∞–≥–∞—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        count_result = session.execute(text("SELECT COUNT(*) FROM content WHERE status = 'approved'"))
        existing_count = count_result.scalar()
        
        if existing_count >= 15:  # –Ø–∫—â–æ –≤–∂–µ —î 15+ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, –Ω–µ –¥–æ–¥–∞—î–º–æ –Ω–æ–≤–∏—Ö
            logger.info(f"‚è≠Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç—É –¥–æ—Å—Ç–∞—Ç–Ω—å–æ ({existing_count}), –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è")
            return
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∞–Ω–µ–∫–¥–æ—Ç–∏ –∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—î—é
        new_jokes = [
            {
                "text": "üß† –ó–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç –¥–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∞:\n- –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–∞ —Ç–∞–∫ –ø–æ–≤—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î?\n- –ê –≤–∏ SSD –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏?\n- –¢–∞–∫.\n- –ù—É —Ç–æ —à–≤–∏–¥–∫–æ –∑–Ω–∞–π–¥–µ—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∞! üòÇ",
                "topic": "programming",
                "style": "sarcasm",
                "difficulty": 2
            },
            {
                "text": "üî• –£–∫—Ä–∞—ó–Ω–µ—Ü—å –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ:\n- –í–∞—à—ñ —Å–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏?\n- –ß–µ—Å–Ω—ñ—Å—Ç—å.\n- –ù–µ –¥—É–º–∞—é, —â–æ —á–µ—Å–Ω—ñ—Å—Ç—å - —Ü–µ —Å–ª–∞–±–∫–∞ —Å—Ç–æ—Ä–æ–Ω–∞.\n- –ê –º–µ–Ω—ñ –Ω–∞—Å—Ä–∞—Ç–∏, —â–æ –≤–∏ –¥—É–º–∞—î—Ç–µ! üòÇ",
                "topic": "work",
                "style": "absurd",
                "difficulty": 2
            },
            {
                "text": "üòÇ –î–∑–≤–æ–Ω–∏—Ç—å —á–æ–ª–æ–≤—ñ–∫ –¥—Ä—É–∂–∏–Ω—ñ:\n- –õ—é–±–∞, —è —Å—å–æ–≥–æ–¥–Ω—ñ –ø—ñ–∑–Ω–æ.\n- –©–æ —Å—Ç–∞–ª–æ—Å—è?\n- –ì—Ä–∞—é—Ç—å –î–∏–Ω–∞–º–æ.\n- –ê —Ö—Ç–æ –≤–∏–≥—Ä–∞—î?\n- –ú–æ—è —Å–æ–≤—ñ—Å—Ç—å! üß†",
                "topic": "family",
                "style": "irony",
                "difficulty": 2
            },
            {
                "text": "üî• –í–∏–∫–ª–∞–¥–∞—á —Å—Ç—É–¥–µ–Ω—Ç–∞–º:\n- –•—Ç–æ –º–æ–∂–µ –Ω–∞–∑–≤–∞—Ç–∏ –ø'—è—Ç—å —Ç–≤–∞—Ä–∏–Ω –ê—Ñ—Ä–∏–∫–∏?\n- –°–ª–æ–Ω —ñ —á–æ—Ç–∏—Ä–∏ –º–∞–≤–ø–∏! üòÇ",
                "topic": "education",
                "style": "absurd",
                "difficulty": 1
            },
            {
                "text": "üß† DevOps —ñ–Ω–∂–µ–Ω–µ—Ä –ø—Ä–∏–π—à–æ–≤ –¥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞:\n- –î–æ–∫—Ç–æ—Ä, –º–µ–Ω—ñ –∑–¥–∞—î—Ç—å—Å—è, —â–æ –≤—Å—ñ –ø—Ä–æ–±–ª–µ–º–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ - —Ü–µ –º–æ—è –≤–∏–Ω–∞.\n- –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ü–µ –Ω–µ –∑–¥–∞—î—Ç—å—Å—è! üòÇüî•",
                "topic": "programming",
                "style": "sarcasm",
                "difficulty": 3
            }
        ]
        
        for joke_data in new_jokes:
            session.execute(text("""
                INSERT INTO content 
                (content_type, text, topic, style, difficulty, status, author_id, views, likes, popularity_score, quality_score, created_at)
                VALUES 
                ('joke', :text, :topic, :style, :difficulty, 'approved', :admin_id, 0, 0, 0.5, 0.9, CURRENT_TIMESTAMP)
            """), {
                'text': joke_data['text'],
                'topic': joke_data['topic'],
                'style': joke_data['style'],
                'difficulty': joke_data['difficulty'],
                'admin_id': settings.ADMIN_ID
            })
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –º–µ–º–∏
        new_memes = [
            {
                "text": "üß† –ö–æ–ª–∏ GitHub –∑–Ω–æ–≤—É –ª–µ–∂–∏—Ç—å, –∞ deadline –∑–∞–≤—Ç—Ä–∞ üò±",
                "topic": "programming",
                "style": "absurd"
            },
            {
                "text": "üòÇ –ú—ñ–π –∫–æ–¥: –ø—Ä–∞—Ü—é—î –Ω–∞ –º–æ—î–º—É –∫–æ–º–ø'—é—Ç–µ—Ä—ñ ‚úÖ",
                "topic": "programming", 
                "style": "irony"
            },
            {
                "text": "üî• –ö–æ–ª–∏ PM –∫–∞–∂–µ '—à–≤–∏–¥–∫–∏–π —Ñ—ñ–∫—Å' üíÄ",
                "topic": "work",
                "style": "sarcasm"
            }
        ]
        
        for meme_data in new_memes:
            session.execute(text("""
                INSERT INTO content 
                (content_type, text, topic, style, difficulty, status, author_id, views, likes, popularity_score, quality_score, created_at)
                VALUES 
                ('meme', :text, :topic, :style, 1, 'approved', :admin_id, 0, 0, 0.5, 0.9, CURRENT_TIMESTAMP)
            """), {
                'text': meme_data['text'],
                'topic': meme_data['topic'],
                'style': meme_data['style'],
                'admin_id': settings.ADMIN_ID
            })
        
        logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(new_jokes)} –Ω–æ–≤–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤ —Ç–∞ {len(new_memes)} –º–µ–º—ñ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        raise

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –º—ñ–≥—Ä–∞—Ü—ñ—ó
async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    try:
        await run_migration()
        print("üéâ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        raise

if __name__ == "__main__":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    asyncio.run(main())