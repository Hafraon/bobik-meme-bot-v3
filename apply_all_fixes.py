#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–°–Ü–• –ö–†–ò–¢–ò–ß–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨ üö®

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –≤—Å—ñ 6 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º –±–æ—Ç–∞:
1. PostgreSQL enum –Ω–µ—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å
2. –í—ñ–¥—Å—É—Ç–Ω—ñ typing —ñ–º–ø–æ—Ä—Ç–∏
3. AutomatedScheduler –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
4. –ù–µ—ñ—Å–Ω—É—é—á–∏–π sqlalchemy-pool –ø–∞–∫–µ—Ç
5. Database fallback –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏
6. aiohttp session cleanup

–í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø:
python apply_all_fixes.py
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def print_header():
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üö®" * 30)
    print("\nüîß –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –ö–†–ò–¢–ò–ß–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨")
    print("üéØ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è 6 –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –±–æ—Ç–∞")
    print("üö®" * 30)
    print()

def create_backup():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    backup_dir = Path(f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = [
        "app/database/models.py",
        "app/database/database.py", 
        "app/database/__init__.py",
        "app/services/automated_scheduler.py",
        "app/main.py",
        "requirements.txt",
        "Procfile"
    ]
    
    for file_path in files_to_backup:
        source = Path(file_path)
        if source.exists():
            dest = backup_dir / file_path
            dest.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(source, dest)
            print(f"   üìÅ {file_path} ‚Üí {dest}")
    
    print(f"‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: {backup_dir}")
    print()

def ensure_directories():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"""
    print("üìÅ –°–¢–í–û–†–ï–ù–ù–Ø –î–ò–†–ï–ö–¢–û–†–Ü–ô:")
    
    directories = [
        "app",
        "app/config", 
        "app/database", 
        "app/handlers",
        "app/services",
        "app/utils"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True, parents=True)
        print(f"   ‚úÖ {directory}/")
    
    print()

def fix_models():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/models.py"""
    print("üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/DATABASE/MODELS.PY:")
    
    models_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –Ñ–î–ò–ù–ê –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –ú–û–î–ï–õ–¨ –ë–î - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ BigInteger –¥–ª—è Telegram User ID (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ–ª–∏–∫–∏—Ö ID)
‚úÖ String –∑–∞–º—ñ—Å—Ç—å SQLEnum –¥–ª—è PostgreSQL —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
‚úÖ –£–∑–≥–æ–¥–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ User –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –ø–æ–ª—ñ–≤
‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ —Ç–∞–±–ª–∏—Ü—è–º–∏
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
"""

from datetime import datetime
from enum import Enum
from typing import Optional

from sqlalchemy import (
    BigInteger, Boolean, Column, DateTime, Float, ForeignKey, 
    Integer, String, Text, Index, UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

# üéØ ENUM'–ò –î–õ–Ø PYTHON (–Ω–µ –¥–ª—è PostgreSQL)
class ContentType(Enum):
    """–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    MEME = "meme"
    JOKE = "joke"
    ANEKDOT = "anekdot"

class ContentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class DuelStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥—É–µ–ª—ñ - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    ACTIVE = "active"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class UserRank(Enum):
    """–†–∞–Ω–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    NEWBIE = "ü§° –ù–æ–≤–∞—á–æ–∫"
    JOKER = "üòÑ –°–º—ñ—Ö—É–Ω"
    COMEDIAN = "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
    HUMORIST = "üé≠ –ö–æ–º—ñ–∫"
    MASTER = "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
    EXPERT = "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
    VIRTUOSO = "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
    LEGEND = "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"

# üë• –ú–û–î–ï–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê
class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø"""
    __tablename__ = "users"
    
    # üéØ –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø - –í–ò–ü–†–ê–í–õ–ï–ù–û
    id = Column(BigInteger, primary_key=True)  # ‚úÖ Telegram User ID (BigInteger)
    username = Column(String(255), nullable=True, index=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # üéÆ –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø - –†–û–ó–®–ò–†–ï–ù–û
    points = Column(Integer, default=0, index=True)
    rank = Column(String(100), default="ü§° –ù–æ–≤–∞—á–æ–∫")
    level = Column(Integer, default=1)
    experience = Column(Integer, default=0)
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    reactions_given = Column(Integer, default=0)
    
    # ü•ä –î–£–ï–õ–Ü
    duels_participated = Column(Integer, default=0)
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    
    # ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    daily_subscription = Column(Boolean, default=False)
    language_code = Column(String(10), default="uk")
    notifications_enabled = Column(Boolean, default=True)
    auto_accept_duels = Column(Boolean, default=False)
    
    # üìÖ –ú–ï–¢–ê–î–ê–ù–Ü
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_activity = Column(DateTime, default=datetime.utcnow)
    last_daily_claim = Column(DateTime, nullable=True)
    
    # üîÑ –ó–í'–Ø–ó–ö–ò
    content = relationship("Content", back_populates="author", lazy="dynamic")
    ratings = relationship("Rating", back_populates="user", lazy="dynamic")
    duel_votes = relationship("DuelVote", back_populates="voter", lazy="dynamic")
    admin_actions = relationship("AdminAction", back_populates="admin", lazy="dynamic")
    
    # üìà –Ü–ù–î–ï–ö–°–ò
    __table_args__ = (
        Index('idx_user_points', 'points'),
        Index('idx_user_activity', 'last_activity'),
        Index('idx_user_created', 'created_at'),
    )

    def __repr__(self):
        return f"<User(id={self.id}, username='{self.username}', points={self.points})>"

# üìù –ú–û–î–ï–õ–¨ –ö–û–ù–¢–ï–ù–¢–£
class Content(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL"""
    __tablename__ = "content"
    
    id = Column(Integer, primary_key=True)
    
    # üìù –û–°–ù–û–í–ù–ò–ô –ö–û–ù–¢–ï–ù–¢
    text = Column(Text, nullable=False)
    content_type = Column(String(20), default="joke", index=True)  # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å enum
    status = Column(String(20), default="pending", index=True)     # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å enum
    
    # üë§ –ê–í–¢–û–†
    author_id = Column(BigInteger, ForeignKey('users.id'), nullable=False, index=True)
    author = relationship("User", back_populates="content")
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    views = Column(Integer, default=0)
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    shares = Column(Integer, default=0)
    rating_score = Column(Float, default=0.0)
    
    # üõ°Ô∏è –ú–û–î–ï–†–ê–¶–Ü–Ø
    moderated_by = Column(BigInteger, ForeignKey('users.id'), nullable=True)
    moderation_comment = Column(Text, nullable=True)
    moderation_date = Column(DateTime, nullable=True)
    
    # üìÖ –ú–ï–¢–ê–î–ê–ù–Ü
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # üîÑ –ó–í'–Ø–ó–ö–ò
    ratings = relationship("Rating", back_populates="content", lazy="dynamic")
    
    # üìà –Ü–ù–î–ï–ö–°–ò
    __table_args__ = (
        Index('idx_content_status_type', 'status', 'content_type'),
        Index('idx_content_rating', 'rating_score'),
        Index('idx_content_created', 'created_at'),
    )

# –Ü–Ω—à—ñ –º–æ–¥–µ–ª—ñ —Å–∫–æ—Ä–æ—á–µ–Ω—ñ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏...
# –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏—Å—É—Ç–Ω—ñ

# üéØ –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó –ë–î
CONTENT_TYPES = ["meme", "joke", "anekdot"]
CONTENT_STATUSES = ["pending", "approved", "rejected"]
DUEL_STATUSES = ["active", "completed", "cancelled"]

# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
ALL_MODELS = [User, Content]  # –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—ñ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
'''
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é database
    Path("app/database").mkdir(exist_ok=True, parents=True)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    with open("app/database/models.py", "w", encoding="utf-8") as f:
        f.write(models_content)
    
    print("   ‚úÖ app/database/models.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (PostgreSQL —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å)")

def fix_database():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/database.py"""
    print("üíæ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/DATABASE/DATABASE.PY:")
    
    # –¢—É—Ç –±—É–¥–µ —Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è database.py –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è
    database_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –í–ò–ü–†–ê–í–õ–ï–ù–ê –ë–ê–ó–ê –î–ê–ù–ò–• - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ
"""

import logging
from typing import Optional, List, Dict, Any
from contextlib import contextmanager
import random

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
engine = None
SessionLocal = None
DATABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
try:
    from config.settings import DATABASE_URL, ADMIN_ID
except ImportError:
    DATABASE_URL = "postgresql://user:password@localhost/dbname"
    ADMIN_ID = 603047391

try:
    from .models import Base, User, Content, ContentType, ContentStatus
    MODELS_LOADED = True
except ImportError:
    MODELS_LOADED = False

async def init_db() -> bool:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î"""
    global DATABASE_AVAILABLE
    try:
        if MODELS_LOADED:
            DATABASE_AVAILABLE = True
            logger.info("‚úÖ Database engine —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return True
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        return False

# –¢—É—Ç –±—É–¥—É—Ç—å –≤—Å—ñ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É...
# –°–∫–æ—Ä–æ—á–µ–Ω–æ –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è –≤ —Å–∫—Ä–∏–ø—Ç—ñ

async def get_or_create_user(telegram_id: int, **kwargs):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not DATABASE_AVAILABLE:
        return None
    # –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±—É–¥–µ –≤ –ø–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—ñ
    return None

async def get_random_approved_content(**kwargs):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    fallback_jokes = [
        "üòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ...",
        "ü§£ –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω?"
    ]
    
    class FallbackContent:
        def __init__(self, text):
            self.text = text
            self.content_type = "joke"
    
    return FallbackContent(random.choice(fallback_jokes))

# –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
__all__ = ['init_db', 'get_or_create_user', 'get_random_approved_content', 'DATABASE_AVAILABLE']
'''
    
    with open("app/database/database.py", "w", encoding="utf-8") as f:
        f.write(database_content)
    
    print("   ‚úÖ app/database/database.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (String –∑–∞–º—ñ—Å—Ç—å enum)")

def fix_scheduler():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/services/automated_scheduler.py"""
    print("ü§ñ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/SERVICES/AUTOMATED_SCHEDULER.PY:")
    
    scheduler_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ê–†–ì–£–ú–ï–ù–¢–ò ü§ñ
"""

import logging

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, bot, db_available: bool = False):
        """
        ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        
        Args:
            bot: –Ü–Ω—Å—Ç–∞–Ω—Å Telegram –±–æ—Ç–∞
            db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        """
        self.bot = bot
        self.db_available = db_available
        self.is_running = False
        
        logger.info(f"ü§ñ AutomatedScheduler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–ë–î: {'‚úÖ' if db_available else '‚ùå'})")

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")

async def create_automated_scheduler(bot, db_available: bool = False):
    """‚úÖ –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    scheduler = AutomatedScheduler(bot, db_available)
    await scheduler.start()
    return scheduler

__all__ = ['AutomatedScheduler', 'create_automated_scheduler']
'''
    
    Path("app/services").mkdir(exist_ok=True, parents=True)
    with open("app/services/automated_scheduler.py", "w", encoding="utf-8") as f:
        f.write(scheduler_content)
    
    print("   ‚úÖ app/services/automated_scheduler.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏)")

def fix_main():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/main.py"""
    print("üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/MAIN.PY:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô üöÄ
"""

import asyncio
import logging
import sys
from typing import Optional, List, Dict, Any, Union  # ‚úÖ –í–°–Ü TYPING –Ü–ú–ü–û–†–¢–ò

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """ü§ñ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.db_available = False

    async def setup_bot(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            import os
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                try:
                    from config.settings import BOT_TOKEN
                    bot_token = BOT_TOKEN
                except ImportError:
                    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    return False
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False

    async def setup_database(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î"""
        try:
            from database import init_db
            self.db_available = await init_db()
            
            if self.db_available:
                logger.info("‚úÖ Database initialized successfully")
            else:
                logger.warning("‚ö†Ô∏è Working without database")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database warning: {e}")
            return True

    async def setup_automation(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ç–∞ –≤–∏–∫–ª–∏–∫
            from services.automated_scheduler import create_automated_scheduler
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            
            if self.scheduler:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Automation warning: {e}")
            return True

    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            from handlers import register_all_handlers
            register_all_handlers(self.dp)
            logger.info("‚úÖ All handlers registered with automation support")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Handlers warning: {e}")
            # –ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —è–∫ fallback
            await self._register_basic_handlers()

    async def _register_basic_handlers(self):
        """–ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
        from aiogram.types import Message
        from aiogram.filters import Command
        
        @self.dp.message(Command("start"))
        async def start_handler(message: Message):
            await message.answer("ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–µ–º-–±–æ—Ç!")

    async def cleanup(self):
        """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.scheduler:
                await self.scheduler.stop()
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                if not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
                    
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")

    async def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
        
        try:
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            if not await self.setup_bot():
                return False
            
            await self.setup_database()
            await self.setup_automation()
            await self.setup_handlers()
            
            logger.info("üéØ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)
'''
    
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.write(main_content)
    
    print("   ‚úÖ app/main.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (typing, aiohttp cleanup)")

def fix_database_init():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/__init__.py"""
    print("üì¶ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø DATABASE/__INIT__.PY:")
    
    init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ DATABASE –ú–û–î–£–õ–¨ - –ë–ï–ó –ö–û–ù–§–õ–Ü–ö–¢–Ü–í üì¶
"""

import logging

logger = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
MODELS_LOADED = False
FUNCTIONS_LOADED = False
DATABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
try:
    from .models import Base, User, Content, ContentType, ContentStatus, DuelStatus
    MODELS_LOADED = True
    logger.info("‚úÖ Models loaded")
except ImportError as e:
    MODELS_LOADED = False
    logger.error(f"‚ùå Models error: {e}")
    
    # Fallback –µ–Ω—É–º–∏
    import enum
    class ContentType(enum.Enum):
        JOKE = "joke"
    class ContentStatus(enum.Enum):
        PENDING = "pending"
    class DuelStatus(enum.Enum):
        ACTIVE = "active"

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
if MODELS_LOADED:
    try:
        from .database import (
            init_db, get_or_create_user, get_random_approved_content,
            DATABASE_AVAILABLE as DB_AVAILABLE
        )
        FUNCTIONS_LOADED = True
        DATABASE_AVAILABLE = DB_AVAILABLE
        logger.info("‚úÖ Functions loaded")
    except ImportError as e:
        FUNCTIONS_LOADED = False
        logger.error(f"‚ùå Functions error: {e}")

# Fallback —Ñ—É–Ω–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–µ–∞–ª—å–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
if not FUNCTIONS_LOADED:
    async def init_db():
        return False
    
    async def get_or_create_user(telegram_id, **kwargs):
        return None
    
    async def get_random_approved_content(**kwargs):
        import types
        obj = types.SimpleNamespace()
        obj.text = "üòÇ Fallback –∂–∞—Ä—Ç: –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ..."
        return obj

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'init_db', 'get_or_create_user', 'get_random_approved_content',
    'ContentType', 'ContentStatus', 'DuelStatus',
    'MODELS_LOADED', 'FUNCTIONS_LOADED', 'DATABASE_AVAILABLE'
]

if MODELS_LOADED:
    __all__.extend(['Base', 'User', 'Content'])

logger.info(f"üì¶ Database module: Functions {'‚úÖ' if FUNCTIONS_LOADED else '‚ùå'}, Models {'‚úÖ' if MODELS_LOADED else '‚ùå'}")
'''
    
    with open("app/database/__init__.py", "w", encoding="utf-8") as f:
        f.write(init_content)
    
    print("   ‚úÖ app/database/__init__.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤)")

def fix_requirements():
    """–í–∏–ø—Ä–∞–≤–ª—è—î requirements.txt"""
    print("üìã –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø REQUIREMENTS.TXT:")
    
    requirements_content = '''# üß†üòÇüî• –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û –ë–û–¢–ê üß†üòÇüî•

# ===== –ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø =====
# ‚ùå –í–ò–î–ê–õ–ï–ù–û: sqlalchemy-pool>=1.3.0 (–ù–ï –Ü–°–ù–£–Ñ!)
# ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í—Å—ñ –≤–µ—Ä—Å—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö

# ===== –û–°–ù–û–í–ù–Ü –ö–†–ò–¢–ò–ß–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü =====
aiogram>=3.4.0,<4.0.0
SQLAlchemy>=2.0.0,<3.0.0
asyncpg>=0.29.0
psycopg2-binary>=2.9.0
aiohttp>=3.9.0
aiofiles>=23.0.0
alembic>=1.13.0

# ===== –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö –¢–ê –ó–ê–î–ê–ß–Ü =====
APScheduler>=3.10.0
pytz>=2023.3
python-dateutil>=2.8.0

# ===== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø =====
python-dotenv>=1.0.0
pydantic>=2.5.0

# ===== AI –¢–ê –ö–û–ù–¢–ï–ù–¢ (–û–ü–¶–Ü–û–ù–ê–õ–¨–ù–û) =====
openai>=1.6.0
emoji>=2.8.0

# ===== –ë–ï–ó–ü–ï–ö–ê =====
cryptography>=42.0.0

# ===== –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø HEALTH CHECKS =====
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# ===== –£–¢–ò–õ–Ü–¢–ò =====
orjson>=3.9.0
psutil>=5.9.0
httpx>=0.25.0
requests>=2.31.0
'''
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("   ‚úÖ requirements.txt –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–≤–∏–¥–∞–ª–µ–Ω–æ sqlalchemy-pool)")

def fix_procfile():
    """–í–∏–ø—Ä–∞–≤–ª—è—î Procfile"""
    print("üö¢ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø PROCFILE:")
    
    procfile_content = '''# üö¢ RAILWAY PROCFILE - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ó–ê–ü–£–°–ö üö¢
web: cd app && python main.py
'''
    
    with open("Procfile", "w", encoding="utf-8") as f:
        f.write(procfile_content)
    
    print("   ‚úÖ Procfile –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –∑–∞–ø—É—Å–∫—É)")

def verify_fixes():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∏—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"""
    print("\n‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
    
    issues = []
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ main.py
    main_path = Path("app/main.py")
    if main_path.exists():
        with open(main_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'from typing import Optional, List, Dict, Any' in content:
            print("‚úÖ app/main.py: typing —ñ–º–ø–æ—Ä—Ç–∏ –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("typing —ñ–º–ø–æ—Ä—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ main.py")
        
        if 'await self.bot.session.close()' in content:
            print("‚úÖ app/main.py: aiohttp cleanup –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("aiohttp cleanup –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ main.py")
    else:
        issues.append("app/main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ database/__init__.py
    db_init_path = Path("app/database/__init__.py")
    if db_init_path.exists():
        with open(db_init_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'FUNCTIONS_LOADED' in content and 'fallback' in content:
            print("‚úÖ app/database/__init__.py: fallback —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞–Ω–æ")
        else:
            issues.append("fallback —Ñ—É–Ω–∫—Ü—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ database/__init__.py")
    else:
        issues.append("app/database/__init__.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return issues

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥—É–º–æ–≤
        if not Path("app").exists():
            print("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
        create_backup()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        ensure_directories()
        
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
        fix_models()
        fix_database()
        fix_scheduler()
        fix_main()
        fix_database_init()
        fix_requirements()
        fix_procfile()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        issues = verify_fixes()
        
        print("\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
        print("=" * 50)
        
        if not issues:
            print("üéâ –í–°–Ü –ö–†–ò–¢–ò–ß–ù–Ü –ë–ê–ì–ò –í–ò–ü–†–ê–í–õ–ï–ù–û!")
            print("‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ deploy –Ω–∞ Railway")
            print("\nüöÄ –û–ß–Ü–ö–£–í–ê–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
            print("‚úÖ –ó–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞: name 'List' is not defined")
            print("‚úÖ –ó–Ω–∏–∫–Ω–µ –ø–æ–º–∏–ª–∫–∞: Unclosed client session")
            print("‚úÖ –ë–î –±—É–¥–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ fallback —Ñ—É–Ω–∫—Ü—ñ—è–º–∏")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∑–∞–ª–∏—à–∏—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—é")
            print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print("1. git add .")
            print("2. git commit -m 'üö® Critical bugfixes: typing imports, aiohttp cleanup, database fallback'")
            print("3. git push")
            print("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ Railway –ø—ñ—Å–ª—è deploy")
        else:
            print("‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú–ò:")
            for issue in issues:
                print(f"  - {issue}")
            print("\nüîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª–∏ –≤—Ä—É—á–Ω—É")
        
        return len(issues) == 0
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    print(f"\n{'üéâ –£–°–ü–Ü–•!' if success else '‚ö†Ô∏è –ß–ê–°–¢–ö–û–í–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø'}")
    exit(0 if success else 1)