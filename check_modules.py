#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤ üß†üòÇüî•
"""

import sys
import traceback
from pathlib import Path

print("üß†üòÇüî• –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–£–õ–Ü–í –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê üß†üòÇüî•\n")

def check_module(module_name, description):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—é"""
    try:
        print(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é {description}...", end=" ")
        
        if module_name == "config.settings":
            from config.settings import settings, EMOJI, TEXTS
            print(f"‚úÖ OK (–ê–¥–º—ñ–Ω: {settings.ADMIN_ID})")
            return True
        
        elif module_name == "database.database":
            from database.database import init_db, get_db_session
            print("‚úÖ OK")
            return True
            
        elif module_name == "database.models":
            from database.models import User, Content, Duel, Rating
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers":
            from handlers import register_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers.basic_commands":
            from handlers.basic_commands import register_basic_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers.content_handlers":
            from handlers.content_handlers import register_content_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers.gamification_handlers":
            from handlers.gamification_handlers import register_gamification_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers.moderation_handlers":
            from handlers.moderation_handlers import register_moderation_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "handlers.duel_handlers":
            from handlers.duel_handlers import register_duel_handlers
            print("‚úÖ OK")
            return True
            
        elif module_name == "middlewares.auth":
            from middlewares.auth import AuthMiddleware, AntiSpamMiddleware
            print("‚úÖ OK")
            return True
            
        elif module_name == "services.scheduler":
            from services.scheduler import SchedulerService
            print("‚úÖ OK")
            return True
            
        elif module_name == "services.content_generator":
            from services.content_generator import content_generator
            print("‚úÖ OK")
            return True
            
        else:
            __import__(module_name)
            print("‚úÖ OK")
            return True
            
    except ImportError as e:
        print(f"‚ùå ImportError: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô:")
    
    dependencies = [
        ("aiogram", "Telegram Bot API"),
        ("sqlalchemy", "ORM –¥–ª—è –ë–î"),
        ("aiohttp", "HTTP –∫–ª—ñ—î–Ω—Ç"),
        ("apscheduler", "–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("openai", "OpenAI API"),
        ("asyncpg", "PostgreSQL –¥—Ä–∞–π–≤–µ—Ä")
    ]
    
    success_count = 0
    for dep, desc in dependencies:
        try:
            print(f"üìö {desc}...", end=" ")
            __import__(dep)
            print("‚úÖ OK")
            success_count += 1
        except ImportError:
            print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—è")
    
    print(f"\nüìä –ó–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{len(dependencies)}")
    return success_count == len(dependencies)

def check_files():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ñ–∞–π–ª—ñ–≤"""
    print("\nüìÅ –ü–ï–†–ï–í–Ü–†–ö–ê –§–ê–ô–õ–Ü–í:")
    
    required_files = [
        ("main.py", "–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª"),
        ("config/settings.py", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        ("database/models.py", "–ú–æ–¥–µ–ª—ñ –ë–î"),
        ("database/database.py", "–†–æ–±–æ—Ç–∞ –∑ –ë–î"),
        ("handlers/__init__.py", "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"),
        ("middlewares/auth.py", "Middleware"),
        ("services/scheduler.py", "–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("requirements.txt", "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
    ]
    
    success_count = 0
    for file_path, desc in required_files:
        if Path(file_path).exists():
            print(f"üìÑ {desc}: ‚úÖ –Ü—Å–Ω—É—î")
            success_count += 1
        else:
            print(f"üìÑ {desc}: ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π ({file_path})")
    
    print(f"\nüìä –§–∞–π–ª—ñ–≤ –∑–Ω–∞–π–¥–µ–Ω–æ: {success_count}/{len(required_files)}")
    return success_count == len(required_files)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤
    files_ok = check_files()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    deps_ok = check_dependencies()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥—É–ª—ñ–≤
    print("\nüîß –ü–ï–†–ï–í–Ü–†–ö–ê –ú–û–î–£–õ–Ü–í:")
    
    modules_to_check = [
        ("config.settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        ("database.models", "–ú–æ–¥–µ–ª—ñ –ë–î"),
        ("database.database", "–†–æ–±–æ—Ç–∞ –∑ –ë–î"),
        ("handlers", "–ì–æ–ª–æ–≤–Ω–∏–π —Ä–µ—î—Å—Ç—Ä–∞—Ç–æ—Ä —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"),
        ("handlers.basic_commands", "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"),
        ("handlers.content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("handlers.gamification_handlers", "–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è"),
        ("handlers.moderation_handlers", "–ú–æ–¥–µ—Ä–∞—Ü—ñ—è"),
        ("handlers.duel_handlers", "–î—É–µ–ª—ñ"),
        ("middlewares.auth", "Middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"),
        ("services.scheduler", "–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("services.content_generator", "AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    ]
    
    success_count = 0
    for module, desc in modules_to_check:
        if check_module(module, desc):
            success_count += 1
    
    print(f"\nüìä –ú–æ–¥—É–ª—ñ–≤ –ø—Ä–∞—Ü—é—î: {success_count}/{len(modules_to_check)}")
    
    # –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫
    print(f"\nüéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"üìÅ –§–∞–π–ª–∏: {'‚úÖ' if files_ok else '‚ùå'}")
    print(f"üì¶ –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {'‚úÖ' if deps_ok else '‚ùå'}")
    print(f"üîß –ú–æ–¥—É–ª—ñ: {'‚úÖ' if success_count >= len(modules_to_check) * 0.8 else '‚ùå'}")
    
    if files_ok and deps_ok and success_count >= len(modules_to_check) * 0.8:
        print(f"\nüéâ –í–°–ï –ì–û–¢–û–í–û –î–û –ó–ê–ü–£–°–ö–£! üöÄ")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–Ü –î–û–î–ê–¢–ö–û–í–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø")
        
        if not files_ok:
            print("   üìÅ –°—Ç–≤–æ—Ä—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏")
        if not deps_ok:
            print("   üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
        if success_count < len(modules_to_check) * 0.8:
            print("   üîß –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤ –º–æ–¥—É–ª—è—Ö")
        
        return False

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        traceback.print_exc()