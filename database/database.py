#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• Database –º–æ–¥—É–ª—å (–í–ò–ü–†–ê–í–õ–ï–ù–û enum —Ç–∞ get_or_create_user) üß†üòÇüî•
"""

import logging
import random
from contextlib import contextmanager
from typing import List, Optional, Dict, Any, Union
from datetime import datetime, timedelta

from sqlalchemy import create_engine, func, and_, or_, desc, asc, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

logger = logging.getLogger(__name__)

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
try:
    from config.settings import settings
except ImportError:
    import os
    class Settings:
        BOT_TOKEN = os.getenv("BOT_TOKEN", "")
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
        DEBUG = os.getenv("DEBUG", "False").lower() == "true"
        POINTS_FOR_APPROVAL = 20
        POINTS_FOR_SUBMISSION = 10
    settings = Settings()

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ë–î
try:
    from .models import (
        Base, User, Content, Rating, Duel, DuelVote, 
        AdminAction, BotStatistics, ContentType, ContentStatus
    )
    MODELS_LOADED = True
except ImportError:
    try:
        from database.models import (
            Base, User, Content, Rating, Duel, DuelVote, 
            AdminAction, BotStatistics, ContentType, ContentStatus
        )
        MODELS_LOADED = True
    except ImportError:
        MODELS_LOADED = False
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ –ë–î")

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–î =====
engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,
    pool_pre_ping=True
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—ñ—ó –ë–î"""
    session = SessionLocal()
    try:
        yield session
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        raise
    finally:
        session.close()

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î =====
async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        if not MODELS_LOADED:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î")
            return
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –ë–î —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ensure_admin_exists()
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await add_initial_data()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, last_name: str = None, **kwargs) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
    try:
        if not MODELS_LOADED:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            return None
            
        with get_db_session() as session:
            # –ó–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).filter(User.id == telegram_id).first()
            
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                    updated = True
                
                if updated:
                    user.updated_at = datetime.utcnow()
                
                user.last_active = datetime.utcnow()
                session.commit()
                session.refresh(user)
                
                logger.debug(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ–Ω–æ–≤–ª–µ–Ω–æ")
                return user
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            new_user = User(
                id=telegram_id,  # –£ –º–æ–¥–µ–ª—ñ —Ü–µ primary key
                username=username,
                first_name=first_name,
                last_name=last_name,
                points=0,
                rank="ü§° –ù–æ–≤–∞—á–æ–∫",
                daily_subscription=False,
                language_code="uk",
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                last_active=datetime.utcnow(),
                **kwargs
            )
            
            session.add(new_user)
            session.commit()
            session.refresh(new_user)
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username})")
            return new_user
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
        return None

async def get_user_by_id(user_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    try:
        if not MODELS_LOADED:
            return None
            
        with get_db_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                user.last_active = datetime.utcnow()
                session.commit()
                session.refresh(user)
            return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

async def update_user_points(user_id: int, points: int, reason: str = "activity") -> Optional[Dict[str, Any]]:
    """–û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        if not MODELS_LOADED:
            return None
            
        with get_db_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if not user:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤")
                return None
            
            old_points = user.points
            user.points = max(0, user.points + points)
            user.last_active = datetime.utcnow()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
            user.rank = get_rank_by_points(user.points)
            
            session.commit()
            session.refresh(user)
            
            logger.info(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {old_points} ‚Üí {user.points} (+{points}) –∑–∞ {reason}")
            
            return {
                "user_id": user_id,
                "old_points": old_points,
                "added_points": points,
                "total_points": user.points,
                "new_rank": user.rank,
                "reason": reason
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ {user_id}: {e}")
        return None

def get_rank_by_points(points: int) -> str:
    """–í–∏–∑–Ω–∞—á–∏—Ç–∏ —Ä–∞–Ω–≥ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–∞–ª—ñ–≤"""
    if points >= 5000:
        return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
    elif points >= 3000:
        return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
    elif points >= 1500:
        return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
    elif points >= 750:
        return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
    elif points >= 350:
        return "üé≠ –ö–æ–º—ñ–∫"
    elif points >= 150:
        return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
    elif points >= 50:
        return "üòÑ –°–º—ñ—Ö—É–Ω"
    else:
        return "ü§° –ù–æ–≤–∞—á–æ–∫"

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–ù–¢–ï–ù–¢–£ =====

async def add_content_for_moderation(author_id: int, content_text: str, content_type: str = "JOKE") -> Optional[Content]:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é - –í–ò–ü–†–ê–í–õ–ï–ù–û enum"""
    try:
        if not MODELS_LOADED:
            return None
            
        with get_db_session() as session:
            # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ enum –∑–Ω–∞—á–µ–Ω–Ω—è
            if content_type.upper() == "JOKE":
                content_type_enum = ContentType.JOKE
            elif content_type.upper() == "MEME":
                content_type_enum = ContentType.MEME
            else:
                content_type_enum = ContentType.JOKE
            
            new_content = Content(
                content_type=content_type_enum,
                text=content_text,
                author_id=author_id,
                status=ContentStatus.PENDING,  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ PENDING
                created_at=datetime.utcnow()
            )
            
            session.add(new_content)
            session.commit()
            session.refresh(new_content)
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {new_content.id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {author_id}")
            return new_content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

async def get_pending_content() -> List[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó - –í–ò–ü–†–ê–í–õ–ï–ù–û enum"""
    try:
        if not MODELS_LOADED:
            return []
            
        with get_db_session() as session:
            # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ enum –∑–Ω–∞—á–µ–Ω–Ω—è
            content_list = session.query(Content).filter(
                Content.status == ContentStatus.PENDING  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
            ).order_by(Content.created_at.asc()).all()
            
            return content_list
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        return []

async def moderate_content(content_id: int, action: str, moderator_id: int, comment: str = None) -> bool:
    """–ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç - –í–ò–ü–†–ê–í–õ–ï–ù–û enum"""
    try:
        if not MODELS_LOADED:
            return False
            
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            if not content:
                return False
            
            # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ enum –∑–Ω–∞—á–µ–Ω–Ω—è
            if action.upper() == "APPROVE":
                content.status = ContentStatus.APPROVED  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
                # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∞–≤—Ç–æ—Ä—É
                await update_user_points(content.author_id, settings.POINTS_FOR_APPROVAL, "—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            elif action.upper() == "REJECT":
                content.status = ContentStatus.REJECTED  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
            else:
                return False
            
            content.moderator_id = moderator_id
            content.moderation_comment = comment
            content.moderated_at = datetime.utcnow()
            
            session.commit()
            
            logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} {action.lower()}ed –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_id}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return False

async def get_random_approved_content(content_type: str = None, user_id: int = None) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç - –í–ò–ü–†–ê–í–õ–ï–ù–û enum"""
    try:
        if not MODELS_LOADED:
            return None
            
        with get_db_session() as session:
            # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–µ enum –∑–Ω–∞—á–µ–Ω–Ω—è
            query = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û
            )
            
            # –§—ñ–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            if content_type:
                if content_type.upper() == "JOKE":
                    query = query.filter(Content.content_type == ContentType.JOKE)
                elif content_type.upper() == "MEME":
                    query = query.filter(Content.content_type == ContentType.MEME)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            content_list = query.all()
            
            if not content_list:
                logger.warning(f"‚ùå –ù–µ–º–∞—î —Å—Ö–≤–∞–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∏–ø—É {content_type}")
                return None
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä
            content = random.choice(content_list)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–≥–ª—è–¥—É
            content.views += 1
            content.last_shown_at = datetime.utcnow()
            session.commit()
            
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def check_if_migration_needed() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î"""
    try:
        if not MODELS_LOADED:
            return False
            
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—é—Ç—å —Ç–∞–±–ª–∏—Ü—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ enum –∑–Ω–∞—á–µ–Ω—å
                result = session.execute(text("SELECT 1 FROM content WHERE status = 'APPROVED' LIMIT 1"))
                return False  # –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞
            except Exception:
                return True  # –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return True

async def migrate_database():
    """–í–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é –ë–î"""
    try:
        if not MODELS_LOADED:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—é –º—ñ–≥—Ä–∞—Ü—ñ—é")
            return
            
        logger.info("üîÑ –ü–æ—á–∏–Ω–∞—é –º—ñ–≥—Ä–∞—Ü—ñ—é –ë–î...")
        
        with engine.begin() as conn:
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            tables = ['duel_votes', 'admin_actions', 'bot_statistics', 'ratings', 'duels', 'content', 'users']
            for table in tables:
                try:
                    conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {table}")
                except Exception:
                    pass
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö enum —Ç–∏–ø—ñ–≤
            enum_types = ['contentstatus', 'contenttype', 'duelstatus']
            for enum_type in enum_types:
                try:
                    conn.execute(text(f"DROP TYPE IF EXISTS {enum_type} CASCADE"))
                except Exception:
                    pass
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
        raise

async def verify_database_integrity() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î"""
    try:
        if not MODELS_LOADED:
            return False
            
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            session.execute(text("SELECT 1 FROM users LIMIT 1"))
            session.execute(text("SELECT 1 FROM content LIMIT 1"))
            
            logger.info("‚úÖ –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")
            return True
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—é –ë–î: {e}")
        return False

async def ensure_admin_exists():
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ—Å–Ω—É—î –≤ –ë–î"""
    try:
        if not MODELS_LOADED or not settings.ADMIN_ID:
            return
            
        admin_user = await get_or_create_user(
            telegram_id=settings.ADMIN_ID,
            username="admin",
            first_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        )
        
        if admin_user:
            logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {settings.ADMIN_ID} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {settings.ADMIN_ID}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def add_initial_data():
    """–î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
    try:
        if not MODELS_LOADED:
            return
            
        # –î–æ–¥–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        sample_jokes = [
            "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∫–æ–ª–∏ –Ω–µ –º–æ–∂–µ –∑–∞—Å–Ω—É—Ç–∏? –†–∞—Ö—É—î –æ–≤–µ—Ü—å —É —Ü–∏–∫–ª—ñ while!",
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å —Ç–µ–º–Ω–∏–π —Ä–µ–∂–∏–º? –¢–æ–º—É —â–æ —Å–≤—ñ—Ç–ª–æ –ø—Ä–∏–≤–∞–±–ª—é—î –∂—É–∫—ñ–≤!",
            "–©–æ —Å–∫–∞–∑–∞–≤ HTML CSS? –ë–µ–∑ —Ç–µ–±–µ —è –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞—á—É!"
        ]
        
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∫–æ–Ω—Ç–µ–Ω—Ç
            existing_content = session.query(Content).first()
            if existing_content:
                return  # –î–∞–Ω—ñ –≤–∂–µ —î
            
            # –î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–∏
            for joke in sample_jokes:
                content = Content(
                    content_type=ContentType.JOKE,
                    text=joke,
                    author_id=settings.ADMIN_ID,
                    status=ContentStatus.APPROVED,
                    created_at=datetime.utcnow(),
                    moderated_at=datetime.utcnow(),
                    moderator_id=settings.ADMIN_ID
                )
                session.add(content)
            
            session.commit()
            logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'init_db',
    'get_db_session',
    'check_if_migration_needed',
    'migrate_database', 
    'verify_database_integrity',
    'get_or_create_user',
    'get_user_by_id',
    'update_user_points',
    'get_rank_by_points',
    'add_content_for_moderation',
    'get_pending_content',
    'moderate_content',
    'get_random_approved_content',
    'ensure_admin_exists',
    'add_initial_data'
]