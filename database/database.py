#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ê –†–û–ë–û–¢–ê –ó –ë–ê–ó–û–Æ –î–ê–ù–ò–• - –ü–û–í–ù–ê –í–ï–†–°–Ü–Ø üß†üòÇüî•
–ü–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏-–±–æ—Ç–∞
"""

import logging
import random
from contextlib import contextmanager
from typing import List, Optional, Dict, Any, Union
from datetime import datetime, timedelta

from sqlalchemy import create_engine, func, and_, or_, desc, asc, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
from config.settings import settings

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ë–î
from .models import (
    Base, User, Content, Rating, Duel, DuelVote, 
    AdminAction, BotStatistics, ContentType, ContentStatus, UserRank
)

logger = logging.getLogger(__name__)

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–î =====

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–∏–∂–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
engine = create_engine(
    settings.DATABASE_URL,
    echo=settings.DEBUG,  # SQL –ª–æ–≥–∏ —Ç—ñ–ª—å–∫–∏ –≤ debug —Ä–µ–∂–∏–º—ñ
    pool_pre_ping=True,   # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    pool_recycle=3600,    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω—å –∫–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
    pool_size=10,         # –†–æ–∑–º—ñ—Ä –ø—É–ª—É –∑'—î–¥–Ω–∞–Ω—å
    max_overflow=20,      # –ú–∞–∫—Å–∏–º—É–º –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑'—î–¥–Ω–∞–Ω—å
    connect_args={
        "check_same_thread": False,
        "timeout": 30
    } if "sqlite" in settings.DATABASE_URL else {
        "connect_timeout": 30,
        "application_name": "ukraine_telegram_bot"
    }
)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—ñ–π
SessionLocal = sessionmaker(
    autocommit=False, 
    autoflush=False, 
    bind=engine,
    expire_on_commit=False  # –í–∞–∂–ª–∏–≤–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è detached objects
)

# ===== –ö–û–ù–¢–ï–ö–°–¢–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –°–ï–°–Ü–ô =====

@contextmanager
def get_db_session():
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"üß† –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        raise
    finally:
        session.close()

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î =====

async def init_db():
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("üî• –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await add_initial_data()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        await verify_database_integrity()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        raise

async def verify_database_integrity():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            user_count = session.query(User).count()
            content_count = session.query(Content).count()
            
            logger.info(f"üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î: {user_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, {content_count} –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin = session.query(User).filter(User.telegram_id == settings.ADMIN_ID).first()
            if not admin:
                logger.warning("‚ö†Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—é...")
                await ensure_admin_exists()
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –ë–î: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, 
                           last_name: str = None, **kwargs) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    try:
        with get_db_session() as session:
            # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –≤–æ–Ω–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                    updated = True
                
                # –û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                user.last_activity = datetime.utcnow()
                
                if updated:
                    session.commit()
                    logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username})")
                
                return user
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                is_active=True,
                is_admin=(telegram_id == settings.ADMIN_ID),
                total_points=0,
                current_rank=UserRank.NEWBIE,
                **kwargs
            )
            
            session.add(new_user)
            session.commit()
            
            # Refresh –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö
            session.refresh(new_user)
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username})")
            return new_user
            
    except IntegrityError as e:
        logger.error(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î: {e}")
        # –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
        try:
            with get_db_session() as session:
                return session.query(User).filter(User.telegram_id == telegram_id).first()
        except Exception:
            return None
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
        return None

async def get_user_by_id(user_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                user.last_activity = datetime.utcnow()
                session.commit()
                session.refresh(user)
            return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

async def update_user_points(user_id: int, points: int, reason: str = "activity") -> Optional[Dict[str, Any]]:
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Ä–∞–Ω–≥—É"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤")
                return None
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞–Ω–≥
            old_rank = user.current_rank
            old_points = user.total_points
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∏
            user.total_points = max(0, user.total_points + points)
            user.last_activity = datetime.utcnow()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω—É —Ä–∞–Ω–≥—É
            new_rank = calculate_user_rank(user.total_points)
            rank_changed = new_rank != old_rank
            
            if rank_changed:
                user.current_rank = new_rank
            
            session.commit()
            session.refresh(user)
            
            result = {
                "user_id": user_id,
                "old_points": old_points,
                "added_points": points,
                "total_points": user.total_points,
                "old_rank": old_rank.value if old_rank else "–ù–æ–≤–∞—á–æ–∫",
                "new_rank": new_rank.value,
                "rank_changed": rank_changed,
                "reason": reason
            }
            
            logger.info(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {old_points} ‚Üí {user.total_points} (+{points}) –∑–∞ {reason}")
            
            if rank_changed:
                logger.info(f"üéâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–≤–∏—â–∏–≤—Å—è –¥–æ —Ä–∞–Ω–≥—É: {new_rank.value}")
            
            return result
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

def calculate_user_rank(points: int) -> UserRank:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∞–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –±–∞–ª–∞–º–∏"""
    if points >= 2500:
        return UserRank.LEGEND
    elif points >= 1500:
        return UserRank.VIRTUOSO
    elif points >= 1000:
        return UserRank.EXPERT
    elif points >= 600:
        return UserRank.MASTER
    elif points >= 300:
        return UserRank.HUMORIST
    elif points >= 150:
        return UserRank.COMEDIAN
    elif points >= 50:
        return UserRank.JOKER
    else:
        return UserRank.NEWBIE

async def get_user_stats(user_id: int) -> Dict[str, Any]:
    """–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            
            if not user:
                return {"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"}
            
            # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stats = {
                "user_id": user.telegram_id,
                "username": user.username,
                "first_name": user.first_name,
                "total_points": user.total_points,
                "current_rank": user.current_rank.value if user.current_rank else "–ù–æ–≤–∞—á–æ–∫",
                "is_premium": user.is_premium,
                "is_admin": user.is_admin,
                "daily_subscription": user.daily_subscription,
                
                # –ö–æ–Ω—Ç–µ–Ω—Ç
                "jokes_submitted": user.jokes_submitted,
                "jokes_approved": user.jokes_approved,
                "memes_submitted": user.memes_submitted,
                "memes_approved": user.memes_approved,
                
                # –í–∑–∞—î–º–æ–¥—ñ—è
                "likes_given": user.likes_given,
                "dislikes_given": user.dislikes_given,
                "comments_made": user.comments_made,
                
                # –î—É–µ–ª—ñ
                "duels_won": user.duels_won,
                "duels_lost": user.duels_lost,
                "duels_participated": user.duels_participated,
                
                # –ß–∞—Å
                "created_at": user.created_at,
                "last_activity": user.last_activity
            }
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ –∑–∞–ø–∏—Ç—ñ–≤
            total_content_created = session.query(Content).filter(
                Content.author_id == user_id
            ).count()
            
            approved_content = session.query(Content).filter(
                and_(Content.author_id == user_id, Content.status == ContentStatus.APPROVED)
            ).count()
            
            total_ratings_given = session.query(Rating).filter(Rating.user_id == user_id).count()
            
            # –ü–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É
            rank_position = session.query(User).filter(
                User.total_points > user.total_points
            ).count() + 1
            
            stats.update({
                "total_content_created": total_content_created,
                "approved_content": approved_content,
                "total_ratings_given": total_ratings_given,
                "approval_rate": (approved_content / total_content_created * 100) if total_content_created > 0 else 0,
                "rank_position": rank_position
            })
            
            # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–∞–Ω–≥
            rank_info = get_rank_info(user.total_points, user.current_rank)
            stats.update(rank_info)
            
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return {"error": str(e)}

def get_rank_info(points: int, current_rank: UserRank) -> Dict[str, Any]:
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å —Ä–∞–Ω–≥—É"""
    rank_requirements = {
        UserRank.NEWBIE: 0,
        UserRank.JOKER: 50,
        UserRank.COMEDIAN: 150,
        UserRank.HUMORIST: 300,
        UserRank.MASTER: 600,
        UserRank.EXPERT: 1000,
        UserRank.VIRTUOSO: 1500,
        UserRank.LEGEND: 2500
    }
    
    ranks = list(UserRank)
    current_index = ranks.index(current_rank)
    
    next_rank = None
    points_to_next = 0
    progress_percent = 100
    
    if current_index < len(ranks) - 1:
        next_rank = ranks[current_index + 1]
        points_to_next = rank_requirements[next_rank] - points
        current_rank_min = rank_requirements[current_rank]
        next_rank_min = rank_requirements[next_rank]
        progress_percent = min(100, ((points - current_rank_min) / (next_rank_min - current_rank_min)) * 100)
    
    return {
        "rank_info": {
            "current_rank": current_rank.value,
            "current_points": points,
            "next_rank": next_rank.value if next_rank else None,
            "points_to_next": max(0, points_to_next) if next_rank else 0,
            "progress_percent": round(progress_percent, 1)
        }
    }

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ù–¢–û–ú =====

async def add_content_for_moderation(user_id: int, content_type: str, text: str, file_id: str = None) -> Optional[Content]:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∑ –ø–æ–≤–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é"""
    try:
        with get_db_session() as session:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ string –≤ enum
            if content_type.lower() == "joke":
                ct = ContentType.JOKE
            elif content_type.lower() == "meme":
                ct = ContentType.MEME
            else:
                raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {content_type}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
            content = Content(
                content_type=ct,
                text=text,
                file_id=file_id,
                author_id=user_id,
                status=ContentStatus.PENDING,
                topic="general",
                style="neutral",
                difficulty=1,
                quality_score=0.5,
                popularity_score=0.0
            )
            
            session.add(content)
            session.commit()
            session.refresh(content)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                if ct == ContentType.JOKE:
                    user.jokes_submitted += 1
                else:
                    user.memes_submitted += 1
                session.commit()
            
            logger.info(f"üìù –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥ {user_id}: ID={content.id}, —Ç–∏–ø={content_type}")
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é: {e}")
        return None

async def get_pending_content(limit: int = 10) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    try:
        with get_db_session() as session:
            pending_items = session.query(Content).filter(
                Content.status == ContentStatus.PENDING
            ).order_by(Content.created_at.asc()).limit(limit).all()
            
            result = []
            for item in pending_items:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∞
                author = session.query(User).filter(User.telegram_id == item.author_id).first()
                author_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                if author:
                    author_name = f"{author.first_name or ''} {author.last_name or ''}".strip()
                    if author.username:
                        author_name += f" (@{author.username})"
                
                result.append({
                    "id": item.id,
                    "type": item.content_type.value,
                    "text": item.text,
                    "file_id": item.file_id,
                    "author_id": item.author_id,
                    "author_name": author_name,
                    "created_at": item.created_at,
                    "topic": item.topic,
                    "quality_score": item.quality_score
                })
            
            return result
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        return []

async def moderate_content(content_id: int, moderator_id: int, approve: bool, comment: str = None) -> bool:
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø–æ–≤–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é"""
    try:
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if not content:
                logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
                return False
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content.status = ContentStatus.APPROVED if approve else ContentStatus.REJECTED
            content.moderator_id = moderator_id
            content.moderation_comment = comment
            content.moderated_at = datetime.utcnow()
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ—Ä–∞
            author = session.query(User).filter(User.telegram_id == content.author_id).first()
            if author and approve:
                if content.content_type == ContentType.JOKE:
                    author.jokes_approved += 1
                else:
                    author.memes_approved += 1
                
                # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
                await update_user_points(author.telegram_id, settings.POINTS_FOR_APPROVAL, "approved_content")
            
            session.commit()
            
            status_text = "—Å—Ö–≤–∞–ª–µ–Ω–æ" if approve else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            logger.info(f"üìã –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} {status_text} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_id}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return False

async def get_content_by_id(content_id: int) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ ID"""
    try:
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                session.refresh(content)
            return content
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return None

async def get_random_approved_content(content_type: str = "mixed", limit: int = 1) -> Union[Content, List[Content], None]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        with get_db_session() as session:
            query = session.query(Content).filter(Content.status == ContentStatus.APPROVED)
            
            # –§—ñ–ª—å—Ç—Ä –∑–∞ —Ç–∏–ø–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç—É
            if content_type != "mixed":
                if content_type.lower() == "joke":
                    query = query.filter(Content.content_type == ContentType.JOKE)
                elif content_type.lower() == "meme":
                    query = query.filter(Content.content_type == ContentType.MEME)
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ —Ç–∞ –≤–∏–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ
            all_content = query.all()
            
            if not all_content:
                return [] if limit > 1 else None
            
            if limit == 1:
                selected = random.choice(all_content)
                session.refresh(selected)
                return selected
            else:
                selected = random.sample(all_content, min(limit, len(all_content)))
                for item in selected:
                    session.refresh(item)
                return selected
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return [] if limit > 1 else None

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –†–ï–ô–¢–ò–ù–ì–ê–ú–ò =====

async def add_content_rating(user_id: int, content_id: int, rating: int, comment: str = None) -> bool:
    """–î–æ–¥–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–≤ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            existing_rating = session.query(Rating).filter(
                and_(Rating.user_id == user_id, Rating.content_id == content_id)
            ).first()
            
            if existing_rating:
                # –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                old_rating = existing_rating.rating
                existing_rating.rating = rating
                existing_rating.comment = comment
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                content = session.query(Content).filter(Content.id == content_id).first()
                if content:
                    if old_rating == 1 and rating == -1:
                        content.likes = max(0, content.likes - 1)
                        content.dislikes += 1
                    elif old_rating == -1 and rating == 1:
                        content.dislikes = max(0, content.dislikes - 1)
                        content.likes += 1
                
                session.commit()
                logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ {user_id} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {rating}")
                
            else:
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                new_rating = Rating(
                    user_id=user_id,
                    content_id=content_id,
                    rating=rating,
                    comment=comment
                )
                session.add(new_rating)
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                content = session.query(Content).filter(Content.id == content_id).first()
                if content:
                    if rating == 1:
                        content.likes += 1
                    elif rating == -1:
                        content.dislikes += 1
                    
                    # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–µ—Ä–µ–≥–ª—è–¥—É
                    content.views += 1
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user = session.query(User).filter(User.telegram_id == user_id).first()
                if user:
                    if rating == 1:
                        user.likes_given += 1
                    else:
                        user.dislikes_given += 1
                
                session.commit()
                logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ {user_id} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {rating}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return False

async def get_content_rating(user_id: int, content_id: int) -> Optional[int]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            rating = session.query(Rating).filter(
                and_(Rating.user_id == user_id, Rating.content_id == content_id)
            ).first()
            
            return rating.rating if rating else None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return None

async def update_content_rating(user_id: int, content_id: int, new_rating: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ (–∞–ª–∏–∞—Å –¥–ª—è add_content_rating)"""
    return await add_content_rating(user_id, content_id, new_rating)

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô =====

async def get_recommended_content(user_id: int, content_type: str) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º
        return await get_random_approved_content(content_type, 1)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

async def record_content_view(user_id: int, content_id: int, source: str = "command") -> bool:
    """–ó–∞–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                content.views += 1
                session.commit()
                
                # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
                await update_user_points(user_id, 1, f"content_view_{source}")
                
                return True
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –ø–µ—Ä–µ–≥–ª—è–¥—É: {e}")
        return False

# ===== –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def get_bot_statistics() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        with get_db_session() as session:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            total_users = session.query(User).count()
            active_today = session.query(User).filter(
                User.last_activity >= datetime.utcnow() - timedelta(days=1)
            ).count()
            active_week = session.query(User).filter(
                User.last_activity >= datetime.utcnow() - timedelta(days=7)
            ).count()
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            total_content = session.query(Content).count()
            approved_content = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED
            ).count()
            pending_content = session.query(Content).filter(
                Content.status == ContentStatus.PENDING
            ).count()
            rejected_content = session.query(Content).filter(
                Content.status == ContentStatus.REJECTED
            ).count()
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ (–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å)
            today_ratings = session.query(Rating).filter(
                Rating.created_at >= datetime.utcnow() - timedelta(days=1)
            ).count()
            
            return {
                "total_users": total_users,
                "active_today": active_today,
                "active_week": active_week,
                "total_content": total_content,
                "approved_content": approved_content,
                "pending_content": pending_content,
                "rejected_content": rejected_content,
                "today_ratings": today_ratings,
                "last_updated": datetime.utcnow().isoformat()
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
        return {
            "total_users": 0,
            "active_today": 0,
            "active_week": 0,
            "total_content": 0,
            "approved_content": 0,
            "pending_content": 0,
            "rejected_content": 0,
            "today_ratings": 0,
            "error": str(e)
        }

async def update_bot_statistics() -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        stats = await get_bot_statistics()
        
        with get_db_session() as session:
            today = datetime.utcnow().date()
            
            # –ó–Ω–∞–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            bot_stats = session.query(BotStatistics).filter(
                func.date(BotStatistics.date) == today
            ).first()
            
            if not bot_stats:
                bot_stats = BotStatistics(date=datetime.utcnow())
                session.add(bot_stats)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_stats.total_users = stats["total_users"]
            bot_stats.active_users_today = stats["active_today"]
            bot_stats.active_users_week = stats["active_week"]
            bot_stats.total_content = stats["total_content"]
            bot_stats.approved_content = stats["approved_content"]
            bot_stats.pending_content = stats["pending_content"]
            bot_stats.rejected_content = stats["rejected_content"]
            
            session.commit()
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
        return False

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def ensure_admin_exists() -> bool:
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ—Å–Ω—É—î"""
    try:
        admin = await get_or_create_user(
            telegram_id=settings.ADMIN_ID,
            username="admin",
            first_name="Administrator",
            is_admin=True,
            total_points=1000
        )
        
        if admin:
            logger.info(f"üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π: {settings.ADMIN_ID}")
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def add_initial_data():
    """–î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é"""
    try:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ensure_admin_exists()
        
        # –î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –∂–∞—Ä—Ç–∏ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        with get_db_session() as session:
            existing_jokes = session.query(Content).filter(
                and_(Content.content_type == ContentType.JOKE, Content.status == ContentStatus.APPROVED)
            ).count()
            
            if existing_jokes == 0:
                await add_sample_content(session)
        
        logger.info("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

async def add_sample_content(session: Session):
    """–î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    sample_jokes = [
        "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏ –•–µ–ª–æ–≤—ñ–Ω –≤—ñ–¥ –†—ñ–∑–¥–≤–∞? –ë–æ Oct 31 == Dec 25! üß†üòÇ",
        "–ü—Ä–∏—Ö–æ–¥–∏—Ç—å —É–∫—Ä–∞—ó–Ω–µ—Ü—å –¥–æ –ª—ñ–∫–∞—Ä—è: '–õ—ñ–∫–∞—Ä—é, —É –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ç—É—Ç!' –õ—ñ–∫–∞—Ä: '–ê —â–æ —Ç–∞–º —É –≤–∞—Å?' –£–∫—Ä–∞—ó–Ω–µ—Ü—å: '–¢–∞ —Ö–∞—Ç–∞ —Å—Ç–∞—Ä–∞, –¥–∞—Ö —Ç–µ—á–µ...' üòÇ",
        "–ß–æ–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ IT-—à–Ω–∏–∫–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –≤ —Å–≤—ñ—Ç—ñ? –ë–æ –≤–æ–Ω–∏ –≤–º—ñ—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ —Å–≤—ñ—Ç–ª–∞! üî•üòÇ",
        "–©–æ —Å–ø—ñ–ª—å–Ω–æ–≥–æ –º—ñ–∂ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –∑–∏–º–æ—é —Ç–∞ JavaScript? –ù—ñ–∫–æ–ª–∏ –Ω–µ –∑–Ω–∞—î—à, —â–æ –æ—á—ñ–∫—É–≤–∞—Ç–∏! ‚ùÑÔ∏èüòÇ",
        "–ß–æ–º—É —É–∫—Ä–∞—ó–Ω—Ü—ñ –Ω–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏? –ë–æ –≤–æ–Ω–∏ –∑–≤–∏–∫–ª–∏ debug–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å! üß†üî•"
    ]
    
    try:
        for joke_text in sample_jokes:
            joke = Content(
                content_type=ContentType.JOKE,
                text=joke_text,
                author_id=settings.ADMIN_ID,
                status=ContentStatus.APPROVED,
                topic="tech",
                style="irony",
                difficulty=1,
                quality_score=0.8,
                popularity_score=0.5,
                likes=random.randint(10, 50),
                views=random.randint(50, 200)
            )
            session.add(joke)
        
        session.commit()
        logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(sample_jokes)} –∑—Ä–∞–∑–∫—ñ–≤ –∂–∞—Ä—Ç—ñ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –î–£–ï–õ–ï–ô =====

async def create_duel(challenger_id: int, challenger_content_id: int) -> Optional[Duel]:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥—É–µ–ª—å"""
    try:
        with get_db_session() as session:
            # –ó–Ω–∞–π—Ç–∏ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –æ–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            potential_opponents = session.query(User).filter(
                and_(
                    User.telegram_id != challenger_id,
                    User.is_active == True,
                    User.total_points > 10
                )
            ).limit(20).all()
            
            if not potential_opponents:
                logger.warning(f"‚ö†Ô∏è –ù–µ–º–∞—î –æ–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥–ª—è –¥—É–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {challenger_id}")
                return None
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –æ–ø–æ–Ω–µ–Ω—Ç
            opponent = random.choice(potential_opponents)
            
            duel = Duel(
                challenger_id=challenger_id,
                opponent_id=opponent.telegram_id,
                challenger_content_id=challenger_content_id,
                status="waiting",
                voting_ends_at=datetime.utcnow() + timedelta(minutes=5)
            )
            
            session.add(duel)
            session.commit()
            session.refresh(duel)
            
            logger.info(f"‚öîÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –¥—É–µ–ª—å –º—ñ–∂ {challenger_id} —ñ {opponent.telegram_id}")
            return duel
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        return None

async def get_active_duels() -> List[Duel]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
    try:
        with get_db_session() as session:
            active_duels = session.query(Duel).filter(
                Duel.status.in_(["waiting", "active"])
            ).all()
            
            for duel in active_duels:
                session.refresh(duel)
            
            return active_duels
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {e}")
        return []

async def vote_in_duel(duel_id: int, voter_id: int, vote: str) -> bool:
    """–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –≤ –¥—É–µ–ª—ñ"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤
            existing_vote = session.query(DuelVote).filter(
                and_(DuelVote.duel_id == duel_id, DuelVote.voter_id == voter_id)
            ).first()
            
            if existing_vote:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {voter_id} –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –≤ –¥—É–µ–ª—ñ {duel_id}")
                return False
            
            # –î–æ–¥–∞—Ç–∏ –≥–æ–ª–æ—Å
            new_vote = DuelVote(
                duel_id=duel_id,
                voter_id=voter_id,
                vote=vote
            )
            session.add(new_vote)
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤ –¥—É–µ–ª—ñ
            duel = session.query(Duel).filter(Duel.id == duel_id).first()
            if duel:
                if vote == "challenger":
                    duel.challenger_votes += 1
                elif vote == "opponent":
                    duel.opponent_votes += 1
                
                session.commit()
                logger.info(f"üó≥Ô∏è –ì–æ–ª–æ—Å –≤—ñ–¥ {voter_id} –≤ –¥—É–µ–ª—ñ {duel_id}: {vote}")
                return True
            
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ: {e}")
        return False

# ===== LEGACY –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–£–ú–Ü–°–ù–û–°–¢–Ü =====

async def submit_content(user_id: int, content_type: ContentType, text: str = None, file_id: str = None) -> Optional[Content]:
    """Legacy —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ"""
    ct_string = "joke" if content_type == ContentType.JOKE else "meme"
    return await add_content_for_moderation(user_id, ct_string, text, file_id)

async def update_user_stats(user_id: int, stats_update: Dict[str, Any]) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Å–ø—Ä–æ—â–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)"""
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ update_user_points —è–∫—â–æ —Ü–µ –±–∞–ª–∏
        if "points" in stats_update:
            result = await update_user_points(user_id, stats_update["points"], "stats_update")
            return result is not None
        
        # –Ü–Ω—à—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ç—É—Ç
        logger.info(f"üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {user_id}: {stats_update}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False