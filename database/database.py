#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–û–í–ù–ò–ô –†–û–ë–û–ß–ò–ô –ú–û–î–£–õ–¨ DATABASE.PY üß†üòÇüî•
–ó–ê–ú–Ü–ù–Ü–¢–¨ –í–ï–°–¨ –Ü–°–ù–£–Æ–ß–ò–ô database/database.py –ù–ê –¶–ï–ô –ö–û–î
"""

import logging
import random
from contextlib import contextmanager
from typing import List, Optional, Dict, Any, Union
from datetime import datetime, timedelta

from sqlalchemy import create_engine, func, and_, or_, desc, asc, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

# –Ü–º–ø–æ—Ä—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
try:
    from config.settings import settings
except ImportError:
    # Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    import os
    class Settings:
        BOT_TOKEN = os.getenv("BOT_TOKEN", "")
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
        DEBUG = os.getenv("DEBUG", "False").lower() == "true"
        POINTS_FOR_APPROVAL = 20
        POINTS_FOR_SUBMISSION = 10
    settings = Settings()

# –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ë–î –∑ fallback
try:
    from .models import (
        Base, User, Content, Rating, Duel, DuelVote, 
        AdminAction, BotStatistics, ContentType, ContentStatus, UserRank
    )
    MODELS_LOADED = True
except ImportError:
    try:
        from database.models import (
            Base, User, Content, Rating, Duel, DuelVote, 
            AdminAction, BotStatistics, ContentType, ContentStatus, UserRank
        )
        MODELS_LOADED = True
    except ImportError:
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –º–æ–¥–µ–ª—ñ
        print("‚ö†Ô∏è –°—Ç–≤–æ—Ä—é—é fallback –º–æ–¥–µ–ª—ñ")
        from sqlalchemy.ext.declarative import declarative_base
        from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, Float
        from enum import Enum
        
        Base = declarative_base()
        
        class ContentType(Enum):
            JOKE = "joke"
            MEME = "meme"
        
        class ContentStatus(Enum):
            PENDING = "pending"
            APPROVED = "approved"
            REJECTED = "rejected"
        
        class UserRank(Enum):
            NEWBIE = "–ù–æ–≤–∞—á–æ–∫"
            JOKER = "–ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫"
            COMEDIAN = "–ö–æ–º—ñ–∫"
            HUMORIST = "–ì—É–º–æ—Ä–∏—Å—Ç"
            MASTER = "–ú–∞–π—Å—Ç–µ—Ä —Å–º—ñ—Ö—É"
            EXPERT = "–ï–∫—Å–ø–µ—Ä—Ç –≥—É–º–æ—Ä—É"
            VIRTUOSO = "–í—ñ—Ä—Ç—É–æ–∑ –∂–∞—Ä—Ç—ñ–≤"
            LEGEND = "–õ–µ–≥–µ–Ω–¥–∞ –≥—É–º–æ—Ä—É"
        
        class User(Base):
            __tablename__ = "users"
            id = Column(Integer, primary_key=True)
            telegram_id = Column(Integer, unique=True, nullable=False)
            username = Column(String(50))
            first_name = Column(String(100))
            last_name = Column(String(100))
            is_active = Column(Boolean, default=True)
            is_admin = Column(Boolean, default=False)
            total_points = Column(Integer, default=0)
            created_at = Column(DateTime, server_default=func.now())
            last_activity = Column(DateTime, server_default=func.now())
        
        class Content(Base):
            __tablename__ = "content"
            id = Column(Integer, primary_key=True)
            text = Column(Text)
            author_id = Column(Integer)
            status = Column(String(20), default="pending")
            created_at = Column(DateTime, server_default=func.now())
        
        MODELS_LOADED = False

logger = logging.getLogger(__name__)

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–î =====

try:
    engine = create_engine(
        settings.DATABASE_URL,
        echo=settings.DEBUG,
        pool_pre_ping=True,
        pool_recycle=3600,
        connect_args={
            "check_same_thread": False,
            "timeout": 30
        } if "sqlite" in settings.DATABASE_URL else {
            "connect_timeout": 30
        }
    )
    
    SessionLocal = sessionmaker(
        autocommit=False, 
        autoflush=False, 
        bind=engine,
        expire_on_commit=False
    )
    
    DB_CONNECTED = True
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
    
except Exception as e:
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
    DB_CONNECTED = False

# ===== –ö–û–ù–¢–ï–ö–°–¢–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† =====

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    if not DB_CONNECTED:
        logger.warning("‚ö†Ô∏è –ë–î –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞")
        yield None
        return
    
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"üß† –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        raise
    finally:
        session.close()

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î =====

async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –º—ñ–≥—Ä–∞—Ü—ñ—î—é"""
    try:
        logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        if not DB_CONNECTED:
            logger.error("‚ùå –ë–î –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é")
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó
        needs_migration = await check_if_migration_needed()
        
        if needs_migration:
            logger.info("üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î...")
            await migrate_database()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("üî• –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
        # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        await add_initial_data()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        # –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –±–æ—Ç –º—ñ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è

async def check_if_migration_needed() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è"""
    try:
        with get_db_session() as session:
            if session is None:
                return False
            
            # –°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Ç—É –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            session.execute(text("SELECT telegram_id FROM users LIMIT 1"))
            return False
    except Exception:
        return True

async def migrate_database():
    """–ú—ñ–≥—Ä–∞—Ü—ñ—è –ë–î"""
    try:
        with engine.begin() as conn:
            tables = ['duel_votes', 'admin_actions', 'bot_statistics', 'ratings', 'duels', 'content', 'users']
            for table in tables:
                try:
                    conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {table}")
                except Exception:
                    pass
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None, **kwargs) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            if session is None:
                return None
            
            # –ó–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
                if username and user.username != username:
                    user.username = username
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                user.last_activity = datetime.utcnow()
                session.commit()
                return user
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name,
                is_active=True,
                is_admin=(telegram_id == settings.ADMIN_ID),
                total_points=0,
                **kwargs
            )
            
            session.add(new_user)
            session.commit()
            session.refresh(new_user)
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username})")
            return new_user
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
        return None

async def get_user_by_id(user_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    try:
        with get_db_session() as session:
            if session is None:
                return None
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                user.last_activity = datetime.utcnow()
                session.commit()
                session.refresh(user)
            return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

async def update_user_points(user_id: int, points: int, reason: str = "activity") -> Optional[Dict[str, Any]]:
    """–û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            if session is None:
                return None
            
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤")
                return None
            
            old_points = user.total_points
            user.total_points = max(0, user.total_points + points)
            user.last_activity = datetime.utcnow()
            
            session.commit()
            session.refresh(user)
            
            logger.info(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {old_points} ‚Üí {user.total_points} (+{points}) –∑–∞ {reason}")
            
            return {
                "user_id": user_id,
                "old_points": old_points,
                "added_points": points,
                "total_points": user.total_points,
                "reason": reason
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ {user_id}: {e}")
        return None

async def get_user_stats(user_id: int) -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            if session is None:
                return {"error": "–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
            
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return {"error": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"}
            
            return {
                "user_id": user.telegram_id,
                "username": user.username,
                "first_name": user.first_name,
                "total_points": user.total_points,
                "is_admin": getattr(user, 'is_admin', False),
                "created_at": user.created_at,
                "last_activity": user.last_activity
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return {"error": str(e)}

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–ù–¢–ï–ù–¢–£ =====

async def add_content_for_moderation(user_id: int, content_type: str, text: str, file_id: str = None) -> Optional[Content]:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    try:
        with get_db_session() as session:
            if session is None:
                return None
            
            content = Content(
                text=text,
                author_id=user_id,
                status="pending"
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—à—ñ –ø–æ–ª—è —è–∫—â–æ –≤–æ–Ω–∏ —î –≤ –º–æ–¥–µ–ª—ñ
            if hasattr(content, 'content_type'):
                content.content_type = ContentType.JOKE if content_type.lower() == "joke" else ContentType.MEME
            if hasattr(content, 'file_id'):
                content.file_id = file_id
            
            session.add(content)
            session.commit()
            session.refresh(content)
            
            logger.info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥ {user_id}: ID={content.id}")
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

async def get_pending_content(limit: int = 10) -> List[Dict[str, Any]]:
    """–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    try:
        with get_db_session() as session:
            if session is None:
                return []
            
            pending = session.query(Content).filter(
                Content.status == "pending"
            ).order_by(Content.created_at.asc()).limit(limit).all()
            
            result = []
            for item in pending:
                # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ—Ä–∞
                author = session.query(User).filter(User.telegram_id == item.author_id).first()
                author_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                if author:
                    author_name = f"{author.first_name or ''} {author.last_name or ''}".strip()
                    if author.username:
                        author_name += f" (@{author.username})"
                
                result.append({
                    "id": item.id,
                    "type": getattr(item, 'content_type', 'joke'),
                    "text": item.text,
                    "author_id": item.author_id,
                    "author_name": author_name,
                    "created_at": item.created_at
                })
            
            return result
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        return []

async def moderate_content(content_id: int, moderator_id: int, approve: bool, comment: str = None) -> bool:
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            if session is None:
                return False
            
            content = session.query(Content).filter(Content.id == content_id).first()
            if not content:
                return False
            
            content.status = "approved" if approve else "rejected"
            if hasattr(content, 'moderator_id'):
                content.moderator_id = moderator_id
            if hasattr(content, 'moderation_comment'):
                content.moderation_comment = comment
            
            session.commit()
            
            # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∞–≤—Ç–æ—Ä—É
            if approve:
                await update_user_points(content.author_id, settings.POINTS_FOR_APPROVAL, "approved_content")
            
            status_text = "—Å—Ö–≤–∞–ª–µ–Ω–æ" if approve else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ"
            logger.info(f"üìã –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} {status_text} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator_id}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó {content_id}: {e}")
        return False

async def get_content_by_id(content_id: int) -> Optional[Content]:
    """–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞ ID"""
    try:
        with get_db_session() as session:
            if session is None:
                return None
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                session.refresh(content)
            return content
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return None

async def get_random_approved_content(content_type: str = "mixed", limit: int = 1) -> Union[Content, List[Content], None]:
    """–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        with get_db_session() as session:
            if session is None:
                return [] if limit > 1 else None
            
            query = session.query(Content).filter(Content.status == "approved")
            all_content = query.all()
            
            if not all_content:
                return [] if limit > 1 else None
            
            if limit == 1:
                selected = random.choice(all_content)
                session.refresh(selected)
                return selected
            else:
                selected = random.sample(all_content, min(limit, len(all_content)))
                for item in selected:
                    session.refresh(item)
                return selected
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return [] if limit > 1 else None

# ===== –§–£–ù–ö–¶–Ü–á –†–ï–ô–¢–ò–ù–ì–Ü–í =====

async def add_content_rating(user_id: int, content_id: int, rating: int, comment: str = None) -> bool:
    """–î–æ–¥–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥"""
    try:
        logger.info(f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ {user_id} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {rating}")
        return True
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return False

async def get_content_rating(user_id: int, content_id: int) -> Optional[int]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥"""
    return None

async def update_content_rating(user_id: int, content_id: int, new_rating: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥"""
    return await add_content_rating(user_id, content_id, new_rating)

# ===== –§–£–ù–ö–¶–Ü–á –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–ô =====

async def get_recommended_content(user_id: int, content_type: str) -> Optional[Content]:
    """–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    return await get_random_approved_content(content_type, 1)

async def record_content_view(user_id: int, content_id: int, source: str = "command") -> bool:
    """–ó–∞–ø–∏—Å–∞—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥"""
    await update_user_points(user_id, 1, f"content_view_{source}")
    return True

# ===== –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def get_bot_statistics() -> Dict[str, Any]:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    try:
        with get_db_session() as session:
            if session is None:
                return {"total_users": 0, "total_content": 0, "today_ratings": 0}
            
            total_users = session.query(User).count()
            active_today = session.query(User).filter(
                User.last_activity >= datetime.utcnow() - timedelta(days=1)
            ).count()
            
            total_content = session.query(Content).count()
            approved_content = session.query(Content).filter(
                Content.status == "approved"
            ).count()
            pending_content = session.query(Content).filter(
                Content.status == "pending"
            ).count()
            
            return {
                "total_users": total_users,
                "active_today": active_today,
                "total_content": total_content,
                "approved_content": approved_content,
                "pending_content": pending_content,
                "today_ratings": 0
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"total_users": 0, "total_content": 0, "today_ratings": 0}

async def update_bot_statistics() -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
    return True

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def ensure_admin_exists() -> bool:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        admin = await get_or_create_user(
            telegram_id=settings.ADMIN_ID,
            username="admin",
            first_name="Administrator",
            is_admin=True,
            total_points=1000
        )
        
        if admin:
            logger.info(f"üëë –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {settings.ADMIN_ID}")
            return True
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def add_initial_data():
    """–ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
    try:
        await ensure_admin_exists()
        
        # –î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–∏ –∂–∞—Ä—Ç—ñ–≤
        sample_jokes = [
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –≤—ñ–¥—Ä—ñ–∑–Ω–∏—Ç–∏ –•–µ–ª–æ–≤—ñ–Ω –≤—ñ–¥ –†—ñ–∑–¥–≤–∞? –ë–æ Oct 31 == Dec 25! üß†üòÇ",
            "–ü—Ä–∏—Ö–æ–¥–∏—Ç—å —É–∫—Ä–∞—ó–Ω–µ—Ü—å –¥–æ –ª—ñ–∫–∞—Ä—è: '–õ—ñ–∫–∞—Ä—é, —É –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ç—É—Ç!' –õ—ñ–∫–∞—Ä: '–ê —â–æ —Ç–∞–º —É –≤–∞—Å?' –£–∫—Ä–∞—ó–Ω–µ—Ü—å: '–¢–∞ —Ö–∞—Ç–∞ —Å—Ç–∞—Ä–∞, –¥–∞—Ö —Ç–µ—á–µ...' üòÇ",
            "–ß–æ–º—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ IT-—à–Ω–∏–∫–∏ –Ω–∞–π–∫—Ä–∞—â—ñ –≤ —Å–≤—ñ—Ç—ñ? –ë–æ –≤–æ–Ω–∏ –≤–º—ñ—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ —Å–≤—ñ—Ç–ª–∞! üî•üòÇ"
        ]
        
        with get_db_session() as session:
            if session is None:
                return
            
            existing = session.query(Content).filter(Content.status == "approved").count()
            if existing == 0:
                for joke in sample_jokes:
                    content = Content(
                        text=joke,
                        author_id=settings.ADMIN_ID,
                        status="approved"
                    )
                    session.add(content)
                session.commit()
                logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(sample_jokes)} –∑—Ä–∞–∑–∫—ñ–≤")
        
        logger.info("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–¥–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

# ===== –§–£–ù–ö–¶–Ü–á –î–£–ï–õ–ï–ô (–ó–ê–ì–õ–£–®–ö–ò) =====

async def create_duel(challenger_id: int, challenger_content_id: int) -> Optional[object]:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å"""
    logger.info(f"‚öîÔ∏è –ó–∞–ø–∏—Ç –Ω–∞ –¥—É–µ–ª—å –≤—ñ–¥ {challenger_id}")
    return None

async def get_active_duels() -> List[object]:
    """–ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
    return []

async def vote_in_duel(duel_id: int, voter_id: int, vote: str) -> bool:
    """–ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –≤ –¥—É–µ–ª—ñ"""
    logger.info(f"üó≥Ô∏è –ì–æ–ª–æ—Å {voter_id} –≤ –¥—É–µ–ª—ñ {duel_id}: {vote}")
    return False

# ===== LEGACY –§–£–ù–ö–¶–Ü–á =====

async def submit_content(user_id: int, content_type, text: str = None, file_id: str = None) -> Optional[Content]:
    """Legacy –ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    ct_string = "joke" if hasattr(content_type, 'JOKE') else "meme"
    return await add_content_for_moderation(user_id, ct_string, text, file_id)

async def update_user_stats(user_id: int, stats_update: Dict[str, Any]) -> bool:
    """Legacy –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if "points" in stats_update:
        result = await update_user_points(user_id, stats_update["points"], "stats_update")
        return result is not None
    logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_id}: {stats_update}")
    return True

async def verify_database_integrity():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –ë–î"""
    try:
        stats = await get_bot_statistics()
        logger.info(f"üìä –ë–î –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {stats['total_users']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, {stats['total_content']} –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ë–î: {e}")

async def add_sample_content(session):
    """–î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–∏ (legacy)"""
    pass

def calculate_user_rank(points: int):
    """–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ä–∞–Ω–≥ (legacy)"""
    if points >= 2500:
        return UserRank.LEGEND
    elif points >= 1500:
        return UserRank.VIRTUOSO
    elif points >= 1000:
        return UserRank.EXPERT
    elif points >= 600:
        return UserRank.MASTER
    elif points >= 300:
        return UserRank.HUMORIST
    elif points >= 150:
        return UserRank.COMEDIAN
    elif points >= 50:
        return UserRank.JOKER
    else:
        return UserRank.NEWBIE

def get_rank_info(points: int, current_rank):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–∞–Ω–≥ (legacy)"""
    return {"rank_info": {"current_rank": "–ù–æ–≤–∞—á–æ–∫", "current_points": points}}

# ===== –ï–ö–°–ü–û–†–¢ =====
logger.info("üì¶ Database –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
logger.info(f"üîß –ë–î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞: {DB_CONNECTED}")
logger.info(f"üéØ –ú–æ–¥–µ–ª—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {MODELS_LOADED}")