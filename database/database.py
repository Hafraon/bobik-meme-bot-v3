#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ database.py üß†üòÇüî•
–î–û–î–ê–¢–ò –¶–Ü –§–£–ù–ö–¶–Ü–á –î–û –Ü–°–ù–£–Æ–ß–û–ì–û database/database.py
"""

import logging
from contextlib import contextmanager
from typing import List, Optional, Dict, Any
from datetime import datetime, timedelta
from sqlalchemy import create_engine, func, and_, or_, desc
from sqlalchemy.orm import sessionmaker, Session

logger = logging.getLogger(__name__)

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –†–ï–ô–¢–ò–ù–ì–ê–ú–ò =====

async def add_content_rating(user_id: int, content_id: int, rating: int, comment: str = None) -> bool:
    """–î–æ–¥–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–≤ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            existing_rating = session.query(Rating).filter(
                and_(Rating.user_id == user_id, Rating.content_id == content_id)
            ).first()
            
            if existing_rating:
                # –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                old_rating = existing_rating.rating
                existing_rating.rating = rating
                existing_rating.comment = comment
                session.commit()
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                content = session.query(Content).filter(Content.id == content_id).first()
                if content:
                    if old_rating == 1 and rating == -1:
                        content.likes = max(0, content.likes - 1)
                        content.dislikes += 1
                    elif old_rating == -1 and rating == 1:
                        content.dislikes = max(0, content.dislikes - 1)
                        content.likes += 1
                    session.commit()
                
                logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ {user_id} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {rating}")
                return True
            else:
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
                new_rating = Rating(
                    user_id=user_id,
                    content_id=content_id,
                    rating=rating,
                    comment=comment
                )
                session.add(new_rating)
                session.commit()
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
                content = session.query(Content).filter(Content.id == content_id).first()
                if content:
                    if rating == 1:
                        content.likes += 1
                    elif rating == -1:
                        content.dislikes += 1
                    session.commit()
                
                # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user = session.query(User).filter(User.telegram_id == user_id).first()
                if user:
                    if rating == 1:
                        user.likes_given += 1
                    else:
                        user.dislikes_given += 1
                    session.commit()
                
                logger.info(f"‚ûï –î–æ–¥–∞–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ {user_id} –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {rating}")
                return True
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return False

async def get_content_rating(user_id: int, content_id: int) -> Optional[int]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            rating = session.query(Rating).filter(
                and_(Rating.user_id == user_id, Rating.content_id == content_id)
            ).first()
            
            return rating.rating if rating else None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return None

async def update_content_rating(user_id: int, content_id: int, new_rating: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ (–∞–ª–∏–∞—Å –¥–ª—è add_content_rating)"""
    return await add_content_rating(user_id, content_id, new_rating)

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def get_user_by_id(user_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                user.last_activity = func.now()
                session.commit()
            return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

async def update_user_stats(user_id: int, stats_update: Dict[str, Any]) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return False
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            for field, increment in stats_update.items():
                if hasattr(user, field):
                    current_value = getattr(user, field) or 0
                    setattr(user, field, current_value + increment)
            
            user.last_activity = func.now()
            session.commit()
            logger.info(f"üìä –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {stats_update}")
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {user_id}: {e}")
        return False

async def get_user_stats(user_id: int) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == user_id).first()
            if not user:
                return {}
            
            # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stats = {
                "user_id": user.telegram_id,
                "username": user.username,
                "first_name": user.first_name,
                "total_points": user.total_points,
                "current_rank": user.current_rank.value if user.current_rank else "–ù–æ–≤–∞—á–æ–∫",
                "is_premium": user.is_premium,
                "daily_subscription": user.daily_subscription,
                
                # –ö–æ–Ω—Ç–µ–Ω—Ç
                "jokes_submitted": user.jokes_submitted,
                "jokes_approved": user.jokes_approved,
                "memes_submitted": user.memes_submitted,
                "memes_approved": user.memes_approved,
                
                # –í–∑–∞—î–º–æ–¥—ñ—è
                "likes_given": user.likes_given,
                "dislikes_given": user.dislikes_given,
                "comments_made": user.comments_made,
                
                # –î—É–µ–ª—ñ
                "duels_won": user.duels_won,
                "duels_lost": user.duels_lost,
                "duels_participated": user.duels_participated,
                
                # –ß–∞—Å
                "created_at": user.created_at,
                "last_activity": user.last_activity
            }
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑ —ñ–Ω—à–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            total_content_created = session.query(Content).filter(
                Content.author_id == user_id
            ).count()
            
            approved_content = session.query(Content).filter(
                and_(Content.author_id == user_id, Content.status == ContentStatus.APPROVED)
            ).count()
            
            total_ratings_given = session.query(Rating).filter(Rating.user_id == user_id).count()
            
            stats.update({
                "total_content_created": total_content_created,
                "approved_content": approved_content,
                "total_ratings_given": total_ratings_given,
                "approval_rate": (approved_content / total_content_created * 100) if total_content_created > 0 else 0
            })
            
            return stats
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {user_id}: {e}")
        return {}

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ù–¢–û–ú =====

async def get_content_by_id(content_id: int) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ ID"""
    try:
        with get_db_session() as session:
            return session.query(Content).filter(Content.id == content_id).first()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return None

async def get_random_approved_content(content_type: str = "mixed", limit: int = 1) -> List[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        with get_db_session() as session:
            query = session.query(Content).filter(Content.status == ContentStatus.APPROVED)
            
            if content_type != "mixed":
                if content_type == "joke":
                    query = query.filter(Content.content_type == ContentType.JOKE)
                elif content_type == "meme":
                    query = query.filter(Content.content_type == ContentType.MEME)
            
            # –°–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ —Ç–∞ –æ–±–º–µ–∂–∏—Ç–∏
            content_list = query.order_by(func.random()).limit(limit).all()
            return content_list if limit > 1 else content_list[0] if content_list else None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return [] if limit > 1 else None

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –î–£–ï–õ–ï–ô =====

async def create_duel(challenger_id: int, challenger_content_id: int) -> Optional[Duel]:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –¥—É–µ–ª—å"""
    try:
        with get_db_session() as session:
            # –ó–Ω–∞–π—Ç–∏ –æ–ø–æ–Ω–µ–Ω—Ç–∞ (–≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
            potential_opponents = session.query(User).filter(
                and_(
                    User.telegram_id != challenger_id,
                    User.is_active == True,
                    User.total_points > 10  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                )
            ).limit(20).all()
            
            if not potential_opponents:
                return None
            
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π –æ–ø–æ–Ω–µ–Ω—Ç
            import random
            opponent = random.choice(potential_opponents)
            
            duel = Duel(
                challenger_id=challenger_id,
                opponent_id=opponent.telegram_id,
                challenger_content_id=challenger_content_id,
                status="waiting",
                voting_ends_at=datetime.now() + timedelta(minutes=5)  # 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
            )
            
            session.add(duel)
            session.commit()
            
            logger.info(f"‚öîÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–æ –¥—É–µ–ª—å –º—ñ–∂ {challenger_id} —ñ {opponent.telegram_id}")
            return duel
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        return None

async def get_active_duels() -> List[Duel]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
    try:
        with get_db_session() as session:
            return session.query(Duel).filter(
                Duel.status.in_(["waiting", "active"])
            ).all()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {e}")
        return []

async def vote_in_duel(duel_id: int, voter_id: int, vote: str) -> bool:
    """–ü—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –≤ –¥—É–µ–ª—ñ"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤
            existing_vote = session.query(DuelVote).filter(
                and_(DuelVote.duel_id == duel_id, DuelVote.voter_id == voter_id)
            ).first()
            
            if existing_vote:
                return False  # –í–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤
            
            # –î–æ–¥–∞—Ç–∏ –≥–æ–ª–æ—Å
            new_vote = DuelVote(
                duel_id=duel_id,
                voter_id=voter_id,
                vote=vote
            )
            session.add(new_vote)
            
            # –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ –≤ –¥—É–µ–ª—ñ
            duel = session.query(Duel).filter(Duel.id == duel_id).first()
            if duel:
                if vote == "challenger":
                    duel.challenger_votes += 1
                elif vote == "opponent":
                    duel.opponent_votes += 1
                
                session.commit()
                logger.info(f"üó≥Ô∏è –ì–æ–ª–æ—Å –≤—ñ–¥ {voter_id} –≤ –¥—É–µ–ª—ñ {duel_id}: {vote}")
                return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ: {e}")
        return False

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–û–¢–ê =====

async def get_bot_statistics() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        with get_db_session() as session:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            total_users = session.query(User).count()
            active_today = session.query(User).filter(
                User.last_activity >= datetime.now() - timedelta(days=1)
            ).count()
            active_week = session.query(User).filter(
                User.last_activity >= datetime.now() - timedelta(days=7)
            ).count()
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç
            total_content = session.query(Content).count()
            approved_content = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED
            ).count()
            pending_content = session.query(Content).filter(
                Content.status == ContentStatus.PENDING
            ).count()
            
            # –î—É–µ–ª—ñ
            total_duels = session.query(Duel).count()
            active_duels = session.query(Duel).filter(
                Duel.status.in_(["waiting", "active"])
            ).count()
            
            return {
                "users": {
                    "total": total_users,
                    "active_today": active_today,
                    "active_week": active_week
                },
                "content": {
                    "total": total_content,
                    "approved": approved_content,
                    "pending": pending_content,
                    "rejected": total_content - approved_content - pending_content
                },
                "duels": {
                    "total": total_duels,
                    "active": active_duels
                }
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")
        return {}

async def update_bot_statistics():
    """–û–Ω–æ–≤–∏—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        stats = await get_bot_statistics()
        
        with get_db_session() as session:
            today = datetime.now().date()
            
            # –ó–Ω–∞–π—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
            bot_stats = session.query(BotStatistics).filter(
                func.date(BotStatistics.date) == today
            ).first()
            
            if not bot_stats:
                bot_stats = BotStatistics(date=datetime.now())
                session.add(bot_stats)
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            bot_stats.total_users = stats["users"]["total"]
            bot_stats.active_users_today = stats["users"]["active_today"]
            bot_stats.active_users_week = stats["users"]["active_week"]
            bot_stats.total_content = stats["content"]["total"]
            bot_stats.approved_content = stats["content"]["approved"]
            bot_stats.pending_content = stats["content"]["pending"]
            bot_stats.rejected_content = stats["content"]["rejected"]
            bot_stats.total_duels = stats["duels"]["total"]
            bot_stats.active_duels = stats["duels"]["active"]
            
            session.commit()
            logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞: {e}")

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def ensure_user_exists(user_id: int, username: str = None, first_name: str = None) -> User:
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –≤ –ë–î"""
    try:
        user = await get_user_by_id(user_id)
        if not user:
            user = await get_or_create_user(
                telegram_id=user_id,
                username=username,
                first_name=first_name
            )
        return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

# ===== –î–û–î–ê–¢–ò –î–û –ö–Ü–ù–¶–Ø –Ü–°–ù–£–Æ–ß–û–ì–û database/database.py =====