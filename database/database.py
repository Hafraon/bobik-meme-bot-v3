#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ —Ä–æ–±–æ—Ç–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö üß†üòÇüî•
"""

import logging
from contextlib import contextmanager
from typing import List, Optional
from datetime import datetime

from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker, Session

from config.settings import settings
from database.models import (
    Base, User, Content, Rating, Duel, DuelVote, 
    AdminAction, BotStatistics, ContentType, ContentStatus
)

logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–∏–∂–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
engine = create_engine(
    settings.DATABASE_URL,
    echo=False,  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å True –¥–ª—è debug SQL –∑–∞–ø–∏—Ç—ñ–≤
    pool_pre_ping=True,
    connect_args={"check_same_thread": False} if "sqlite" in settings.DATABASE_URL else {}
)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–±—Ä–∏–∫–∏ —Å–µ—Å—ñ–π
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("üî• –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await add_initial_data()
        
    except Exception as e:
        logger.error(f"üòÇ –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        raise

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"üß† –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        raise
    finally:
        session.close()

async def add_initial_data():
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    with get_db_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –≤–∂–µ –¥–∞–Ω—ñ
        existing_jokes = session.query(Content).filter_by(
            content_type=ContentType.JOKE,
            status=ContentStatus.APPROVED
        ).count()
        
        if existing_jokes == 0:
            await add_sample_jokes(session)
            
        existing_memes = session.query(Content).filter_by(
            content_type=ContentType.MEME,
            status=ContentStatus.APPROVED
        ).count()
        
        if existing_memes == 0:
            await add_sample_memes(session)

async def add_sample_jokes(session: Session):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤"""
    sample_jokes = [
        "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\n- –ê –¥–µ —Å–∞–º–µ?\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
        
        "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\n- –ê —â–æ —Ä–æ–±–∏—à?\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ",
        
        "üòÇ –£—á–∏—Ç–µ–ª—å –∑–∞–ø–∏—Ç—É—î:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†",
        
        "üî• –ü–æ–∫—É–ø–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ —ñ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ",
        
        "üß† –î—Ä—É–∂–∏–Ω–∞ —á–æ–ª–æ–≤—ñ–∫–æ–≤—ñ:\n- –õ—é–±–∏–π, —è —Å—Ö—É–¥–ª–∞ –Ω–∞ 5 –∫–≥!\n- –ê –¥–µ –≤–æ–Ω–∏?\n- –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É! üòÇüî•",
        
        "üòÇ –°–∏–Ω –ø–∏—Ç–∞—î –±–∞—Ç—å–∫–∞:\n- –¢–∞—Ç—É, –∞ —â–æ —Ç–∞–∫–µ –ø–æ–ª—ñ—Ç–∏–∫–∞?\n- –¶–µ –∫–æ–ª–∏ –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π –≥–æ–≤–æ—Ä—è—Ç—å, –∞ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—Ç—å.\n- –ê —â–æ —Ç–∞–∫–µ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è?\n- –¶–µ –∫–æ–ª–∏ –≤—Å—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç–∏, –∞–ª–µ —Å–ª—É—Ö–∞—î —Ç—ñ–ª—å–∫–∏ –º–∞–º–∞! üß†",
        
        "üî• –õ—ñ–∫–∞—Ä –ø–∞—Ü—ñ—î–Ω—Ç–æ–≤—ñ:\n- –í–∏ –∫—É—Ä–∏?\n- –ù—ñ.\n- –ü'—î—Ç–µ?\n- –ù—ñ.\n- –¢–æ–¥—ñ –∂–∏–≤—ñ—Ç—å —è–∫ —Ö–æ—á–µ—Ç–µ - –≤—Å–µ –æ–¥–Ω–æ –¥–æ–≤–≥–æ –ø—Ä–æ—Ç—è–≥–Ω–µ—Ç–µ! üòÇ",
        
        "üß† –ó–∞—Ö–æ–¥–∏—Ç—å —á–æ–ª–æ–≤—ñ–∫ –¥–æ –∞–ø—Ç–µ–∫–∏:\n- –î–∞–π—Ç–µ —â–æ—Å—å –≤—ñ–¥ –≥–æ–ª–æ–≤–∏!\n- –ê —â–æ —Å–∞–º–µ –±–æ–ª–∏—Ç—å?\n- –î—Ä—É–∂–∏–Ω–∞! üòÇüî•",
        
        "üòÇ –†–æ–∑–º–æ–≤–∞ –≤ –æ—Ñ—ñ—Å—ñ:\n- –¢–∏ —á–æ–º—É —Ç–∞–∫–∏–π –≤–µ—Å–µ–ª–∏–π?\n- –ó–∞—Ä–ø–ª–∞—Ç—É –ø—ñ–¥–Ω—è–ª–∏!\n- –ù–∞ —Å–∫—ñ–ª—å–∫–∏?\n- –ù–∞ –¥—Ä—É–≥–∏–π –ø–æ–≤–µ—Ä—Ö! üß†",
        
        "üî• –°—Ç—É–¥–µ–Ω—Ç –∑–¥–∞—î –µ–∫–∑–∞–º–µ–Ω:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –ù–∞–ø–æ–ª–µ–æ–Ω–∞.\n- –ù–µ –º–æ–∂—É, –º–∏ –Ω–µ –∑–Ω–∞–π–æ–º—ñ –æ—Å–æ–±–∏—Å—Ç–æ.\n- –¢–æ–¥—ñ –ø—Ä–æ –ü—É—à–∫—ñ–Ω–∞.\n- –¢–µ–∂ –Ω–µ –∑–Ω–∞–π–æ–º—ñ.\n- –ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ!\n- –ê –∑ –∫–∏–º –≤–∏ –∑–Ω–∞–π–æ–º—ñ?\n- –ó –≤–∞–º–∏... —ñ —Ç–æ –ø–æ–≥–∞–Ω–æ! üòÇ"
    ]
    
    for joke_text in sample_jokes:
        joke = Content(
            content_type=ContentType.JOKE,
            text=joke_text,
            status=ContentStatus.APPROVED,
            author_id=settings.ADMIN_ID,  # –í—ñ–¥ —ñ–º–µ–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            views=0,
            likes=0
        )
        session.add(joke)
    
    logger.info(f"üî• –î–æ–¥–∞–Ω–æ {len(sample_jokes)} –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤")

async def add_sample_memes(session: Session):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –º–µ–º—ñ–≤ (–ø–æ—Å–∏–ª–∞–Ω–Ω—è)"""
    sample_memes = [
        {
            "caption": "üß† –ö–æ–ª–∏ –Ω–∞—Ä–µ—à—Ç—ñ –∑—Ä–æ–∑—É–º—ñ–≤ —è–∫ –ø—Ä–∞—Ü—é—î async/await üòÇ",
            "url": "https://i.imgur.com/placeholder1.jpg"
        },
        {
            "caption": "üî• –ù–∞—Å—Ç—Ä—ñ–π –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ vs –Ω–∞—Å—Ç—Ä—ñ–π –ø'—è—Ç–Ω–∏—Ü—ñ üòÇ",
            "url": "https://i.imgur.com/placeholder2.jpg"
        },
        {
            "caption": "üß† –ö–æ–ª–∏ –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É üòÇüî•",
            "url": "https://i.imgur.com/placeholder3.jpg"
        }
    ]
    
    for meme_data in sample_memes:
        meme = Content(
            content_type=ContentType.MEME,
            text=meme_data["caption"],
            file_url=meme_data["url"],
            status=ContentStatus.APPROVED,
            author_id=settings.ADMIN_ID,
            views=0,
            likes=0
        )
        session.add(meme)
    
    logger.info(f"üî• –î–æ–¥–∞–Ω–æ {len(sample_memes)} –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –º–µ–º—ñ–≤")

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def get_or_create_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None) -> User:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with get_db_session() as session:
        user = session.query(User).filter(User.id == user_id).first()
        
        if not user:
            user = User(
                id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            session.add(user)
            session.commit()
            logger.info(f"üß† –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")
        else:
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user.username = username
            user.first_name = first_name
            user.last_name = last_name
            user.last_active = datetime.utcnow()
            session.commit()
        
        return user

async def update_user_points(user_id: int, points: int, reason: str = ""):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with get_db_session() as session:
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            user.points += points
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
            new_rank = get_rank_by_points(user.points)
            if new_rank != user.rank:
                user.rank = new_rank
                logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–≤–∏–π —Ä–∞–Ω–≥: {new_rank}")
            
            session.commit()
            logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤ –∑–∞: {reason}")

def get_rank_by_points(points: int) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –ø–æ –±–∞–ª–∞—Ö"""
    for min_points in sorted(settings.RANKS.keys(), reverse=True):
        if points >= min_points:
            return settings.RANKS[min_points]
    return settings.RANKS[0]

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ù–¢–û–ú =====

async def get_random_joke() -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    with get_db_session() as session:
        joke = session.query(Content).filter(
            Content.content_type == ContentType.JOKE,
            Content.status == ContentStatus.APPROVED
        ).order_by(func.random()).first()
        
        if joke:
            joke.views += 1
            session.commit()
        
        return joke

async def get_random_meme() -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É"""
    with get_db_session() as session:
        meme = session.query(Content).filter(
            Content.content_type == ContentType.MEME,
            Content.status == ContentStatus.APPROVED
        ).order_by(func.random()).first()
        
        if meme:
            meme.views += 1
            session.commit()
        
        return meme

# ===== –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø! =====
async def add_content_for_moderation(user_id: int, content_type: str, text: str, file_id: str = None) -> Content:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    with get_db_session() as session:
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ string –≤ enum
        if content_type == "joke":
            ct = ContentType.JOKE
        elif content_type == "meme":
            ct = ContentType.MEME
        else:
            raise ValueError(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {content_type}")
        
        content = Content(
            content_type=ct,
            text=text,
            file_id=file_id,
            author_id=user_id,
            status=ContentStatus.PENDING
        )
        session.add(content)
        session.commit()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = session.query(User).filter(User.id == user_id).first()
        if user:
            if ct == ContentType.JOKE:
                user.jokes_submitted += 1
            else:
                user.memes_submitted += 1
            session.commit()
        
        logger.info(f"üß† –ù–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥ {user_id}: {content.id}")
        return content

async def submit_content(user_id: int, content_type: ContentType, text: str = None, file_id: str = None) -> Content:
    """–ü–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é (—Å—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)"""
    ct_string = "joke" if content_type == ContentType.JOKE else "meme"
    return await add_content_for_moderation(user_id, ct_string, text, file_id)

async def get_pending_content() -> List[Content]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    with get_db_session() as session:
        return session.query(Content).filter(
            Content.status == ContentStatus.PENDING
        ).order_by(Content.created_at).all()

async def moderate_content(content_id: int, moderator_id: int, approve: bool, comment: str = None):
    """–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    with get_db_session() as session:
        content = session.query(Content).filter(Content.id == content_id).first()
        if content:
            content.status = ContentStatus.APPROVED if approve else ContentStatus.REJECTED
            content.moderator_id = moderator_id
            content.moderation_comment = comment
            content.moderated_at = func.now()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ—Ä–∞
            author = session.query(User).filter(User.id == content.author_id).first()
            if author and approve:
                if content.content_type == ContentType.JOKE:
                    author.jokes_approved += 1
                else:
                    author.memes_approved += 1
                
                # –ù–û–í–ï! –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
                author.points += settings.POINTS_FOR_APPROVAL
                new_rank = get_rank_by_points(author.points)
                if new_rank != author.rank:
                    author.rank = new_rank
                
                session.commit()
                logger.info(f"üî• –ê–≤—Ç–æ—Ä {author.id} –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            
            # –ó–∞–ø–∏—Å –¥—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_action = AdminAction(
                admin_id=moderator_id,
                action_type="approve" if approve else "reject",
                target_type="content",
                target_id=content_id,
                reason=comment
            )
            session.add(admin_action)
            session.commit()
            
            logger.info(f"üî• –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} {'—Å—Ö–≤–∞–ª–µ–Ω–æ' if approve else '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'}")

# ===== –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ù–ê–†–ê–•–£–í–ê–ù–ù–Ø –ë–ê–õ–Ü–í –ó–ê –õ–ê–ô–ö–ò! =====
async def add_content_rating(user_id: int, content_id: int, action_type: str, points: int = 0) -> bool:
    """–î–æ–¥–∞—Ç–∏ –æ—Ü—ñ–Ω–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∞–≤—Ç–æ—Ä—É"""
    with get_db_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ —Å—Ç–∞–≤–∏–≤ –≤–∂–µ –æ—Ü—ñ–Ω–∫—É
        existing_rating = session.query(Rating).filter(
            Rating.user_id == user_id,
            Rating.content_id == content_id,
            Rating.action_type == action_type
        ).first()
        
        if existing_rating:
            return False  # –í–∂–µ —Å—Ç–∞–≤–∏–≤ –æ—Ü—ñ–Ω–∫—É
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –æ—Ü—ñ–Ω–∫—É
        rating = Rating(
            user_id=user_id,
            content_id=content_id,
            action_type=action_type,
            points_awarded=points
        )
        session.add(rating)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content = session.query(Content).filter(Content.id == content_id).first()
        if content:
            if action_type == "like":
                content.likes += 1
                
                # –ù–û–í–ï! –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∞–≤—Ç–æ—Ä—É –∑–∞ –ª–∞–π–∫
                author = session.query(User).filter(User.id == content.author_id).first()
                if author and author.id != user_id:  # –ù–µ –º–æ–∂–Ω–∞ –ª–∞–π–∫–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç –±–∞–ª—ñ–≤ –∑–∞ –ª–∞–π–∫–∏ –Ω–∞ –¥–µ–Ω—å
                    today = datetime.utcnow().date()
                    today_bonus_points = session.query(func.sum(Rating.points_awarded)).filter(
                        Rating.content_id.in_(
                            session.query(Content.id).filter(Content.author_id == author.id)
                        ),
                        Rating.action_type == "like",
                        func.date(Rating.created_at) == today
                    ).scalar() or 0
                    
                    if today_bonus_points < 10:  # –ú–∞–∫—Å–∏–º—É–º 10 –±–∞–ª—ñ–≤ –Ω–∞ –¥–µ–Ω—å –∑–∞ –ª–∞–π–∫–∏
                        author.points += 1
                        rating.points_awarded = 1  # –ó–∞–ø–∏—Å—É—î–º–æ —â–æ –∞–≤—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ –±–∞–ª
                        
                        # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–∞–Ω–≥ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
                        new_rank = get_rank_by_points(author.points)
                        if new_rank != author.rank:
                            author.rank = new_rank
                        
                        logger.info(f"üíñ –ê–≤—Ç–æ—Ä {author.id} –æ—Ç—Ä–∏–º–∞–≤ +1 –±–∞–ª –∑–∞ –ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}")
                    
            elif action_type == "dislike":
                content.dislikes += 1
            elif action_type == "share":
                content.likes += 1  # –ü–æ–∫–∏ —â–æ —è–∫ –ª–∞–π–∫
        
        session.commit()
        return True

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

async def get_user_stats(user_id: int) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with get_db_session() as session:
        user = session.query(User).filter(User.id == user_id).first()
        if not user:
            return {}
        
        return {
            "user": user,
            "total_submissions": user.jokes_submitted + user.memes_submitted,
            "total_approved": user.jokes_approved + user.memes_approved,
            "approval_rate": round(
                (user.jokes_approved + user.memes_approved) / max(user.jokes_submitted + user.memes_submitted, 1) * 100,
                1
            )
        }

async def get_leaderboard(limit: int = 10) -> List[User]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    with get_db_session() as session:
        return session.query(User).order_by(User.points.desc()).limit(limit).all()