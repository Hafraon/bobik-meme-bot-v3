# ===== –î–û–î–ê–¢–ò –¶–Ü –§–£–ù–ö–¶–Ü–á –í database/database.py =====
# (–≤ —Å–µ–∫—Ü—ñ—é async def init_db(), –∑–∞–º—ñ–Ω–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é)

async def init_db():
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –º—ñ–≥—Ä–∞—Ü—ñ—î—é"""
    try:
        logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è
        needs_migration = await check_if_migration_needed()
        
        if needs_migration:
            logger.info("üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î, –≤–∏–¥–∞–ª—è—é —Å—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ...")
            await drop_old_tables()
        
        # –ö–†–û–ö 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("üî• –¢–∞–±–ª–∏—Ü—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
        # –ö–†–û–ö 3: –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await add_initial_data()
        
        # –ö–†–û–ö 4: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        await verify_database_integrity()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        raise

async def check_if_migration_needed() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î"""
    try:
        with get_db_session() as session:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–ø–∏—Ç –¥–æ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            session.execute(text("SELECT telegram_id FROM users LIMIT 1"))
            logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞")
            return False
    except Exception as e:
        logger.info(f"üîÑ –ü–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î: {e}")
        return True

async def drop_old_tables():
    """–í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    try:
        with engine.begin() as conn:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–≤'—è–∑–∫—ñ–≤)
            tables_to_drop = [
                'duel_votes',
                'admin_actions', 
                'bot_statistics',
                'ratings',
                'duels',
                'content',
                'users'
            ]
            
            for table in tables_to_drop:
                try:
                    conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: {table}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ {table}: {e}")
            
            logger.info("‚úÖ –°—Ç–∞—Ä—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–¥–∞–ª–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–±–ª–∏—Ü—å: {e}")
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - –º–æ–∂–ª–∏–≤–æ —Ç–∞–±–ª–∏—Ü—å –Ω–µ –±—É–ª–æ