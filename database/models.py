#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–Ü –ú–û–î–ï–õ–Ü –ë–ê–ó–ò –î–ê–ù–ò–• (–ü–û–í–ù–ê –í–ï–†–°–Ü–Ø) üß†üòÇüî•
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, Float, ForeignKey, Enum as SQLEnum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from enum import Enum

Base = declarative_base()

# ===== –ï–ù–£–ú–ò =====

class ContentType(Enum):
    JOKE = "joke"
    MEME = "meme"

class ContentStatus(Enum):
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class UserRank(Enum):
    NEWBIE = "–ù–æ–≤–∞—á–æ–∫"
    JOKER = "–ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫" 
    COMEDIAN = "–ö–æ–º—ñ–∫"
    HUMORIST = "–ì—É–º–æ—Ä–∏—Å—Ç"
    MASTER = "–ú–∞–π—Å—Ç–µ—Ä —Å–º—ñ—Ö—É"
    EXPERT = "–ï–∫—Å–ø–µ—Ä—Ç –≥—É–º–æ—Ä—É"
    VIRTUOSO = "–í—ñ—Ä—Ç—É–æ–∑ –∂–∞—Ä—Ç—ñ–≤"
    LEGEND = "–õ–µ–≥–µ–Ω–¥–∞ –≥—É–º–æ—Ä—É"

# ===== –û–°–ù–û–í–ù–Ü –ú–û–î–ï–õ–Ü =====

class User(Base):
    """
    –ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–≤–Ω–∏–º –Ω–∞–±–æ—Ä–æ–º –ø–æ–ª—ñ–≤ –¥–ª—è –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
    """
    __tablename__ = "users"
    
    # ===== –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø =====
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    username = Column(String(50), nullable=True, index=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    
    # ===== –°–¢–ê–¢–£–°–ò –¢–ê –ü–†–ê–í–ê =====
    is_active = Column(Boolean, default=True, nullable=False, index=True)  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û!
    is_premium = Column(Boolean, default=False, nullable=False)
    is_admin = Column(Boolean, default=False, nullable=False, index=True)
    is_banned = Column(Boolean, default=False, nullable=False)
    
    # ===== –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø =====
    total_points = Column(Integer, default=0, index=True)
    current_rank = Column(SQLEnum(UserRank), default=UserRank.NEWBIE, nullable=False)
    
    # ===== –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–£ =====
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    
    # ===== –õ–Ü–ß–ò–õ–¨–ù–ò–ö–ò –í–ó–ê–Ñ–ú–û–î–Ü–á =====
    likes_given = Column(Integer, default=0)
    dislikes_given = Column(Integer, default=0)
    comments_made = Column(Integer, default=0)
    content_views = Column(Integer, default=0)
    
    # ===== –î–£–ï–õ–Ü =====
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    duels_participated = Column(Integer, default=0)
    
    # ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
    daily_subscription = Column(Boolean, default=False)
    last_daily_content = Column(DateTime, nullable=True)
    notification_settings = Column(Text, nullable=True)  # JSON —Ñ–æ—Ä–º–∞—Ç
    
    # ===== –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
    preferred_content_type = Column(String(20), default="mixed")  # joke, meme, mixed
    content_difficulty = Column(Integer, default=1)  # 1-5
    favorite_topics = Column(Text, nullable=True)  # JSON —Å–ø–∏—Å–æ–∫ —Ç–µ–º
    language_preference = Column(String(10), default="uk")
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    last_activity = Column(DateTime, server_default=func.now(), index=True)
    last_seen_content_id = Column(Integer, nullable=True)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–°–Ü–ô =====
    total_sessions = Column(Integer, default=0)
    total_time_spent = Column(Integer, default=0)  # —Å–µ–∫—É–Ω–¥–∏
    average_session_length = Column(Float, default=0.0)
    
    # ===== –ó–í'–Ø–ó–ö–ò =====
    submitted_content = relationship("Content", foreign_keys="[Content.author_id]", back_populates="author")
    moderated_content = relationship("Content", foreign_keys="[Content.moderator_id]", back_populates="moderator")
    ratings = relationship("Rating", back_populates="user")
    admin_actions = relationship("AdminAction", back_populates="admin")
    
    def __repr__(self):
        return f"<User(id={self.id}, telegram_id={self.telegram_id}, username={self.username}, rank={self.current_rank})>"
    
    def get_full_name(self) -> str:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        parts = []
        if self.first_name:
            parts.append(self.first_name)
        if self.last_name:
            parts.append(self.last_name)
        return " ".join(parts) or self.username or f"User {self.telegram_id}"
    
    def get_rank_progress(self) -> dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å —Ä–∞–Ω–≥—É"""
        rank_requirements = {
            UserRank.NEWBIE: 0,
            UserRank.JOKER: 50,
            UserRank.COMEDIAN: 150,
            UserRank.HUMORIST: 300,
            UserRank.MASTER: 600,
            UserRank.EXPERT: 1000,
            UserRank.VIRTUOSO: 1500,
            UserRank.LEGEND: 2500
        }
        
        current_points = self.total_points
        current_rank = self.current_rank
        
        ranks = list(UserRank)
        current_index = ranks.index(current_rank)
        
        next_rank = None
        points_to_next = 0
        progress_percent = 100
        
        if current_index < len(ranks) - 1:
            next_rank = ranks[current_index + 1]
            points_to_next = rank_requirements[next_rank] - current_points
            current_rank_min = rank_requirements[current_rank]
            next_rank_min = rank_requirements[next_rank]
            progress_percent = min(100, ((current_points - current_rank_min) / (next_rank_min - current_rank_min)) * 100)
        
        return {
            "current_rank": current_rank.value,
            "current_points": current_points,
            "next_rank": next_rank.value if next_rank else None,
            "points_to_next": max(0, points_to_next) if next_rank else 0,
            "progress_percent": round(progress_percent, 1)
        }

class Content(Base):
    """
    –ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏
    """
    __tablename__ = "content"
    
    # ===== –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø =====
    id = Column(Integer, primary_key=True, index=True)
    content_type = Column(SQLEnum(ContentType), nullable=False, index=True)
    text = Column(Text, nullable=True)
    file_id = Column(String(500), nullable=True)
    
    # ===== –ê–í–¢–û–† –¢–ê –ú–û–î–ï–†–ê–¢–û–† =====
    author_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False, index=True)
    moderator_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=True)
    
    # ===== –°–¢–ê–¢–£–° –ú–û–î–ï–†–ê–¶–Ü–á =====
    status = Column(SQLEnum(ContentStatus), default=ContentStatus.PENDING, nullable=False, index=True)
    moderation_comment = Column(Text, nullable=True)
    moderated_at = Column(DateTime, nullable=True)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–Ü =====
    views = Column(Integer, default=0, index=True)
    likes = Column(Integer, default=0, index=True)
    dislikes = Column(Integer, default=0, index=True)
    shares = Column(Integer, default=0)
    reports = Column(Integer, default=0)
    
    # ===== –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£ =====
    topic = Column(String(50), default="general", index=True)  # life, work, tech, family, etc.
    style = Column(String(50), default="neutral")  # irony, sarcasm, wholesome, absurd
    difficulty = Column(Integer, default=1)  # 1-5 —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è
    target_age = Column(String(20), default="all")  # teen, adult, all
    
    # ===== –ê–õ–ì–û–†–ò–¢–ú–Ü–ß–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò =====
    quality_score = Column(Float, default=0.5)  # 0.0-1.0 —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É
    popularity_score = Column(Float, default=0.0)  # —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ
    engagement_rate = Column(Float, default=0.0)  # —Ä—ñ–≤–µ–Ω—å –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ
    virality_score = Column(Float, default=0.0)  # –≤—ñ—Ä—É—Å–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False, index=True)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    last_shown_at = Column(DateTime, nullable=True)
    
    # ===== –¢–ï–•–ù–Ü–ß–ù–Ü –î–ê–ù–Ü =====
    original_message_id = Column(Integer, nullable=True)
    hashtags = Column(Text, nullable=True)  # JSON —Å–ø–∏—Å–æ–∫ —Ö–µ—à—Ç–µ–≥—ñ–≤
    mentions = Column(Text, nullable=True)  # JSON —Å–ø–∏—Å–æ–∫ –∑–≥–∞–¥–æ–∫
    
    # ===== –ó–í'–Ø–ó–ö–ò =====
    author = relationship("User", foreign_keys=[author_id], back_populates="submitted_content")
    moderator = relationship("User", foreign_keys=[moderator_id], back_populates="moderated_content")
    ratings = relationship("Rating", back_populates="content")
    
    def __repr__(self):
        return f"<Content(id={self.id}, type={self.content_type}, status={self.status}, likes={self.likes})>"
    
    def get_engagement_stats(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ"""
        total_interactions = self.likes + self.dislikes + self.shares
        engagement_rate = (total_interactions / max(self.views, 1)) * 100 if self.views > 0 else 0
        like_ratio = (self.likes / max(total_interactions, 1)) * 100 if total_interactions > 0 else 0
        
        return {
            "views": self.views,
            "likes": self.likes,
            "dislikes": self.dislikes,
            "shares": self.shares,
            "total_interactions": total_interactions,
            "engagement_rate": round(engagement_rate, 2),
            "like_ratio": round(like_ratio, 2)
        }

class Rating(Base):
    """
    –ú–æ–¥–µ–ª—å –æ—Ü—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    """
    __tablename__ = "ratings"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False, index=True)
    content_id = Column(Integer, ForeignKey("content.id"), nullable=False, index=True)
    
    # ===== –û–°–ù–û–í–ù–ê –û–¶–Ü–ù–ö–ê =====
    rating = Column(Integer, nullable=False)  # 1 –¥–ª—è like, -1 –¥–ª—è dislike
    comment = Column(Text, nullable=True)
    
    # ===== –î–û–î–ê–¢–ö–û–í–Ü –û–¶–Ü–ù–ö–ò =====
    funniness = Column(Integer, nullable=True)  # 1-5
    originality = Column(Integer, nullable=True)  # 1-5
    appropriateness = Column(Integer, nullable=True)  # 1-5
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False, index=True)
    ip_address = Column(String(45), nullable=True)  # –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–ª–æ–≤–∂–∏–≤–∞–Ω–Ω—è–º
    
    # ===== –ó–í'–Ø–ó–ö–ò =====
    user = relationship("User", back_populates="ratings")
    content = relationship("Content", back_populates="ratings")
    
    def __repr__(self):
        return f"<Rating(user_id={self.user_id}, content_id={self.content_id}, rating={self.rating})>"

class Duel(Base):
    """
    –ú–æ–¥–µ–ª—å –¥—É–µ–ª–µ–π –∂–∞—Ä—Ç—ñ–≤
    """
    __tablename__ = "duels"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # ===== –£–ß–ê–°–ù–ò–ö–ò =====
    challenger_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False)
    opponent_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False)
    
    # ===== –ö–û–ù–¢–ï–ù–¢ –î–£–ï–õ–Ü =====
    challenger_content_id = Column(Integer, ForeignKey("content.id"), nullable=False)
    opponent_content_id = Column(Integer, ForeignKey("content.id"), nullable=True)
    
    # ===== –°–¢–ê–¢–£–° –¢–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ò =====
    status = Column(String(20), default="waiting", index=True)  # waiting, active, completed, cancelled
    winner_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=True)
    
    # ===== –ì–û–õ–û–°–£–í–ê–ù–ù–Ø =====
    challenger_votes = Column(Integer, default=0)
    opponent_votes = Column(Integer, default=0)
    total_votes = Column(Integer, default=0)
    
    # ===== –ü–†–ò–ó–û–í–Ü –ë–ê–õ–ò =====
    prize_points = Column(Integer, default=15)
    
    # ===== –ß–ê–°–û–í–Ü –†–ê–ú–ö–ò =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    started_at = Column(DateTime, nullable=True)
    ended_at = Column(DateTime, nullable=True)
    voting_ends_at = Column(DateTime, nullable=True, index=True)
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    category = Column(String(50), default="general")
    difficulty_level = Column(Integer, default=1)
    
    def __repr__(self):
        return f"<Duel(id={self.id}, challenger={self.challenger_id}, opponent={self.opponent_id}, status={self.status})>"

class DuelVote(Base):
    """
    –ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å—ñ–≤ —É –¥—É–µ–ª—è—Ö
    """
    __tablename__ = "duel_votes"
    
    id = Column(Integer, primary_key=True, index=True)
    duel_id = Column(Integer, ForeignKey("duels.id"), nullable=False, index=True)
    voter_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False, index=True)
    
    # ===== –ì–û–õ–û–° =====
    vote = Column(String(20), nullable=False)  # "challenger" –∞–±–æ "opponent"
    confidence = Column(Integer, default=5)  # 1-10 –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —É –≤–∏–±–æ—Ä—ñ
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False)
    ip_address = Column(String(45), nullable=True)
    
    def __repr__(self):
        return f"<DuelVote(duel_id={self.duel_id}, voter_id={self.voter_id}, vote={self.vote})>"

class AdminAction(Base):
    """
    –ú–æ–¥–µ–ª—å –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –∞—É–¥–∏—Ç—É
    """
    __tablename__ = "admin_actions"
    
    id = Column(Integer, primary_key=True, index=True)
    admin_id = Column(Integer, ForeignKey("users.telegram_id"), nullable=False, index=True)
    
    # ===== –î–Ü–Ø =====
    action_type = Column(String(50), nullable=False, index=True)  # moderate_content, ban_user, etc.
    target_type = Column(String(50), nullable=True)  # user, content, duel
    target_id = Column(Integer, nullable=True)
    
    # ===== –î–ï–¢–ê–õ–Ü =====
    details = Column(Text, nullable=True)  # JSON –∑ –¥–µ—Ç–∞–ª—è–º–∏ –¥—ñ—ó
    reason = Column(Text, nullable=True)
    old_value = Column(Text, nullable=True)
    new_value = Column(Text, nullable=True)
    
    # ===== –ú–ï–¢–ê–î–ê–ù–Ü =====
    created_at = Column(DateTime, server_default=func.now(), nullable=False, index=True)
    ip_address = Column(String(45), nullable=True)
    
    # ===== –ó–í'–Ø–ó–ö–ò =====
    admin = relationship("User", back_populates="admin_actions")
    
    def __repr__(self):
        return f"<AdminAction(id={self.id}, admin_id={self.admin_id}, action={self.action_type})>"

class BotStatistics(Base):
    """
    –ú–æ–¥–µ–ª—å —â–æ–¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
    """
    __tablename__ = "bot_statistics"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====
    total_users = Column(Integer, default=0)
    new_users_today = Column(Integer, default=0)
    active_users_today = Column(Integer, default=0)
    active_users_week = Column(Integer, default=0)
    active_users_month = Column(Integer, default=0)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£ =====
    total_content = Column(Integer, default=0)
    new_content_today = Column(Integer, default=0)
    approved_content = Column(Integer, default=0)
    pending_content = Column(Integer, default=0)
    rejected_content = Column(Integer, default=0)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ó–ê–Ñ–ú–û–î–Ü–á =====
    total_likes_today = Column(Integer, default=0)
    total_views_today = Column(Integer, default=0)
    total_shares_today = Column(Integer, default=0)
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–ï–ô =====
    total_duels = Column(Integer, default=0)
    active_duels = Column(Integer, default=0)
    completed_duels_today = Column(Integer, default=0)
    
    # ===== –¢–ï–•–ù–Ü–ß–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    average_response_time = Column(Float, default=0.0)
    error_count_today = Column(Integer, default=0)
    uptime_percentage = Column(Float, default=100.0)
    
    # ===== –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò =====
    date = Column(DateTime, server_default=func.now(), unique=True, index=True)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    def __repr__(self):
        return f"<BotStatistics(date={self.date}, users={self.total_users}, content={self.total_content})>"

# ===== –Ü–ù–î–ï–ö–°–ò –î–õ–Ø –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á =====

# –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫–ª–∞–¥–µ–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
from sqlalchemy import Index

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—à—É–∫—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
Index('idx_content_status_type', Content.status, Content.content_type)

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
Index('idx_user_activity', User.is_active, User.last_activity)

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
Index('idx_rating_user_content', Rating.user_id, Rating.content_id)

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è –¥—É–µ–ª–µ–π
Index('idx_duel_status_voting', Duel.status, Duel.voting_ends_at)