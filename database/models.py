#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –†–û–ë–û–ß–Ü –ú–û–î–ï–õ–Ü –ë–î (–í–ò–ü–†–ê–í–õ–ï–ù–û) üß†üòÇüî•
–ó–ê–ú–Ü–ù–Ü–¢–¨ –í–ï–°–¨ –Ü–°–ù–£–Æ–ß–ò–ô database/models.py –ù–ê –¶–ï–ô –ö–û–î
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean, Float, ForeignKey, Enum as SQLEnum
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime
from enum import Enum

Base = declarative_base()

# ===== –ï–ù–£–ú–ò =====

class ContentType(Enum):
    JOKE = "joke"
    MEME = "meme"

class ContentStatus(Enum):
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class UserRank(Enum):
    NEWBIE = "–ù–æ–≤–∞—á–æ–∫"
    JOKER = "–ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫"
    COMEDIAN = "–ö–æ–º—ñ–∫"
    HUMORIST = "–ì—É–º–æ—Ä–∏—Å—Ç"
    MASTER = "–ú–∞–π—Å—Ç–µ—Ä —Å–º—ñ—Ö—É"
    EXPERT = "–ï–∫—Å–ø–µ—Ä—Ç –≥—É–º–æ—Ä—É"
    VIRTUOSO = "–í—ñ—Ä—Ç—É–æ–∑ –∂–∞—Ä—Ç—ñ–≤"
    LEGEND = "–õ–µ–≥–µ–Ω–¥–∞ –≥—É–º–æ—Ä—É"

# ===== –ú–û–î–ï–õ–¨ USER (–í–ò–ü–†–ê–í–õ–ï–ù–ê) =====

class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –ø–æ–ª—è–º–∏"""
    __tablename__ = "users"
    
    # –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–ª—è
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)  # ‚úÖ –ì–û–õ–û–í–ù–ï –ü–û–õ–ï!
    username = Column(String(50), nullable=True)
    first_name = Column(String(100), nullable=True)
    last_name = Column(String(100), nullable=True)
    
    # –°—Ç–∞—Ç—É—Å–∏ (–í–ò–ü–†–ê–í–õ–ï–ù–û - –¥–æ–¥–∞–Ω–æ is_active!)
    is_active = Column(Boolean, default=True, nullable=False)  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û!
    is_premium = Column(Boolean, default=False, nullable=False)
    is_admin = Column(Boolean, default=False, nullable=False)
    is_banned = Column(Boolean, default=False, nullable=False)
    
    # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
    total_points = Column(Integer, default=0)
    current_rank = Column(SQLEnum(UserRank), default=UserRank.NEWBIE)
    
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    
    # –õ—ñ—á–∏–ª—å–Ω–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    likes_given = Column(Integer, default=0)
    dislikes_given = Column(Integer, default=0)
    comments_made = Column(Integer, default=0)
    content_views = Column(Integer, default=0)
    
    # –î—É–µ–ª—ñ
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    duels_participated = Column(Integer, default=0)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    daily_subscription = Column(Boolean, default=False)
    last_daily_content = Column(DateTime, nullable=True)
    preferred_content_type = Column(String(20), default="mixed")
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    last_activity = Column(DateTime, server_default=func.now())
    
    def __repr__(self):
        return f"<User(id={self.id}, telegram_id={self.telegram_id}, username={self.username})>"

# ===== –ú–û–î–ï–õ–¨ CONTENT =====

class Content(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    __tablename__ = "content"
    
    id = Column(Integer, primary_key=True, index=True)
    content_type = Column(SQLEnum(ContentType), default=ContentType.JOKE)
    text = Column(Text, nullable=True)
    file_id = Column(String(500), nullable=True)
    
    # –ê–≤—Ç–æ—Ä —Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    author_id = Column(Integer, nullable=False)  # ForeignKey –¥–æ User.telegram_id
    moderator_id = Column(Integer, nullable=True)
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(SQLEnum(ContentStatus), default=ContentStatus.PENDING)
    moderation_comment = Column(Text, nullable=True)
    moderated_at = Column(DateTime, nullable=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    views = Column(Integer, default=0)
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    shares = Column(Integer, default=0)
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    topic = Column(String(50), default="general")
    style = Column(String(50), default="neutral")
    difficulty = Column(Integer, default=1)
    quality_score = Column(Float, default=0.5)
    popularity_score = Column(Float, default=0.0)
    
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    def __repr__(self):
        return f"<Content(id={self.id}, type={self.content_type}, status={self.status})>"

# ===== –ú–û–î–ï–õ–¨ RATING =====

class Rating(Base):
    """–ú–æ–¥–µ–ª—å –æ—Ü—ñ–Ω–æ–∫"""
    __tablename__ = "ratings"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, nullable=False)  # ForeignKey –¥–æ User.telegram_id
    content_id = Column(Integer, nullable=False)  # ForeignKey –¥–æ Content.id
    
    rating = Column(Integer, nullable=False)  # 1 –¥–ª—è like, -1 –¥–ª—è dislike
    comment = Column(Text, nullable=True)
    
    created_at = Column(DateTime, server_default=func.now())
    
    def __repr__(self):
        return f"<Rating(user_id={self.user_id}, content_id={self.content_id}, rating={self.rating})>"

# ===== –ú–û–î–ï–õ–¨ DUEL =====

class Duel(Base):
    """–ú–æ–¥–µ–ª—å –¥—É–µ–ª–µ–π"""
    __tablename__ = "duels"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # –£—á–∞—Å–Ω–∏–∫–∏
    challenger_id = Column(Integer, nullable=False)
    opponent_id = Column(Integer, nullable=False)
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç –¥—É–µ–ª—ñ
    challenger_content_id = Column(Integer, nullable=False)
    opponent_content_id = Column(Integer, nullable=True)
    
    # –°—Ç–∞—Ç—É—Å
    status = Column(String(20), default="waiting")
    winner_id = Column(Integer, nullable=True)
    
    # –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    challenger_votes = Column(Integer, default=0)
    opponent_votes = Column(Integer, default=0)
    
    # –ß–∞—Å
    created_at = Column(DateTime, server_default=func.now())
    started_at = Column(DateTime, nullable=True)
    ended_at = Column(DateTime, nullable=True)
    voting_ends_at = Column(DateTime, nullable=True)
    
    def __repr__(self):
        return f"<Duel(id={self.id}, challenger={self.challenger_id}, opponent={self.opponent_id})>"

# ===== –ú–û–î–ï–õ–¨ DUEL_VOTE =====

class DuelVote(Base):
    """–ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å—ñ–≤ —É –¥—É–µ–ª—è—Ö"""
    __tablename__ = "duel_votes"
    
    id = Column(Integer, primary_key=True, index=True)
    duel_id = Column(Integer, nullable=False)
    voter_id = Column(Integer, nullable=False)
    
    vote = Column(String(20), nullable=False)  # "challenger" –∞–±–æ "opponent"
    created_at = Column(DateTime, server_default=func.now())
    
    def __repr__(self):
        return f"<DuelVote(duel_id={self.duel_id}, voter_id={self.voter_id}, vote={self.vote})>"

# ===== –ú–û–î–ï–õ–¨ ADMIN_ACTION =====

class AdminAction(Base):
    """–ú–æ–¥–µ–ª—å –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    __tablename__ = "admin_actions"
    
    id = Column(Integer, primary_key=True, index=True)
    admin_id = Column(Integer, nullable=False)
    
    action_type = Column(String(50), nullable=False)
    target_id = Column(Integer, nullable=True)
    details = Column(Text, nullable=True)
    
    created_at = Column(DateTime, server_default=func.now())
    
    def __repr__(self):
        return f"<AdminAction(id={self.id}, admin_id={self.admin_id}, action={self.action_type})>"

# ===== –ú–û–î–ï–õ–¨ BOT_STATISTICS =====

class BotStatistics(Base):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    __tablename__ = "bot_statistics"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    total_users = Column(Integer, default=0)
    active_users_today = Column(Integer, default=0)
    active_users_week = Column(Integer, default=0)
    active_users_month = Column(Integer, default=0)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    total_content = Column(Integer, default=0)
    approved_content = Column(Integer, default=0)
    pending_content = Column(Integer, default=0)
    rejected_content = Column(Integer, default=0)
    
    # –î—É–µ–ª—ñ
    total_duels = Column(Integer, default=0)
    active_duels = Column(Integer, default=0)
    completed_duels = Column(Integer, default=0)
    
    # –ú–µ—Ç–∞–¥–∞–Ω—ñ
    date = Column(DateTime, server_default=func.now(), unique=True)
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())
    
    def __repr__(self):
        return f"<BotStatistics(date={self.date}, users={self.total_users})>"

# ===== –î–û–î–ê–¢–ö–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –°–£–ú–Ü–°–ù–û–°–¢–Ü =====

# –î–æ–¥–∞—î–º–æ –ø–æ–ª—è —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–ª—è –ø–æ–≤–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
try:
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è –¥–ª—è Content —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if not hasattr(Content, 'reports'):
        Content.reports = Column(Integer, default=0)
    if not hasattr(Content, 'target_age'):
        Content.target_age = Column(String(20), default="all")
    if not hasattr(Content, 'engagement_rate'):
        Content.engagement_rate = Column(Float, default=0.0)
    if not hasattr(Content, 'virality_score'):
        Content.virality_score = Column(Float, default=0.0)
    if not hasattr(Content, 'last_shown_at'):
        Content.last_shown_at = Column(DateTime, nullable=True)
    if not hasattr(Content, 'original_message_id'):
        Content.original_message_id = Column(Integer, nullable=True)
    if not hasattr(Content, 'hashtags'):
        Content.hashtags = Column(Text, nullable=True)
    if not hasattr(Content, 'mentions'):
        Content.mentions = Column(Text, nullable=True)
        
except Exception:
    # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è –¥–æ–¥–∞—Ç–∏ –ø–æ–ª—è, –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
    pass

# ===== –Ü–ù–î–ï–ö–°–ò –î–õ–Ø –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á =====

from sqlalchemy import Index

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
Index('idx_user_telegram_id', User.telegram_id)
Index('idx_user_active', User.is_active, User.last_activity)

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
Index('idx_content_status', Content.status)
Index('idx_content_author', Content.author_id)

# –Ü–Ω–¥–µ–∫—Å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
Index('idx_rating_user_content', Rating.user_id, Rating.content_id)