#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –†–æ–∑—à–∏—Ä–µ–Ω—ñ –º–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–í–ò–ü–†–ê–í–õ–ï–ù–Ü RELATIONSHIPS) üß†üòÇüî•
"""

from datetime import datetime, timedelta
from enum import Enum
from typing import Optional

from sqlalchemy import (
    BigInteger, Boolean, Column, DateTime, Enum as SQLEnum,
    ForeignKey, Integer, String, Text, Float, Index, UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

class ContentType(Enum):
    """–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    MEME = "meme"
    JOKE = "joke"

class ContentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class DuelStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥—É–µ–ª—ñ"""
    ACTIVE = "active"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

# –ù–û–í–Ü ENUM'–ò –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–á
class PreferenceType(Enum):
    """–¢–∏–ø–∏ –≤–ø–æ–¥–æ–±–∞–Ω—å"""
    TOPIC = "topic"
    STYLE = "style"
    LENGTH = "length"

class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –†–û–ó–®–ò–†–ï–ù–ê"""
    __tablename__ = "users"
    
    id = Column(BigInteger, primary_key=True)  # Telegram User ID
    username = Column(String(255), nullable=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
    points = Column(Integer, default=0)
    rank = Column(String(100), default="ü§° –ù–æ–≤–∞—á–æ–∫")
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    daily_subscription = Column(Boolean, default=False)
    language_code = Column(String(10), default="uk")
    
    # –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–á!
    preferred_content_type = Column(String(20), default="mixed")  # "jokes", "memes", "mixed"
    reset_history_days = Column(Integer, default=7)  # –ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —Å–∫–∏–¥–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
    last_history_reset = Column(DateTime, default=datetime.utcnow)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    reactions_given = Column(Integer, default=0)
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    
    # –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_active = Column(DateTime, default=datetime.utcnow)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–í'–Ø–ó–ö–ò –∑ —á—ñ—Ç–∫–∏–º–∏ foreign_keys!
    submissions = relationship(
        "Content", 
        foreign_keys="Content.author_id",
        back_populates="author"
    )
    moderated_content = relationship(
        "Content", 
        foreign_keys="Content.moderator_id",
        back_populates="moderator"
    )
    ratings = relationship("Rating", back_populates="user")
    duel_initiations = relationship(
        "Duel", 
        foreign_keys="Duel.initiator_id", 
        back_populates="initiator"
    )
    duel_participations = relationship(
        "Duel", 
        foreign_keys="Duel.opponent_id", 
        back_populates="opponent"
    )
    duel_wins = relationship(
        "Duel", 
        foreign_keys="Duel.winner_id", 
        back_populates="winner"
    )
    votes = relationship("DuelVote", back_populates="voter")
    content_views = relationship("ContentView", back_populates="user")  # –ù–û–í–ï!
    preferences = relationship("UserPreference", back_populates="user")  # –ù–û–í–ï!
    admin_actions = relationship(
        "AdminAction", 
        foreign_keys="AdminAction.admin_id",
        back_populates="admin"
    )
    
    def __repr__(self):
        return f"<User(id={self.id}, username={self.username}, points={self.points})>"

class Content(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –†–û–ó–®–ò–†–ï–ù–ê"""
    __tablename__ = "content"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    content_type = Column(SQLEnum(ContentType), nullable=False)
    text = Column(Text, nullable=True)  # –¢–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É –∞–±–æ –ø—ñ–¥–ø–∏—Å –¥–æ –º–µ–º—É
    file_id = Column(String(255), nullable=True)  # Telegram file_id –¥–ª—è –º–µ–º—ñ–≤
    file_url = Column(String(500), nullable=True)  # URL —Ñ–∞–π–ª—É
    
    # –ù–û–í–Ü –ü–û–õ–Ø –î–õ–Ø –ö–ê–¢–ï–ì–û–†–ò–ó–ê–¶–Ü–á!
    topic = Column(String(100), nullable=True)  # "programming", "life", "work", "family"
    style = Column(String(100), nullable=True)  # "irony", "sarcasm", "kind", "absurd"
    difficulty = Column(Integer, default=1)  # 1-5, —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑—É–º—ñ–Ω–Ω—è
    
    # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
    status = Column(SQLEnum(ContentStatus), default=ContentStatus.PENDING)
    author_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    moderator_id = Column(BigInteger, ForeignKey("users.id"), nullable=True)
    moderation_comment = Column(Text, nullable=True)
    
    # –†–û–ó–®–ò–†–ï–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê!
    views = Column(Integer, default=0)
    unique_views = Column(Integer, default=0)  # –ù–û–í–ï!
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    shares = Column(Integer, default=0)  # –ù–û–í–ï!
    
    # –ù–û–í–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–Ü!
    popularity_score = Column(Float, default=0.0)  # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å
    trending_score = Column(Float, default=0.0)  # –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ –¥–Ω—ñ
    quality_score = Column(Float, default=0.0)  # –û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ –≤—ñ–¥ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤
    
    # –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    moderated_at = Column(DateTime, nullable=True)
    last_shown = Column(DateTime, nullable=True)  # –ù–û–í–ï! –ö–æ–ª–∏ –≤–æ—Å—Ç–∞–Ω–Ω—î –ø–æ–∫–∞–∑—É–≤–∞–ª–∏
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–í'–Ø–ó–ö–ò –∑ —á—ñ—Ç–∫–∏–º–∏ foreign_keys!
    author = relationship(
        "User", 
        foreign_keys=[author_id], 
        back_populates="submissions"
    )
    moderator = relationship(
        "User", 
        foreign_keys=[moderator_id],
        back_populates="moderated_content"
    )
    ratings = relationship("Rating", back_populates="content")
    content_views = relationship("ContentView", back_populates="content")  # –ù–û–í–ï!
    
    def __repr__(self):
        return f"<Content(id={self.id}, type={self.content_type}, status={self.status})>"

# –ù–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –î–õ–Ø –í–Ü–î–°–¢–ï–ñ–ï–ù–ù–Ø –ü–ï–†–ï–ì–õ–Ø–î–Ü–í!
class ContentView(Base):
    """–í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤"""
    __tablename__ = "content_views"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    content_id = Column(Integer, ForeignKey("content.id"), nullable=False)
    
    # –î–µ—Ç–∞–ª—ñ –ø–µ—Ä–µ–≥–ª—è–¥—É
    viewed_at = Column(DateTime, default=datetime.utcnow)
    view_duration = Column(Integer, nullable=True)  # –°–µ–∫—É–Ω–¥–∏
    device_type = Column(String(50), nullable=True)  # "mobile", "desktop"
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≥–ª—è–¥—É
    source = Column(String(50), default="random")  # "random", "search", "duel", "daily"
    session_id = Column(String(100), nullable=True)  # –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å–µ—Å—ñ—ó
    
    # –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
    __table_args__ = (
        Index('idx_user_content_date', 'user_id', 'content_id', 'viewed_at'),
    )
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="content_views")
    content = relationship("Content", back_populates="content_views")
    
    def __repr__(self):
        return f"<ContentView(user_id={self.user_id}, content_id={self.content_id})>"

# –ù–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –î–õ–Ø –í–ü–û–î–û–ë–ê–ù–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í!
class UserPreference(Base):
    """–í–ø–æ–¥–æ–±–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó"""
    __tablename__ = "user_preferences"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    
    # –¢–∏–ø –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è
    preference_type = Column(SQLEnum(PreferenceType), nullable=False)
    preference_value = Column(String(100), nullable=False)  # –ó–Ω–∞—á–µ–Ω–Ω—è –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è
    weight = Column(Float, default=1.0)  # –í–∞–≥–∞ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è (–Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∞–∂–ª–∏–≤–æ)
    
    # –Ø–∫ –±—É–ª–æ –æ—Ç—Ä–∏–º–∞–Ω–æ
    source = Column(String(50), default="implicit")  # "explicit", "implicit", "ai_detected"
    confidence = Column(Float, default=0.5)  # –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –≤ —Ç–æ—á–Ω–æ—Å—Ç—ñ
    
    # –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è - –æ–¥–Ω–µ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è –Ω–∞ —Ç–∏–ø
    __table_args__ = (
        UniqueConstraint('user_id', 'preference_type', 'preference_value', name='uq_user_pref'),
    )
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="preferences")
    
    def __repr__(self):
        return f"<UserPreference(user_id={self.user_id}, type={self.preference_type}, value={self.preference_value})>"

# –ù–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û–ü–£–õ–Ø–†–ù–û–°–¢–Ü!
class ContentPopularity(Base):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ —á–∞—Å—É"""
    __tablename__ = "content_popularity"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    content_id = Column(Integer, ForeignKey("content.id"), nullable=False)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä—ñ–æ–¥
    date = Column(DateTime, default=datetime.utcnow)
    period_type = Column(String(20), default="daily")  # "hourly", "daily", "weekly"
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    views_count = Column(Integer, default=0)
    unique_views_count = Column(Integer, default=0)
    likes_count = Column(Integer, default=0)
    dislikes_count = Column(Integer, default=0)
    shares_count = Column(Integer, default=0)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    engagement_rate = Column(Float, default=0.0)  # (likes + dislikes) / views
    satisfaction_rate = Column(Float, default=0.0)  # likes / (likes + dislikes)
    virality_score = Column(Float, default=0.0)  # –ù–∞—Å–∫—ñ–ª—å–∫–∏ —à–≤–∏–¥–∫–æ –ø–æ—à–∏—Ä—é—î—Ç—å—Å—è
    
    # –ó–≤'—è–∑–∫–∏
    content = relationship("Content")
    
    def __repr__(self):
        return f"<ContentPopularity(content_id={self.content_id}, date={self.date})>"

# –Ü–°–ù–£–Æ–ß–Ü –ú–û–î–ï–õ–Ü –ó –í–ò–ü–†–ê–í–õ–ï–ù–ò–ú–ò RELATIONSHIPS
class Rating(Base):
    """–ú–æ–¥–µ–ª—å –æ—Ü—ñ–Ω–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É - –†–û–ó–®–ò–†–ï–ù–ê"""
    __tablename__ = "ratings"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    content_id = Column(Integer, ForeignKey("content.id"), nullable=False)
    
    # –¢–∏–ø –¥—ñ—ó
    action_type = Column(String(50), nullable=False)  # "like", "dislike", "view", "share", "report"
    points_awarded = Column(Integer, default=0)
    
    # –ù–û–í–Ü –ü–û–õ–Ø!
    reaction_time = Column(Float, nullable=True)  # –ß–∞—Å —Ä–µ–∞–∫—Ü—ñ—ó –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    comment = Column(Text, nullable=True)  # –ö–æ–º–µ–Ω—Ç–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    emotion_detected = Column(String(50), nullable=True)  # "happy", "funny", "boring"
    
    # –ß–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –ó–≤'—è–∑–∫–∏
    user = relationship("User", back_populates="ratings")
    content = relationship("Content", back_populates="ratings")
    
    def __repr__(self):
        return f"<Rating(user_id={self.user_id}, content_id={self.content_id}, action={self.action_type})>"

class Duel(Base):
    """–ú–æ–¥–µ–ª—å –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤"""
    __tablename__ = "duels"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –£—á–∞—Å–Ω–∏–∫–∏
    initiator_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    opponent_id = Column(BigInteger, ForeignKey("users.id"), nullable=True)
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç –¥—É–µ–ª—ñ
    initiator_content_id = Column(Integer, ForeignKey("content.id"), nullable=True)
    opponent_content_id = Column(Integer, ForeignKey("content.id"), nullable=True)
    
    # –°—Ç–∞—Ç—É—Å —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    status = Column(SQLEnum(DuelStatus), default=DuelStatus.ACTIVE)
    winner_id = Column(BigInteger, ForeignKey("users.id"), nullable=True)
    
    # –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    initiator_votes = Column(Integer, default=0)
    opponent_votes = Column(Integer, default=0)
    total_votes = Column(Integer, default=0)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    voting_ends_at = Column(DateTime, default=lambda: datetime.utcnow() + timedelta(hours=24))
    is_public = Column(Boolean, default=True)
    
    # –ß–∞—Å–æ–≤—ñ –º—ñ—Ç–∫–∏
    created_at = Column(DateTime, default=datetime.utcnow)
    completed_at = Column(DateTime, nullable=True)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–í'–Ø–ó–ö–ò –∑ —á—ñ—Ç–∫–∏–º–∏ foreign_keys!
    initiator = relationship(
        "User", 
        foreign_keys=[initiator_id], 
        back_populates="duel_initiations"
    )
    opponent = relationship(
        "User", 
        foreign_keys=[opponent_id], 
        back_populates="duel_participations"
    )
    winner = relationship(
        "User", 
        foreign_keys=[winner_id],
        back_populates="duel_wins"
    )
    initiator_content = relationship(
        "Content", 
        foreign_keys=[initiator_content_id]
    )
    opponent_content = relationship(
        "Content", 
        foreign_keys=[opponent_content_id]
    )
    votes = relationship("DuelVote", back_populates="duel")
    
    def __repr__(self):
        return f"<Duel(id={self.id}, initiator={self.initiator_id}, opponent={self.opponent_id}, status={self.status})>"

class DuelVote(Base):
    """–ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å—ñ–≤ —É –¥—É–µ–ª—ñ"""
    __tablename__ = "duel_votes"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    duel_id = Column(Integer, ForeignKey("duels.id"), nullable=False)
    voter_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    
    # –ì–æ–ª–æ—Å: "initiator" –∞–±–æ "opponent"
    vote_for = Column(String(20), nullable=False)
    
    # –ß–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–µ –æ–±–º–µ–∂–µ–Ω–Ω—è - –æ–¥–∏–Ω –≥–æ–ª–æ—Å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    __table_args__ = (
        UniqueConstraint('duel_id', 'voter_id', name='uq_duel_voter'),
    )
    
    # –ó–≤'—è–∑–∫–∏
    duel = relationship("Duel", back_populates="votes")
    voter = relationship("User", back_populates="votes")
    
    def __repr__(self):
        return f"<DuelVote(duel_id={self.duel_id}, voter_id={self.voter_id}, vote_for={self.vote_for})>"

class AdminAction(Base):
    """–ú–æ–¥–µ–ª—å –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    __tablename__ = "admin_actions"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    admin_id = Column(BigInteger, ForeignKey("users.id"), nullable=False)
    
    # –¢–∏–ø –¥—ñ—ó
    action_type = Column(String(50), nullable=False)  # "approve", "reject", "ban", "unban"
    target_type = Column(String(50), nullable=False)  # "content", "user", "duel"
    target_id = Column(Integer, nullable=False)
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    reason = Column(Text, nullable=True)
    notes = Column(Text, nullable=True)
    
    # –ß–∞—Å–æ–≤–∞ –º—ñ—Ç–∫–∞
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ó–í'–Ø–ó–û–ö!
    admin = relationship(
        "User", 
        foreign_keys=[admin_id],
        back_populates="admin_actions"
    )
    
    def __repr__(self):
        return f"<AdminAction(admin_id={self.admin_id}, action={self.action_type}, target={self.target_type}:{self.target_id})>"

class BotStatistics(Base):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    __tablename__ = "bot_statistics"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # –î–∞—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    date = Column(DateTime, default=datetime.utcnow)
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_users = Column(Integer, default=0)
    active_users_today = Column(Integer, default=0)
    new_users_today = Column(Integer, default=0)
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    total_content = Column(Integer, default=0)
    pending_content = Column(Integer, default=0)
    approved_content_today = Column(Integer, default=0)
    
    # –î—É–µ–ª—ñ
    active_duels = Column(Integer, default=0)
    completed_duels_today = Column(Integer, default=0)
    
    # –í–∑–∞—î–º–æ–¥—ñ—ó
    commands_executed_today = Column(Integer, default=0)
    memes_sent_today = Column(Integer, default=0)
    jokes_sent_today = Column(Integer, default=0)
    
    def __repr__(self):
        return f"<BotStatistics(date={self.date}, users={self.total_users})>"