#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–∞–∫–µ—Ç—É database –∑ —É—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ üß†üòÇüî•
"""

import logging
from datetime import datetime

# –û—Å–Ω–æ–≤–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from .database import get_db_session, init_db
from .models import (
    Base, User, Content, Rating, Duel, DuelVote,
    AdminAction, BotStatistics, ContentType, ContentStatus, DuelStatus
)

logger = logging.getLogger(__name__)

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def get_or_create_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).filter(User.id == user_id).first()
            
            if user:
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—å
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                    updated = True
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                user.last_activity = datetime.utcnow()
                
                if updated:
                    logger.info(f"üë§ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                
                return user
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user = User(
                    id=user_id,
                    username=username,
                    first_name=first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π",
                    last_name=last_name,
                    points=0,
                    rank="ü§° –ù–æ–≤–∞—á–æ–∫",
                    is_active=True,
                    last_activity=datetime.utcnow()
                )
                
                session.add(user)
                session.commit()
                
                logger.info(f"üéâ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id} ({first_name})")
                return user
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

def get_user_by_id(user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    try:
        with get_db_session() as session:
            return session.query(User).filter(User.id == user_id).first()
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

def update_user_points(user_id: int, points_delta: int, action_description: str = ""):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if user:
                old_points = user.points
                user.points += points_delta
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–≤—Å—è —Ä–∞–Ω–≥
                old_rank = user.rank
                user.rank = calculate_rank_by_points(user.points)
                
                session.commit()
                
                logger.info(f"üí∞ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: {old_points} ‚Üí {user.points} (+{points_delta}) {action_description}")
                
                if old_rank != user.rank:
                    logger.info(f"üèÜ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–≤–∏—â–∏–≤—Å—è –¥–æ —Ä–∞–Ω–≥—É: {user.rank}")
                
                return user
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤")
                return None
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

def calculate_rank_by_points(points: int) -> str:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–∞–Ω–≥—É –∑–∞ –±–∞–ª–∞–º–∏"""
    if points >= 5000:
        return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
    elif points >= 3000:
        return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
    elif points >= 1500:
        return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
    elif points >= 750:
        return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
    elif points >= 350:
        return "üé≠ –ö–æ–º—ñ–∫"
    elif points >= 150:
        return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
    elif points >= 50:
        return "üòÑ –°–º—ñ—Ö—É–Ω"
    else:
        return "ü§° –ù–æ–≤–∞—á–æ–∫"

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ù–¢–û–ú =====

def add_content(author_id: int, content_type: str, text: str = None, file_id: str = None):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            content = Content(
                author_id=author_id,
                content_type=ContentType.JOKE if content_type.lower() == 'joke' else ContentType.MEME,
                text=text,
                file_id=file_id,
                status=ContentStatus.PENDING,
                created_at=datetime.utcnow()
            )
            
            session.add(content)
            session.commit()
            
            logger.info(f"üìù –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {author_id}: {content_type}")
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

def get_random_approved_content(content_type: str = None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å—Ö–≤–∞–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        with get_db_session() as session:
            query = session.query(Content).filter(Content.status == ContentStatus.APPROVED)
            
            if content_type:
                if content_type.lower() == 'joke':
                    query = query.filter(Content.content_type == ContentType.JOKE)
                elif content_type.lower() == 'meme':
                    query = query.filter(Content.content_type == ContentType.MEME)
            
            content = query.order_by(Content.id.desc()).first()  # Fallback —è–∫—â–æ –Ω–µ–º–∞—î —Ñ—É–Ω–∫—Ü—ñ—ó random
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –†–û–ë–û–¢–ò –ó –†–ï–ô–¢–ò–ù–ì–ê–ú–ò =====

def add_rating(user_id: int, content_id: int, action_type: str, points_awarded: int = 0):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É/—Ä–µ–∞–∫—Ü—ñ—ó"""
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –≤–∂–µ —Ü–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            existing_rating = session.query(Rating).filter(
                Rating.user_id == user_id,
                Rating.content_id == content_id,
                Rating.action_type == action_type
            ).first()
            
            if existing_rating:
                logger.info(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç {content_id}")
                return existing_rating
            
            rating = Rating(
                user_id=user_id,
                content_id=content_id,
                action_type=action_type,
                points_awarded=points_awarded,
                created_at=datetime.utcnow()
            )
            
            session.add(rating)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content = session.query(Content).filter(Content.id == content_id).first()
            if content:
                if action_type == "like":
                    content.likes += 1
                elif action_type == "dislike":
                    content.dislikes += 1
                elif action_type == "view":
                    content.views += 1
            
            session.commit()
            
            logger.info(f"‚≠ê –î–æ–¥–∞–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç {content_id} ({action_type})")
            return rating
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É: {e}")
        return None

# ===== –°–¢–ê–¢–ò–°–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á =====

def get_user_stats(user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.id == user_id).first()
            if not user:
                return None
            
            # –ö–æ–Ω—Ç–µ–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_content = session.query(Content).filter(Content.author_id == user_id).count()
            approved_content = session.query(Content).filter(
                Content.author_id == user_id,
                Content.status == ContentStatus.APPROVED
            ).count()
            
            # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_ratings = session.query(Rating).filter(Rating.user_id == user_id).count()
            
            return {
                "user": user,
                "total_submissions": user_content,
                "approved_submissions": approved_content,
                "total_interactions": user_ratings,
                "points": user.points,
                "rank": user.rank
            }
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
        return None

def get_leaderboard(limit: int = 10):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    try:
        with get_db_session() as session:
            top_users = session.query(User).filter(
                User.is_active == True
            ).order_by(User.points.desc()).limit(limit).all()
            
            return [{
                "id": user.id,
                "name": user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π",
                "username": user.username,
                "points": user.points,
                "rank": user.rank
            } for user in top_users]
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è leaderboard: {e}")
        return []

# ===== –ï–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–Ü–ô =====

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ñ –∫–ª–∞—Å–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó
    'get_db_session', 'init_db',
    'Base', 'User', 'Content', 'Rating', 'Duel', 'DuelVote',
    'AdminAction', 'BotStatistics', 
    'ContentType', 'ContentStatus', 'DuelStatus',
    
    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    'get_or_create_user', 'get_user_by_id', 'update_user_points', 'calculate_rank_by_points',
    
    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    'add_content', 'get_random_approved_content',
    
    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
    'add_rating',
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    'get_user_stats', 'get_leaderboard'
]