#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –£–ö–†–ê–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê üß†üòÇüî•

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
import traceback

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def print_header():
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß†üòÇüî•" * 20)
    print("\nüîß –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–§–ï–°–Ü–ô–ù–û–ì–û –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê")
    print("üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º")
    print("üß†üòÇüî•" * 20)
    print()

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("üìç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ï–†–ï–î–û–í–ò–©–ê:")
    
    issues = []
    
    # Python –≤–µ—Ä—Å—ñ—è
    python_version = sys.version_info
    if python_version >= (3, 9):
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    else:
        print(f"‚ùå Python {python_version.major}.{python_version.minor}.{python_version.micro} (–ø–æ—Ç—Ä—ñ–±–µ–Ω >= 3.9)")
        issues.append("Python –≤–µ—Ä—Å—ñ—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞")
    
    # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    required_env = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'ADMIN_ID': 'ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
    }
    
    for env_var, description in required_env.items():
        value = os.getenv(env_var)
        if value:
            masked = value[:10] + "..." if len(value) > 10 else value
            print(f"‚úÖ {env_var}: {masked}")
        else:
            print(f"‚ùå {env_var}: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({description})")
            issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ {env_var}")
    
    # Railway —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
    if os.getenv('RAILWAY_ENVIRONMENT'):
        print("‚úÖ Railway —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∏—è–≤–ª–µ–Ω–æ")
    else:
        print("üìç –õ–æ–∫–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ")
    
    return issues

def check_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∞—à–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó"""
    print("\nüìÅ –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò –ü–†–û–ï–ö–¢–£:")
    
    critical_files = {
        # –ö–æ—Ä—ñ–Ω—å –ø—Ä–æ–µ–∫—Ç—É
        'main.py': '–ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫—É (–∫–æ—Ä—ñ–Ω—å)',
        'requirements.txt': '–û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ',
        'Procfile': 'Railway –ø—Ä–æ—Ü–µ—Å–∏ (–∫–æ—Ä—ñ–Ω—å)',
        
        # App —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        'app/main.py': '–û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –±–æ—Ç–∞',
        'app/__init__.py': 'App –ø–∞–∫–µ—Ç',
        'app/config/settings.py': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
        'app/config/__init__.py': 'Config –ø–∞–∫–µ—Ç',
        'app/database/models.py': '–ú–æ–¥–µ–ª—ñ –ë–î',
        'app/database/database.py': '–°–µ—Ä–≤—ñ—Å–∏ –ë–î',
        'app/database/__init__.py': 'Database –ø–∞–∫–µ—Ç',
        'app/handlers/__init__.py': '–•–µ–Ω–¥–ª–µ—Ä–∏ –ø–∞–∫–µ—Ç',
        'app/handlers/basic_commands.py': '–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏',
        'app/services/__init__.py': 'Services –ø–∞–∫–µ—Ç',
        'app/utils/__init__.py': 'Utils –ø–∞–∫–µ—Ç',
        
        # Deployment —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        'deployment/railway.json': 'Railway –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è',
        'deployment/Procfile': 'Railway –ø—Ä–æ—Ü–µ—Å–∏ (backup)',
        'deployment/requirements.txt': 'Deployment –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ'
    }
    
    optional_files = {
        '.env': '–õ–æ–∫–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ',
        'alembic.ini': '–ú—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î',
        'app/services/scheduler.py': '–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫',
        'app/keyboards/__init__.py': '–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏',
        'docker/docker-compose.yml': 'Docker –∫–æ–º–ø–æ–∑–∏—Ü—ñ—è',
        'docs/README.md': '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è'
    }
    
    issues = []
    
    print("üìã –ö–†–ò–¢–ò–ß–ù–Ü –§–ê–ô–õ–ò:")
    for file_path, description in critical_files.items():
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} ({description})")
        else:
            print(f"‚ùå {file_path} ({description}) - –ö–†–ò–¢–ò–ß–ù–ò–ô")
            issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª: {file_path}")
    
    print("\nüìã –û–ü–¶–Ü–û–ù–ê–õ–¨–ù–Ü –§–ê–ô–õ–ò:")
    for file_path, description in optional_files.items():
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} ({description})")
        else:
            print(f"‚ö†Ô∏è {file_path} ({description}) - –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π")
    
    return issues

def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô:")
    
    required_deps = [
        ('aiogram', 'Telegram Bot API'),
        ('sqlalchemy', 'ORM –¥–ª—è –ë–î'),
        ('asyncpg', 'PostgreSQL –¥—Ä–∞–π–≤–µ—Ä'),
        ('aiohttp', 'HTTP –∫–ª—ñ—î–Ω—Ç'),
    ]
    
    optional_deps = [
        ('apscheduler', '–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫'),
        ('openai', 'OpenAI API'),
        ('redis', '–ö–µ—à (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)')
    ]
    
    issues = []
    
    for dep, description in required_deps:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} ({description})")
        except ImportError:
            print(f"‚ùå {dep} ({description}) - –ö–†–ò–¢–ò–ß–ù–ò–ô")
            issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å: {dep}")
    
    for dep, description in optional_deps:
        try:
            __import__(dep)
            print(f"‚úÖ {dep} ({description})")
        except ImportError:
            print(f"‚ö†Ô∏è {dep} ({description}) - –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π")
    
    return issues

def check_imports():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É –∑ app/ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é"""
    print("\nüîó –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ú–ü–û–†–¢–Ü–í –ü–†–û–ï–ö–¢–£:")
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è app/ –¥–æ Python path
    app_dir = Path('app')
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
        print("‚úÖ –î–æ–¥–∞–Ω–æ app/ –¥–æ Python path")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
        return ["–ü–∞–ø–∫–∞ app/ –≤—ñ–¥—Å—É—Ç–Ω—è"]
    
    project_modules = [
        ('config.settings', '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É (app/config/)'),
        ('database.models', '–ú–æ–¥–µ–ª—ñ –ë–î (app/database/)'),
        ('database.database', '–°–µ—Ä–≤—ñ—Å–∏ –ë–î (app/database/)'),
        ('handlers', '–•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥ (app/handlers/)'),
        ('services', '–ë—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∞ (app/services/)'),
        ('utils', '–£—Ç–∏–ª—ñ—Ç–∏ (app/utils/)')
    ]
    
    issues = []
    
    for module, description in project_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} ({description})")
        except ImportError as e:
            print(f"‚ùå {module} ({description}) - {str(e)}")
            issues.append(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {module}")
    
    return issues

async def check_bot_connection():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram"""
    print("\nü§ñ –ü–ï–†–ï–í–Ü–†–ö–ê –ó'–Ñ–î–ù–ê–ù–ù–Ø –ó TELEGRAM:")
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return ["BOT_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"]
    
    try:
        from aiogram import Bot
        from aiogram.client.default import DefaultBotProperties
        from aiogram.enums import ParseMode
        
        bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
        bot_info = await bot.get_me()
        print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ @{bot_info.username}")
        print(f"‚úÖ –Ü–º'—è –±–æ—Ç–∞: {bot_info.first_name}")
        print(f"‚úÖ ID –±–æ—Ç–∞: {bot_info.id}")
        
        await bot.session.close()
        return []
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        return [f"–ü–æ–º–∏–ª–∫–∞ Telegram API: {str(e)}"]

def check_database():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("\nüíæ –ü–ï–†–ï–í–Ü–†–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–•:")
    
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return ["DATABASE_URL –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"]
    
    # –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –≤ URL
    masked_url = database_url
    if '@' in database_url:
        parts = database_url.split('@')
        if len(parts) == 2:
            credentials = parts[0].split('//')[-1]
            if ':' in credentials:
                user, password = credentials.split(':', 1)
                masked_url = database_url.replace(password, '***')
    
    print(f"‚úÖ Database URL: {masked_url}")
    
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(database_url, echo=False)
        
        # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            row = result.fetchone()
            if row and row[0] == 1:
                print("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —É—Å–ø—ñ—à–Ω–µ")
                return []
            else:
                print("‚ùå –¢–µ—Å—Ç –∑–∞–ø–∏—Ç—É –Ω–µ –ø—Ä–æ–π—à–æ–≤")
                return ["–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É"]
                
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        return [f"–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}"]

def generate_fixes(all_issues):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    if not all_issues:
        return
    
    print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:")
    print("=" * 50)
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
    env_issues = [i for i in all_issues if '–∑–º—ñ–Ω–Ω–∞' in i.lower()]
    dep_issues = [i for i in all_issues if '–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å' in i.lower()]
    file_issues = [i for i in all_issues if '—Ñ–∞–π–ª' in i.lower()]
    import_issues = [i for i in all_issues if '—ñ–º–ø–æ—Ä—Ç' in i.lower()]
    
    if env_issues:
        print("\nüåç –ó–ú–Ü–ù–ù–Ü –°–ï–†–ï–î–û–í–ò–©–ê:")
        print("–°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –∑–º—ñ–Ω–Ω–∏–º–∏:")
        print("```")
        print("BOT_TOKEN=your_bot_token_here")
        print("ADMIN_ID=your_telegram_id")
        print("DATABASE_URL=sqlite:///bot.db  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏")
        print("```")
    
    if dep_issues:
        print("\nüì¶ –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü:")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
        print("```bash")
        print("pip install -r requirements.txt")
        print("# –∞–±–æ")
        print("pip install aiogram sqlalchemy asyncpg")
        print("```")
    
    if file_issues:
        print("\nüìÅ –§–ê–ô–õ–ò:")
        print("–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ —ñ—Å–Ω—É—é—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏:")
        for issue in file_issues:
            print(f"- {issue}")
    
    if import_issues:
        print("\nüîó –Ü–ú–ü–û–†–¢–ò:")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å __init__.py —Ñ–∞–π–ª—ñ–≤")
        print("–ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ app/ –¥–æ Python path")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_header()
    
    all_issues = []
    
    # –ü–æ–µ—Ç–∞–ø–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    try:
        all_issues.extend(check_environment())
        all_issues.extend(check_structure())
        all_issues.extend(check_dependencies())
        all_issues.extend(check_imports())
        all_issues.extend(await check_bot_connection())
        all_issues.extend(check_database())
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        traceback.print_exc()
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\nüìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:")
    print("=" * 50)
    
    if not all_issues:
        print("üéâ –í–°–Ü –ü–ï–†–ï–í–Ü–†–ö–ò –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É")
    else:
        print(f"‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û {len(all_issues)} –ü–†–û–ë–õ–ï–ú:")
        for i, issue in enumerate(all_issues, 1):
            print(f"{i}. {issue}")
        
        generate_fixes(all_issues)
    
    print("\nüöÄ –î–õ–Ø –ó–ê–ü–£–°–ö–£ –í–ò–ö–û–†–ò–°–¢–û–í–£–ô–¢–ï:")
    print("python main.py")
    
    return len(all_issues) == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)