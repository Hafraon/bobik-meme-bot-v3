#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–• –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê

–ü–µ—Ä–µ–≤—ñ—Ä—è—î —ñ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ app/ –¥–æ path
app_dir = Path(__file__).parent / "app"
if app_dir.exists():
    sys.path.insert(0, str(app_dir))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def print_header():
    print("üîß" * 25)
    print("\nüíæ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –ë–î")
    print("üîß" * 25)
    print()

def check_environment():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"""
    print("üåç –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ú–Ü–ù–ù–ò–• –°–ï–†–ï–î–û–í–ò–©–ê:")
    
    issues = []
    required_vars = {
        'BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'ADMIN_ID': 'ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        'DATABASE_URL': 'URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
    }
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if value:
            if var == 'DATABASE_URL':
                # –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –≤ URL
                masked = value
                if '@' in value and '://' in value:
                    try:
                        parts = value.split('://', 1)[1].split('@', 1)
                        if len(parts) == 2:
                            credentials = parts[0]
                            if ':' in credentials:
                                user, password = credentials.rsplit(':', 1)
                                masked = value.replace(':' + password + '@', ':***@')
                    except:
                        masked = value[:20] + "..."
                print(f"‚úÖ {var}: {masked}")
            else:
                masked_value = value[:10] + "..." if len(value) > 10 else value
                print(f"‚úÖ {var}: {masked_value}")
        else:
            print(f"‚ùå {var}: –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({description})")
            issues.append(f"–í—ñ–¥—Å—É—Ç–Ω—è –∑–º—ñ–Ω–Ω–∞ {var}")
    
    return issues

def check_imports():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–º–ø–æ—Ä—Ç—ñ–≤ database –º–æ–¥—É–ª—ñ–≤"""
    print("\nüì¶ –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ú–ü–û–†–¢–Ü–í DATABASE:")
    
    issues = []
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    import_tests = [
        ("config.settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        ("database.models", "–ú–æ–¥–µ–ª—ñ –ë–î"),
        ("database.database", "Database —Ñ—É–Ω–∫—Ü—ñ—ó"),
        ("database", "Database –º–æ–¥—É–ª—å")
    ]
    
    for module, description in import_tests:
        try:
            __import__(module)
            print(f"‚úÖ {module} - {description}")
        except ImportError as e:
            print(f"‚ùå {module} - {description} ({e})")
            issues.append(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {module}")
    
    return issues

async def test_database_connection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î"""
    print("\nüíæ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û –ë–î:")
    
    issues = []
    
    try:
        from database.database import get_db_session, ENGINE_CREATED
        
        if not ENGINE_CREATED:
            print("‚ùå Database engine –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            issues.append("Database engine –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return issues
        
        print("‚úÖ Database engine —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        with get_db_session() as session:
            # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∑–∞–ø–∏—Ç
            result = session.execute("SELECT 1 as test")
            row = result.fetchone()
            if row and row[0] == 1:
                print("‚úÖ –ë–∞–∑–æ–≤–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—î")
            else:
                print("‚ùå –¢–µ—Å—Ç –∑–∞–ø–∏—Ç—É –Ω–µ –ø—Ä–æ–π—à–æ–≤")
                issues.append("–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
        issues.append(f"–ü–æ–º–∏–ª–∫–∞ –ë–î: {str(e)}")
    
    return issues

async def test_database_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –ë–î"""
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô –ë–î:")
    
    issues = []
    
    try:
        from database.database import (
            init_db, check_if_migration_needed, verify_database_integrity,
            get_or_create_user, get_user_by_id, update_user_points
        )
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
        print("  üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è init_db...")
        result = await init_db()
        if result:
            print("  ‚úÖ init_db –ø—Ä–∞—Ü—é—î")
        else:
            print("  ‚ö†Ô∏è init_db –ø–æ–≤–µ—Ä–Ω—É–≤ False")
        
        # –¢–µ—Å—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó
        print("  üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è check_if_migration_needed...")
        migration_needed = await check_if_migration_needed()
        print(f"  ‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è {'–ø–æ—Ç—Ä—ñ–±–Ω–∞' if migration_needed else '–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞'}")
        
        # –¢–µ—Å—Ç —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        print("  üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è verify_database_integrity...")
        integrity = await verify_database_integrity()
        if integrity:
            print("  ‚úÖ –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î OK")
        else:
            print("  ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—é –ë–î")
        
        # –¢–µ—Å—Ç —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        print("  üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
        test_user = await get_or_create_user(
            telegram_id=999999999,
            username="test_user",
            first_name="Test"
        )
        
        if test_user:
            print("  ‚úÖ get_or_create_user –ø—Ä–∞—Ü—é—î")
            
            # –¢–µ—Å—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤
            points_updated = await update_user_points(999999999, 10)
            if points_updated:
                print("  ‚úÖ update_user_points –ø—Ä–∞—Ü—é—î")
            else:
                print("  ‚ö†Ô∏è update_user_points –Ω–µ –ø—Ä–∞—Ü—é—î")
        else:
            print("  ‚ùå get_or_create_user –Ω–µ –ø—Ä–∞—Ü—é—î")
            issues.append("–§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ë–î –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –ë–î: {e}")
        issues.append(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—É–Ω–∫—Ü—ñ–π –ë–î: {str(e)}")
    
    return issues

async def test_database_models():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –ë–î"""
    print("\nüèóÔ∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô –ë–î:")
    
    issues = []
    
    try:
        from database.models import (
            User, Content, Rating, Duel, DuelVote, 
            ContentType, ContentStatus, DuelStatus
        )
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –µ–Ω—É–º—ñ–≤
        print(f"  üìã ContentType: {list(ContentType)}")
        print(f"  üìã ContentStatus: {list(ContentStatus)}")
        print(f"  üìã DuelStatus: {list(DuelStatus)}")
        
        print("‚úÖ –ú–æ–¥–µ–ª—ñ –ë–î –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª–µ–π –ë–î: {e}")
        issues.append(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª–µ–π: {str(e)}")
    
    return issues

def create_fix_script():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print("\nüõ†Ô∏è –°–¢–í–û–†–ï–ù–ù–Ø –°–ö–†–ò–ü–¢–ê –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:")
    
    fix_script_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ†Ô∏è –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–î
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–¥–∞—Ç–∏ app/ –¥–æ path
app_dir = Path(__file__).parent / "app"
if app_dir.exists():
    sys.path.insert(0, str(app_dir))

async def main():
    try:
        from database.database import init_db, migrate_database
        
        print("üîß –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ë–î...")
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó
        await migrate_database()
        print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        result = await init_db()
        if result:
            print("‚úÖ –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("‚ö†Ô∏è –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏")
        
        print("üéâ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    try:
        with open("fix_database.py", 'w', encoding='utf-8') as f:
            f.write(fix_script_content)
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ fix_database.py")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print_header()
    
    all_issues = []
    
    try:
        # –ü–æ–µ—Ç–∞–ø–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        all_issues.extend(check_environment())
        all_issues.extend(check_imports())
        all_issues.extend(await test_database_connection())
        all_issues.extend(await test_database_functions())
        all_issues.extend(await test_database_models())
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        all_issues.append(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\nüìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò –ë–î:")
    print("=" * 50)
    
    if not all_issues:
        print("üéâ –í–°–Ü –ü–ï–†–ï–í–Ü–†–ö–ò –ë–î –ü–†–û–ô–î–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
    else:
        print(f"‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û {len(all_issues)} –ü–†–û–ë–õ–ï–ú –ó –ë–î:")
        for i, issue in enumerate(all_issues, 1):
            print(f"{i}. {issue}")
        
        create_fix_script()
        
        print("\nüõ†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        print("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python fix_database.py")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
        print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞")
    
    return len(all_issues) == 0

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)