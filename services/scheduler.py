#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö –ó–ê–î–ê–ß üß†üòÇüî•
–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞, –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —ñ–Ω—à–µ
"""

import asyncio
import logging
from datetime import datetime, timedelta, time
from typing import List, Dict, Any, Optional
import pytz

logger = logging.getLogger(__name__)

# Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
try:
    from config.settings import settings
    DAILY_BROADCAST_HOUR = getattr(settings, 'DAILY_BROADCAST_HOUR', 9)
    DAILY_BROADCAST_MINUTE = getattr(settings, 'DAILY_BROADCAST_MINUTE', 0)
    TIMEZONE = getattr(settings, 'TIMEZONE', 'Europe/Kiev')
    POINTS_FOR_DAILY_ACTIVITY = getattr(settings, 'POINTS_FOR_DAILY_ACTIVITY', 2)
except ImportError:
    import os
    DAILY_BROADCAST_HOUR = int(os.getenv("DAILY_BROADCAST_HOUR", "9"))
    DAILY_BROADCAST_MINUTE = int(os.getenv("DAILY_BROADCAST_MINUTE", "0"))
    TIMEZONE = os.getenv("TIMEZONE", "Europe/Kiev")
    POINTS_FOR_DAILY_ACTIVITY = int(os.getenv("POINTS_FOR_DAILY_ACTIVITY", "2"))

EMOJI = {
    "calendar": "üìÖ", "fire": "üî•", "star": "‚≠ê", "gem": "üíé",
    "crown": "üëë", "rocket": "üöÄ", "heart": "‚ù§Ô∏è", "wave": "üëã"
}

class SchedulerService:
    """–°–µ—Ä–≤—ñ—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á"""
    
    def __init__(self, bot):
        self.bot = bot
        self.is_running = False
        self.tasks = []
        self.timezone = pytz.timezone(TIMEZONE)
        self.last_daily_broadcast = None
        
    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
            return
        
        self.is_running = True
        logger.info("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á...")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–¥–∞—á—ñ
        self.tasks = [
            asyncio.create_task(self._daily_broadcast_loop()),
            asyncio.create_task(self._hourly_maintenance_loop()),
            asyncio.create_task(self._duel_completion_check_loop()),
            asyncio.create_task(self._statistics_update_loop())
        ]
        
        logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω–æ")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
        if not self.is_running:
            return
        
        self.is_running = False
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á...")
        
        # –°–∫–∞—Å—É–≤–∞—Ç–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
        for task in self.tasks:
            task.cancel()
        
        # –î–æ—á–µ–∫–∞—Ç–∏—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        await asyncio.gather(*self.tasks, return_exceptions=True)
        
        logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    # ===== –©–û–î–ï–ù–ù–ê –†–û–ó–°–ò–õ–ö–ê =====
    
    async def _daily_broadcast_loop(self):
        """–¶–∏–∫–ª —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        logger.info(f"üìÖ –†–æ–∑—Å–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞ {DAILY_BROADCAST_HOUR:02d}:{DAILY_BROADCAST_MINUTE:02d}")
        
        while self.is_running:
            try:
                await self._check_daily_broadcast()
                await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ü–∏–∫–ª—É —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
                await asyncio.sleep(300)  # 5 —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    async def _check_daily_broadcast(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —á–∞—Å –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        now = datetime.now(self.timezone)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Å
        if now.hour != DAILY_BROADCAST_HOUR or now.minute != DAILY_BROADCAST_MINUTE:
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∂–µ –±—É–ª–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        today = now.date()
        if self.last_daily_broadcast == today:
            return
        
        logger.info("üì¢ –ü–æ—á–∏–Ω–∞—é —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É...")
        await self._perform_daily_broadcast()
        self.last_daily_broadcast = today
    
    async def _perform_daily_broadcast(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É"""
        try:
            from database import get_db_session, get_random_approved_content, update_user_points
            from database.models import User
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            daily_joke = await get_random_approved_content("JOKE")
            daily_meme = await get_random_approved_content("MEME")
            
            if not daily_joke and not daily_meme:
                logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            with get_db_session() as session:
                subscribed_users = session.query(User).filter(
                    User.daily_subscription == True
                ).all()
            
            if not subscribed_users:
                logger.info("üì≠ –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                return
            
            logger.info(f"üì¨ –†–æ–∑—Å–∏–ª–∫–∞ –¥–ª—è {len(subscribed_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
            # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            broadcast_text = self._prepare_daily_message(daily_joke, daily_meme)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—Å—ñ–º –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º
            success_count = 0
            for user in subscribed_users:
                try:
                    await self.bot.send_message(user.id, broadcast_text)
                    
                    # –ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –±–∞–ª–∏ –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    await update_user_points(user.id, POINTS_FOR_DAILY_ACTIVITY, "—â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")
                    
                    success_count += 1
                    await asyncio.sleep(0.1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.id}: {e}")
            
            logger.info(f"‚úÖ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(subscribed_users)}")
            
            # –ó–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._record_broadcast_stats(len(subscribed_users), success_count)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    def _prepare_daily_message(self, joke=None, meme=None):
        """–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        now = datetime.now(self.timezone)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        if now.hour < 12:
            greeting = "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É"
            greeting_emoji = "üåÖ"
        elif now.hour < 18:
            greeting = "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è"
            greeting_emoji = "‚òÄÔ∏è"
        else:
            greeting = "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞"
            greeting_emoji = "üåÜ"
        
        message = f"{greeting_emoji} <b>{greeting}!</b>\n\n"
        message += f"{EMOJI['calendar']} <b>–©–æ–¥–µ–Ω–Ω–∞ –ø–æ—Ä—Ü—ñ—è –≥—É–º–æ—Ä—É</b>\n"
        message += f"üìÖ {now.strftime('%d.%m.%Y')}\n\n"
        
        # –î–æ–¥–∞—Ç–∏ –∂–∞—Ä—Ç
        if joke:
            message += f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –¥–Ω—è:</b>\n"
            message += f"<i>{joke.text}</i>\n\n"
        
        # –î–æ–¥–∞—Ç–∏ –º–µ–º
        if meme:
            message += f"{EMOJI['rocket']} <b>–ú–µ–º –¥–Ω—è:</b>\n"
            message += f"<i>{meme.text}</i>\n\n"
        
        message += f"{EMOJI['gem']} <b>+{POINTS_FOR_DAILY_ACTIVITY} –±–∞–ª—ñ–≤ –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!</b>\n\n"
        
        # –ó–∞–∫–ª–∏–∫ –¥–æ –¥—ñ—ó
        message += f"üéÆ –ù–µ –∑–∞–±—É–¥—å—Ç–µ:\n"
        message += f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤—ñ –º–µ–º–∏ /meme\n"
        message += f"‚Ä¢ –ü–æ—á–∏—Ç–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç–∏ /anekdot\n"
        message += f"‚Ä¢ –í–∑—è—Ç–∏ —É—á–∞—Å—Ç—å –≤ –¥—É–µ–ª—è—Ö /duel\n"
        message += f"‚Ä¢ –ü–æ–¥–∏–≤–∏—Ç–∏—Å—è —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å /profile\n\n"
        
        message += f"{EMOJI['heart']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è —Ç–∞ –±–∞–≥–∞—Ç–æ —Å–º—ñ—Ö—É!"
        
        return message
    
    async def _record_broadcast_stats(self, total_users: int, successful_sends: int):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–∑—Å–∏–ª–∫–∏"""
        try:
            from database import get_db_session
            
            # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–∞–ø–∏—Å–∞—Ç–∏ –≤ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {successful_sends}/{total_users} ({successful_sends/total_users*100:.1f}%)")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    # ===== –©–û–ì–û–î–ò–ù–ù–ï –û–ë–°–õ–£–ì–û–í–£–í–ê–ù–ù–Ø =====
    
    async def _hourly_maintenance_loop(self):
        """–¶–∏–∫–ª —â–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        while self.is_running:
            try:
                await self._perform_hourly_maintenance()
                await asyncio.sleep(3600)  # –ö–æ–∂–Ω—É –≥–æ–¥–∏–Ω—É
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: {e}")
                await asyncio.sleep(1800)  # 30 —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    async def _perform_hourly_maintenance(self):
        """–í–∏–∫–æ–Ω–∞—Ç–∏ —â–æ–≥–æ–¥–∏–Ω–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        try:
            logger.debug("üîß –©–æ–≥–æ–¥–∏–Ω–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è...")
            
            # –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ
            await self._cleanup_old_data()
            
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self._update_statistics()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥—É–µ–ª—ñ
            await self._cleanup_completed_duels()
            
            logger.debug("‚úÖ –©–æ–≥–æ–¥–∏–Ω–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: {e}")
    
    async def _cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ"""
        try:
            from database import get_db_session
            from database.models import Duel, Rating
            
            # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥—É–µ–ª—ñ (—Å—Ç–∞—Ä—à—ñ 7 –¥–Ω—ñ–≤)
            week_ago = datetime.utcnow() - timedelta(days=7)
            
            with get_db_session() as session:
                old_duels = session.query(Duel).filter(
                    Duel.status == 'COMPLETED',
                    Duel.completed_at < week_ago
                ).delete()
                
                if old_duels > 0:
                    session.commit()
                    logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {old_duels} —Å—Ç–∞—Ä–∏—Ö –¥—É–µ–ª—ñ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
    
    async def _update_statistics(self):
        """–û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            from database import update_bot_statistics
            await update_bot_statistics()
            logger.debug("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def _cleanup_completed_duels(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –¥—É–µ–ª—ñ"""
        try:
            from database import get_db_session
            from database.models import Duel
            
            with get_db_session() as session:
                # –ó–Ω–∞–π—Ç–∏ "–∑–∞–º–æ—Ä–æ–∂–µ–Ω—ñ" –¥—É–µ–ª—ñ (–∞–∫—Ç–∏–≤–Ω—ñ –±—ñ–ª—å—à–µ 24 –≥–æ–¥–∏–Ω)
                day_ago = datetime.utcnow() - timedelta(hours=24)
                
                frozen_duels = session.query(Duel).filter(
                    Duel.status == 'ACTIVE',
                    Duel.created_at < day_ago
                ).all()
                
                for duel in frozen_duels:
                    duel.status = 'CANCELLED'
                    logger.info(f"‚ùÑÔ∏è –°–∫–∞—Å–æ–≤–∞–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω–∏–π –¥—É–µ–ª—å #{duel.id}")
                
                if frozen_duels:
                    session.commit()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤: {e}")
    
    # ===== –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ù–Ø –î–£–ï–õ–Ü–í =====
    
    async def _duel_completion_check_loop(self):
        """–¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤"""
        while self.is_running:
            try:
                await self._check_duel_completions()
                await asyncio.sleep(30)  # –ö–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–µ–ª—ñ–≤: {e}")
                await asyncio.sleep(60)
    
    async def _check_duel_completions(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥—É–µ–ª—ñ —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        try:
            from database import get_db_session
            from database.models import Duel
            
            with get_db_session() as session:
                # –ó–Ω–∞–π—Ç–∏ –¥—É–µ–ª—ñ —â–æ –º–∞—é—Ç—å –∑–∞–≤–µ—Ä—à–∏—Ç–∏—Å—è
                now = datetime.utcnow()
                
                duels_to_complete = session.query(Duel).filter(
                    Duel.status == 'ACTIVE',
                    Duel.ends_at <= now
                ).all()
                
                for duel in duels_to_complete:
                    from handlers.duel_handlers import complete_duel
                    await complete_duel(self.bot, duel)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤: {e}")
    
    # ===== –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
    
    async def _statistics_update_loop(self):
        """–¶–∏–∫–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.is_running:
            try:
                await self._update_detailed_statistics()
                await asyncio.sleep(1800)  # –ö–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                await asyncio.sleep(900)  # 15 —Ö–≤–∏–ª–∏–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    
    async def _update_detailed_statistics(self):
        """–û–Ω–æ–≤–∏—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            from database import get_db_session
            from database.models import User, Content, Duel, Rating
            from sqlalchemy import func
            
            with get_db_session() as session:
                # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                stats = {
                    'total_users': session.query(User).count(),
                    'total_content': session.query(Content).count(),
                    'approved_content': session.query(Content).filter(Content.status == 'APPROVED').count(),
                    'total_duels': session.query(Duel).count(),
                    'total_ratings': session.query(Rating).count()
                }
                
                logger.debug(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
                
                # –¢—É—Ç –º–æ–∂–Ω–∞ –±—É–ª–æ –± –∑–±–µ—Ä–µ–≥—Ç–∏ –≤ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # ===== –ü–£–ë–õ–Ü–ß–ù–Ü –ú–ï–¢–û–î–ò =====
    
    async def send_broadcast_message(self, message: str, target_group: str = "all"):
        """–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É –≤—Ä—É—á–Ω—É"""
        try:
            from database import get_db_session
            from database.models import User
            
            with get_db_session() as session:
                # –í–∏–±—Ä–∞—Ç–∏ —Ü—ñ–ª—å–æ–≤—É –≥—Ä—É–ø—É
                if target_group == "all":
                    users = session.query(User).all()
                elif target_group == "active":
                    week_ago = datetime.utcnow() - timedelta(days=7)
                    users = session.query(User).filter(User.last_active >= week_ago).all()
                elif target_group == "subscribed":
                    users = session.query(User).filter(User.daily_subscription == True).all()
                else:
                    users = []
                
                if not users:
                    return {"success": False, "error": "–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"}
                
                # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                success_count = 0
                for user in users:
                    try:
                        await self.bot.send_message(user.id, message)
                        success_count += 1
                        await asyncio.sleep(0.1)
                    except Exception:
                        pass
                
                return {
                    "success": True,
                    "total_users": len(users),
                    "successful_sends": success_count
                }
        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä—É—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            return {"success": False, "error": str(e)}
    
    async def get_scheduler_status(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        return {
            "is_running": self.is_running,
            "tasks_count": len(self.tasks),
            "last_daily_broadcast": self.last_daily_broadcast.isoformat() if self.last_daily_broadcast else None,
            "timezone": TIMEZONE,
            "broadcast_time": f"{DAILY_BROADCAST_HOUR:02d}:{DAILY_BROADCAST_MINUTE:02d}"
        }

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def schedule_task_at_time(target_time: time, task_func, *args, **kwargs):
    """–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —á–∞—Å"""
    while True:
        now = datetime.now()
        
        # –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —á–∞—Å –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
        target_datetime = datetime.combine(now.date(), target_time)
        
        # –Ø–∫—â–æ —á–∞—Å –≤–∂–µ –º–∏–Ω—É–≤ —Å—å–æ–≥–æ–¥–Ω—ñ, –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if target_datetime <= now:
            target_datetime += timedelta(days=1)
        
        # –ß–µ–∫–∞—Ç–∏ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —á–∞—Å—É
        sleep_seconds = (target_datetime - now).total_seconds()
        await asyncio.sleep(sleep_seconds)
        
        # –í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–¥–∞—á—É
        try:
            await task_func(*args, **kwargs)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ—ó –∑–∞–¥–∞—á—ñ: {e}")

def create_scheduler_service(bot):
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    return SchedulerService(bot)