#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ï–ö–°–¢–†–ï–ù–ê –ú–Ü–ì–†–ê–¶–Ü–Ø –ë–î (–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ö–û–õ–û–ù–û–ö) üß†üòÇüî•
–¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º—É –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
"""

import os
import sys
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def get_database_url():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ URL –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        logger.error("‚ùå DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        sys.exit(1)
    
    logger.info(f"üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {database_url.split('@')[0]}@***")
    return database_url

def emergency_migration():
    """–ï–∫—Å—Ç—Ä–µ–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î"""
    try:
        from sqlalchemy import create_engine, text
        
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –µ–∫—Å—Ç—Ä–µ–Ω–æ—ó –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        
        engine = create_engine(get_database_url())
        
        with engine.begin() as conn:
            logger.info("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É (–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ FK)
            tables_to_drop = [
                'duel_votes',
                'admin_actions', 
                'bot_statistics',
                'ratings',
                'duels',
                'content',
                'users'
            ]
            
            for table in tables_to_drop:
                try:
                    conn.execute(text(f"DROP TABLE IF EXISTS {table} CASCADE"))
                    logger.info(f"   ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ: {table}")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {table}: {e}")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö enum —Ç–∏–ø—ñ–≤
            logger.info("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö enum —Ç–∏–ø—ñ–≤...")
            enum_types = ['contentstatus', 'contenttype', 'duelstatus']
            
            for enum_type in enum_types:
                try:
                    conn.execute(text(f"DROP TYPE IF EXISTS {enum_type} CASCADE"))
                    logger.info(f"   ‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ enum: {enum_type}")
                except Exception as e:
                    logger.warning(f"   ‚ö†Ô∏è {enum_type}: {e}")
        
        logger.info("‚úÖ –°—Ç–∞—Ä—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–æ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å
        logger.info("üèóÔ∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ç–∞–±–ª–∏—Ü—å...")
        
        # –Ü–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        sys.path.insert(0, os.path.dirname(__file__))
        
        from database.models import Base
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ –ù–æ–≤—ñ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        with engine.connect() as conn:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ users
            result = conn.execute(text("""
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'users' 
                ORDER BY ordinal_position
            """))
            
            columns = [(row[0], row[1]) for row in result]
            logger.info(f"üìã –ö–æ–ª–æ–Ω–∫–∏ users: {[col[0] for col in columns]}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ points –∫–æ–ª–æ–Ω–∫–∞ —ñ—Å–Ω—É—î
            if any(col[0] == 'points' for col in columns):
                logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'points' —Å—Ç–≤–æ—Ä–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
            else:
                logger.error("‚ùå –ö–æ–ª–æ–Ω–∫–∞ 'points' –≤—ñ–¥—Å—É—Ç–Ω—è!")
                return False
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        logger.info("üìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö...")
        
        admin_id = os.getenv("ADMIN_ID")
        if admin_id:
            admin_id = int(admin_id)
            
            with engine.begin() as conn:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                conn.execute(text("""
                    INSERT INTO users (id, username, first_name, points, rank, created_at, updated_at, last_active)
                    VALUES (:id, 'admin', '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä', 0, 'ü§° –ù–æ–≤–∞—á–æ–∫', NOW(), NOW(), NOW())
                    ON CONFLICT (id) DO NOTHING
                """), {"id": admin_id})
                
                logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –¥–æ–¥–∞–Ω–æ")
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤
                sample_jokes = [
                    "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∫–æ–ª–∏ –Ω–µ –º–æ–∂–µ –∑–∞—Å–Ω—É—Ç–∏? –†–∞—Ö—É—î –æ–≤–µ—Ü—å —É —Ü–∏–∫–ª—ñ while!",
                    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å —Ç–µ–º–Ω–∏–π —Ä–µ–∂–∏–º? –¢–æ–º—É —â–æ —Å–≤—ñ—Ç–ª–æ –ø—Ä–∏–≤–∞–±–ª—é—î –∂—É–∫—ñ–≤!",
                    "–©–æ —Å–∫–∞–∑–∞–≤ HTML CSS? –ë–µ–∑ —Ç–µ–±–µ —è –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞—á—É!",
                    "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –±–∞—Ä —ñ –∑–∞–º–æ–≤–ª—è—î 1 –ø–∏–≤–æ, 0 –ø–∏–≤, -1 –ø–∏–≤–æ, NULL –ø–∏–≤...",
                    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ñ–Ω —ñ –†—ñ–∑–¥–≤–æ? –¢–æ–º—É —â–æ 31 OCT = 25 DEC!"
                ]
                
                for i, joke in enumerate(sample_jokes, 1):
                    conn.execute(text("""
                        INSERT INTO content (content_type, text, author_id, status, created_at, moderated_at, moderator_id)
                        VALUES ('JOKE', :text, :author_id, 'APPROVED', NOW(), NOW(), :moderator_id)
                    """), {
                        "text": joke,
                        "author_id": admin_id,
                        "moderator_id": admin_id
                    })
                
                logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(sample_jokes)} –∑—Ä–∞–∑–∫–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤")
        
        logger.info("üéâ –ï–ö–°–¢–†–ï–ù–ê –ú–Ü–ì–†–ê–¶–Ü–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!")
        logger.info("‚úÖ –ë–î –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏")
        
        return True
        
    except Exception as e:
        logger.error(f"üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ú–Ü–ì–†–ê–¶–Ü–á: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def verify_migration():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    try:
        from sqlalchemy import create_engine, text
        
        engine = create_engine(get_database_url())
        
        with engine.connect() as conn:
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users_count = conn.execute(text("SELECT COUNT(*) FROM users")).scalar()
            logger.info(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –ë–î: {users_count}")
            
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_count = conn.execute(text("SELECT COUNT(*) FROM content")).scalar()
            approved_count = conn.execute(text("SELECT COUNT(*) FROM content WHERE status = 'APPROVED'")).scalar()
            logger.info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {content_count} (—Å—Ö–≤–∞–ª–µ–Ω–æ: {approved_count})")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ points
            result = conn.execute(text("SELECT points FROM users LIMIT 1"))
            logger.info("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ 'points' –ø—Ä–∞—Ü—é—î")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß†üòÇüî• –ï–ö–°–¢–†–ï–ù–ê –ú–Ü–ì–†–ê–¶–Ü–Ø –ë–î üß†üòÇüî•")
    print("=" * 50)
    
    try:
        # –ú—ñ–≥—Ä–∞—Ü—ñ—è
        if emergency_migration():
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
            if verify_migration():
                print("\nüéâ –ú–Ü–ì–†–ê–¶–Ü–Ø –£–°–ü–Ü–®–ù–ê!")
                print("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
                print("üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
            else:
                print("\n‚ö†Ô∏è –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏")
        else:
            print("\n‚ùå –ú–Ü–ì–†–ê–¶–Ü–Ø –ù–ï–£–°–ü–Ü–®–ù–ê")
            sys.exit(1)
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()