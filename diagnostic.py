#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –®–≤–∏–¥–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç–∞–Ω—É –±–æ—Ç–∞ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å üß†üòÇüî•
"""

import sys
import traceback
from datetime import datetime

def test_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    print("üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ú–ü–û–†–¢–Ü–í:")
    
    tests = [
        ("config.settings", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        ("database.models", "–ú–æ–¥–µ–ª—ñ –ë–î"),
        ("database.database", "–§—É–Ω–∫—Ü—ñ—ó –ë–î"),
        ("database", "Database –ø–∞–∫–µ—Ç"),
        ("handlers.basic_commands", "–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏"),
        ("handlers.content_handlers", "–ö–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("handlers.admin_panel_handlers", "–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"),
    ]
    
    success_count = 0
    failed_imports = []
    
    for module, description in tests:
        try:
            __import__(module)
            print(f"  ‚úÖ {description}: OK")
            success_count += 1
        except Exception as e:
            print(f"  ‚ùå {description}: {e}")
            failed_imports.append((module, str(e)))
    
    print(f"\nüìä –Ü–º–ø–æ—Ä—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î: {success_count}/{len(tests)}")
    return success_count, failed_imports

def test_database_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –ë–î"""
    print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô –ë–î:")
    
    try:
        from database import (
            get_recommended_content,
            add_content_rating,
            add_content_for_moderation,
            record_content_view,
            get_user_stats
        )
        
        functions = [
            "get_recommended_content",
            "add_content_rating", 
            "add_content_for_moderation",
            "record_content_view",
            "get_user_stats"
        ]
        
        for func_name in functions:
            print(f"  ‚úÖ {func_name}: —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        print(f"\nüìä –í—Å—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ!")
        return True
        
    except ImportError as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

def test_user_model():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ User"""
    print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–Ü USER:")
    
    try:
        from database.models import User
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–æ–ª–µ is_active
        if hasattr(User, 'is_active'):
            print("  ‚úÖ –ü–æ–ª–µ is_active: –ø—Ä–∏—Å—É—Ç–Ω—î")
        else:
            print("  ‚ùå –ü–æ–ª–µ is_active: –≤—ñ–¥—Å—É—Ç–Ω—î")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É
        test_user_data = {
            'telegram_id': 123456,
            'username': 'test_user',
            'first_name': 'Test',
            'is_active': True
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ is_active
        user = User(**test_user_data)
        print("  ‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è User –∑ is_active: OK")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ–ª—ñ User: {e}")
        return False

def test_handlers():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    print("\nüîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø –•–ï–ù–î–õ–ï–†–Ü–í:")
    
    try:
        from handlers.content_handlers import (
            cmd_meme, cmd_anekdot, cmd_submit,
            callback_like_content, callback_dislike_content
        )
        
        handlers = [
            "cmd_meme",
            "cmd_anekdot", 
            "cmd_submit",
            "callback_like_content",
            "callback_dislike_content"
        ]
        
        for handler_name in handlers:
            print(f"  ‚úÖ {handler_name}: —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
        return False

def test_bot_token():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    print("\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨:")
    
    try:
        from config.settings import settings
        
        if hasattr(settings, 'BOT_TOKEN') and settings.BOT_TOKEN:
            token_preview = settings.BOT_TOKEN[:10] + "..." if len(settings.BOT_TOKEN) > 10 else settings.BOT_TOKEN
            print(f"  ‚úÖ BOT_TOKEN: {token_preview}")
        else:
            print("  ‚ùå BOT_TOKEN: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return False
        
        if hasattr(settings, 'ADMIN_ID') and settings.ADMIN_ID:
            print(f"  ‚úÖ ADMIN_ID: {settings.ADMIN_ID}")
        else:
            print("  ‚ùå ADMIN_ID: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return False
        
        if hasattr(settings, 'DATABASE_URL') and settings.DATABASE_URL:
            db_preview = settings.DATABASE_URL[:20] + "..." if len(settings.DATABASE_URL) > 20 else settings.DATABASE_URL
            print(f"  ‚úÖ DATABASE_URL: {db_preview}")
        else:
            print("  ‚ùå DATABASE_URL: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return False
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üß†üòÇüî• –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê –ü–Ü–°–õ–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨ üß†üòÇüî•")
    print(f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏
    tests_results = []
    
    # 1. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤
    success_count, failed_imports = test_imports()
    tests_results.append(("–Ü–º–ø–æ—Ä—Ç–∏", success_count >= 6))
    
    # 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –ë–î
    db_functions_ok = test_database_functions()
    tests_results.append(("–§—É–Ω–∫—Ü—ñ—ó –ë–î", db_functions_ok))
    
    # 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ User
    user_model_ok = test_user_model()
    tests_results.append(("–ú–æ–¥–µ–ª—å User", user_model_ok))
    
    # 4. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    handlers_ok = test_handlers()
    tests_results.append(("–•–µ–Ω–¥–ª–µ—Ä–∏", handlers_ok))
    
    # 5. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    settings_ok = test_bot_token()
    tests_results.append(("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", settings_ok))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò:")
    
    all_passed = True
    for test_name, passed in tests_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if passed else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"  {test_name}: {status}")
        if not passed:
            all_passed = False
    
    print("\nüéØ –ó–ê–ì–ê–õ–¨–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    if all_passed:
        print("üéâ –í–°–ï –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–Ü! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        return 0
    else:
        print("‚ö†Ô∏è –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–Ü. –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è.")
        
        if failed_imports:
            print("\n‚ùå –ü–æ–º–∏–ª–∫–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤:")
            for module, error in failed_imports:
                print(f"  - {module}: {error}")
        
        return 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        print("üîç –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:")
        traceback.print_exc()
        sys.exit(1)