#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –±–æ—Ç–∞ üß†üòÇüî•
"""

import logging
import asyncio
import aiohttp
from typing import List, Optional, Dict
from datetime import datetime

from config.settings import settings, EMOJI

logger = logging.getLogger(__name__)

class ContentGenerator:
    """–°–µ—Ä–≤—ñ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–µ—Ä–µ–∑ OpenAI API"""
    
    def __init__(self):
        self.api_key = settings.OPENAI_API_KEY
        self.base_url = "https://api.openai.com/v1"
        self.model = "gpt-3.5-turbo"
        
    async def generate_jokes(self, count: int = 5, theme: str = "–∑–∞–≥–∞–ª—å–Ω–∏–π") -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤"""
        if not self.api_key:
            logger.warning("ü§ñ OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return []
        
        try:
            prompt = self._create_joke_prompt(theme, count)
            
            async with aiohttp.ClientSession() as session:
                response = await self._make_openai_request(session, prompt)
                
                if response:
                    jokes = self._parse_jokes_response(response)
                    logger.info(f"üß† –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(jokes)} –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤ –Ω–∞ —Ç–µ–º—É '{theme}'")
                    return jokes
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤: {e}")
        
        return []
    
    async def generate_meme_captions(self, count: int = 5) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥–ø–∏—Å—ñ–≤ –¥–ª—è –º–µ–º—ñ–≤"""
        if not self.api_key:
            return []
        
        try:
            prompt = self._create_meme_caption_prompt(count)
            
            async with aiohttp.ClientSession() as session:
                response = await self._make_openai_request(session, prompt)
                
                if response:
                    captions = self._parse_captions_response(response)
                    logger.info(f"üòÇ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(captions)} –ø—ñ–¥–ø–∏—Å—ñ–≤ –¥–ª—è –º–µ–º—ñ–≤")
                    return captions
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—ñ–≤: {e}")
        
        return []
    
    async def improve_user_joke(self, joke_text: str) -> str:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –∂–∞—Ä—Ç—É"""
        if not self.api_key:
            return joke_text
        
        try:
            prompt = f"""
            –ü–æ–∫—Ä–∞—â —Ü–µ–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∂–∞—Ä—Ç, –∑—Ä–æ–±–∏ –π–æ–≥–æ —Å–º—ñ—à–Ω—ñ—à–∏–º —Ç–∞ –≥—Ä–∞–º–æ—Ç–Ω—ñ—à–∏–º, –∞–ª–µ –∑–±–µ—Ä–µ–∂–∏ –æ—Å–Ω–æ–≤–Ω—É —ñ–¥–µ—é:

            –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∂–∞—Ä—Ç: {joke_text}

            –í–∏–º–æ–≥–∏:
            - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
            - –ó–±–µ—Ä–µ–∂–∏ —Å—É—Ç—å —Ç–∞ —ñ–¥–µ—é
            - –ü–æ–∫—Ä–∞—â —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞ –ø–æ–¥–∞—á—É
            - –î–æ–¥–∞–π –µ–º–æ—Ü—ñ–π–Ω–æ—Å—Ç—ñ
            - –ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª—ñ–≤

            –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∂–∞—Ä—Ç:
            """
            
            async with aiohttp.ClientSession() as session:
                response = await self._make_openai_request(session, prompt)
                
                if response and response.strip():
                    improved_joke = response.strip()
                    logger.info(f"‚ú® –ü–æ–∫—Ä–∞—â–µ–Ω–æ –∂–∞—Ä—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                    return improved_joke
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∂–∞—Ä—Ç—É: {e}")
        
        return joke_text
    
    async def generate_daily_motivation(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —â–æ–¥–µ–Ω–Ω–æ—ó –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–æ—ó —Ñ—Ä–∞–∑–∏"""
        if not self.api_key:
            return f"{EMOJI['fire']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è, –¥—Ä—É–∂–µ! –°–º—ñ—Ö–∞–π—Å—è —Ç–∞ –±—É–¥—å —â–∞—Å–ª–∏–≤–∏–º!"
        
        try:
            current_date = datetime.now().strftime("%d %B %Y")
            current_day = datetime.now().strftime("%A")
            
            day_names = {
                "Monday": "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫",
                "Tuesday": "–≤—ñ–≤—Ç–æ—Ä–æ–∫", 
                "Wednesday": "—Å–µ—Ä–µ–¥–∞",
                "Thursday": "—á–µ—Ç–≤–µ—Ä",
                "Friday": "–ø'—è—Ç–Ω–∏—Ü—è",
                "Saturday": "—Å—É–±–æ—Ç–∞",
                "Sunday": "–Ω–µ–¥—ñ–ª—è"
            }
            
            ukrainian_day = day_names.get(current_day, current_day)
            
            prompt = f"""
            –°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫—É –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É —Ñ—Ä–∞–∑—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –≤ Telegram –±–æ—Ç—ñ.

            –°—å–æ–≥–æ–¥–Ω—ñ: {ukrainian_day}, {current_date}

            –í–∏–º–æ–≥–∏:
            - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
            - –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π
            - –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤
            - –ó–≥–∞–¥–∫–∞ –ø—Ä–æ –≥—É–º–æ—Ä –∞–±–æ —Å–º—ñ—Ö
            - –í–∫–ª—é—á–∏ 1-2 –µ–º–æ–¥–∑—ñ
            - –í—Ä–∞—Ö–æ–≤—É–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è

            –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–∞ —Ñ—Ä–∞–∑–∞:
            """
            
            async with aiohttp.ClientSession() as session:
                response = await self._make_openai_request(session, prompt)
                
                if response:
                    motivation = response.strip()
                    logger.info(f"üí™ –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É —Ñ—Ä–∞–∑—É")
                    return motivation
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –º–æ—Ç–∏–≤–∞—Ü—ñ—ó: {e}")
        
        return f"{EMOJI['fire']} –ß—É–¥–æ–≤–æ–≥–æ {ukrainian_day}! –ù–µ—Ö–∞–π –¥–µ–Ω—å –±—É–¥–µ —Å–ø–æ–≤–Ω–µ–Ω–∏–π —Å–º—ñ—Ö—É!"
    
    async def check_content_appropriateness(self, content: str) -> Dict[str, any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º"""
        if not self.api_key:
            return {"appropriate": True, "reason": "", "suggestion": ""}
        
        try:
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ–≥–æ –±–æ—Ç–∞:

            –ö–æ–Ω—Ç–µ–Ω—Ç: {content}

            –ö—Ä–∏—Ç–µ—Ä—ñ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
            1. –ß–∏ –Ω–µ–º–∞—î –æ–±—Ä–∞–∑–ª–∏–≤–∏—Ö —Å–ª—ñ–≤ —á–∏ –¥–∏—Å–∫—Ä–∏–º—ñ–Ω–∞—Ü—ñ—ó?
            2. –ß–∏ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä—ñ—ó 16+?
            3. –ß–∏ –¥–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–æ—Ä–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏?
            4. –ß–∏ —î —Å–º—ñ—à–Ω–∏–º/—Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–º?

            –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∞–π —É —Ñ–æ—Ä–º–∞—Ç—ñ:
            –ü–Ü–î–•–û–î–ò–¢–¨: —Ç–∞–∫/–Ω—ñ
            –ü–†–ò–ß–ò–ù–ê: (—è–∫—â–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å)
            –ü–†–û–ü–û–ó–ò–¶–Ü–Ø: (—è–∫ –ø–æ–∫—Ä–∞—â–∏—Ç–∏)
            """
            
            async with aiohttp.ClientSession() as session:
                response = await self._make_openai_request(session, prompt)
                
                if response:
                    return self._parse_appropriateness_response(response)
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        
        return {"appropriate": True, "reason": "", "suggestion": ""}
    
    def _create_joke_prompt(self, theme: str, count: int) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤"""
        themes_description = {
            "–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è": "–ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤, –∫–æ–¥, –∫–æ–º–ø'—é—Ç–µ—Ä–∏, IT",
            "—Ä–æ–±–æ—Ç–∞": "–ø—Ä–æ —Ä–æ–±–æ—Ç—É, –æ—Ñ—ñ—Å, –∫–æ–ª–µ–≥, –±–æ—Å—ñ–≤",
            "—Å—ñ–º'—è": "–ø—Ä–æ —Å—ñ–º–µ–π–Ω–µ –∂–∏—Ç—Ç—è, –¥—ñ—Ç–µ–π, –±–∞—Ç—å–∫—ñ–≤",
            "—à–∫–æ–ª–∞": "–ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —É—á–Ω—ñ–≤, –≤—á–∏—Ç–µ–ª—ñ–≤",
            "–∑–∞–≥–∞–ª—å–Ω–∏–π": "–Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏"
        }
        
        theme_desc = themes_description.get(theme, "–Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏")
        
        return f"""
        –°—Ç–≤–æ—Ä–∏ {count} –∫–æ—Ä–æ—Ç–∫–∏—Ö —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤ {theme_desc}.

        –í–∏–º–æ–≥–∏:
        - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
        - –ö–æ–∂–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç 2-4 —Ä–µ—á–µ–Ω–Ω—è
        - –°–º—ñ—à–Ω—ñ —Ç–∞ —Å—É—á–∞—Å–Ω—ñ
        - –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –º–∞—Ç—É
        - –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≥—É–º–æ—Ä
        - –ö–æ–∂–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É, –Ω—É–º–µ—Ä–æ–≤–∞–Ω—ñ

        –ê–Ω–µ–∫–¥–æ—Ç–∏:
        """
    
    def _create_meme_caption_prompt(self, count: int) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –ø—ñ–¥–ø–∏—Å—ñ–≤ –º–µ–º—ñ–≤"""
        return f"""
        –°—Ç–≤–æ—Ä–∏ {count} —Å–º—ñ—à–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å—ñ–≤ –¥–ª—è –º–µ–º—ñ–≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.

        –í–∏–º–æ–≥–∏:
        - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
        - –ö–æ—Ä–æ—Ç–∫—ñ (–¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤)
        - –°—É—á–∞—Å–Ω—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–µ–º–∏
        - –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Å–ª–µ–Ω–≥
        - –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ —Ç–µ–º–∏
        - –ö–æ–∂–µ–Ω –ø—ñ–¥–ø–∏—Å –Ω–∞ –Ω–æ–≤–æ–º—É —Ä—è–¥–∫—É

        –ü—ñ–¥–ø–∏—Å–∏:
        """
    
    async def _make_openai_request(self, session: aiohttp.ClientSession, prompt: str) -> Optional[str]:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ OpenAI API"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": self.model,
            "messages": [
                {
                    "role": "system",
                    "content": "–¢–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≥—É–º–æ—Ä–∏—Å—Ç, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î —Å–º—ñ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Telegram –±–æ—Ç–∞. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ç—ñ–ª—å–∫–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
                },
                {
                    "role": "user", 
                    "content": prompt
                }
            ],
            "max_tokens": 1000,
            "temperature": 0.8
        }
        
        try:
            async with session.post(
                f"{self.base_url}/chat/completions",
                headers=headers,
                json=data,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    result = await response.json()
                    return result["choices"][0]["message"]["content"]
                else:
                    error_text = await response.text()
                    logger.error(f"OpenAI API –ø–æ–º–∏–ª–∫–∞ {response.status}: {error_text}")
                    return None
                    
        except asyncio.TimeoutError:
            logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø–∏—Ç—É –¥–æ OpenAI API")
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ OpenAI: {e}")
            return None
    
    def _parse_jokes_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏"""
        jokes = []
        lines = response.strip().split('\n')
        
        current_joke = ""
        for line in lines:
            line = line.strip()
            if not line:
                if current_joke:
                    jokes.append(current_joke.strip())
                    current_joke = ""
                continue
            
            # –í–∏–¥–∞–ª—è—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é
            if line.startswith(('1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.', '9.', '10.')):
                if current_joke:
                    jokes.append(current_joke.strip())
                current_joke = line[2:].strip()
            else:
                current_joke += " " + line
        
        # –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∂–∞—Ä—Ç
        if current_joke:
            jokes.append(current_joke.strip())
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç–∞ –æ—á–∏—â—É—î–º–æ
        cleaned_jokes = []
        for joke in jokes:
            joke = joke.strip()
            if len(joke) > 20 and len(joke) < 500:  # –†–æ–∑—É–º–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
                # –î–æ–¥–∞—î–º–æ –µ–º–æ–¥–∑—ñ
                if not any(emoji in joke for emoji in ['üòÇ', 'ü§£', 'üòÑ', 'üß†', 'üî•']):
                    joke += f" {EMOJI['brain']}"
                cleaned_jokes.append(joke)
        
        return cleaned_jokes[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –∂–∞—Ä—Ç—ñ–≤
    
    def _parse_captions_response(self, response: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏"""
        captions = []
        lines = response.strip().split('\n')
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith(('–ü—ñ–¥–ø–∏—Å–∏:', '–ü—ñ–¥–ø–∏—Å')):
                # –í–∏–¥–∞–ª—è—î–º–æ –Ω—É–º–µ—Ä–∞—Ü—ñ—é
                if line.startswith(('1.', '2.', '3.', '4.', '5.')):
                    line = line[2:].strip()
                
                if 10 <= len(line) <= 100:  # –ü—ñ–¥—Ö–æ–¥—è—â–∞ –¥–æ–≤–∂–∏–Ω–∞
                    captions.append(line)
        
        return captions[:5]
    
    def _parse_appropriateness_response(self, response: str) -> Dict[str, any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        lines = response.strip().split('\n')
        result = {"appropriate": True, "reason": "", "suggestion": ""}
        
        for line in lines:
            line = line.strip()
            if line.startswith('–ü–Ü–î–•–û–î–ò–¢–¨:'):
                appropriate_text = line.split(':', 1)[1].strip().lower()
                result["appropriate"] = appropriate_text in ['—Ç–∞–∫', 'yes', 'true']
            elif line.startswith('–ü–†–ò–ß–ò–ù–ê:'):
                result["reason"] = line.split(':', 1)[1].strip()
            elif line.startswith('–ü–†–û–ü–û–ó–ò–¶–Ü–Ø:'):
                result["suggestion"] = line.split(':', 1)[1].strip()
        
        return result

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
content_generator = ContentGenerator()

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

async def auto_generate_content_if_needed():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—Ä–∏ –Ω–µ—Å—Ç–∞—á—ñ"""
    try:
        from database.database import get_db_session, submit_content
        from database.models import Content, ContentStatus, ContentType
        
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            approved_jokes = session.query(Content).filter(
                Content.content_type == ContentType.JOKE,
                Content.status == ContentStatus.APPROVED
            ).count()
            
            # –Ø–∫—â–æ –º–∞–ª–æ –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤, –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ
            if approved_jokes < 10:
                logger.info("ü§ñ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –∞–Ω–µ–∫–¥–æ—Ç–∏ —á–µ—Ä–µ–∑ AI...")
                
                new_jokes = await content_generator.generate_jokes(5, "–∑–∞–≥–∞–ª—å–Ω–∏–π")
                
                for joke in new_jokes:
                    await submit_content(
                        user_id=settings.ADMIN_ID,
                        content_type=ContentType.JOKE,
                        text=joke
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª—é—î–º–æ AI –∫–æ–Ω—Ç–µ–Ω—Ç
                    from database.database import moderate_content
                    content = session.query(Content).order_by(Content.id.desc()).first()
                    if content:
                        await moderate_content(
                            content.id,
                            settings.ADMIN_ID,
                            True,
                            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ö–≤–∞–ª–µ–Ω–æ AI"
                        )
                
                logger.info(f"‚ú® –î–æ–¥–∞–Ω–æ {len(new_jokes)} AI –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")

async def generate_content_for_theme(theme: str, count: int = 3) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ç–µ–º—É"""
    return await content_generator.generate_jokes(count, theme)