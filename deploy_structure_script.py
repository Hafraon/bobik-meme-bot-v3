#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –°–ö–†–ò–ü–¢ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨ –î–õ–Ø –í–ê–®–û–á –°–¢–†–£–ö–¢–£–†–ò üß†üòÇüî•

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–º—ñ—â—É—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö –∑–≥—ñ–¥–Ω–æ –≤–∞—à–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:

ukrainian-telegram-bot/
‚îú‚îÄ‚îÄ main.py                    ‚Üê –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è
‚îú‚îÄ‚îÄ Procfile                   ‚Üê —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤ –∫–æ—Ä–µ–Ω—ñ
‚îú‚îÄ‚îÄ requirements.txt           ‚Üê –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è
‚îú‚îÄ‚îÄ diagnostic_script.py       ‚Üê —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è
‚îú‚îÄ‚îÄ app/main.py               ‚Üê –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è
‚îú‚îÄ‚îÄ deployment/
‚îÇ   ‚îú‚îÄ‚îÄ railway.json          ‚Üê —É –≤–∞—Å —É–∂–µ —î
‚îÇ   ‚îî‚îÄ‚îÄ Procfile              ‚Üê —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è
‚îî‚îÄ‚îÄ app/{config,database,handlers,services,utils}/
"""

import os
import shutil
from pathlib import Path

def print_header():
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üß†üòÇüî•" * 20)
    print("\nüìã –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨ –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê")
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É –≤–∞—à—ñ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ")
    print("üß†üòÇüî•" * 20)
    print()

def check_current_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏"""
    print("üìç –ü–ï–†–ï–í–Ü–†–ö–ê –ü–û–¢–û–ß–ù–û–á –°–¢–†–£–ö–¢–£–†–ò:")
    
    expected_files = [
        "main.py",
        "app/main.py", 
        "app/config/settings.py",
        "app/database/models.py",
        "deployment/railway.json",
        "requirements.txt"
    ]
    
    missing = []
    for file_path in expected_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            missing.append(file_path)
    
    if missing:
        print(f"\n‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ —Ñ–∞–π–ª–∏: {len(missing)}")
        return False
    else:
        print("\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!")
        return True

def backup_existing_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
    print("\nüíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    files_to_backup = [
        "main.py",
        "app/main.py",
        "requirements.txt"
    ]
    
    backup_dir = Path("backup_before_fix")
    backup_dir.mkdir(exist_ok=True)
    
    for file_path in files_to_backup:
        source = Path(file_path)
        if source.exists():
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ backup
            dest = backup_dir / file_path
            dest.parent.mkdir(parents=True, exist_ok=True)
            
            shutil.copy2(source, dest)
            print(f"üìÅ {file_path} ‚Üí {dest}")
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ {backup_dir}")

def create_fixed_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("\nüîß –°–¢–í–û–†–ï–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–ò–• –§–ê–ô–õ–Ü–í:")
    
    # 1. –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ—Ä–Ω–µ–≤–∏–π main.py
    root_main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ üß†üòÇüî•

–°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–£:
ukrainian-telegram-bot/
‚îú‚îÄ‚îÄ main.py                    # ‚Üê –¶–ï–ô –§–ê–ô–õ (–∫–æ—Ä—ñ–Ω—å)
‚îú‚îÄ‚îÄ app/main.py               # ‚Üê –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥ –±–æ—Ç–∞
‚îú‚îÄ‚îÄ deployment/railway.json   # ‚Üê Railway –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
‚îî‚îÄ‚îÄ app/{config,database,handlers,services,utils}/

‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π async/await –∑–∞–ø—É—Å–∫ app/main.py
‚úÖ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ Railway deployment
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# –î–æ–¥–∞—î–º–æ –ø–∞–ø–∫—É app/ –¥–æ Python path
current_dir = Path(__file__).parent
app_dir = current_dir / "app"
sys.path.insert(0, str(app_dir))

# –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

async def main():
    """üîß –í–ò–ü–†–ê–í–õ–ï–ù–ê –≥–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    
    print("üß†üòÇüî•" * 20)
    print("\\nüöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
    print("üîß –í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø –ó PROPER ASYNC/AWAIT")
    print("üß†üòÇüî•" * 20)
    print()
    
    try:
        logger.info("üìÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...")
        
        if not app_dir.exists():
            logger.error("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!")
            return await run_minimal_bot()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ app/main.py...")
        
        try:
            import main as app_main
            
            if hasattr(app_main, 'main'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é main() –≤ app/main.py")
                return await app_main.main()
            elif hasattr(app_main, 'UkrainianTelegramBot'):
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å UkrainianTelegramBot")
                bot = app_main.UkrainianTelegramBot()
                return await bot.main()
            else:
                logger.warning("‚ö†Ô∏è Entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return await run_minimal_bot()
                
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
            return await run_minimal_bot()
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return await run_minimal_bot()
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        return await run_minimal_bot()

async def run_minimal_bot():
    """üÜò –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç"""
    logger.info("üÜò –ó–∞–ø—É—Å–∫ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        from aiogram.filters import Command
        from aiogram.types import Message
        
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher()
        
        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer("üß†üòÇüî• –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º - –±–æ—Ç –ø—Ä–∞—Ü—é—î!")
        
        @dp.message(Command("status"))
        async def cmd_status(message: Message):
            await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π")
        
        logger.info("‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π")
        await dp.start_polling(bot, skip_updates=True)
        return True
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
'''

    # 2. Procfile –¥–ª—è –∫–æ—Ä–µ–Ω—è
    procfile_content = '''# üß†üòÇüî• Railway Procfile - –∑–∞–ø—É—Å–∫ –∑ –∫–æ—Ä–µ–Ω—è –ø—Ä–æ–µ–∫—Ç—É
web: python main.py'''

    # 3. –û–Ω–æ–≤–ª–µ–Ω–∏–π requirements.txt
    requirements_content = '''# üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ - –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü

# –û—Å–Ω–æ–≤–Ω—ñ –∫—Ä–∏—Ç–∏—á–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
aiogram>=3.4.0,<4.0.0
SQLAlchemy>=2.0.0,<3.0.0
asyncpg>=0.29.0
psycopg2-binary>=2.9.0
aiohttp>=3.9.0
aiofiles>=23.0.0
alembic>=1.13.0

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Ç–∞ –∑–∞–¥–∞—á—ñ  
APScheduler>=3.10.0
pytz>=2023.3
python-dateutil>=2.8.0

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
python-dotenv>=1.0.0
pydantic>=2.5.0

# AI —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
openai>=1.6.0
emoji>=2.8.0

# –ë–µ–∑–ø–µ–∫–∞
cryptography>=42.0.0

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# –£—Ç–∏–ª—ñ—Ç–∏
orjson>=3.9.0
psutil>=5.9.0
httpx>=0.25.0
requests>=2.31.0
'''

    # –ó–∞–ø–∏—Å—É—î–º–æ —Ñ–∞–π–ª–∏
    files_to_create = [
        ("main.py", root_main_content),
        ("Procfile", procfile_content),
        ("requirements.txt", requirements_content)
    ]
    
    for file_path, content in files_to_create:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ {file_path}")
    
    print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")

def copy_deployment_files():
    """–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –≤ deployment/"""
    print("\nüì¶ –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø –í DEPLOYMENT/:")
    
    # –ö–æ–ø—ñ—é—î–º–æ Procfile –≤ deployment —è–∫ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
    if Path("Procfile").exists():
        dest_dir = Path("deployment")
        dest_dir.mkdir(exist_ok=True)
        
        shutil.copy2("Procfile", dest_dir / "Procfile")
        shutil.copy2("requirements.txt", dest_dir / "requirements.txt")
        
        print("‚úÖ Procfile ‚Üí deployment/Procfile")
        print("‚úÖ requirements.txt ‚Üí deployment/requirements.txt")

def test_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ú–ü–û–†–¢–Ü–í:")
    
    # –î–æ–¥–∞—î–º–æ app/ –¥–æ path
    app_dir = Path("app")
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
    
    test_modules = [
        "aiogram",
        "sqlalchemy", 
        "config.settings",
        "database.models"
    ]
    
    for module in test_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError as e:
            print(f"‚ö†Ô∏è {module} - {e}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç–∞"""
    print_header()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    if not check_current_structure():
        print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É!")
        return
    
    # –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
    backup_existing_files()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    create_fixed_files()
    
    # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –≤ deployment
    copy_deployment_files()
    
    # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    test_imports()
    
    print("\nüéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)
    print("üìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. python diagnostic_script.py  # –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    print("2. python main.py               # —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫—É")
    print("3. git add . && git commit -m 'üîß Fix async/await issues'")
    print("4. git push                     # –¥–µ–ø–ª–æ–π –Ω–∞ Railway")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è!")

if __name__ == "__main__":
    main()