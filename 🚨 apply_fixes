#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîß –°–ö–†–ò–ü–¢ –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–°–Ü–• –í–ò–ü–†–ê–í–õ–ï–ù–¨

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è
–≤–∏–≤–µ–¥–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ fallback —Ä–µ–∂–∏–º—É
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def print_header():
    print("üîß" * 30)
    print("\nüöÄ –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–ò–ü–†–ê–í–õ–ï–ù–¨")
    print("–ü–µ—Ä–µ—Ö—ñ–¥ –∑ fallback –≤ –ø–æ–≤–Ω–∏–π —Ä–µ–∂–∏–º")
    print("üîß" * 30)
    print()

def backup_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    backup_dir = Path("backup_fixes") / datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir.mkdir(parents=True, exist_ok=True)
    
    files_to_backup = [
        "app/main.py",
        "app/handlers/__init__.py", 
        "requirements.txt"
    ]
    
    for file_path in files_to_backup:
        source = Path(file_path)
        if source.exists():
            dest = backup_dir / file_path
            dest.parent.mkdir(parents=True, exist_ok=True)
            shutil.copy2(source, dest)
            print(f"‚úÖ {file_path} ‚Üí {dest}")
    
    print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó: {backup_dir}")

def apply_main_fix():
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è app/main.py"""
    print("\nüöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/MAIN.PY:")
    
    # –¢—É—Ç –±—É–¥–µ –≤–º—ñ—Å—Ç –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É "app/main.py - –ü–û–í–ù–ò–ô –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –§–ê–ô–õ"
    main_content = '''# –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–Ü–ú–Ü–°–¶–ï –ù–ê –í–ú–Ü–°–¢ –ó –ê–†–¢–ï–§–ê–ö–¢–£ "üöÄ app/main.py - –ü–û–í–ù–ò–ô –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –§–ê–ô–õ"
# –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É Claude —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ —Å—é–¥–∏
'''
    
    main_path = Path("app/main.py")
    main_path.parent.mkdir(exist_ok=True)
    
    with open(main_path, 'w', encoding='utf-8') as f:
        f.write(main_content)
    
    print(f"‚úÖ {main_path} –æ–Ω–æ–≤–ª–µ–Ω–æ")

def apply_handlers_fix():
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è handlers/__init__.py"""
    print("\nüéÆ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø HANDLERS/__INIT__.PY:")
    
    # –¢—É—Ç –±—É–¥–µ –≤–º—ñ—Å—Ç –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É "handlers/__init__.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô"
    handlers_content = '''# –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ú–Ü–°–¶–ï –ù–ê –í–ú–Ü–°–¢ –ó –ê–†–¢–ï–§–ê–ö–¢–£ "üéÆ app/handlers/__init__.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô"
# –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É Claude —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ —Å—é–¥–∏
'''
    
    handlers_path = Path("app/handlers/__init__.py")
    handlers_path.parent.mkdir(exist_ok=True)
    
    with open(handlers_path, 'w', encoding='utf-8') as f:
        f.write(handlers_content)
    
    print(f"‚úÖ {handlers_path} –æ–Ω–æ–≤–ª–µ–Ω–æ")

def apply_requirements_fix():
    """–ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è requirements.txt"""
    print("\nüìã –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø REQUIREMENTS.TXT:")
    
    # –¢—É—Ç –±—É–¥–µ –≤–º—ñ—Å—Ç –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É "requirements.txt - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô"
    requirements_content = '''# –ó–ê–ú–Ü–ù–Ü–¢–¨ –¶–ï –ú–Ü–°–¶–ï –ù–ê –í–ú–Ü–°–¢ –ó –ê–†–¢–ï–§–ê–ö–¢–£ "üìã requirements.txt - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô"
# –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç —É Claude —ñ —Å–∫–æ–ø—ñ—é–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ —Å—é–¥–∏
'''
    
    requirements_path = Path("requirements.txt")
    
    with open(requirements_path, 'w', encoding='utf-8') as f:
        f.write(requirements_content)
    
    print(f"‚úÖ {requirements_path} –æ–Ω–æ–≤–ª–µ–Ω–æ")

def verify_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"""
    print("\nüîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–¢–†–£–ö–¢–£–†–ò:")
    
    required_files = [
        "app/main.py",
        "app/handlers/__init__.py",
        "app/config/settings.py",
        "app/database/models.py",
        "requirements.txt",
        "main.py",
        "Procfile"
    ]
    
    missing = []
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")
            missing.append(file_path)
    
    return len(missing) == 0

def run_basic_tests():
    """–ë–∞–∑–æ–≤—ñ —Ç–µ—Å—Ç–∏ –ø—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å"""
    print("\nüß™ –ë–ê–ó–û–í–Ü –¢–ï–°–¢–ò:")
    
    try:
        # –¢–µ—Å—Ç 1: –Ü–º–ø–æ—Ä—Ç app/main.py
        import sys
        app_path = str(Path("app").absolute())
        if app_path not in sys.path:
            sys.path.insert(0, app_path)
        
        from main import AutomatedUkrainianTelegramBot
        print("‚úÖ AutomatedUkrainianTelegramBot —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç 2: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è instance
        # –¶–µ –±—É–¥–µ –ø–∞–¥–∞—Ç–∏ –±–µ–∑ BOT_TOKEN, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        print("‚úÖ –ö–ª–∞—Å –≥–æ—Ç–æ–≤–∏–π –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
        
        # –¢–µ—Å—Ç 3: Handlers
        from handlers import register_handlers
        print("‚úÖ register_handlers –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print_header()
    
    # 1. –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
    backup_files()
    
    # 2. –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
    print("\n" + "="*50)
    print("–£–í–ê–ì–ê! –¶–µ–π —Å–∫—Ä–∏–ø—Ç –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–æ—Ç–æ–≤–∫–∏.")
    print("–î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å:")
    print("1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏ —É Claude")
    print("2. –°–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ –∑ –∫–æ–∂–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")
    print("3. –ó–∞–º—ñ–Ω—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏")
    print("="*50)
    
    # –ê–±–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É–π—Ç–µ –≤—Ä—É—á–Ω—É:
    manual_mode = input("\n–ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–∏ –≤—Ä—É—á–Ω—É? (y/N): ").lower().strip()
    
    if manual_mode == 'y':
        print("\nüìã –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –†–£–ß–ù–û–ì–û –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø:")
        print("\n1. üöÄ app/main.py:")
        print("   –ó–∞–º—ñ–Ω—ñ—Ç—å –≤–µ—Å—å –≤–º—ñ—Å—Ç –Ω–∞ –∫–æ–¥ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")
        print("   'üöÄ app/main.py - –ü–û–í–ù–ò–ô –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –§–ê–ô–õ'")
        
        print("\n2. üéÆ app/handlers/__init__.py:")
        print("   –ó–∞–º—ñ–Ω—ñ—Ç—å –≤–µ—Å—å –≤–º—ñ—Å—Ç –Ω–∞ –∫–æ–¥ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")
        print("   'üéÆ app/handlers/__init__.py - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô'")
        
        print("\n3. üìã requirements.txt:")
        print("   –ó–∞–º—ñ–Ω—ñ—Ç—å –≤–µ—Å—å –≤–º—ñ—Å—Ç –Ω–∞ –∫–æ–¥ –∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—É")
        print("   'üìã requirements.txt - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô'")
        
        print("\n4. üöÄ –î–µ–ø–ª–æ–π:")
        print("   git add .")
        print("   git commit -m 'üîß Fix: Railway integration + fallback handlers'")
        print("   git push")
        
        print("\n‚úÖ –û–ß–Ü–ö–£–í–ê–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        print("‚Ä¢ Railway –∑–Ω–∞–π–¥–µ –∫–ª–∞—Å AutomatedUkrainianTelegramBot")
        print("‚Ä¢ –ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –ø–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ")
        print("‚Ä¢ –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º—É—Ç—å")
        print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤—É—î—Ç—å—Å—è")
        print("‚Ä¢ Fallback —Ä–µ–∂–∏–º —Ç—ñ–ª—å–∫–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏")
        
    else:
        # apply_main_fix()
        # apply_handlers_fix() 
        # apply_requirements_fix()
        pass
    
    # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
    if verify_structure():
        print("\nüéâ –°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê!")
    else:
        print("\n‚ö†Ô∏è –î–µ—è–∫—ñ —Ñ–∞–π–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ")
    
    # 4. –¢–µ—Å—Ç–∏
    # tests_passed = run_basic_tests()
    
    print(f"\n{'üéØ'*20}")
    print("–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"{'üéØ'*20}")
    
    print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
    print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑–∞–º—ñ–Ω–µ–Ω–æ")
    print("2. python main.py  # —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫—É")
    print("3. git add . && git commit -m 'üîß Full bot integration'")
    print("4. git push  # –¥–µ–ø–ª–æ–π –Ω–∞ Railway")
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –¥–æ production –∑–∞–ø—É—Å–∫—É!")

if __name__ == "__main__":
    main()