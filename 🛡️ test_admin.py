#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ°Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∞–¥–º—ñ–Ω —Å–∏—Å—Ç–µ–º–∏
"""

import sys
import os
from pathlib import Path

def print_header():
    print("üõ°Ô∏è" * 20)
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –°–ò–°–¢–ï–ú–ò")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π")
    print("üõ°Ô∏è" * 20)
    print()

def test_admin_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –∞–¥–º—ñ–Ω –º–æ–¥—É–ª—ñ–≤"""
    print("üì¶ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –Ü–ú–ü–û–†–¢–Ü–í:")
    
    # –î–æ–¥–∞—î–º–æ app/ –¥–æ path
    app_dir = Path("app")
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
        print("‚úÖ app/ –¥–æ–¥–∞–Ω–æ –¥–æ Python path")
    
    tests = [
        ("handlers.admin_handlers", "–ê–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("handlers.admin_handlers.register_admin_handlers", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"),
        ("handlers.admin_handlers.is_admin", "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤"),
        ("handlers.admin_handlers.approve_content", "–§—É–Ω–∫—Ü—ñ—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è"),
        ("handlers.admin_handlers.reject_content", "–§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"),
        ("handlers.admin_handlers.ModerationStates", "FSM —Å—Ç–∞–Ω–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
    ]
    
    success_count = 0
    for module_path, description in tests:
        try:
            if "." in module_path:
                # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó/–∫–ª–∞—Å—É
                module_name, attr_name = module_path.rsplit(".", 1)
                module = __import__(module_name, fromlist=[attr_name])
                getattr(module, attr_name)
            else:
                # –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
                __import__(module_path)
            print(f"‚úÖ {module_path} - {description}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {module_path} - {description} ({e})")
        except AttributeError as e:
            print(f"‚ùå {module_path} - {description} (AttributeError: {e})")
    
    print(f"\nüìä –ê–¥–º—ñ–Ω —ñ–º–ø–æ—Ä—Ç—ñ–≤ —É—Å–ø—ñ—à–Ω–æ: {success_count}/{len(tests)}")
    return success_count == len(tests)

def test_admin_permissions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞"""
    print("\nüëë –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–†–ê–í –ê–î–ú–Ü–ù–ê:")
    
    try:
        from handlers.admin_handlers import is_admin
        
        # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ä–µ–∞–ª—å–Ω–∏–º ID –∞–¥–º—ñ–Ω–∞
        admin_id = int(os.getenv('ADMIN_ID', 0))
        
        if admin_id > 0:
            is_admin_result = is_admin(admin_id)
            print(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω ID {admin_id}: {'–∞–¥–º—ñ–Ω' if is_admin_result else '–Ω–µ –∞–¥–º—ñ–Ω'}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –∑ —Ñ–µ–π–∫–æ–≤–∏–º ID
            fake_id = 999999999
            is_fake_admin = is_admin(fake_id)
            print(f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–µ–π–∫ ID {fake_id}: {'–∞–¥–º—ñ–Ω' if is_fake_admin else '–Ω–µ –∞–¥–º—ñ–Ω'}")
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç—É
            if is_admin_result and not is_fake_admin:
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ")
                return True
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ –ø—Ä–∞–≤")
                return False
        else:
            print("‚ö†Ô∏è ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤: {e}")
        return False

def test_moderation_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –§–£–ù–ö–¶–Ü–ô –ú–û–î–ï–†–ê–¶–Ü–á:")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π
        from handlers.admin_handlers import approve_content, reject_content
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—ó approve_content —Ç–∞ reject_content –¥–æ—Å—Ç—É–ø–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ FSM —Å—Ç–∞–Ω–∏
        from handlers.admin_handlers import ModerationStates
        print("‚úÖ FSM —Å—Ç–∞–Ω–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω–∏
        states = [
            ModerationStates.waiting_for_rejection_reason
        ]
        
        for state in states:
            if state:
                print(f"‚úÖ FSM —Å—Ç–∞–Ω {state.state} –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            else:
                print(f"‚ùå FSM —Å—Ç–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        print("‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        return False

def test_database_admin_functions():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π –ë–î"""
    print("\nüíæ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–ô –ë–î:")
    
    try:
        from database.services import (
            get_basic_stats, 
            get_detailed_admin_stats,
            get_pending_content_list,
            get_content_by_id
        )
        
        print("‚úÖ –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –ë–î —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç—É—î–º–æ –±–∞–∑–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_basic_stats()
        required_keys = ['total_users', 'total_content', 'approved_content', 'pending_content', 'rejected_content']
        
        for key in required_keys:
            if key in stats:
                print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '{key}': {stats[key]}")
            else:
                print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '{key}'")
        
        # –¢–µ—Å—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        detailed_stats = get_detailed_admin_stats()
        if 'approval_rate' in detailed_stats:
            print(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ (Approval rate: {detailed_stats['approval_rate']}%)")
        else:
            print("‚ùå –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        pending_list = get_pending_content_list(5)
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {len(pending_list)} –∑–∞–ø–∏—Å—ñ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ–π –ë–î: {e}")
        return False

def test_admin_commands():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥"""
    print("\n‚ö° –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î:")
    
    admin_commands = [
        ("/admin_stats", "cmd_admin_stats"),
        ("/moderate", "cmd_moderate"), 
        ("/pending", "cmd_pending"),
        ("/approve", "cmd_approve"),
        ("/reject", "cmd_reject")
    ]
    
    try:
        from handlers.admin_handlers import (
            cmd_admin_stats, cmd_moderate, cmd_pending, 
            cmd_approve, cmd_reject
        )
        
        print("‚úÖ –í—Å—ñ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        for command, function_name in admin_commands:
            print(f"‚úÖ {command} ‚Üí {function_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥: {e}")
        return False

def test_admin_callbacks():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω callback'—ñ–≤"""
    print("\nüîò –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù CALLBACK'–Ü–í:")
    
    try:
        from handlers.admin_handlers import handle_admin_callbacks
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—è handle_admin_callbacks –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –¢–µ—Å—Ç–æ–≤—ñ callback –¥–∞–Ω—ñ
        test_callbacks = [
            "admin_moderate",
            "admin_pending", 
            "admin_refresh_stats",
            "admin_top_users",
            "moderate_approve_123",
            "moderate_reject_456",
            "moderate_next",
            "moderate_refresh"
        ]
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ callback'–∏:")
        for callback in test_callbacks:
            print(f"   ‚Ä¢ {callback}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è callback'—ñ–≤: {e}")
        return False

def test_admin_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –±–æ—Ç–æ–º"""
    print("\nüîó –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á:")
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ handlers/__init__.py
        from handlers import register_all_handlers
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—è register_all_handlers –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ register_admin_handlers –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è
        import inspect
        source = inspect.getsource(register_all_handlers)
        
        if "register_admin_handlers" in source:
            print("‚úÖ register_admin_handlers –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ register_all_handlers")
        else:
            print("‚ùå register_admin_handlers –ù–ï –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ register_all_handlers")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        from aiogram import Dispatcher
        dp = Dispatcher()
        
        try:
            register_all_handlers(dp)
            print("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ —Ä–µ—î—Å—Ç—Ä—É—é—Ç—å—Å—è –±–µ–∑ –ø–æ–º–∏–ª–æ–∫")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return False

def generate_admin_usage_guide():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å—ñ–±–Ω–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—è–º–∏"""
    print("\nüìñ –ü–û–°–Ü–ë–ù–ò–ö –ö–û–†–ò–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–Ø–ú–ò:")
    print("=" * 50)
    
    print("\nüõ°Ô∏è –ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò:")
    print("   /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    print("   /moderate - –ø–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    print("   /pending - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ")
    print("   /approve_5 - —à–≤–∏–¥–∫–æ —Å—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç ID 5")
    print("   /reject_3 –ù–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∑ –ø—Ä–∏—á–∏–Ω–æ—é")
    
    print("\nüîò –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–Ü –ö–ù–û–ü–ö–ò (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞):")
    print("   üìä –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    print("   üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è - –ø–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
    print("   üìã –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    print("   üë• –ê–¥–º—ñ–Ω —Ç–æ–ø - —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    
    print("\n‚ö° –®–í–ò–î–ö–ê –ú–û–î–ï–†–ê–¶–Ü–Ø:")
    print("   1. /moderate - –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
    print("   2. –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ ‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏ –∞–±–æ ‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏")
    print("   3. –ü—Ä–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—ñ - –≤–≤–µ—Å—Ç–∏ –ø—Ä–∏—á–∏–Ω—É")
    print("   4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    
    print("\nüí° –ü–û–†–ê–î–ò:")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /pending –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –æ–≥–ª—è–¥—É")
    print("   ‚Ä¢ /approve_ID –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –±–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
    print("   ‚Ä¢ /reject_ID –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è")
    print("   ‚Ä¢ –í—Å—ñ –¥—ñ—ó –∑–∞–ø–∏—Å—É—é—Ç—å—Å—è –≤ –ª–æ–≥–∏")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Å–∏—Å—Ç–µ–º–∏"""
    print_header()
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç—ñ–≤
    tests = [
        ("–ê–¥–º—ñ–Ω —ñ–º–ø–æ—Ä—Ç–∏", test_admin_imports),
        ("–ü—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω–∞", test_admin_permissions),
        ("–§—É–Ω–∫—Ü—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", test_moderation_functions),
        ("–ë–î —Ñ—É–Ω–∫—Ü—ñ—ó", test_database_admin_functions),
        ("–ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏", test_admin_commands),
        ("Callback'–∏", test_admin_callbacks),
        ("–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è", test_admin_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ–π—à–æ–≤")
        except Exception as e:
            print(f"üí• –¢–µ—Å—Ç '{test_name}' –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "="*50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–î–ú–Ü–ù –°–ò–°–¢–ï–ú–ò")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(f"‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {total - passed}")
    
    if passed == total:
        print("\nüéâ –í–°–Ü –¢–ï–°–¢–ò –ê–î–ú–Ü–ù –°–ò–°–¢–ï–ú–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("üõ°Ô∏è –ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Å—ñ–±–Ω–∏–∫
        generate_admin_usage_guide()
        
    else:
        print("\n‚ö†Ô∏è –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò")
        print("üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö")
    
    print(f"\nüõ°Ô∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω —Å–∏—Å—Ç–µ–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)