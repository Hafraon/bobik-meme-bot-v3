#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚öîÔ∏è –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –î–£–ï–õ–Ü–í

–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ –¥—É–µ–ª—ñ–≤ –∂–∞—Ä—Ç—ñ–≤
"""

import sys
import os
from pathlib import Path

def print_header():
    print("‚öîÔ∏è" * 25)
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –¥—É–µ–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏")
    print("‚öîÔ∏è" * 25)
    print()

def test_duel_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –¥—É–µ–ª—å–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤"""
    print("üì¶ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –î–£–ï–õ–¨–ù–ò–• –Ü–ú–ü–û–†–¢–Ü–í:")
    
    # –î–æ–¥–∞—î–º–æ app/ –¥–æ path
    app_dir = Path("app")
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
        print("‚úÖ app/ –¥–æ–¥–∞–Ω–æ –¥–æ Python path")
    
    tests = [
        ("handlers.duel_handlers", "–î—É–µ–ª—å–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏"),
        ("handlers.duel_handlers.register_duel_handlers", "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥—É–µ–ª—å–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"),
        ("handlers.duel_handlers.cmd_duel", "–ö–æ–º–∞–Ω–¥–∞ /duel"),
        ("handlers.duel_handlers.create_random_duel", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –¥—É–µ–ª—ñ"),
        ("handlers.duel_handlers.DuelStates", "FSM —Å—Ç–∞–Ω–∏ –¥—É–µ–ª—ñ–≤"),
        ("handlers.duel_handlers.RANK_REWARDS", "–°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–æ—Ä–æ–¥"),
        ("database.services.create_duel", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ –≤ –ë–î"),
        ("database.services.vote_in_duel", "–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"),
        ("database.services.finish_duel", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ"),
        ("database.services.get_user_duel_stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("database.services.auto_finish_expired_duels", "–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤")
    ]
    
    success_count = 0
    for module_path, description in tests:
        try:
            if "." in module_path:
                # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó/–∫–ª–∞—Å—É
                module_name, attr_name = module_path.rsplit(".", 1)
                module = __import__(module_name, fromlist=[attr_name])
                getattr(module, attr_name)
            else:
                # –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
                __import__(module_path)
            
            print(f"‚úÖ {description}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {description} - ImportError: {e}")
        except AttributeError as e:
            print(f"‚ùå {description} - AttributeError: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description} - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(tests)} –ø—Ä–æ–π–¥–µ–Ω–æ")
    return success_count

def test_database_models():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π –¥—É–µ–ª—ñ–≤ –≤ –ë–î"""
    print("\nüíæ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ú–û–î–ï–õ–ï–ô –î–£–ï–õ–Ü–í:")
    
    try:
        from database.models import Duel, DuelVote, DuelStatus
        print("‚úÖ –ú–æ–¥–µ–ª—å Duel - –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤")
        print("‚úÖ –ú–æ–¥–µ–ª—å DuelVote - –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
        print("‚úÖ Enum DuelStatus - —Å—Ç–∞—Ç—É—Å–∏ –¥—É–µ–ª–µ–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏ –º–æ–¥–µ–ª—ñ Duel
        duel_attrs = [
            'id', 'content1_id', 'content2_id', 'status',
            'content1_votes', 'content2_votes', 'total_votes',
            'ends_at', 'created_at', 'finished_at', 'winner_content_id'
        ]
        
        missing_attrs = []
        for attr in duel_attrs:
            if not hasattr(Duel, attr):
                missing_attrs.append(attr)
        
        if missing_attrs:
            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –≤ Duel: {missing_attrs}")
        else:
            print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ Duel –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ DuelVote
        vote_attrs = ['id', 'duel_id', 'user_id', 'content_id', 'created_at']
        missing_vote_attrs = []
        for attr in vote_attrs:
            if not hasattr(DuelVote, attr):
                missing_vote_attrs.append(attr)
        
        if missing_vote_attrs:
            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –≤ DuelVote: {missing_vote_attrs}")
        else:
            print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ DuelVote –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ú–æ–¥–µ–ª—ñ –¥—É–µ–ª—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_duel_services():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥—É–µ–ª—ñ–≤"""
    print("\nüîß –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–Ü–°–Ü–í –î–£–ï–õ–Ü–í:")
    
    services = [
        ("create_duel", "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ"),
        ("get_duel_by_id", "–û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—É–µ–ª—ñ –∑–∞ ID"),
        ("get_active_duels", "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤"),
        ("vote_in_duel", "–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"),
        ("finish_duel", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ"),
        ("get_user_duel_stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
        ("get_random_approved_content", "–í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"),
        ("auto_finish_expired_duels", "–ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"),
        ("cleanup_old_duels", "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –¥—É–µ–ª—ñ–≤")
    ]
    
    success_count = 0
    try:
        from database import services
        
        for service_name, description in services:
            if hasattr(services, service_name):
                print(f"‚úÖ {description}")
                success_count += 1
            else:
                print(f"‚ùå {description} - —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è")
        
        print(f"\nüìä –°–µ—Ä–≤—ñ—Å–∏: {success_count}/{len(services)} –¥–æ—Å—Ç—É–ø–Ω–æ")
        return success_count >= len(services) * 0.8  # 80% —Å–µ—Ä–≤—ñ—Å—ñ–≤ –º–∞—î –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        
    except ImportError as e:
        print(f"‚ùå –°–µ—Ä–≤—ñ—Å–∏ –¥—É–µ–ª—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        return False

def test_scheduler_support():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("\n‚è∞ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö–ê:")
    
    try:
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
        print("‚úÖ APScheduler –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        from apscheduler.triggers.interval import IntervalTrigger
        print("‚úÖ IntervalTrigger –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        scheduler = AsyncIOScheduler()
        print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå APScheduler –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install APScheduler>=3.10.0")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
        return False

def test_handlers_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    print("\nüîó –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –•–ï–ù–î–õ–ï–†–Ü–í:")
    
    try:
        from handlers import register_handlers
        print("‚úÖ –§—É–Ω–∫—Ü—ñ—è register_handlers –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        from handlers import check_handlers_status
        status = check_handlers_status()
        
        print(f"üìä –°—Ç–∞—Ç—É—Å —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤:")
        print(f"  ‚Ä¢ Content: {'‚úÖ' if status.get('content_handlers') else '‚ùå'}")
        print(f"  ‚Ä¢ Admin: {'‚úÖ' if status.get('admin_handlers') else '‚ùå'}")
        print(f"  ‚Ä¢ Duel: {'‚úÖ' if status.get('duel_handlers') else '‚ùå'}")
        print(f"  ‚Ä¢ Fallback: {'‚úÖ' if status.get('fallback_handlers') else '‚ùå'}")
        
        if status.get('duel_handlers'):
            print("‚úÖ –î—É–µ–ª—å–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ")
            return True
        else:
            print("‚ùå –î—É–µ–ª—å–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –ù–ï —ñ–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ")
            return False
            
    except ImportError as e:
        print(f"‚ùå –•–µ–Ω–¥–ª–µ—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: {e}")
        return False

def test_main_app_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º"""
    print("\nüéÆ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó –î–û–î–ê–¢–ö–û–ú:")
    
    try:
        from main import UkrainianTelegramBotWithDuels
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π –∫–ª–∞—Å –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏
        bot_class = UkrainianTelegramBotWithDuels
        methods = [
            'initialize_bot', 'initialize_database', 'register_handlers',
            'setup_scheduler', 'main'
        ]
        
        missing_methods = []
        for method in methods:
            if not hasattr(bot_class, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏: {missing_methods}")
        else:
            print("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        return len(missing_methods) == 0
        
    except ImportError as e:
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞—Ç–∫—É: {e}")
        return False

def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print_header()
    
    tests = [
        ("–Ü–º–ø–æ—Ä—Ç–∏ –¥—É–µ–ª—ñ–≤", test_duel_imports),
        ("–ú–æ–¥–µ–ª—ñ –ë–î", test_database_models),
        ("–°–µ—Ä–≤—ñ—Å–∏ –¥—É–µ–ª—ñ–≤", test_duel_services),
        ("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫", test_scheduler_support),
        ("–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤", test_handlers_integration),
        ("–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É", test_main_app_integration)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        print(f"\n{'='*50}")
        print(f"üß™ –¢–ï–°–¢: {test_name}")
        print('='*50)
        
        try:
            result = test_function()
            if result:
                passed_tests += 1
                print(f"‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù–û")
            else:
                print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ù–ï –ü–†–û–ô–î–ï–ù–û")
        except Exception as e:
            print(f"üí• –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ò–í–°–Ø –ü–û–ú–ò–õ–ö–û–Æ: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print(f"\n{'üèÜ'*25}")
    print(f"üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø")
    print(f"{'üèÜ'*25}")
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("‚öîÔ∏è –°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        return True
    elif passed_tests >= total_tests * 0.8:  # 80%
        print("üî∂ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –¢–ï–°–¢–Ü–í –ü–†–û–ô–®–õ–ò!")
        print("‚öîÔ∏è –°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –≥–æ—Ç–æ–≤–∞ –∑ –¥–µ—è–∫–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏")
        return True
    else:
        print("‚ùå –ó–ê–ù–ê–î–¢–û –ë–ê–ì–ê–¢–û –ü–û–ú–ò–õ–û–ö!")
        print("üîß –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        success = run_comprehensive_test()
        
        if success:
            print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
            print(f"1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python main.py")
            print(f"2. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /duel")
            print(f"3. –°—Ç–≤–æ—Ä—ñ—Ç—å –¥—É–µ–ª—å —Ç–∞ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ")
            print(f"4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥: /profile")
            print(f"5. –ü–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ")
            
        else:
            print(f"\nüîß –ù–ï–û–ë–•–Ü–î–ù–Ü –î–Ü–á:")
            print(f"1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
            print(f"2. –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —ñ–º–ø–æ—Ä—Ç—É")
            print(f"3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤")
            print(f"4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç –∑–Ω–æ–≤—É")
        
        return success
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return False
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)