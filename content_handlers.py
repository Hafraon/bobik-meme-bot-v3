#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üß†üòÇüî•
"""

import logging
import random
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.settings import TEXTS, EMOJI, TIME_GREETINGS, settings
from database.database import (
    get_random_joke, get_random_meme, submit_content, 
    update_user_points, get_or_create_user
)
from database.models import ContentType

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
class SubmissionStates(StatesGroup):
    waiting_for_content = State()

async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /meme"""
    await send_meme(message)

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /anekdot"""
    await send_joke(message)

async def send_meme(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É"""
    user_id = message.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É
    meme = await get_random_meme()
    
    if not meme:
        await message.answer(TEXTS["no_content"])
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        greeting = random.choice(TIME_GREETINGS["morning"])
    elif 12 <= current_hour < 18:
        greeting = random.choice(TIME_GREETINGS["day"])
    elif 18 <= current_hour < 23:
        greeting = random.choice(TIME_GREETINGS["evening"])
    else:
        greeting = random.choice(TIME_GREETINGS["night"])
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like_content:{meme.id}"),
            InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike_content:{meme.id}")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –©–µ –º–µ–º", callback_data="get_meme"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
        ]
    ])
    
    caption = f"{greeting}\n\n{meme.text}\n\n{EMOJI['fire']} –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {meme.views}"
    
    try:
        if meme.file_id:
            # –Ø–∫—â–æ —î file_id, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —á–µ—Ä–µ–∑ –Ω—å–æ–≥–æ
            await message.answer_photo(
                photo=meme.file_id,
                caption=caption,
                reply_markup=keyboard
            )
        elif meme.file_url:
            # –Ø–∫—â–æ —î URL, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ —Ñ–æ—Ç–æ
            await message.answer_photo(
                photo=meme.file_url,
                caption=caption,
                reply_markup=keyboard
            )
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ñ–∞–π–ª—É, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —è–∫ —Ç–µ–∫—Å—Ç
            await message.answer(
                f"{caption}\n\n{EMOJI['brain']} {meme.text}",
                reply_markup=keyboard
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–º—É: {e}")
        await message.answer(
            f"{caption}\n\n{EMOJI['brain']} {meme.text}",
            reply_markup=keyboard
        )
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
    await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É")
    
    if not from_callback:
        logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –º–µ–º {meme.id}")

async def send_joke(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    user_id = message.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É
    joke = await get_random_joke()
    
    if not joke:
        await message.answer(TEXTS["no_content"])
        return
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    current_hour = datetime.now().hour
    if 6 <= current_hour < 12:
        greeting = random.choice(TIME_GREETINGS["morning"])
    elif 12 <= current_hour < 18:
        greeting = random.choice(TIME_GREETINGS["day"])
    elif 18 <= current_hour < 23:
        greeting = random.choice(TIME_GREETINGS["evening"])
    else:
        greeting = random.choice(TIME_GREETINGS["night"])
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like_content:{joke.id}"),
            InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike_content:{joke.id}")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –©–µ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ]
    ])
    
    response_text = f"{greeting}\n\n{joke.text}\n\n{EMOJI['fire']} –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {joke.views}"
    
    await message.answer(
        response_text,
        reply_markup=keyboard
    )
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
    await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–µ–∫–¥–æ—Ç—É")
    
    if not from_callback:
        logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç {joke.id}")

async def cmd_submit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /submit –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    text_parts = message.text.split(' ', 1)
    if len(text_parts) > 1:
        # –Ñ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ - —Ü–µ –∞–Ω–µ–∫–¥–æ—Ç
        joke_text = text_parts[1].strip()
        
        if len(joke_text) > settings.MAX_JOKE_LENGTH:
            await message.answer(
                f"{EMOJI['warning']} –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
                f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        # –ü–æ–¥–∞—á–∞ –∞–Ω–µ–∫–¥–æ—Ç—É
        content = await submit_content(
            user_id=user_id,
            content_type=ContentType.JOKE,
            text=joke_text
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
        await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –∞–Ω–µ–∫–¥–æ—Ç—É")
        
        await message.answer(TEXTS["submission_received"])
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            await message.bot.send_message(
                settings.ADMIN_ID,
                f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} "
                f"(@{message.from_user.username or '–±–µ–∑ username'})\n"
                f"{EMOJI['brain']} <b>–¢–µ–∫—Å—Ç:</b>\n{joke_text}\n\n"
                f"–ö–æ–º–∞–Ω–¥–∏: /approve_{content.id} –∞–±–æ /reject_{content.id}"
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")
        
    else:
        # –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É - –∑–∞–ø–∏—Ç—É—î–º–æ —â–æ —Ö–æ—á–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="submit_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="submit_meme")
            ]
        ])
        
        await message.answer(
            f"{EMOJI['fire']} <b>–©–æ —Ö–æ—á–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏?</b>\n\n"
            f"{EMOJI['brain']} <b>–ê–Ω–µ–∫–¥–æ—Ç</b> - —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∂–∞—Ä—Ç\n"
            f"{EMOJI['laugh']} <b>–ú–µ–º</b> - –∫–∞—Ä—Ç–∏–Ω–∫–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º",
            reply_markup=keyboard
        )

async def handle_photo_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ —è–∫ –º–µ–º—É"""
    user_id = message.from_user.id
    
    if not message.photo:
        return
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    
    # –ü—ñ–¥–ø–∏—Å –¥–æ –º–µ–º—É
    caption = message.caption or f"{EMOJI['laugh']} –ú–µ–º –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É"
    
    if len(caption) > settings.MAX_MEME_CAPTION_LENGTH:
        await message.answer(
            f"{EMOJI['warning']} –ü—ñ–¥–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
            f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    # –ü–æ–¥–∞—á–∞ –º–µ–º—É
    content = await submit_content(
        user_id=user_id,
        content_type=ContentType.MEME,
        text=caption,
        file_id=photo.file_id
    )
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
    await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –º–µ–º—É")
    
    await message.answer(TEXTS["submission_received"])
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await message.bot.send_photo(
            settings.ADMIN_ID,
            photo=photo.file_id,
            caption=f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                   f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} "
                   f"(@{message.from_user.username or '–±–µ–∑ username'})\n"
                   f"{EMOJI['laugh']} <b>–ü—ñ–¥–ø–∏—Å:</b> {caption}\n\n"
                   f"–ö–æ–º–∞–Ω–¥–∏: /approve_{content.id} –∞–±–æ /reject_{content.id}"
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_like_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id
    
    # –õ–æ–≥—ñ–∫–∞ –ª–∞–π–∫–∞ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ –≤–∂–µ –ª–∞–π–∫–∞–≤)
    from database.database import get_db_session
    from database.models import Content, Rating
    
    with get_db_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –ª–∞–π–∫–∞–≤ –≤–∂–µ
        existing_rating = session.query(Rating).filter(
            Rating.user_id == user_id,
            Rating.content_id == content_id,
            Rating.action_type == "like"
        ).first()
        
        if existing_rating:
            await callback_query.answer(f"{EMOJI['warning']} –¢–∏ –≤–∂–µ –æ—Ü—ñ–Ω–∏–≤ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
            return
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–∞–π–∫–∞
        content = session.query(Content).filter(Content.id == content_id).first()
        if content:
            content.likes += 1
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –ø—Ä–æ —Ä–µ–π—Ç–∏–Ω–≥
            rating = Rating(
                user_id=user_id,
                content_id=content_id,
                action_type="like",
                points_awarded=settings.POINTS_FOR_REACTION
            )
            session.add(rating)
            session.commit()
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    await update_user_points(user_id, settings.POINTS_FOR_REACTION, "–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    
    await callback_query.answer(f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤")

async def callback_dislike_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_id = int(callback_query.data.split(':')[1])
    user_id = callback_query.from_user.id
    
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞
    from database.database import get_db_session
    from database.models import Content, Rating
    
    with get_db_session() as session:
        existing_rating = session.query(Rating).filter(
            Rating.user_id == user_id,
            Rating.content_id == content_id,
            Rating.action_type == "dislike"
        ).first()
        
        if existing_rating:
            await callback_query.answer(f"{EMOJI['warning']} –¢–∏ –≤–∂–µ –æ—Ü—ñ–Ω–∏–≤ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
            return
        
        content = session.query(Content).filter(Content.id == content_id).first()
        if content:
            content.dislikes += 1
            
            rating = Rating(
                user_id=user_id,
                content_id=content_id,
                action_type="dislike",
                points_awarded=1  # –ú–µ–Ω—à–µ –±–∞–ª—ñ–≤ –∑–∞ –¥–∏–∑–ª–∞–π–∫
            )
            session.add(rating)
            session.commit()
    
    await update_user_points(user_id, 1, "–¥–∏–∑–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! +1 –±–∞–ª")

async def callback_submit_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    await callback_query.message.answer(
        f"{EMOJI['brain']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç!</b>\n\n"
        f"{EMOJI['fire']} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ\n"
        f"{EMOJI['star']} –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ –≤ –Ω—ñ–π –Ω–µ–º–∞—î –±–∞–≥—ñ–≤! {EMOJI['laugh']}"
    )
    await callback_query.answer()

async def callback_submit_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–¥–∞—á—ñ –º–µ–º—É"""
    await callback_query.message.answer(
        f"{EMOJI['laugh']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –º–µ–º!</b>\n\n"
        f"{EMOJI['fire']} –ü—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n"
        f"{EMOJI['star']} –ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø—ñ–¥–ø–∏—Å—ñ\n\n"
        f"{EMOJI['brain']} –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –ø—ñ–¥–ø–∏—Å = –≥–æ—Ç–æ–≤–∏–π –º–µ–º!"
    )
    await callback_query.answer()

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
    dp.message.register(handle_photo_submission, F.photo)
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_like_content, F.data.startswith("like_content:"))
    dp.callback_query.register(callback_dislike_content, F.data.startswith("dislike_content:"))
    dp.callback_query.register(callback_submit_joke, F.data == "submit_joke")
    dp.callback_query.register(callback_submit_meme, F.data == "submit_meme")