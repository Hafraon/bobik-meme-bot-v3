#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üß†üòÇüî•
"""

import logging
import random
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
from settings import settings, EMOJI, TEXTS, TIME_GREETINGS

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
class SubmissionStates(StatesGroup):
    waiting_for_content = State()

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ–∫–∏ –ë–î –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞
SAMPLE_JOKES = [
    "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\n- –ê –¥–µ —Å–∞–º–µ?\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
    "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\n- –ê —â–æ —Ä–æ–±–∏—à?\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ",
    "üòÇ –£—á–∏—Ç–µ–ª—å –∑–∞–ø–∏—Ç—É—î:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†",
    "üî• –ü–æ–∫—É–ø–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ —ñ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ",
    "üß† –î—Ä—É–∂–∏–Ω–∞ —á–æ–ª–æ–≤—ñ–∫–æ–≤—ñ:\n- –õ—é–±–∏–π, —è —Å—Ö—É–¥–ª–∞ –Ω–∞ 5 –∫–≥!\n- –ê –¥–µ –≤–æ–Ω–∏?\n- –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É! üòÇüî•",
    "üòÇ –°–∏–Ω –ø–∏—Ç–∞—î –±–∞—Ç—å–∫–∞:\n- –¢–∞—Ç—É, –∞ —â–æ —Ç–∞–∫–µ –ø–æ–ª—ñ—Ç–∏–∫–∞?\n- –¶–µ –∫–æ–ª–∏ –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π –≥–æ–≤–æ—Ä—è—Ç—å, –∞ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—Ç—å.\n- –ê —â–æ —Ç–∞–∫–µ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è?\n- –¶–µ –∫–æ–ª–∏ –≤—Å—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç–∏, –∞–ª–µ —Å–ª—É—Ö–∞—î —Ç—ñ–ª—å–∫–∏ –º–∞–º–∞! üß†",
    "üî• –õ—ñ–∫–∞—Ä –ø–∞—Ü—ñ—î–Ω—Ç–æ–≤—ñ:\n- –í–∏ –∫—É—Ä–∏?\n- –ù—ñ.\n- –ü'—î—Ç–µ?\n- –ù—ñ.\n- –¢–æ–¥—ñ –∂–∏–≤—ñ—Ç—å —è–∫ —Ö–æ—á–µ—Ç–µ - –≤—Å–µ –æ–¥–Ω–æ –¥–æ–≤–≥–æ –ø—Ä–æ—Ç—è–≥–Ω–µ—Ç–µ! üòÇ",
    "üß† –ó–∞—Ö–æ–¥–∏—Ç—å —á–æ–ª–æ–≤—ñ–∫ –¥–æ –∞–ø—Ç–µ–∫–∏:\n- –î–∞–π—Ç–µ —â–æ—Å—å –≤—ñ–¥ –≥–æ–ª–æ–≤–∏!\n- –ê —â–æ —Å–∞–º–µ –±–æ–ª–∏—Ç—å?\n- –î—Ä—É–∂–∏–Ω–∞! üòÇüî•",
    "üòÇ –†–æ–∑–º–æ–≤–∞ –≤ –æ—Ñ—ñ—Å—ñ:\n- –¢–∏ —á–æ–º—É —Ç–∞–∫–∏–π –≤–µ—Å–µ–ª–∏–π?\n- –ó–∞—Ä–ø–ª–∞—Ç—É –ø—ñ–¥–Ω—è–ª–∏!\n- –ù–∞ —Å–∫—ñ–ª—å–∫–∏?\n- –ù–∞ –¥—Ä—É–≥–∏–π –ø–æ–≤–µ—Ä—Ö! üß†",
    "üî• –°—Ç—É–¥–µ–Ω—Ç –∑–¥–∞—î –µ–∫–∑–∞–º–µ–Ω:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –ù–∞–ø–æ–ª–µ–æ–Ω–∞.\n- –ù–µ –º–æ–∂—É, –º–∏ –Ω–µ –∑–Ω–∞–π–æ–º—ñ –æ—Å–æ–±–∏—Å—Ç–æ.\n- –¢–æ–¥—ñ –ø—Ä–æ –ü—É—à–∫—ñ–Ω–∞.\n- –¢–µ–∂ –Ω–µ –∑–Ω–∞–π–æ–º—ñ.\n- –ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ!\n- –ê –∑ –∫–∏–º –≤–∏ –∑–Ω–∞–π–æ–º—ñ?\n- –ó –≤–∞–º–∏... —ñ —Ç–æ –ø–æ–≥–∞–Ω–æ! üòÇ"
]

SAMPLE_MEMES = [
    {
        "caption": "üß† –ö–æ–ª–∏ –Ω–∞—Ä–µ—à—Ç—ñ –∑—Ä–æ–∑—É–º—ñ–≤ —è–∫ –ø—Ä–∞—Ü—é—î async/await üòÇ",
        "description": "–ú–µ–º –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    },
    {
        "caption": "üî• –ù–∞—Å—Ç—Ä—ñ–π –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ vs –Ω–∞—Å—Ç—Ä—ñ–π –ø'—è—Ç–Ω–∏—Ü—ñ üòÇ",
        "description": "–ú–µ–º –ø—Ä–æ —Ä–æ–±–æ—á–∏–π —Ç–∏–∂–¥–µ–Ω—å"
    },
    {
        "caption": "üß† –ö–æ–ª–∏ –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É üòÇüî•",
        "description": "–ú–µ–º –ø—Ä–æ —á—É–¥–µ—Å–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    },
    {
        "caption": "üòÇ –ö–æ–ª–∏ –ø–æ–±–∞—á–∏–≤ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—ñ—Å–ª—è –ø–æ–¥–∞—Ç–∫—ñ–≤ ü§î",
        "description": "–ú–µ–º –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É"
    },
    {
        "caption": "üî• –£–∫—Ä–∞—ó–Ω–µ—Ü—å –ø—ñ–¥ —á–∞—Å –±–ª–µ–∫–∞—É—Ç—É: '–ê —É –Ω–∞—Å —Å–≤—ñ—Ç–ª–æ —î!' üòé",
        "description": "–ú–µ–º –ø—Ä–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å—Ç—ñ–π–∫—ñ—Å—Ç—å"
    }
]

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /anekdot"""
    await send_joke(message)

async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /meme"""
    await send_meme(message)

async def send_joke(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    user_id = message.from_user.id
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î
        try:
            from database import get_random_joke
            joke_obj = await get_random_joke()
            if joke_obj:
                joke_text = joke_obj.text
            else:
                # –Ø–∫—â–æ –ë–î –ø–æ—Ä–æ–∂–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
                joke_text = random.choice(SAMPLE_JOKES)
        except:
            # –Ø–∫—â–æ –ë–î –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
            joke_text = random.choice(SAMPLE_JOKES)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
        current_hour = datetime.now().hour
        if 6 <= current_hour < 12:
            greeting = random.choice(TIME_GREETINGS["morning"])
        elif 12 <= current_hour < 18:
            greeting = random.choice(TIME_GREETINGS["day"])
        elif 18 <= current_hour < 23:
            greeting = random.choice(TIME_GREETINGS["evening"])
        else:
            greeting = random.choice(TIME_GREETINGS["night"])
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data="like_joke"),
                InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data="dislike_joke")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –©–µ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_joke")
            ]
        ])
        
        response_text = f"{greeting}\n\n{joke_text}\n\n{EMOJI['star']} –°–ø–æ–¥–æ–±–∞–≤—Å—è –∞–Ω–µ–∫–¥–æ—Ç? –û—Ü—ñ–Ω–∏!"
        
        await message.answer(
            response_text,
            reply_markup=keyboard
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ (—è–∫—â–æ –ë–î –ø—Ä–∞—Ü—é—î)
        try:
            from database import update_user_points
            await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–µ–∫–¥–æ—Ç—É")
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
        
        if not from_callback:
            logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É: {e}")
        await message.answer(f"{EMOJI['cross']} –£–ø—Å! –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

async def send_meme(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É"""
    user_id = message.from_user.id
    
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î
        try:
            from database import get_random_meme
            meme_obj = await get_random_meme()
            if meme_obj:
                meme_data = {"caption": meme_obj.text, "description": "–ú–µ–º –∑ –±–∞–∑–∏"}
            else:
                # –Ø–∫—â–æ –ë–î –ø–æ—Ä–æ–∂–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
                meme_data = random.choice(SAMPLE_MEMES)
        except:
            # –Ø–∫—â–æ –ë–î –Ω–µ –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑—Ä–∞–∑–∫–∏
            meme_data = random.choice(SAMPLE_MEMES)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        current_hour = datetime.now().hour
        if 6 <= current_hour < 12:
            greeting = random.choice(TIME_GREETINGS["morning"])
        elif 12 <= current_hour < 18:
            greeting = random.choice(TIME_GREETINGS["day"])
        elif 18 <= current_hour < 23:
            greeting = random.choice(TIME_GREETINGS["evening"])
        else:
            greeting = random.choice(TIME_GREETINGS["night"])
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data="like_meme"),
                InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data="dislike_meme")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –©–µ –º–µ–º", callback_data="get_meme"),
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_meme")
            ]
        ])
        
        response_text = f"{greeting}\n\n{meme_data['caption']}\n\n{EMOJI['star']} –°–ø–æ–¥–æ–±–∞–≤—Å—è –º–µ–º? –û—Ü—ñ–Ω–∏!"
        
        await message.answer(
            response_text,
            reply_markup=keyboard
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ (—è–∫—â–æ –ë–î –ø—Ä–∞—Ü—é—î)
        try:
            from database import update_user_points
            await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É")
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
        
        if not from_callback:
            logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –º–µ–º")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–º—É: {e}")
        await message.answer(f"{EMOJI['cross']} –£–ø—Å! –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

async def cmd_submit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /submit –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    text_parts = message.text.split(' ', 1)
    if len(text_parts) > 1:
        # –Ñ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ - —Ü–µ –∞–Ω–µ–∫–¥–æ—Ç
        joke_text = text_parts[1].strip()
        
        if len(joke_text) > settings.MAX_JOKE_LENGTH:
            await message.answer(
                f"{EMOJI['warning']} –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
                f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        # –¢–∏–º—á–∞—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ (–ø–æ–∫–∏ –ë–î –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞)
        try:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.bot.send_message(
                settings.ADMIN_ID,
                f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç!</b>\n\n"
                f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} "
                f"(@{message.from_user.username or '–±–µ–∑ username'})\n"
                f"{EMOJI['brain']} <b>–¢–µ–∫—Å—Ç:</b>\n{joke_text}\n\n"
                f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}"
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        
        await message.answer(
            f"{EMOJI['check']} <b>–î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç!</b>\n\n"
            f"{EMOJI['brain']} –í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
            f"{EMOJI['fire']} –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤\n"
            f"{EMOJI['time']} –û—á—ñ–∫—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
        )
        
        logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∞–Ω–µ–∫–¥–æ—Ç")
        
    else:
        # –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç—É - –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="how_submit_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º", callback_data="how_submit_meme")
            ]
        ])
        
        await message.answer(
            f"{EMOJI['fire']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç!</b>\n\n"
            f"{EMOJI['brain']} <b>–ê–Ω–µ–∫–¥–æ—Ç:</b> /submit –¢–≤—ñ–π —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n"
            f"{EMOJI['laugh']} <b>–ú–µ–º:</b> –ù–∞–¥—ñ—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n\n"
            f"{EMOJI['star']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è! {EMOJI['brain']}</code>",
            reply_markup=keyboard
        )

async def handle_photo_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ —Ñ–æ—Ç–æ —è–∫ –º–µ–º—É"""
    user_id = message.from_user.id
    
    if not message.photo:
        return
    
    # –ü—ñ–¥–ø–∏—Å –¥–æ –º–µ–º—É
    caption = message.caption or f"{EMOJI['laugh']} –ú–µ–º –±–µ–∑ –ø—ñ–¥–ø–∏—Å—É"
    
    if len(caption) > settings.MAX_MEME_CAPTION_LENGTH:
        await message.answer(
            f"{EMOJI['warning']} –ü—ñ–¥–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! "
            f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    try:
        await message.bot.send_photo(
            settings.ADMIN_ID,
            photo=message.photo[-1].file_id,
            caption=f"{EMOJI['new']} <b>–ù–æ–≤–∏–π –º–µ–º!</b>\n\n"
                   f"{EMOJI['profile']} <b>–í—ñ–¥:</b> {message.from_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} "
                   f"(@{message.from_user.username or '–±–µ–∑ username'})\n"
                   f"{EMOJI['laugh']} <b>–ü—ñ–¥–ø–∏—Å:</b> {caption}\n\n"
                   f"ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}"
        )
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    await message.answer(
        f"{EMOJI['check']} <b>–î—è–∫—É—é –∑–∞ —Ç–≤—ñ–π –º–µ–º!</b>\n\n"
        f"{EMOJI['laugh']} –í—ñ–Ω –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        f"{EMOJI['fire']} –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤\n"
        f"{EMOJI['time']} –û—á—ñ–∫—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    )
    
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –º–µ–º")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_get_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É"""
    await send_joke(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_get_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
    await send_meme(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_like_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = callback_query.from_user.id
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
    try:
        from database import update_user_points
        await update_user_points(user_id, settings.POINTS_FOR_REACTION, "–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    except:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
    
    await callback_query.answer(f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤")

async def callback_dislike_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = callback_query.from_user.id
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
    try:
        from database import update_user_points
        await update_user_points(user_id, 1, "–¥–∏–∑–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    except:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
    
    await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! +1 –±–∞–ª")

async def callback_submit_instructions(callback_query: CallbackQuery):
    """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –ø–æ–¥–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_type = "–∞–Ω–µ–∫–¥–æ—Ç" if "joke" in callback_query.data else "–º–µ–º"
    
    if "joke" in callback_query.data:
        instructions = (
            f"{EMOJI['brain']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç:</b>\n\n"
            f"1. –ù–∞–ø–∏—à–∏ <code>/submit</code> —ñ –æ–¥—Ä–∞–∑—É —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n"
            f"2. –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            f"3. –ê–Ω–µ–∫–¥–æ—Ç –º–∞—î –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            f"4. –ë–µ–∑ –º–∞—Ç—É —Ç–∞ –æ–±—Ä–∞–∑\n\n"
            f"{EMOJI['star']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ –≤ –Ω—ñ–π –Ω–µ–º–∞—î –±–∞–≥—ñ–≤! {EMOJI['laugh']}</code>"
        )
    else:
        instructions = (
            f"{EMOJI['laugh']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º:</b>\n\n"
            f"1. –ü—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            f"2. –î–æ–¥–∞–π –ø—ñ–¥–ø–∏—Å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
            f"3. –ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø—ñ–¥–ø–∏—Å—ñ\n"
            f"4. –ú–µ–º –º–∞—î –±—É—Ç–∏ —Å–º—ñ—à–Ω–∏–º —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞–º\n\n"
            f"{EMOJI['star']} <b>–ü—ñ–¥–ø–∏—Å - –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!</b>"
        )
    
    await callback_query.message.edit_text(instructions)
    await callback_query.answer()

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
    dp.message.register(handle_photo_submission, F.photo)
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_get_joke, F.data == "get_joke")
    dp.callback_query.register(callback_get_meme, F.data == "get_meme")
    dp.callback_query.register(callback_like_content, F.data.in_(["like_joke", "like_meme"]))
    dp.callback_query.register(callback_dislike_content, F.data.in_(["dislike_joke", "dislike_meme"]))
    dp.callback_query.register(callback_submit_instructions, F.data.in_(["how_submit_joke", "how_submit_meme"]))
    dp.callback_query.register(callback_submit_instructions, F.data.in_(["submit_joke", "submit_meme"]))