#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –¥—É–µ–ª–µ–π –∂–∞—Ä—Ç—ñ–≤ üß†üòÇüî•
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from config.settings import EMOJI, settings
from database.database import get_db_session, update_user_points, get_random_joke
from database.models import (
    User, Duel, DuelVote, Content, DuelStatus, ContentType, ContentStatus
)

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –¥—É–µ–ª–µ–π
class DuelStates(StatesGroup):
    waiting_for_joke = State()

async def cmd_duel(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /duel - –ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—É–µ–ª—ñ
    with get_db_session() as session:
        active_duel = session.query(Duel).filter(
            (Duel.initiator_id == user_id) | (Duel.opponent_id == user_id),
            Duel.status == DuelStatus.ACTIVE
        ).first()
        
        if active_duel:
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥—É–µ–ª—å
            await show_active_duel(message, active_duel)
            return
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥—É–µ–ª—ñ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['brain']} –î—É–µ–ª—å –∑ –º–æ—ó–º –∂–∞—Ä—Ç–æ–º",
                callback_data="duel_with_my_joke"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –î—É–µ–ª—å –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –∂–∞—Ä—Ç–æ–º",
                callback_data="duel_with_random_joke"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['thinking']} –Ø–∫ –ø—Ä–∞—Ü—é—î –¥—É–µ–ª—å?",
                callback_data="duel_info"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['stats']} –Ü—Å—Ç–æ—Ä—ñ—è –¥—É–µ–ª–µ–π",
                callback_data="duel_history"
            )
        ]
    ])
    
    await message.answer(
        f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –ñ–ê–†–¢–Ü–í!</b>\n\n"
        f"{EMOJI['fire']} –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –¥—É–µ–ª—ñ:\n\n"
        f"{EMOJI['brain']} <b>–ó –º–æ—ó–º –∂–∞—Ä—Ç–æ–º</b> - –Ω–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç\n"
        f"{EMOJI['laugh']} <b>–ó –≤–∏–ø–∞–¥–∫–æ–≤–∏–º</b> - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∂–∞—Ä—Ç –∑ –±–∞–∑–∏\n\n"
        f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤!</b>\n"
        f"{EMOJI['vs']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞—î {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω</b>",
        reply_markup=keyboard
    )

async def show_active_duel(message: Message, duel: Duel):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—É–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    with get_db_session() as session:
        initiator_content = session.query(Content).filter(Content.id == duel.initiator_content_id).first()
        opponent_content = session.query(Content).filter(Content.id == duel.opponent_content_id).first()
        
        initiator = session.query(User).filter(User.id == duel.initiator_id).first()
        opponent = session.query(User).filter(User.id == duel.opponent_id).first() if duel.opponent_id else None
        
        time_left = (duel.voting_ends_at - datetime.utcnow()).total_seconds()
        time_left_minutes = max(0, int(time_left // 60))
        
        duel_text = (
            f"{EMOJI['vs']} <b>–¢–í–û–Ø –ê–ö–¢–ò–í–ù–ê –î–£–ï–õ–¨ #{duel.id}</b>\n\n"
            f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê</b> –≤—ñ–¥ {initiator.first_name if initiator else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}:\n"
            f"{initiator_content.text if initiator_content else '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}\n\n"
            f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë</b> –≤—ñ–¥ {opponent.first_name if opponent else '–ë–æ—Ç'}:\n"
            f"{opponent_content.text if opponent_content else '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}\n\n"
            f"{EMOJI['fire']} –ì–æ–ª–æ—Å—ñ–≤ –∑–∞ –ê: {duel.initiator_votes}\n"
            f"{EMOJI['brain']} –ì–æ–ª–æ—Å—ñ–≤ –∑–∞ –ë: {duel.opponent_votes}\n"
            f"{EMOJI['time']} –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left_minutes} —Ö–≤–∏–ª–∏–Ω"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({duel.initiator_votes})",
                    callback_data=f"vote_duel:{duel.id}:initiator"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({duel.opponent_votes})",
                    callback_data=f"vote_duel:{duel.id}:opponent"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['stats']} –û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    callback_data=f"duel_results:{duel.id}"
                )
            ]
        ])
        
        await message.answer(duel_text, reply_markup=keyboard)

async def create_duel_with_content(user_id: int, content: Content, bot) -> Duel:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    with get_db_session() as session:
        # –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ–ø–æ–Ω–µ–Ω—Ç–∞ (–≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∞–Ω–µ–∫–¥–æ—Ç)
        opponent_content = await get_random_joke()
        
        if not opponent_content:
            raise Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥—É–µ–ª—ñ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel = Duel(
            initiator_id=user_id,
            initiator_content_id=content.id,
            opponent_content_id=opponent_content.id,
            opponent_id=opponent_content.author_id,
            voting_ends_at=datetime.utcnow() + timedelta(seconds=settings.DUEL_VOTING_TIME),
            status=DuelStatus.ACTIVE
        )
        session.add(duel)
        session.commit()
        
        logger.info(f"üî• –°—Ç–≤–æ—Ä–µ–Ω–æ –¥—É–µ–ª—å {duel.id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return duel

async def start_duel_voting(duel: Duel, bot, initiator_message: Message):
    """–ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ –∑ —Ä–æ–∑—Å–∏–ª–∫–æ—é —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    with get_db_session() as session:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
        initiator_content = session.query(Content).filter(Content.id == duel.initiator_content_id).first()
        opponent_content = session.query(Content).filter(Content.id == duel.opponent_content_id).first()
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        initiator = session.query(User).filter(User.id == duel.initiator_id).first()
        opponent = session.query(User).filter(User.id == duel.opponent_id).first()
        
        if not (initiator_content and opponent_content):
            logger.error(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥—É–µ–ª—ñ {duel.id}")
            return
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({duel.initiator_votes})",
                    callback_data=f"vote_duel:{duel.id}:initiator"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({duel.opponent_votes})",
                    callback_data=f"vote_duel:{duel.id}:opponent"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    callback_data=f"duel_results:{duel.id}"
                )
            ]
        ])
        
        duel_text = (
            f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –ñ–ê–†–¢–Ü–í #{duel.id}</b>\n\n"
            f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê</b> –≤—ñ–¥ {initiator.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}:\n"
            f"{initiator_content.text}\n\n"
            f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë</b> –≤—ñ–¥ {opponent.first_name or '–ë–æ—Ç'}:\n"
            f"{opponent_content.text}\n\n"
            f"{EMOJI['time']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω</b>\n"
            f"{EMOJI['trophy']} –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤!\n"
            f"{EMOJI['like']} –ö–æ–∂–µ–Ω –≥–æ–ª–æ—Å: +2 –±–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫—É"
        )
        
        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä—É
        try:
            await initiator_message.answer(
                f"{EMOJI['vs']} <b>–¢–≤–æ—è –¥—É–µ–ª—å –ø–æ—á–∞–ª–∞—Å—è!</b>\n\n{duel_text}",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–∞: {e}")
        
        # –†–æ–∑—Å–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏)
        active_users = session.query(User).filter(
            User.last_active >= datetime.utcnow() - timedelta(days=1),
            User.id != duel.initiator_id,
            User.id != duel.opponent_id
        ).limit(20).all()  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Å–ø–∞–º—É
        
        notification_count = 0
        for user in active_users:
            try:
                await bot.send_message(
                    user.id,
                    f"{EMOJI['vs']} <b>–ù–æ–≤–∞ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤!</b>\n\n{duel_text}",
                    reply_markup=keyboard
                )
                notification_count += 1
                await asyncio.sleep(0.1)  # –ü–∞—É–∑–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limit
            except Exception as e:
                logger.debug(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.id}: {e}")
                continue
        
        logger.info(f"üì¢ –î—É–µ–ª—å {duel.id} —Ä–æ–∑—ñ—Å–ª–∞–Ω–æ {notification_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")

async def vote_in_duel(duel_id: int, voter_id: int, vote_for: str) -> dict:
    """–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ –∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞–ª—ñ–≤"""
    with get_db_session() as session:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –¥—É–µ–ª—å
        duel = session.query(Duel).filter(
            Duel.id == duel_id,
            Duel.status == DuelStatus.ACTIVE
        ).first()
        
        if not duel:
            return {"success": False, "message": "–î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        if datetime.utcnow() > duel.voting_ends_at:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—É–µ–ª—å
            await finish_duel(duel_id)
            return {"success": False, "message": "–ß–∞—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ"}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –≤–∂–µ
        existing_vote = session.query(DuelVote).filter(
            DuelVote.duel_id == duel_id,
            DuelVote.voter_id == voter_id
        ).first()
        
        if existing_vote:
            return {"success": False, "message": "–¢–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ —É —Ü—ñ–π –¥—É–µ–ª—ñ"}
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ —É—á–∞—Å–Ω–∏–∫ –¥—É–µ–ª—ñ
        if voter_id in [duel.initiator_id, duel.opponent_id]:
            return {"success": False, "message": "–£—á–∞—Å–Ω–∏–∫–∏ –¥—É–µ–ª—ñ –Ω–µ –º–æ–∂—É—Ç—å –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏"}
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
        vote = DuelVote(
            duel_id=duel_id,
            voter_id=voter_id,
            vote_for=vote_for
        )
        session.add(vote)
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
        if vote_for == "initiator":
            duel.initiator_votes += 1
        else:
            duel.opponent_votes += 1
        
        duel.total_votes += 1
        session.commit()
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        await update_user_points(voter_id, 2, "–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ")
        
        return {
            "success": True,
            "message": f"–ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! +2 –±–∞–ª–∏",
            "initiator_votes": duel.initiator_votes,
            "opponent_votes": duel.opponent_votes
        }

async def finish_duel(duel_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ —Ç–∞ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
    with get_db_session() as session:
        duel = session.query(Duel).filter(Duel.id == duel_id).first()
        
        if not duel or duel.status != DuelStatus.ACTIVE:
            return None
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
        if duel.initiator_votes > duel.opponent_votes:
            winner_id = duel.initiator_id
            winner_name = "–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä"
        elif duel.opponent_votes > duel.initiator_votes:
            winner_id = duel.opponent_id if duel.opponent_id else None
            winner_name = "–û–ø–æ–Ω–µ–Ω—Ç"
        else:
            winner_id = None
            winner_name = "–ù—ñ—á–∏—è"
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel.status = DuelStatus.COMPLETED
        duel.winner_id = winner_id
        duel.completed_at = datetime.utcnow()
        
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤
        initiator = session.query(User).filter(User.id == duel.initiator_id).first()
        if initiator:
            if winner_id == duel.initiator_id:
                initiator.duels_won += 1
                await update_user_points(duel.initiator_id, settings.POINTS_FOR_DUEL_WIN, "–ø–µ—Ä–µ–º–æ–≥–∞ –≤ –¥—É–µ–ª—ñ")
            else:
                initiator.duels_lost += 1
        
        if duel.opponent_id:
            opponent = session.query(User).filter(User.id == duel.opponent_id).first()
            if opponent:
                if winner_id == duel.opponent_id:
                    opponent.duels_won += 1
                    await update_user_points(duel.opponent_id, settings.POINTS_FOR_DUEL_WIN, "–ø–µ—Ä–µ–º–æ–≥–∞ –≤ –¥—É–µ–ª—ñ")
                else:
                    opponent.duels_lost += 1
        
        session.commit()
        
        logger.info(f"üèÜ –î—É–µ–ª—å {duel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {winner_name}")
        
        return {
            "winner_id": winner_id,
            "winner_name": winner_name,
            "initiator_votes": duel.initiator_votes,
            "opponent_votes": duel.opponent_votes,
            "total_votes": duel.total_votes
        }

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_duel_info(callback_query: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—É–µ–ª—ñ"""
    info_text = (
        f"{EMOJI['vs']} <b>–Ø–ö –ü–†–ê–¶–Æ–Æ–¢–¨ –î–£–ï–õ–Ü:</b>\n\n"
        f"{EMOJI['fire']} <b>1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ</b>\n"
        f"‚Ä¢ –û–±–µ—Ä–∏ —Å–≤—ñ–π –∂–∞—Ä—Ç –∞–±–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–π–¥–µ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –∑ –±–∞–∑–∏\n\n"
        f"{EMOJI['brain']} <b>2. –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è</b>\n"
        f"‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω\n"
        f"‚Ä¢ –ì–æ–ª–æ—Å—É—é—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
        f"‚Ä¢ –£—á–∞—Å–Ω–∏–∫–∏ –¥—É–µ–ª—ñ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç—å\n\n"
        f"{EMOJI['trophy']} <b>3. –ù–∞–≥–æ—Ä–æ–¥–∏</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤\n"
        f"‚Ä¢ –ö–æ–∂–µ–Ω –≥–æ–ª–æ—Å: +2 –±–∞–ª–∏\n"
        f"‚Ä¢ –ú—ñ–Ω—ñ–º—É–º {settings.MIN_VOTES_FOR_DUEL} –≥–æ–ª–æ—Å—ñ–≤ –¥–ª—è –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ\n\n"
        f"{EMOJI['star']} <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –±–∞—Ç–ª—É?</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å!",
                callback_data="start_new_duel"
            )
        ]
    ])
    
    await callback_query.message.edit_text(info_text, reply_markup=keyboard)
    await callback_query.answer()

async def callback_duel_with_my_joke(callback_query: CallbackQuery, state: FSMContext):
    """–î—É–µ–ª—å –∑ –≤–ª–∞—Å–Ω–∏–º –∂–∞—Ä—Ç–æ–º"""
    await callback_query.message.edit_text(
        f"{EMOJI['brain']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –¥—É–µ–ª—ñ!</b>\n\n"
        f"{EMOJI['fire']} –ù–∞–ø–∏—à–∏ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['star']} –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"{EMOJI['time']} –ß–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 2 —Ö–≤–∏–ª–∏–Ω–∏\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è!"
    )
    
    await state.set_state(DuelStates.waiting_for_joke)
    await callback_query.answer()

async def callback_duel_with_random_joke(callback_query: CallbackQuery):
    """–î—É–µ–ª—å –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –∂–∞—Ä—Ç–æ–º"""
    user_id = callback_query.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É
    random_joke = await get_random_joke()
    
    if not random_joke:
        await callback_query.message.edit_text(
            f"{EMOJI['cross']} <b>–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–∞—Ä—Ç—ñ–≤ –¥–ª—è –¥—É–µ–ª—ñ!</b>\n\n"
            f"{EMOJI['thinking']} –ë–∞–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ—Ä–æ–∂–Ω—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!"
        )
        await callback_query.answer()
        return
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel = await create_duel_with_content(user_id, random_joke, callback_query.bot)
        
        # –ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        await start_duel_voting(duel, callback_query.bot, callback_query.message)
        
        await callback_query.answer(f"{EMOJI['check']} –î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        await callback_query.message.edit_text(
            f"{EMOJI['cross']} <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ!</b>\n\n"
            f"{EMOJI['thinking']} –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
        )
        await callback_query.answer()

async def handle_duel_joke_submission(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∂–∞—Ä—Ç—É –¥–ª—è –¥—É–µ–ª—ñ"""
    user_id = message.from_user.id
    joke_text = message.text.strip()
    
    if len(joke_text) > settings.MAX_JOKE_LENGTH:
        await message.answer(
            f"{EMOJI['warning']} –ñ–∞—Ä—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π!\n"
            f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥—É–µ–ª—ñ
    with get_db_session() as session:
        temp_content = Content(
            content_type=ContentType.JOKE,
            text=joke_text,
            author_id=user_id,
            status=ContentStatus.APPROVED  # –î–ª—è –¥—É–µ–ª—ñ –æ–¥—Ä–∞–∑—É —Å—Ö–≤–∞–ª—é—î–º–æ
        )
        session.add(temp_content)
        session.commit()
        
        content_id = temp_content.id
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel = await create_duel_with_content(user_id, temp_content, message.bot)
        
        # –ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        await start_duel_voting(duel, message.bot, message)
        
        await message.answer(
            f"{EMOJI['check']} <b>–î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n"
            f"{EMOJI['fire']} –¢–≤—ñ–π –∂–∞—Ä—Ç:\n{joke_text}\n\n"
            f"{EMOJI['vs']} –ü–æ—á–∞—Ç–æ–∫ –±–∞—Ç–ª—É!\n"
            f"{EMOJI['time']} –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞—î {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        await message.answer(
            f"{EMOJI['cross']} <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å!</b>\n\n"
            f"{EMOJI['thinking']} –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
        )
    
    await state.clear()

async def callback_vote_duel(callback_query: CallbackQuery):
    """–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    data_parts = callback_query.data.split(':')
    duel_id = int(data_parts[1])
    vote_for = data_parts[2]
    
    result = await vote_in_duel(duel_id, callback_query.from_user.id, vote_for)
    
    if result["success"]:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({result['initiator_votes']})",
                    callback_data=f"vote_duel:{duel_id}:initiator"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({result['opponent_votes']})",
                    callback_data=f"vote_duel:{duel_id}:opponent"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    callback_data=f"duel_results:{duel_id}"
                )
            ]
        ])
        
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    
    await callback_query.answer(result["message"])

async def callback_duel_results(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥—É–µ–ª—ñ"""
    duel_id = int(callback_query.data.split(':')[1])
    
    with get_db_session() as session:
        duel = session.query(Duel).filter(Duel.id == duel_id).first()
        
        if not duel:
            await callback_query.answer("‚ùå –î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
        
        results_text = (
            f"{EMOJI['stats']} <b>–†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–£–ï–õ–Ü #{duel_id}</b>\n\n"
            f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê:</b> {duel.initiator_votes} –≥–æ–ª–æ—Å—ñ–≤\n"
            f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë:</b> {duel.opponent_votes} –≥–æ–ª–æ—Å—ñ–≤\n"
            f"{EMOJI['vs']} <b>–í—Å—å–æ–≥–æ –≥–æ–ª–æ—Å—ñ–≤:</b> {duel.total_votes}\n\n"
        )
        
        if duel.status == DuelStatus.COMPLETED:
            if duel.winner_id == duel.initiator_id:
                results_text += f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å:</b> –ñ–∞—Ä—Ç –ê!"
            elif duel.winner_id == duel.opponent_id:
                results_text += f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å:</b> –ñ–∞—Ä—Ç –ë!"
            else:
                results_text += f"{EMOJI['thinking']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> –ù—ñ—á–∏—è!"
        else:
            time_left = (duel.voting_ends_at - datetime.utcnow()).total_seconds()
            if time_left > 0:
                results_text += f"{EMOJI['time']} <b>–ó–∞–ª–∏—à–∏–ª–æ—Å—å:</b> {int(time_left // 60)} —Ö–≤ {int(time_left % 60)} —Å–µ–∫"
            else:
                results_text += f"{EMOJI['time']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–µ</b>"
    
    await callback_query.answer(results_text, show_alert=True)

async def callback_start_new_duel(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó –¥—É–µ–ª—ñ"""
    await callback_query.message.answer(
        f"{EMOJI['vs']} <b>–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥—É–µ–ª—å!</b>\n\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /duel –¥–ª—è –ø–æ—á–∞—Ç–∫—É"
    )
    await callback_query.answer()

def register_duel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥—É–µ–ª–µ–π"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_duel, Command("duel"))
    
    # FSM —Ö–µ–Ω–¥–ª–µ—Ä–∏
    dp.message.register(handle_duel_joke_submission, DuelStates.waiting_for_joke)
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_duel_info, F.data == "duel_info")
    dp.callback_query.register(callback_duel_with_my_joke, F.data == "duel_with_my_joke")
    dp.callback_query.register(callback_duel_with_random_joke, F.data == "duel_with_random_joke")
    dp.callback_query.register(callback_vote_duel, F.data.startswith("vote_duel:"))
    dp.callback_query.register(callback_duel_results, F.data.startswith("duel_results:"))
    dp.callback_query.register(callback_start_new_duel, F.data == "start_new_duel")