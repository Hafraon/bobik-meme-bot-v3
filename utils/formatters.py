#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ üß†üòÇüî•
"""

import html
import logging
from typing import Any, Dict, List, Optional
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class SafeFormatter:
    """–ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è Telegram"""
    
    @staticmethod
    def escape_html(text: str) -> str:
        """–ï–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è HTML —Å–∏–º–≤–æ–ª—ñ–≤"""
        if not text:
            return "–ù–µ–≤—ñ–¥–æ–º–æ"
        return html.escape(str(text))
    
    @staticmethod
    def format_user_name(first_name: str, username: str = None) -> str:
        """–ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        name = SafeFormatter.escape_html(first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π")
        if username:
            return f"{name} (@{SafeFormatter.escape_html(username)})"
        return name
    
    @staticmethod
    def format_number(number: int) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –∑ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–º–∏ –∫–æ–º–∞–º–∏"""
        return f"{number:,}".replace(",", " ")
    
    @staticmethod
    def format_percentage(value: float, total: float) -> str:
        """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫—ñ–≤"""
        if total == 0:
            return "0%"
        percentage = (value / total) * 100
        return f"{percentage:.1f}%"
    
    @staticmethod
    def format_content_preview(text: str, max_length: int = 100) -> str:
        """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        if not text:
            return "–ë–µ–∑ —Ç–µ–∫—Å—Ç—É"
        
        safe_text = SafeFormatter.escape_html(text)
        if len(safe_text) > max_length:
            return safe_text[:max_length] + "..."
        return safe_text
    
    @staticmethod
    def format_rank_emoji(rank: str) -> str:
        """–ï–º–æ–¥–∑—ñ –¥–ª—è —Ä–∞–Ω–≥—ñ–≤"""
        rank_emojis = {
            "–ù–æ–≤–∞—á–æ–∫": "ü§°",
            "–°–º—ñ—Ö—É–Ω": "üòÑ", 
            "–ì—É–º–æ—Ä–∏—Å—Ç": "üòÇ",
            "–ö–æ–º—ñ–∫": "üé≠",
            "–ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É": "üëë",
            "–ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É": "üèÜ",
            "–õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤": "üåü",
            "–ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π": "üöÄ"
        }
        return rank_emojis.get(rank, "ü§î")
    
    @staticmethod
    def format_date_relative(date: datetime) -> str:
        """–í—ñ–¥–Ω–æ—Å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏"""
        if not date:
            return "–ù–µ–≤—ñ–¥–æ–º–æ"
        
        now = datetime.utcnow()
        diff = now - date
        
        if diff.days == 0:
            if diff.seconds < 3600:
                return f"{diff.seconds // 60} —Ö–≤ —Ç–æ–º—É"
            else:
                return f"{diff.seconds // 3600} –≥–æ–¥ —Ç–æ–º—É"
        elif diff.days == 1:
            return "–í—á–æ—Ä–∞"
        elif diff.days < 7:
            return f"{diff.days} –¥–Ω —Ç–æ–º—É"
        else:
            return date.strftime("%d.%m.%Y")

class StatsFormatter:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö"""
    
    @staticmethod
    def format_basic_stats(stats: Dict[str, int]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return (
            f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {SafeFormatter.format_number(stats.get('total_users', 0))}\n"
            f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {SafeFormatter.format_number(stats.get('total_content', 0))}\n"
            f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {SafeFormatter.format_number(stats.get('pending_content', 0))}\n"
            f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ: {SafeFormatter.format_number(stats.get('approved_content', 0))}\n"
            f"üíñ –û—Ü—ñ–Ω–æ–∫ —Å—å–æ–≥–æ–¥–Ω—ñ: {SafeFormatter.format_number(stats.get('today_ratings', 0))}\n"
            f"‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {SafeFormatter.format_number(stats.get('active_duels', 0))}"
        )
    
    @staticmethod
    def format_top_users(users: List[Dict[str, Any]], show_count: int = 10) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        if not users:
            return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
        
        text = "üèÜ <b>–¢–û–ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü:</b>\n\n"
        
        for i, user in enumerate(users[:show_count], 1):
            rank_emoji = SafeFormatter.format_rank_emoji(user.get('rank', ''))
            name = SafeFormatter.escape_html(user.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π'))
            points = SafeFormatter.format_number(user.get('points', 0))
            
            text += f"{i}. {rank_emoji} {name}: {points} –±–∞–ª—ñ–≤\n"
        
        return text
    
    @staticmethod
    def format_content_analytics(analytics: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        status_dist = analytics.get('status_distribution', {})
        
        text = "üìä <b>–ê–ù–ê–õ–Ü–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£:</b>\n\n"
        
        # –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö
        total_content = sum(status_dist.values())
        if total_content > 0:
            text += "üìà <b>–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Å—Ç–∞—Ç—É—Å–∞—Ö:</b>\n"
            for status, count in status_dist.items():
                percentage = SafeFormatter.format_percentage(count, total_content)
                text += f"‚Ä¢ {status}: {count} ({percentage})\n"
            text += "\n"
        
        # –¢–û–ü –∫–æ–Ω—Ç–µ–Ω—Ç
        top_content = analytics.get('top_content', [])
        if top_content:
            text += "üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
            for i, content in enumerate(top_content[:5], 1):
                preview = SafeFormatter.format_content_preview(content.get('text', ''), 50)
                views = SafeFormatter.format_number(content.get('views', 0))
                likes = content.get('likes', 0)
                dislikes = content.get('dislikes', 0)
                
                text += f"{i}. {preview}\n"
                text += f"   üëÄ {views} | üëç {likes} | üëé {dislikes}\n\n"
        
        return text
    
    @staticmethod
    def format_trending_content(trending: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        if not trending:
            return "üî• –ü–æ–∫–∏ –Ω–µ–º–∞—î —Ç—Ä–µ–Ω–¥–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"
        
        text = "üî• <b>–¢–†–ï–ù–î–û–í–ò–ô –ö–û–ù–¢–ï–ù–¢:</b>\n\n"
        
        for i, item in enumerate(trending[:10], 1):
            preview = SafeFormatter.format_content_preview(item.get('text', ''), 80)
            score = SafeFormatter.format_number(item.get('trend_score', 0))
            author = SafeFormatter.escape_html(item.get('author', '–ù–µ–≤—ñ–¥–æ–º–∏–π'))
            created = item.get('created', '–ù–µ–≤—ñ–¥–æ–º–æ')
            
            text += f"{i}. {preview}\n"
            text += f"   üöÄ –¢—Ä–µ–Ω–¥–∏–Ω–≥: {score} | –ê–≤—Ç–æ—Ä: {author} | {created}\n\n"
        
        return text

class ErrorHandler:
    """–ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫"""
    
    @staticmethod
    def format_error(error: Exception, context: str = "") -> str:
        """–ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        error_text = str(error)
        safe_error = SafeFormatter.escape_html(error_text)
        
        if context:
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ {context}: {safe_error}"
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {safe_error}"
    
    @staticmethod
    def log_and_format_error(error: Exception, context: str = "", user_id: int = None) -> str:
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏
        log_message = f"–ü–æ–º–∏–ª–∫–∞ {context}: {error}"
        if user_id:
            log_message += f" (user_id: {user_id})"
        
        logger.error(log_message, exc_info=True)
        
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        return ErrorHandler.format_error(error, context)

class TableFormatter:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —Ç–∞ —Å–ø–∏—Å–∫—ñ–≤"""
    
    @staticmethod
    def format_users_table(users_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        users = users_data.get('users', [])
        page = users_data.get('page', 1)
        total_pages = users_data.get('total_pages', 1)
        
        if not users:
            return "üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"
        
        text = f"üë• <b>–ö–û–†–ò–°–¢–£–í–ê–ß–Ü</b> (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {page}/{total_pages}):\n\n"
        
        for i, user in enumerate(users, 1):
            rank_emoji = SafeFormatter.format_rank_emoji(user.get('rank', ''))
            name = SafeFormatter.escape_html(user.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π'))
            points = SafeFormatter.format_number(user.get('points', 0))
            submissions = user.get('submissions', 0)
            status = "üü¢" if user.get('is_active', True) else "üî¥"
            
            text += f"{i}. {status} {rank_emoji} {name}\n"
            text += f"   üí∞ {points} –±–∞–ª—ñ–≤ | üìù {submissions} –ø–æ–¥–∞–Ω—å\n"
            text += f"   üïê {user.get('last_activity', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
        
        return text
    
    @staticmethod
    def format_pending_content(pending: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        if not pending:
            return "‚úÖ –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!"
        
        content = pending[0]  # –ü–µ—Ä—à–∏–π –≤ —á–µ—Ä–∑—ñ
        
        text = f"üõ°Ô∏è <b>–ú–û–î–ï–†–ê–¶–Ü–Ø #{content.get('id')}</b>\n\n"
        
        # –ê–≤—Ç–æ—Ä
        author = SafeFormatter.escape_html(content.get('author_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π'))
        username = content.get('author_username')
        if username:
            text += f"üë§ –ê–≤—Ç–æ—Ä: {author} (@{SafeFormatter.escape_html(username)})\n"
        else:
            text += f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
        
        # –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_type = content.get('type', '–Ω–µ–≤—ñ–¥–æ–º–æ')
        text += f"üìù –¢–∏–ø: {content_type}\n"
        text += f"üïê –î–∞—Ç–∞: {content.get('created', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        if content.get('text'):
            preview = SafeFormatter.format_content_preview(content['text'], 200)
            text += f"üí¨ –¢–µ–∫—Å—Ç:\n{preview}\n\n"
        
        if content.get('file_id'):
            text += "üñºÔ∏è –ú—ñ—Å—Ç–∏—Ç—å –º–µ–¥—ñ–∞-—Ñ–∞–π–ª\n\n"
        
        return text

class ProgressFormatter:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    @staticmethod
    def format_progress_bar(current: int, total: int, length: int = 10) -> str:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∞"""
        if total == 0:
            return "‚ñ±" * length
        
        filled = int((current / total) * length)
        return "‚ñ∞" * filled + "‚ñ±" * (length - filled)
    
    @staticmethod
    def format_weekly_activity(activity: List[Dict[str, Any]]) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ"""
        if not activity:
            return "üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ç–∏–∂–¥–µ–Ω—å"
        
        text = "üìä <b>–ê–ö–¢–ò–í–ù–Ü–°–¢–¨ –ó–ê –¢–ò–ñ–î–ï–ù–¨:</b>\n\n"
        
        max_activity = max(item.get('activity', 0) for item in activity)
        
        for item in activity:
            date = item.get('date', '–ù–µ–≤—ñ–¥–æ–º–æ')
            count = item.get('activity', 0)
            bar = ProgressFormatter.format_progress_bar(count, max_activity, 8)
            
            text += f"{date}: {bar} {count}\n"
        
        return text