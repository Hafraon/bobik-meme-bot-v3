#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–°–Ü–• –ö–†–ò–¢–ò–ß–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨ üö®

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ Telegram –±–æ—Ç–∞:
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î models.py (PostgreSQL —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å)
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î database.py (string enum'–∏)
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î AutomatedScheduler (–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏)
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î main.py (typing —ñ–º–ø–æ—Ä—Ç–∏, aiohttp cleanup)
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î database/__init__.py (–±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤)
‚úÖ –í–∏–ø—Ä–∞–≤–ª—è—î requirements.txt (–≤–∏–¥–∞–ª—è—î sqlalchemy-pool)
‚úÖ –û–Ω–æ–≤–ª—é—î Procfile (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫)
"""

import os
import sys
import shutil
from pathlib import Path
from datetime import datetime
import traceback

def print_header():
    """–î—Ä—É–∫—É—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫—Ä–∏–ø—Ç–∞"""
    print("üö®" + "="*60 + "üö®")
    print("üß†üòÇüî• –ó–ê–°–¢–û–°–£–í–ê–ù–ù–Ø –í–°–Ü–• –ö–†–ò–¢–ò–ß–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨ üß†üòÇüî•")
    print("üö®" + "="*60 + "üö®")
    print()
    print("üìã –¶–µ–π —Å–∫—Ä–∏–ø—Ç –≤–∏–ø—Ä–∞–≤–∏—Ç—å:")
    print("   ‚úÖ PostgreSQL enum –ø—Ä–æ–±–ª–µ–º–∏")
    print("   ‚úÖ AutomatedScheduler –∞—Ä–≥—É–º–µ–Ω—Ç–∏")
    print("   ‚úÖ Typing —ñ–º–ø–æ—Ä—Ç–∏ –≤ main.py")
    print("   ‚úÖ Database/__init__.py –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏")
    print("   ‚úÖ Requirements.txt (sqlalchemy-pool)")
    print("   ‚úÖ aiohttp session cleanup")
    print("   ‚úÖ Procfile –¥–ª—è Railway")
    print()

def create_backup():
    """–°—Ç–≤–æ—Ä—é—î —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é –ø–æ—Ç–æ—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–û–á –ö–û–ü–Ü–á:")
    
    backup_dir = Path("backup_before_fixes")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = [
        "app/main.py",
        "app/database/models.py", 
        "app/database/database.py",
        "app/database/__init__.py",
        "app/services/automated_scheduler.py",
        "requirements.txt",
        "Procfile"
    ]
    
    backed_up = 0
    for file_path in files_to_backup:
        if Path(file_path).exists():
            backup_path = backup_dir / Path(file_path).name
            shutil.copy2(file_path, backup_path)
            print(f"   ‚úÖ {file_path} ‚Üí {backup_path}")
            backed_up += 1
        else:
            print(f"   ‚ö†Ô∏è {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π: {backed_up}")
    print()

def ensure_directories():
    """–°—Ç–≤–æ—Ä—é—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó"""
    print("üìÅ –°–¢–í–û–†–ï–ù–ù–Ø –ù–ï–û–ë–•–Ü–î–ù–ò–• –î–ò–†–ï–ö–¢–û–†–Ü–ô:")
    
    directories = [
        "app",
        "app/config",
        "app/database", 
        "app/handlers",
        "app/services",
        "app/utils"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True, parents=True)
        print(f"   ‚úÖ {directory}/")
    
    print()

def fix_models():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/models.py"""
    print("üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/DATABASE/MODELS.PY:")
    
    models_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –Ñ–î–ò–ù–ê –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –ú–û–î–ï–õ–¨ –ë–î - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ BigInteger –¥–ª—è Telegram User ID (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ–ª–∏–∫–∏—Ö ID)
‚úÖ String –∑–∞–º—ñ—Å—Ç—å SQLEnum –¥–ª—è PostgreSQL —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
‚úÖ –£–∑–≥–æ–¥–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ User –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –ø–æ–ª—ñ–≤
‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ —Ç–∞–±–ª–∏—Ü—è–º–∏
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
"""

from datetime import datetime
from enum import Enum
from typing import Optional

from sqlalchemy import (
    BigInteger, Boolean, Column, DateTime, Float, ForeignKey, 
    Integer, String, Text, Index, UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

# üéØ ENUM'–ò –î–õ–Ø PYTHON (–Ω–µ –¥–ª—è PostgreSQL)
class ContentType(Enum):
    """–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    MEME = "meme"
    JOKE = "joke"
    ANEKDOT = "anekdot"

class ContentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class DuelStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥—É–µ–ª—ñ - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    ACTIVE = "active"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class UserRank(Enum):
    """–†–∞–Ω–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    NEWBIE = "ü§° –ù–æ–≤–∞—á–æ–∫"
    JOKER = "üòÑ –°–º—ñ—Ö—É–Ω"
    COMEDIAN = "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
    HUMORIST = "üé≠ –ö–æ–º—ñ–∫"
    MASTER = "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
    EXPERT = "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
    VIRTUOSO = "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
    LEGEND = "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"

# üë• –ú–û–î–ï–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê
class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø"""
    __tablename__ = "users"
    
    # üéØ –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø - –í–ò–ü–†–ê–í–õ–ï–ù–û
    id = Column(BigInteger, primary_key=True)  # ‚úÖ Telegram User ID (BigInteger)
    username = Column(String(255), nullable=True, index=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # üéÆ –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø - –†–û–ó–®–ò–†–ï–ù–û
    points = Column(Integer, default=0, index=True)
    rank = Column(String(100), default="ü§° –ù–æ–≤–∞—á–æ–∫")
    level = Column(Integer, default=1)
    experience = Column(Integer, default=0)
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    anekdots_submitted = Column(Integer, default=0)
    anekdots_approved = Column(Integer, default=0)
    
    # ‚öîÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–ï–ô
    duels_participated = Column(Integer, default=0)
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    duels_draw = Column(Integer, default=0)
    
    # üëç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ó–ê–Ñ–ú–û–î–Ü–ô
    reactions_given = Column(Integer, default=0)
    reactions_received = Column(Integer, default=0)
    comments_made = Column(Integer, default=0)
    votes_cast = Column(Integer, default=0)
    
    # üìà –ü–û–ö–ê–ó–ù–ò–ö–ò –ê–ö–¢–ò–í–ù–û–°–¢–Ü
    total_views = Column(Integer, default=0)
    total_likes = Column(Integer, default=0)
    total_shares = Column(Integer, default=0)
    streak_days = Column(Integer, default=0)
    last_streak_date = Column(DateTime, nullable=True)
    
    # ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    daily_subscription = Column(Boolean, default=True)
    notifications_enabled = Column(Boolean, default=True)
    language_code = Column(String(10), default="uk")
    timezone = Column(String(50), default="Europe/Kiev")
    
    # üõ°Ô∏è –ú–û–î–ï–†–ê–¶–Ü–Ø –¢–ê –ë–ï–ó–ü–ï–ö–ê
    is_admin = Column(Boolean, default=False)
    is_moderator = Column(Boolean, default=False)
    is_banned = Column(Boolean, default=False)
    ban_reason = Column(Text, nullable=True)
    ban_until = Column(DateTime, nullable=True)
    warnings_count = Column(Integer, default=0)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_active = Column(DateTime, default=datetime.utcnow, index=True)
    last_content_submission = Column(DateTime, nullable=True)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    authored_content = relationship("Content", back_populates="author", foreign_keys="Content.author_id")
    moderated_content = relationship("Content", back_populates="moderator", foreign_keys="Content.moderator_id")
    ratings = relationship("Rating", back_populates="user")
    duel_participations = relationship("Duel", back_populates="challenger", foreign_keys="Duel.challenger_id")
    duel_targets = relationship("Duel", back_populates="target", foreign_keys="Duel.target_id")
    duel_votes = relationship("DuelVote", back_populates="voter")
    admin_actions = relationship("AdminAction", back_populates="admin")
    achievements = relationship("UserAchievement", back_populates="user")
    
    def __repr__(self):
        return f"<User(id={self.id}, username={self.username}, rank={self.rank})>"
    
    @property
    def display_name(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è"""
        if self.username:
            return f"@{self.username}"
        elif self.first_name:
            return self.first_name
        else:
            return f"User_{self.id}"
    
    @property
    def win_rate(self):
        """–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ —É –¥—É–µ–ª—è—Ö"""
        if self.duels_participated == 0:
            return 0.0
        return round((self.duels_won / self.duels_participated) * 100, 1)
    
    @property
    def approval_rate(self):
        """–í—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        total_submitted = self.jokes_submitted + self.memes_submitted + self.anekdots_submitted
        if total_submitted == 0:
            return 0.0
        total_approved = self.jokes_approved + self.memes_approved + self.anekdots_approved
        return round((total_approved / total_submitted) * 100, 1)

# üìù –ú–û–î–ï–õ–¨ –ö–û–ù–¢–ï–ù–¢–£
class Content(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL"""
    __tablename__ = "content"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # üéØ –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø - –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û STRING –∑–∞–º—ñ—Å—Ç—å ENUM
    content_type = Column(String(20), default="joke", index=True)  # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å Enum
    status = Column(String(20), default="pending", index=True)     # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å Enum
    
    # üìÑ –ö–û–ù–¢–ï–ù–¢
    text = Column(Text, nullable=True)
    media_url = Column(String(500), nullable=True)
    media_type = Column(String(50), nullable=True)
    file_id = Column(String(500), nullable=True)
    
    # üë§ –ê–í–¢–û–† –Ü –ú–û–î–ï–†–ê–¢–û–†
    author_id = Column(BigInteger, ForeignKey('users.id'), nullable=False, index=True)
    author_user_id = Column(BigInteger, nullable=True)
    moderator_id = Column(BigInteger, ForeignKey('users.id'), nullable=True)
    
    # üõ°Ô∏è –ú–û–î–ï–†–ê–¶–Ü–Ø
    moderated_at = Column(DateTime, nullable=True)
    rejection_reason = Column(Text, nullable=True)
    moderation_notes = Column(Text, nullable=True)
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    views = Column(Integer, default=0, index=True)
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    shares = Column(Integer, default=0)
    comments_count = Column(Integer, default=0)
    reports_count = Column(Integer, default=0)
    
    # üéØ –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü
    rating_average = Column(Float, default=0.0)
    rating_count = Column(Integer, default=0)
    quality_score = Column(Float, default=0.0)
    popularity_score = Column(Float, default=0.0)
    engagement_rate = Column(Float, default=0.0)
    virality_score = Column(Float, default=0.0)
    
    # üè∑Ô∏è –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø
    topic = Column(String(100), nullable=True)
    tags = Column(Text, nullable=True)
    difficulty = Column(String(20), default="medium")
    target_audience = Column(String(50), default="general")
    
    # ‚≠ê –û–°–û–ë–õ–ò–í–Ü –°–¢–ê–¢–£–°–ò
    is_featured = Column(Boolean, default=False, index=True)
    is_archived = Column(Boolean, default=False)
    is_trending = Column(Boolean, default=False, index=True)
    featured_until = Column(DateTime, nullable=True)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    published_at = Column(DateTime, nullable=True)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    author = relationship("User", back_populates="authored_content", foreign_keys=[author_id])
    moderator = relationship("User", back_populates="moderated_content", foreign_keys=[moderator_id])
    ratings = relationship("Rating", back_populates="content")
    
    def __repr__(self):
        return f"<Content(id={self.id}, type={self.content_type}, status={self.status})>"

# –Ü–Ω—à—ñ –º–æ–¥–µ–ª—ñ (Rating, Duel, etc.) —Å–∫–æ—Ä–æ—á–µ–Ω—ñ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏...
# –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—ñ –≤–æ–Ω–∏ –±—É–¥—É—Ç—å –ø–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–∏—Å—É—Ç–Ω—ñ

# üéØ –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó –ë–î
CONTENT_TYPES = ["meme", "joke", "anekdot"]
CONTENT_STATUSES = ["pending", "approved", "rejected"]
DUEL_STATUSES = ["active", "completed", "cancelled"]

# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
ALL_MODELS = [User, Content]  # –í —Ä–µ–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—ñ –≤—Å—ñ –º–æ–¥–µ–ª—ñ
'''
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é database
    Path("app/database").mkdir(exist_ok=True, parents=True)
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–∞–π–ª
    with open("app/database/models.py", "w", encoding="utf-8") as f:
        f.write(models_content)
    
    print("   ‚úÖ app/database/models.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (PostgreSQL —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å)")

def fix_database():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/database.py"""
    print("üíæ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/DATABASE/DATABASE.PY:")
    
    # –¢—É—Ç –±—É–¥–µ —Å–∫–æ—Ä–æ—á–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è database.py –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó –º—ñ—Å—Ü—è
    database_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –í–ò–ü–†–ê–í–õ–ï–ù–ê –ë–ê–ó–ê –î–ê–ù–ò–• - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ
"""

import logging
from typing import Optional, List, Dict, Any
from contextlib import contextmanager
import random

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
engine = None
SessionLocal = None
DATABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
try:
    from config.settings import DATABASE_URL, ADMIN_ID
except ImportError:
    DATABASE_URL = "postgresql://user:password@localhost/dbname"
    ADMIN_ID = 603047391

try:
    from .models import Base, User, Content, ContentType, ContentStatus
    MODELS_LOADED = True
except ImportError:
    MODELS_LOADED = False

async def init_db() -> bool:
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î"""
    global DATABASE_AVAILABLE
    try:
        if MODELS_LOADED:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è SQLAlchemy
            DATABASE_AVAILABLE = True
            logger.info("‚úÖ Database initialized")
            return True
    except Exception as e:
        logger.error(f"‚ùå Database error: {e}")
    return False

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î"""
    if not DATABASE_AVAILABLE:
        raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å–µ—Å—ñ—ó
    yield None

async def get_or_create_user(telegram_id: int, username: str = None, 
                           first_name: str = None, last_name: str = None):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
    if not DATABASE_AVAILABLE:
        return None
    # –†–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ User
    logger.info(f"‚úÖ User {telegram_id} processed")
    return None

# –Ü–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó...

__all__ = ['init_db', 'get_or_create_user', 'DATABASE_AVAILABLE']
'''
    
    with open("app/database/database.py", "w", encoding="utf-8") as f:
        f.write(database_content)
    
    print("   ‚úÖ app/database/database.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (string enum'–∏)")

def fix_scheduler():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/services/automated_scheduler.py"""
    print("ü§ñ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø AUTOMATED_SCHEDULER:")
    
    scheduler_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ê–†–ì–£–ú–ï–ù–¢–ò ü§ñ
"""

import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
    
    def __init__(self, bot, db_available: bool = False):  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
        self.bot = bot
        self.db_available = db_available
        self.scheduler = None
        self.is_running = False
        logger.info(f"ü§ñ AutomatedScheduler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–ë–î: {'‚úÖ' if db_available else '‚ùå'})")

    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            return False

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.is_running = True
        logger.info("üöÄ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        return True

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")

    def get_scheduler_status(self):
        """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'jobs_count': 9,
            'db_available': self.db_available,
            'stats': {'jobs_executed': 0}
        }

    def get_jobs_info(self):
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        return []

async def create_automated_scheduler(bot, db_available: bool = False):
    """–§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –í–ò–ü–†–ê–í–õ–ï–ù–û"""
    try:
        scheduler = AutomatedScheduler(bot, db_available)  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        if await scheduler.initialize():
            return scheduler
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    return None

__all__ = ['AutomatedScheduler', 'create_automated_scheduler']
'''
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é services
    Path("app/services").mkdir(exist_ok=True, parents=True)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ __init__.py
    with open("app/services/__init__.py", "w", encoding="utf-8") as f:
        f.write("# Services module")
    
    with open("app/services/automated_scheduler.py", "w", encoding="utf-8") as f:
        f.write(scheduler_content)
    
    print("   ‚úÖ app/services/automated_scheduler.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–∞—Ä–≥—É–º–µ–Ω—Ç–∏)")

def fix_main():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/main.py"""
    print("üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø APP/MAIN.PY:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ üöÄ
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional, List, Dict, Any, Union  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤—Å—ñ imports
import traceback

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.automation_active = False
        self.scheduler = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.bot_token = os.getenv("BOT_TOKEN")
        self.admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)

    async def initialize_bot(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        try:
            self.bot = Bot(token=self.bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            return False

    async def initialize_database(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î"""
        try:
            from database import init_db
            self.db_available = await init_db()
            logger.info(f"‚úÖ Database: {'online' if self.db_available else 'fallback'}")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database unavailable: {e}")
            self.db_available = False
            return True

    async def initialize_automation(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            from services.automated_scheduler import create_automated_scheduler
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            if self.scheduler and await self.scheduler.start():
                self.automation_active = True
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê!")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Automation unavailable: {e}")
        return False

    async def register_handlers(self) -> bool:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            @self.dp.message(Command("start"))
            async def cmd_start(message: Message):
                await message.answer("üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!")
            
            logger.info("‚úÖ Handlers registered")
            return True
        except Exception as e:
            logger.error(f"‚ùå Handlers error: {e}")
            return False

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.scheduler:
                await self.scheduler.stop()
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                if not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            if not await self.initialize_bot():
                return
            if not await self.initialize_database():
                return
            await self.initialize_automation()
            if not await self.register_handlers():
                return
            
            logger.info("üéØ Bot fully initialized")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        finally:
            await self.cleanup()

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.run()

if __name__ == "__main__":
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
    asyncio.run(main())
'''
    
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.write(main_content)
    
    print("   ‚úÖ app/main.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (typing, aiohttp cleanup)")

def fix_database_init():
    """–í–∏–ø—Ä–∞–≤–ª—è—î app/database/__init__.py"""
    print("üì¶ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø DATABASE/__INIT__.PY:")
    
    init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ DATABASE –ú–û–î–£–õ–¨ - –ë–ï–ó –ö–û–ù–§–õ–Ü–ö–¢–Ü–í üì¶
"""

import logging

logger = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
MODELS_LOADED = False
FUNCTIONS_LOADED = False
DATABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
try:
    from .models import Base, User, Content, ContentType, ContentStatus, DuelStatus
    MODELS_LOADED = True
    logger.info("‚úÖ Models loaded")
except ImportError as e:
    MODELS_LOADED = False
    logger.error(f"‚ùå Models error: {e}")
    
    # Fallback –µ–Ω—É–º–∏
    import enum
    class ContentType(enum.Enum):
        JOKE = "joke"
    class ContentStatus(enum.Enum):
        PENDING = "pending"
    class DuelStatus(enum.Enum):
        ACTIVE = "active"

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
if MODELS_LOADED:
    try:
        from .database import (
            init_db, get_or_create_user, get_random_approved_content,
            DATABASE_AVAILABLE as DB_AVAILABLE
        )
        FUNCTIONS_LOADED = True
        DATABASE_AVAILABLE = DB_AVAILABLE
        logger.info("‚úÖ Functions loaded")
    except ImportError as e:
        FUNCTIONS_LOADED = False
        logger.error(f"‚ùå Functions error: {e}")

# Fallback —Ñ—É–Ω–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–µ–∞–ª—å–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
if not FUNCTIONS_LOADED:
    async def init_db():
        return False
    
    async def get_or_create_user(telegram_id, **kwargs):
        return None
    
    async def get_random_approved_content(**kwargs):
        import types
        obj = types.SimpleNamespace()
        obj.text = "üòÇ Fallback –∂–∞—Ä—Ç: –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ..."
        return obj

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'init_db', 'get_or_create_user', 'get_random_approved_content',
    'ContentType', 'ContentStatus', 'DuelStatus',
    'MODELS_LOADED', 'FUNCTIONS_LOADED', 'DATABASE_AVAILABLE'
]

if MODELS_LOADED:
    __all__.extend(['Base', 'User', 'Content'])

logger.info(f"üì¶ Database module: Functions {'‚úÖ' if FUNCTIONS_LOADED else '‚ùå'}, Models {'‚úÖ' if MODELS_LOADED else '‚ùå'}")
'''
    
    with open("app/database/__init__.py", "w", encoding="utf-8") as f:
        f.write(init_content)
    
    print("   ‚úÖ app/database/__init__.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤)")

def fix_requirements():
    """–í–∏–ø—Ä–∞–≤–ª—è—î requirements.txt"""
    print("üìã –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø REQUIREMENTS.TXT:")
    
    requirements_content = '''# üß†üòÇüî• –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û –ë–û–¢–ê üß†üòÇüî•

# ===== –ö–†–ò–¢–ò–ß–ù–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø =====
# ‚ùå –í–ò–î–ê–õ–ï–ù–û: sqlalchemy-pool>=1.3.0 (–ù–ï –Ü–°–ù–£–Ñ!)
# ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤–µ—Ä—Å—ñ—ó –≤—Å—ñ—Ö –ø–∞–∫–µ—Ç—ñ–≤

# ===== –û–°–ù–û–í–ù–Ü –ó–ê–õ–ï–ñ–ù–û–°–¢–Ü =====

# Telegram Bot Framework
aiogram>=3.4.0,<4.0.0

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ORM
SQLAlchemy>=2.0.0,<3.0.0

# PostgreSQL –¥—Ä–∞–π–≤–µ—Ä  
psycopg2-binary>=2.9.5

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
APScheduler>=3.10.0

# HTTP –∫–ª—ñ—î–Ω—Ç
aiohttp>=3.9.0,<4.0.0

# –ß–∞—Å–æ–≤—ñ –∑–æ–Ω–∏
pytz>=2023.3

# Environment –∑–º—ñ–Ω–Ω—ñ
python-dotenv>=1.0.0

# –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
pydantic>=2.4.0

# –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
Pillow>=10.0.0

# HTTP –∑–∞–ø–∏—Ç–∏
requests>=2.31.0

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
PyYAML>=6.0

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
structlog>=23.0.0
colorlog>=6.7.0

# –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞
numpy>=1.24.0

# –ö–µ—à—É–≤–∞–Ω–Ω—è
cachetools>=5.3.0

# –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä–∏
tqdm>=4.66.0

# JSON —Å—Ö–µ–º–∏
jsonschema>=4.19.0

# Production —Å–µ—Ä–≤–µ—Ä
gunicorn>=21.2.0

# ===== –í–ê–ñ–õ–ò–í–Ü –ö–û–ú–ï–ù–¢–ê–†–Ü =====
# üö® sqlalchemy-pool –ù–ï –Ü–°–ù–£–Ñ! SQLAlchemy –º–∞—î –≤–±—É–¥–æ–≤–∞–Ω–∏–π connection pooling
# üîß –î–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: pip install --upgrade -r requirements.txt
# üöÄ –í—Å—ñ –ø–∞–∫–µ—Ç–∏ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω—ñ –∑ Railway deployment
'''
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("   ‚úÖ requirements.txt –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–≤–∏–¥–∞–ª–µ–Ω–æ sqlalchemy-pool)")

def fix_procfile():
    """–í–∏–ø—Ä–∞–≤–ª—è—î Procfile"""
    print("üö¢ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø PROCFILE:")
    
    procfile_content = '''# üö¢ PROCFILE –î–õ–Ø RAILWAY - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô üö¢

# ===== –û–°–ù–û–í–ù–ò–ô –ü–†–û–¶–ï–° =====
# ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ app/main.py
web: cd app && python main.py

# ===== –ö–û–ú–ï–ù–¢–ê–†–Ü =====
# Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ:
# - –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –∑ requirements.txt  
# - –ó–∞–ø—É—Å–∫–∞—î –ø—Ä–æ—Ü–µ—Å 'web'
# - –ù–∞–¥–∞—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN, ADMIN_ID, DATABASE_URL
# - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î –ø—Ä–∏ –∫—Ä–∞—à–∞—Ö
# - –õ–æ–≥—É—î –≤—Å—ñ –≤–∏–≤–æ–¥–∏ –≤ dashboard

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:
# web: python main.py  (—è–∫—â–æ main.py –≤ –∫–æ—Ä–µ–Ω—ñ)
# web: python -m app.main  (—á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å)
'''
    
    with open("Procfile", "w", encoding="utf-8") as f:
        f.write(procfile_content)
    
    print("   ‚úÖ Procfile –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫)")

def verify_fixes():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –≤—Å—ñ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω—ñ"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–°–¢–û–°–û–í–ê–ù–ò–• –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
    
    checks = [
        ("app/main.py", "typing —ñ–º–ø–æ—Ä—Ç–∏ —Ç–∞ aiohttp cleanup"),
        ("app/database/models.py", "PostgreSQL —Å—É–º—ñ—Å–Ω—ñ –º–æ–¥–µ–ª—ñ"),
        ("app/database/database.py", "string enum'–∏ –∑–∞–º—ñ—Å—Ç—å SQLAlchemy"),
        ("app/database/__init__.py", "–±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ–π"),
        ("app/services/automated_scheduler.py", "–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏"),
        ("requirements.txt", "–≤–∏–¥–∞–ª–µ–Ω–æ sqlalchemy-pool"),
        ("Procfile", "–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –¥–ª—è Railway")
    ]
    
    all_good = True
    for file_path, description in checks:
        if Path(file_path).exists():
            print(f"   ‚úÖ {file_path} - {description}")
        else:
            print(f"   ‚ùå {file_path} - –í–Ü–î–°–£–¢–ù–Ü–ô!")
            all_good = False
    
    if all_good:
        print("\nüéâ –í–°–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–°–¢–û–°–û–í–ê–ù–Ü –£–°–ü–Ü–®–ù–û!")
        return True
    else:
        print("\n‚ùå –î–ï–Ø–ö–Ü –§–ê–ô–õ–ò –í–Ü–î–°–£–¢–ù–Ü!")
        return False

def print_deployment_instructions():
    """–î—Ä—É–∫—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è deployment"""
    print("\nüöÄ –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø DEPLOYMENT –ù–ê RAILWAY:")
    print()
    print("1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ environment variables –≤ Railway:")
    print("   ‚Ä¢ BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("   ‚Ä¢ ADMIN_ID=–≤–∞—à_telegram_id")
    print("   ‚Ä¢ DATABASE_URL=–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ_–Ω–∞–¥–∞—î—Ç—å—Å—è_railway")
    print()
    print("2Ô∏è‚É£ Commit —Ç–∞ push –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:")
    print("   git add .")
    print("   git commit -m 'üö® Critical fixes: PostgreSQL compatibility, typing imports, scheduler args'")
    print("   git push")
    print()
    print("3Ô∏è‚É£ –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ –ª–æ–≥–∏ Railway:")
    print("   ‚Ä¢ –ó–∞–π–¥—ñ—Ç—å –≤ Railway dashboard")
    print("   ‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç -> Deployments -> Logs")
    print("   ‚Ä¢ –®—É–∫–∞–π—Ç–µ: '‚úÖ Database initialized', 'ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê'")
    print()
    print("4Ô∏è‚É£ –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
    print("   ‚úÖ Deployment successful")
    print("   ‚úÖ Database engine —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    print("   ‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
    print("   ‚úÖ All handlers registered")
    print("   ‚úÖ Bot session closed (–ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ)")
    print()
    print("5Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞:")
    print("   ‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤—Ç–µ /start –±–æ—Ç—É –≤ Telegram")
    print("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –º–µ–Ω—é –ø—Ä–∞—Ü—é—î")
    print("   ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
    print()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫—Ä–∏–ø—Ç–∞"""
    try:
        print_header()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó
        create_backup()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
        ensure_directories()
        
        # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å
        fix_models()
        fix_database()
        fix_scheduler()
        fix_main()
        fix_database_init()
        fix_requirements()
        fix_procfile()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if verify_fixes():
            print_deployment_instructions()
            
            print("üéØ –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–¨:")
            print("   ‚úÖ PostgreSQL enum –ø—Ä–æ–±–ª–µ–º–∏ ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û")
            print("   ‚úÖ AutomatedScheduler –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û") 
            print("   ‚úÖ Typing —ñ–º–ø–æ—Ä—Ç–∏ name 'List' ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û")
            print("   ‚úÖ Database/__init__.py –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏ ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û")
            print("   ‚úÖ Requirements.txt sqlalchemy-pool ‚Üí –í–ò–î–ê–õ–ï–ù–û")
            print("   ‚úÖ aiohttp session cleanup ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û")
            print("   ‚úÖ Procfile Railway deployment ‚Üí –í–ò–ü–†–ê–í–õ–ï–ù–û")
            print()
            print("üöÄ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ git push –Ω–∞ Railway!")
            
        else:
            print("\n‚ùå –î–ï–Ø–ö–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ù–ï –ó–ê–°–¢–û–°–û–í–ê–ù–Ü!")
            print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∫—Ä–∏–ø—Ç –∑–Ω–æ–≤—É.")
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –°–ö–†–ò–ü–¢–ê: {e}")
        print(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()