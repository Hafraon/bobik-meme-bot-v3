#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –®–í–ò–î–ö–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –ö–†–û–ö–£ 6: –ü–û–í–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
"""

import os
import shutil
from pathlib import Path
from datetime import datetime

def print_header():
    print("üöÄ" * 30)
    print("\nü§ñ –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –ü–û–í–ù–û–á –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ö—Ä–æ–∫—É 6")
    print("üöÄ" * 30)
    print()

def backup_existing_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    backup_dir = Path("backup_before_step6")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = [
        "app/main.py",
        "requirements.txt",
        "app/database/services.py"
    ]
    
    for file_path in files_to_backup:
        if Path(file_path).exists():
            backup_path = backup_dir / Path(file_path).name
            shutil.copy2(file_path, backup_path)
            print(f"‚úÖ {file_path} ‚Üí {backup_path}")
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {backup_dir}/")

def ensure_directories():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    print("\nüìÅ –°–¢–í–û–†–ï–ù–ù–Ø –ù–ï–û–ë–•–Ü–î–ù–ò–• –ü–ê–ü–û–ö:")
    
    directories = [
        "app",
        "app/services",
        "app/handlers",
        "app/database", 
        "app/config"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True, parents=True)
        print(f"‚úÖ {directory}/")

def create_automated_scheduler():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("\nü§ñ –°–¢–í–û–†–ï–ù–ù–Ø AUTOMATED SCHEDULER:")
    
    scheduler_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö - –ë–∞–∑–æ–≤–∞ –≤–µ—Ä—Å—ñ—è
"""

import logging
import asyncio
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """–ë–∞–∑–æ–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
    
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.is_running = False
        self.stats = {
            'jobs_executed': 0,
            'broadcasts_sent': 0,
            'errors': 0,
            'last_activity': None
        }
    
    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            await self.setup_basic_jobs()
            logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏–π")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return False
    
    async def setup_basic_jobs(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        
        # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –æ 9:00
        self.scheduler.add_job(
            func=self.daily_broadcast,
            trigger=CronTrigger(hour=9, minute=0),
            id='daily_broadcast',
            name='–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞',
            replace_existing=True
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        self.scheduler.add_job(
            func=self.check_duels,
            trigger=IntervalTrigger(minutes=1),
            id='duel_checker',
            name='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π',
            replace_existing=True
        )
        
        logger.info("üìÖ –ë–∞–∑–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    async def daily_broadcast(self):
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.info("üì¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞...")
            
            # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = await self.get_active_users()
            
            message = (
                f"üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!\\n\\n"
                f"üòÇ –ñ–∞—Ä—Ç –¥–Ω—è:\\n"
                f"<i>–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ó–Ω —ñ –†—ñ–∑–¥–≤–æ?\\n"
                f"–¢–æ–º—É —â–æ 31 OCT = 25 DEC!</i>\\n\\n"
                f"‚öîÔ∏è –°—Ç–≤–æ—Ä—é–π—Ç–µ –¥—É–µ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏!"
            )
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            sent_count = 0
            for user in users:
                try:
                    await self.bot.send_message(user['id'], message)
                    sent_count += 1
                    await asyncio.sleep(0.1)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ {user['id']}: {e}")
            
            self.stats['broadcasts_sent'] += 1
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            logger.info(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            self.stats['errors'] += 1
    
    async def check_duels(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π"""
        try:
            # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è - –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π
            from database.services import auto_finish_expired_duels
            finished_count = await auto_finish_expired_duels()
            
            if finished_count > 0:
                logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} –¥—É–µ–ª–µ–π")
            
            self.stats['jobs_executed'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–µ–ª–µ–π: {e}")
            self.stats['errors'] += 1
    
    async def get_active_users(self):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ –ë–î
            from database.services import get_active_users_for_broadcast
            return await get_active_users_for_broadcast(days=7)
        except Exception:
            # Fallback - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
            return []
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if not self.is_running:
                self.scheduler.start()
                self.is_running = True
                logger.info("üöÄ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if self.is_running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏: {e}")
    
    def get_scheduler_status(self):
        """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'total_jobs': len(self.scheduler.get_jobs()) if self.is_running else 0,
            'stats': self.stats.copy()
        }

async def create_automated_scheduler(bot):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    scheduler = AutomatedScheduler(bot)
    success = await scheduler.initialize()
    return scheduler if success else None

__all__ = ['AutomatedScheduler', 'create_automated_scheduler']
'''
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é services
    services_dir = Path("app/services")
    services_dir.mkdir(exist_ok=True)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ __init__.py –¥–ª—è services
    init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from .automated_scheduler import AutomatedScheduler, create_automated_scheduler

__all__ = ['AutomatedScheduler', 'create_automated_scheduler']
'''
    
    with open(services_dir / "__init__.py", "w", encoding="utf-8") as f:
        f.write(init_content)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    with open(services_dir / "automated_scheduler.py", "w", encoding="utf-8") as f:
        f.write(scheduler_content)
    
    print("‚úÖ app/services/automated_scheduler.py")
    print("‚úÖ app/services/__init__.py")

def create_broadcast_system():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    print("\nüì¢ –°–¢–í–û–†–ï–ù–ù–Ø BROADCAST SYSTEM:")
    
    broadcast_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¢ –°–ò–°–¢–ï–ú–ê –†–û–ó–°–ò–õ–û–ö - –ë–∞–∑–æ–≤–∞ –≤–µ—Ä—Å—ñ—è
"""

import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class BroadcastSystem:
    """–ë–∞–∑–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    
    def __init__(self, bot):
        self.bot = bot
        self.daily_content_sent = False
    
    async def send_daily_content(self):
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.info("üì¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = await self.get_active_users(days=7)
            
            if not users:
                logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = self.create_daily_message()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            success_count = 0
            for user in users:
                try:
                    await self.bot.send_message(user['id'], message)
                    success_count += 1
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['id']}: {e}")
            
            logger.info(f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞: {success_count}/{len(users)}")
            self.daily_content_sent = True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    def create_daily_message(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
        hour = datetime.now().hour
        
        if 6 <= hour < 12:
            greeting = "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
        elif 12 <= hour < 18:
            greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ–≥–æ –¥–Ω—è!"
        else:
            greeting = "üåÜ –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
        
        jokes = [
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ó–Ω —ñ –†—ñ–∑–¥–≤–æ? –¢–æ–º—É —â–æ 31 OCT = 25 DEC!",
            "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É? –ñ–æ–¥–Ω–æ–≥–æ. –¶–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!",
            "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–æ—Å—è—Ç—å –æ–∫—É–ª—è—Ä–∏? –¢–æ–º—É —â–æ –Ω–µ –º–æ–∂—É—Ç—å C#!",
            "–©–æ —Å–∫–∞–∑–∞–≤ 0 –¥–æ 8? - –ì–∞—Ä–Ω–∏–π –ø–æ—è—Å!",
            "–ù–∞–π–∫—Ä–∞—â–∏–π —Å–ø–æ—Å—ñ–± –ø—Ä–∏—Å–∫–æ—Ä–∏—Ç–∏ –∫–æ–º–ø'—é—Ç–µ—Ä - –∫–∏–Ω—É—Ç–∏ –π–æ–≥–æ –∑ –≤—ñ–∫–Ω–∞!"
        ]
        
        import random
        joke = random.choice(jokes)
        
        return f"{greeting}\\n\\nüòÇ <b>–ñ–ê–†–¢ –î–ù–Ø</b>\\n\\n<i>{joke}</i>\\n\\nüéØ –°—Ç–≤–æ—Ä—ñ—Ç—å –¥—É–µ–ª—å —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏!"
    
    async def get_active_users(self, days=7):
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            from database.services import get_active_users_for_broadcast
            return await get_active_users_for_broadcast(days)
        except Exception:
            return []
    
    def get_broadcast_status(self):
        """–°—Ç–∞—Ç—É—Å —Ä–æ–∑—Å–∏–ª–æ–∫"""
        return {
            "daily_content_sent": self.daily_content_sent,
            "last_check": datetime.now().isoformat()
        }

async def create_broadcast_system(bot):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    return BroadcastSystem(bot)

__all__ = ['BroadcastSystem', 'create_broadcast_system']
'''
    
    with open(Path("app/services/broadcast_system.py"), "w", encoding="utf-8") as f:
        f.write(broadcast_content)
    
    print("‚úÖ app/services/broadcast_system.py")

def update_main_app():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è app/main.py –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
    print("\nüéÆ –û–ù–û–í–õ–ï–ù–ù–Ø –ì–û–õ–û–í–ù–û–ì–û –î–û–î–ê–¢–ö–£:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ ü§ñ
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.scheduler = None
        self.automation_active = False
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            from config.settings import settings
            return user_id == settings.ADMIN_ID
        except:
            return user_id == 603047391  # Fallback
    
    async def initialize_bot(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        try:
            logger.info("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
            
            bot_token = os.getenv('BOT_TOKEN')
            if not bot_token:
                raise ValueError("BOT_TOKEN not found")
            
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot initialization failed: {e}")
            return False

    async def initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
            from database.database import init_database
            success = await init_database()
            
            if success:
                logger.info("‚úÖ Database initialized")
                self.db_available = True
                return True
            else:
                logger.warning("‚ö†Ô∏è Database initialization failed")
                return False
                
        except ImportError:
            logger.warning("‚ö†Ô∏è Database module not available")
            return False
        except Exception as e:
            logger.error(f"‚ùå Database error: {e}")
            return False

    async def initialize_automation(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
            
            from services.automated_scheduler import create_automated_scheduler
            self.scheduler = await create_automated_scheduler(self.bot)
            
            if self.scheduler:
                logger.info("‚úÖ Scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                await self.scheduler.start()
                self.automation_active = True
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ scheduler")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Automation –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Automation error: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤...")
            
            # –û—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
            from handlers import register_handlers
            register_handlers(self.dp)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            await self.register_automation_handlers()
            
            logger.info("‚úÖ –•–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers error: {e}")
            return False

    async def register_automation_handlers(self):
        """–•–µ–Ω–¥–ª–µ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        from aiogram.filters import Command
        from aiogram.types import Message
        
        @self.dp.message(Command("start"))
        async def automated_start(message: Message):
            text = (
                f"ü§ñ <b>–ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ!</b>\\n\\n"
                f"‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback'}\\n\\n"
                f"üéØ –§—É–Ω–∫—Ü—ñ—ó:\\n"
                f"‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\\n"
                f"‚Ä¢ üì¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\\n"
                f"‚Ä¢ ü§ñ –†–æ–∑—É–º–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫\\n"
                f"‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\\n\\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏!"
            )
            await message.answer(text)
        
        @self.dp.message(Command("automation_status"))
        async def automation_status(message: Message):
            if not self.is_admin(message.from_user.id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
                return
                
            if self.scheduler:
                status = self.scheduler.get_scheduler_status()
                text = (
                    f"ü§ñ <b>–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á</b>\\n\\n"
                    f"‚ö° –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if status['is_running'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\\n"
                    f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {status['total_jobs']}\\n"
                    f"üéØ –í–∏–∫–æ–Ω–∞–Ω–æ: {status['stats']['jobs_executed']}\\n"
                    f"üì¢ –†–æ–∑—Å–∏–ª–æ–∫: {status['stats']['broadcasts_sent']}\\n"
                    f"‚ùå –ü–æ–º–∏–ª–æ–∫: {status['stats']['errors']}"
                )
            else:
                text = "‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
            
            await message.answer(text)
        
        logger.info("‚úÖ Automation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
        logger.info("ü§ñ Starting Automated Bot...")
        
        try:
            if not await self.initialize_bot():
                return False
            
            if not await self.initialize_database():
                logger.warning("‚ö†Ô∏è Working without DB")
            
            automation_success = await self.initialize_automation()
            if automation_success:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê!")
            
            if not await self.register_handlers():
                return False
            
            logger.info("‚úÖ Bot –≥–æ—Ç–æ–≤–∏–π –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é")
            
            # –ó–∞–ø—É—Å–∫
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            if self.scheduler:
                await self.scheduler.stop()
            if self.bot:
                await self.bot.session.close()

async def main():
    bot = AutomatedUkrainianTelegramBot()
    await bot.main()

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.write(main_content)
    
    print("‚úÖ app/main.py")

def update_requirements():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è requirements.txt"""
    print("\nüì¶ –û–ù–û–í–õ–ï–ù–ù–Ø REQUIREMENTS:")
    
    requirements_content = '''# –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é

# –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
aiogram>=3.4.0,<4.0.0
SQLAlchemy>=2.0.0,<3.0.0
asyncpg>=0.29.0
psycopg2-binary>=2.9.0
aiohttp>=3.9.0

# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è (–ù–û–í–ò–ù–ö–ê!)
APScheduler>=3.10.0,<4.0.0
pytz>=2023.3
python-dateutil>=2.8.0

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
python-dotenv>=1.0.0
pydantic>=2.5.0

# –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
aiofiles>=23.0.0
alembic>=1.13.0

# –£—Ç–∏–ª—ñ—Ç–∏
emoji>=2.8.0
orjson>=3.9.0
psutil>=5.9.0
httpx>=0.25.0

# –ë–µ–∑–ø–µ–∫–∞
cryptography>=42.0.0

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# AI (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
openai>=1.6.0

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
structlog>=23.0.0

# –ü—Ä–æ–¥–∞–∫—à–Ω
gunicorn>=21.2.0
'''
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("‚úÖ requirements.txt")

def extend_database_services():
    """–†–æ–∑—à–∏—Ä–µ–Ω–Ω—è database/services.py"""
    print("\nüóÑÔ∏è –†–û–ó–®–ò–†–ï–ù–ù–Ø DATABASE SERVICES:")
    
    services_extension = '''

# ===== –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –¢–ê –†–û–ó–°–ò–õ–ö–ò (–ö–†–û–ö 6) =====

async def get_active_users_for_broadcast(days: int = 7):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
    try:
        from .models import User
        from datetime import datetime, timedelta
        
        cutoff_date = datetime.utcnow() - timedelta(days=days)
        
        with get_db_session() as session:
            users = session.query(User).filter(
                User.last_activity >= cutoff_date,
                User.is_active == True
            ).all()
            
            result = []
            for user in users:
                result.append({
                    'id': user.id,
                    'username': user.username,
                    'full_name': user.full_name
                })
            
            return result
            
    except Exception as e:
        logger.error(f"Error getting users for broadcast: {e}")
        return []

async def get_daily_best_content():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–Ω—è"""
    try:
        from .models import Content, ContentStatus
        import random
        
        with get_db_session() as session:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED
            ).order_by(func.random()).first()
            
            if content:
                return {
                    'id': content.id,
                    'text': content.text,
                    'type': content.content_type
                }
            
            return None
            
    except Exception as e:
        logger.error(f"Error getting daily content: {e}")
        return None

async def generate_weekly_stats():
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        from .models import User, Content, Duel
        from datetime import datetime, timedelta
        
        week_ago = datetime.utcnow() - timedelta(days=7)
        
        with get_db_session() as session:
            # –ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            new_users = session.query(User).filter(
                User.created_at >= week_ago
            ).count()
            
            new_content = session.query(Content).filter(
                Content.created_at >= week_ago
            ).count()
            
            return {
                'new_users': new_users,
                'new_content': new_content,
                'period': 'week'
            }
            
    except Exception as e:
        logger.error(f"Error generating weekly stats: {e}")
        return {}

async def get_broadcast_statistics():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–æ–∑—Å–∏–ª–æ–∫"""
    try:
        from .models import User
        
        with get_db_session() as session:
            total_users = session.query(User).filter(User.is_active == True).count()
            
            return {
                'total_users': total_users,
                'last_updated': datetime.utcnow().isoformat()
            }
            
    except Exception as e:
        logger.error(f"Error getting broadcast stats: {e}")
        return {'total_users': 0, 'error': str(e)}
'''
    
    services_file = Path("app/database/services.py")
    if services_file.exists():
        with open(services_file, "a", encoding="utf-8") as f:
            f.write(services_extension)
        print("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–æ app/database/services.py")
    else:
        print("‚ö†Ô∏è app/database/services.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def run_tests():
    """–®–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏"""
    print("\nüß™ –®–í–ò–î–ö–Ü –¢–ï–°–¢–ò:")
    
    try:
        # –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É scheduler
        sys.path.insert(0, str(Path("app").absolute()))
        from services.automated_scheduler import create_automated_scheduler
        print("‚úÖ Automated scheduler —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É broadcast
        from services.broadcast_system import create_broadcast_system
        print("‚úÖ Broadcast system —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        from main import AutomatedUkrainianTelegramBot
        print("‚úÖ Automated bot –≥–æ—Ç–æ–≤–∏–π")
        
        # –¢–µ—Å—Ç APScheduler
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
        print("‚úÖ APScheduler –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        print("üéâ –í—Å—ñ —à–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        if "apscheduler" in str(e).lower():
            print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install APScheduler>=3.10.0 pytz>=2023.3")
        return False
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    try:
        # –ö—Ä–æ–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        backup_existing_files()
        ensure_directories()
        create_automated_scheduler()
        create_broadcast_system()
        update_main_app()
        update_requirements()
        extend_database_services()
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        tests_passed = run_tests()
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        print(f"\\n{'üéâ'*30}")
        print(f"üìä –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –ö–†–û–ö–£ 6 –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"{'üéâ'*30}")
        
        if tests_passed:
            print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ")
            print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É!")
            
            print(f"\\nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print(f"1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
            print(f"2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ BOT_TOKEN, ADMIN_ID")
            print(f"3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞: python main.py")
            print(f"4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é: /automation_status")
            print(f"5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: python test_automation.py")
            
            print(f"\\nüìÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á:")
            print(f"‚Ä¢ 9:00 —â–æ–¥–Ω—è - —Ä–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞")
            print(f"‚Ä¢ –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π")
            print(f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π")
            print(f"‚Ä¢ –†–æ–∑—É–º–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å")
            
        else:
            print("‚ö†Ô∏è –Ñ –¥–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ")
            print("üîß –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
            print("   pip install APScheduler>=3.10.0 pytz>=2023.3")
        
        return tests_passed
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\\nüéä –í–Ü–¢–ê–Ñ–ú–û! –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\\nüîß –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")