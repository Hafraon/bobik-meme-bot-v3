#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –°–∫—Ä–∏–ø—Ç —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–º Telegram-–±–æ—Ç–æ–º üß†üòÇüî•

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python scripts/manage.py <command> [options]

–ö–æ–º–∞–Ω–¥–∏:
    init        - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É
    health      - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –±–æ—Ç–∞
    stats       - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
    users       - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    content     - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    backup      - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è backup
    restore     - –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ backup
    cleanup     - –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
    migrate     - –ú—ñ–≥—Ä–∞—Ü—ñ—è –ë–î
    test        - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
"""

import asyncio
import sys
import os
import argparse
import logging
from datetime import datetime, timedelta
from typing import Optional, List
import json

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –¥–æ PATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from config.settings import settings, EMOJI
from database.database import get_db_session, init_db
from database.models import User, Content, Duel, Rating, ContentType, ContentStatus

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class BotManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.bot = None
        
    async def init_bot(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        from aiogram import Bot
        from aiogram.enums import ParseMode
        
        self.bot = Bot(
            token=settings.BOT_TOKEN,
            parse_mode=ParseMode.HTML
        )
        return self.bot
    
    async def check_health(self) -> dict:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è –±–æ—Ç–∞"""
        health_status = {
            "timestamp": datetime.now().isoformat(),
            "bot_status": "unknown",
            "database_status": "unknown",
            "api_status": "unknown",
            "errors": []
        }
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram API
            bot = await self.init_bot()
            bot_info = await bot.get_me()
            health_status["bot_status"] = "healthy"
            health_status["bot_info"] = {
                "username": bot_info.username,
                "first_name": bot_info.first_name,
                "id": bot_info.id
            }
            await bot.session.close()
            
        except Exception as e:
            health_status["bot_status"] = "error"
            health_status["errors"].append(f"Bot API error: {str(e)}")
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
            with get_db_session() as session:
                user_count = session.query(User).count()
                health_status["database_status"] = "healthy"
                health_status["database_info"] = {
                    "total_users": user_count,
                    "database_url": settings.DATABASE_URL.split('@')[0] + "@***"
                }
                
        except Exception as e:
            health_status["database_status"] = "error"
            health_status["errors"].append(f"Database error: {str(e)}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ OpenAI API (—è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)
        if settings.OPENAI_API_KEY:
            try:
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    headers = {"Authorization": f"Bearer {settings.OPENAI_API_KEY}"}
                    async with session.get(
                        "https://api.openai.com/v1/models", 
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        if response.status == 200:
                            health_status["api_status"] = "healthy"
                        else:
                            health_status["api_status"] = "error"
                            health_status["errors"].append(f"OpenAI API status: {response.status}")
            except Exception as e:
                health_status["api_status"] = "error"
                health_status["errors"].append(f"OpenAI API error: {str(e)}")
        
        # –ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        if health_status["bot_status"] == "healthy" and health_status["database_status"] == "healthy":
            health_status["overall_status"] = "healthy"
        else:
            health_status["overall_status"] = "unhealthy"
        
        return health_status
    
    async def get_stats(self) -> dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        stats = {
            "timestamp": datetime.now().isoformat(),
            "users": {},
            "content": {},
            "duels": {},
            "activity": {}
        }
        
        try:
            with get_db_session() as session:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                total_users = session.query(User).count()
                active_users_today = session.query(User).filter(
                    User.last_active >= datetime.utcnow() - timedelta(days=1)
                ).count()
                active_users_week = session.query(User).filter(
                    User.last_active >= datetime.utcnow() - timedelta(days=7)
                ).count()
                
                stats["users"] = {
                    "total": total_users,
                    "active_today": active_users_today,
                    "active_week": active_users_week,
                    "daily_subscribers": session.query(User).filter(
                        User.daily_subscription == True
                    ).count()
                }
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
                total_content = session.query(Content).count()
                approved_content = session.query(Content).filter(
                    Content.status == ContentStatus.APPROVED
                ).count()
                pending_content = session.query(Content).filter(
                    Content.status == ContentStatus.PENDING
                ).count()
                
                stats["content"] = {
                    "total": total_content,
                    "approved": approved_content,
                    "pending": pending_content,
                    "jokes": session.query(Content).filter(
                        Content.content_type == ContentType.JOKE
                    ).count(),
                    "memes": session.query(Content).filter(
                        Content.content_type == ContentType.MEME
                    ).count()
                }
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª–µ–π
                from database.models import DuelStatus
                stats["duels"] = {
                    "total": session.query(Duel).count(),
                    "active": session.query(Duel).filter(
                        Duel.status == DuelStatus.ACTIVE
                    ).count(),
                    "completed_today": session.query(Duel).filter(
                        Duel.completed_at >= datetime.utcnow() - timedelta(days=1)
                    ).count()
                }
                
                # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
                top_users = session.query(User).order_by(User.points.desc()).limit(5).all()
                stats["top_users"] = [
                    {
                        "name": user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π",
                        "username": user.username,
                        "points": user.points,
                        "rank": user.rank
                    }
                    for user in top_users
                ]
                
        except Exception as e:
            stats["error"] = str(e)
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
        return stats
    
    async def manage_users(self, action: str, user_id: Optional[int] = None, **kwargs):
        """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
        try:
            with get_db_session() as session:
                if action == "list":
                    users = session.query(User).order_by(User.points.desc()).limit(20).all()
                    for user in users:
                        print(f"ID: {user.id}, Name: {user.first_name}, Points: {user.points}, Rank: {user.rank}")
                
                elif action == "info" and user_id:
                    user = session.query(User).filter(User.id == user_id).first()
                    if user:
                        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id}:")
                        print(f"  –Ü–º'—è: {user.first_name}")
                        print(f"  Username: @{user.username}")
                        print(f"  –ë–∞–ª–∏: {user.points}")
                        print(f"  –†–∞–Ω–≥: {user.rank}")
                        print(f"  –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {user.daily_subscription}")
                        print(f"  –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ –ø–æ–¥–∞–Ω–æ: {user.jokes_submitted}")
                        print(f"  –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user.jokes_approved}")
                    else:
                        print(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                
                elif action == "add_points" and user_id:
                    points = kwargs.get("points", 0)
                    from database.database import update_user_points
                    await update_user_points(user_id, points, "–∞–¥–º—ñ–Ω –¥–æ–¥–∞–≤ –±–∞–ª–∏")
                    print(f"–î–æ–¥–∞–Ω–æ {points} –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
                
                elif action == "reset_points" and user_id:
                    user = session.query(User).filter(User.id == user_id).first()
                    if user:
                        user.points = 0
                        user.rank = "ü§° –ù–æ–≤–∞—á–æ–∫"
                        session.commit()
                        print(f"–ë–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Å–∫–∏–Ω—É—Ç–æ")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏: {e}")
    
    async def manage_content(self, action: str, content_id: Optional[int] = None, **kwargs):
        """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
        try:
            with get_db_session() as session:
                if action == "pending":
                    pending = session.query(Content).filter(
                        Content.status == ContentStatus.PENDING
                    ).order_by(Content.created_at).all()
                    
                    print(f"–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó ({len(pending)}):")
                    for content in pending:
                        author = session.query(User).filter(User.id == content.author_id).first()
                        print(f"ID: {content.id}")
                        print(f"  –ê–≤—Ç–æ—Ä: {author.first_name if author else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}")
                        print(f"  –¢–∏–ø: {content.content_type.value}")
                        print(f"  –¢–µ–∫—Å—Ç: {content.text[:100]}...")
                        print(f"  –î–∞—Ç–∞: {content.created_at}")
                        print()
                
                elif action == "approve" and content_id:
                    from database.database import moderate_content
                    await moderate_content(content_id, settings.ADMIN_ID, True, "–°—Ö–≤–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ manage.py")
                    print(f"–ö–æ–Ω—Ç–µ–Ω—Ç {content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ")
                
                elif action == "reject" and content_id:
                    from database.database import moderate_content
                    await moderate_content(content_id, settings.ADMIN_ID, False, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ manage.py")
                    print(f"–ö–æ–Ω—Ç–µ–Ω—Ç {content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
                
                elif action == "stats":
                    total = session.query(Content).count()
                    approved = session.query(Content).filter(Content.status == ContentStatus.APPROVED).count()
                    pending = session.query(Content).filter(Content.status == ContentStatus.PENDING).count()
                    rejected = session.query(Content).filter(Content.status == ContentStatus.REJECTED).count()
                    
                    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É:")
                    print(f"  –í—Å—å–æ–≥–æ: {total}")
                    print(f"  –°—Ö–≤–∞–ª–µ–Ω–æ: {approved}")
                    print(f"  –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending}")
                    print(f"  –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected}")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º: {e}")
    
    async def cleanup_old_data(self, days: int = 30):
        """–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö"""
        try:
            cutoff_date = datetime.utcnow() - timedelta(days=days)
            
            with get_db_session() as session:
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
                old_ratings = session.query(Rating).filter(
                    Rating.created_at < cutoff_date
                ).delete()
                
                # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π —Å—Ç–∞—Ä—ñ—à–µ –Ω—ñ–∂ 7 –¥–Ω—ñ–≤
                from database.models import DuelStatus
                old_duels = session.query(Duel).filter(
                    Duel.status == DuelStatus.COMPLETED,
                    Duel.completed_at < datetime.utcnow() - timedelta(days=7)
                ).delete()
                
                session.commit()
                
                print(f"–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
                print(f"  –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤: {old_ratings}")
                print(f"  –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏—Ö –¥—É–µ–ª–µ–π: {old_duels}")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è: {e}")
    
    async def test_apis(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö API"""
        print("üß† –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API...")
        
        # –¢–µ—Å—Ç Telegram API
        try:
            bot = await self.init_bot()
            me = await bot.get_me()
            print(f"‚úÖ Telegram API: @{me.username}")
            await bot.session.close()
        except Exception as e:
            print(f"‚ùå Telegram API: {e}")
        
        # –¢–µ—Å—Ç OpenAI API
        if settings.OPENAI_API_KEY:
            try:
                from services.content_generator import content_generator
                joke = await content_generator.generate_jokes(1, "—Ç–µ—Å—Ç")
                if joke:
                    print(f"‚úÖ OpenAI API: –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∂–∞—Ä—Ç")
                else:
                    print(f"‚ö†Ô∏è OpenAI API: –ø–æ—Ä–æ–∂–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å")
            except Exception as e:
                print(f"‚ùå OpenAI API: {e}")
        else:
            print("‚ö†Ô∏è OpenAI API: –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –ë–î
        try:
            with get_db_session() as session:
                count = session.query(User).count()
                print(f"‚úÖ Database: {count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        except Exception as e:
            print(f"‚ùå Database: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–º Telegram-–±–æ—Ç–æ–º")
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏")
    
    # –ö–æ–º–∞–Ω–¥–∞ init
    init_parser = subparsers.add_parser("init", help="–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É")
    
    # –ö–æ–º–∞–Ω–¥–∞ health
    health_parser = subparsers.add_parser("health", help="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è")
    health_parser.add_argument("--json", action="store_true", help="–í–∏–≤—ñ–¥ —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ")
    
    # –ö–æ–º–∞–Ω–¥–∞ stats
    stats_parser = subparsers.add_parser("stats", help="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    stats_parser.add_argument("--json", action="store_true", help="–í–∏–≤—ñ–¥ —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ")
    
    # –ö–æ–º–∞–Ω–¥–∞ users
    users_parser = subparsers.add_parser("users", help="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")
    users_parser.add_argument("action", choices=["list", "info", "add_points", "reset_points"])
    users_parser.add_argument("--user_id", type=int, help="ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    users_parser.add_argument("--points", type=int, default=0, help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤")
    
    # –ö–æ–º–∞–Ω–¥–∞ content
    content_parser = subparsers.add_parser("content", help="–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
    content_parser.add_argument("action", choices=["pending", "approve", "reject", "stats"])
    content_parser.add_argument("--content_id", type=int, help="ID –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    cleanup_parser = subparsers.add_parser("cleanup", help="–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö")
    cleanup_parser.add_argument("--days", type=int, default=30, help="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
    
    # –ö–æ–º–∞–Ω–¥–∞ test
    test_parser = subparsers.add_parser("test", help="–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    manager = BotManager()
    
    try:
        if args.command == "init":
            print("üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—É...")
            await init_db()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
        elif args.command == "health":
            health = await manager.check_health()
            if args.json:
                print(json.dumps(health, indent=2, ensure_ascii=False))
            else:
                print(f"üè• –ó–¥–æ—Ä–æ–≤'—è –±–æ—Ç–∞: {health['overall_status']}")
                if health.get('bot_info'):
                    print(f"ü§ñ –ë–æ—Ç: @{health['bot_info']['username']}")
                if health.get('database_info'):
                    print(f"üíæ –ë–î: {health['database_info']['total_users']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
                if health.get('errors'):
                    print("‚ùå –ü–æ–º–∏–ª–∫–∏:")
                    for error in health['errors']:
                        print(f"  - {error}")
                        
        elif args.command == "stats":
            stats = await manager.get_stats()
            if args.json:
                print(json.dumps(stats, indent=2, ensure_ascii=False))
            else:
                print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:")
                print(f"  üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['users']['total']} (–∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {stats['users']['active_today']})")
                print(f"  üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {stats['content']['total']} (—Å—Ö–≤–∞–ª–µ–Ω–æ: {stats['content']['approved']})")
                print(f"  ‚öîÔ∏è –î—É–µ–ª–µ–π: {stats['duels']['total']} (–∞–∫—Ç–∏–≤–Ω–∏—Ö: {stats['duels']['active']})")
                
        elif args.command == "users":
            await manager.manage_users(
                args.action,
                args.user_id,
                points=args.points
            )
            
        elif args.command == "content":
            await manager.manage_content(
                args.action,
                args.content_id
            )
            
        elif args.command == "cleanup":
            await manager.cleanup_old_data(args.days)
            
        elif args.command == "test":
            await manager.test_apis()
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())