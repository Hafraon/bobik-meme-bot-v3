#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í - –•–µ–Ω–¥–ª–µ—Ä–∏ ‚öîÔ∏è

–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –∑ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:
- –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥—É–µ–ª—ñ–≤
- –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
- –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
"""

import logging
import random
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –Ü–º–ø–æ—Ä—Ç–∏ –ø—Ä–æ–µ–∫—Ç—É
from config.settings import settings
from database.services import (
    get_or_create_user, update_user_points, get_user_by_id,
    create_duel, get_active_duels, get_duel_by_id, vote_in_duel,
    finish_duel, get_user_duel_stats, get_random_approved_content
)
from database.models import DuelStatus, ContentType

logger = logging.getLogger(__name__)

# ===== FSM –°–¢–ê–ù–ò –î–õ–Ø –î–£–ï–õ–Ü–í =====

class DuelStates(StatesGroup):
    waiting_for_opponent = State()
    waiting_for_content_choice = State()
    waiting_for_custom_content = State()

# ===== –ö–û–ù–°–¢–ê–ù–¢–ò =====

DUEL_EMOJI = {
    'sword': '‚öîÔ∏è',
    'vs': 'üÜö', 
    'crown': 'üëë',
    'fire': 'üî•',
    'trophy': 'üèÜ',
    'timer': '‚è±Ô∏è',
    'vote_up': 'üëç',
    'vote_down': 'üëé',
    'laugh': 'üòÇ',
    'clap': 'üëè',
    'lightning': '‚ö°',
    'star': '‚≠ê',
    'boom': 'üí•',
    'target': 'üéØ'
}

DUEL_TEXTS = {
    'welcome': f"{DUEL_EMOJI['sword']} <b>–ê–†–ï–ù–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í!</b> {DUEL_EMOJI['sword']}\n\n–¢—É—Ç –Ω–∞–π–∫—Ä–∞—â—ñ –∂–∞—Ä—Ç—É–Ω–∏ –∑–º–∞–≥–∞—é—Ç—å—Å—è –∑–∞ –∑–≤–∞–Ω–Ω—è –∫–æ—Ä–æ–ª—è –≥—É–º–æ—Ä—É!",
    'no_content': f"{DUEL_EMOJI['timer']} –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å—Ö–≤–∞–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥—É–µ–ª—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ!",
    'duel_created': f"{DUEL_EMOJI['fire']} <b>–î–£–ï–õ–¨ –†–û–ó–ü–û–ß–ê–¢–û!</b>\n\n–ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π –∂–∞—Ä—Ç!",
    'vote_registered': f"{DUEL_EMOJI['clap']} –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!",
    'already_voted': f"{DUEL_EMOJI['timer']} –í–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏ –≤ —Ü—ñ–π –¥—É–µ–ª—ñ!",
    'duel_finished': f"{DUEL_EMOJI['crown']} <b>–î–£–ï–õ–¨ –ó–ê–í–ï–†–®–ï–ù–û!</b>",
    'no_active_duels': f"{DUEL_EMOJI['target']} –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π!",
    'voting_time_up': f"{DUEL_EMOJI['timer']} –ß–∞—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ!",
    'minimum_votes': "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 3 –≥–æ–ª–æ—Å–∏",
}

RANK_REWARDS = {
    'duel_win': 25,      # –ó–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ
    'duel_participate': 10,  # –ó–∞ —É—á–∞—Å—Ç—å
    'vote_in_duel': 2,   # –ó–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    'epic_victory': 50,  # –ó–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É (70%+ –≥–æ–ª–æ—Å—ñ–≤)
    'streak_bonus': 15   # –ë–æ–Ω—É—Å –∑–∞ —Å–µ—Ä—ñ—é –ø–µ—Ä–µ–º–æ–≥
}

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò –î–£–ï–õ–Ü–í =====

async def cmd_duel(message: Message):
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /duel - –ø–æ–∫–∞–∑ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
    try:
        user_id = message.from_user.id
        await get_or_create_user(user_id, message.from_user.username, message.from_user.full_name)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        stats = await get_user_duel_stats(user_id)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ
        active_duels = await get_active_duels(limit=3)
        
        text = f"{DUEL_TEXTS['welcome']}\n\n"
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats:
            wins = stats.get('wins', 0)
            total = stats.get('total_duels', 0)
            win_rate = (wins / total * 100) if total > 0 else 0
            
            text += f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {wins}/{total} ({win_rate:.1f}%)\n"
            text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {stats.get('rating', 1000)}\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ
        if active_duels:
            text += f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ ({len(active_duels)}):</b>\n"
            for duel in active_duels[:2]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç–æ–ø 2
                votes_total = duel.get('challenger_votes', 0) + duel.get('opponent_votes', 0)
                text += f"‚Ä¢ –î—É–µ–ª—å #{duel['id']} ({votes_total} –≥–æ–ª–æ—Å—ñ–≤)\n"
            text += "\n"
        else:
            text += f"{DUEL_TEXTS['no_active_duels']}\n\n"
        
        # –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫
        keyboard = create_duel_main_keyboard(bool(active_duels))
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error in duel command: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def cmd_create_duel(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –¥—É–µ–ª—ñ"""
    try:
        user_id = message.from_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤
        user_active_duels = await get_user_active_duels(user_id)
        if user_active_duels:
            await message.answer(
                f"‚ö†Ô∏è –£ –≤–∞—Å –≤–∂–µ —î –∞–∫—Ç–∏–≤–Ω–∞ –¥—É–µ–ª—å #{user_active_duels[0]['id']}!\n"
                f"–î–æ—á–µ–∫–∞–π—Ç–µ—Å—è —ó—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /duels –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É."
            )
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥—É–µ–ª—å
        duel = await create_random_duel()
        
        if not duel:
            await message.answer(DUEL_TEXTS['no_content'])
            return
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω—É –¥—É–µ–ª—å
        await show_duel(message, duel['id'])
        
    except Exception as e:
        logger.error(f"Error creating duel: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ.")

async def cmd_active_duels(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤"""
    try:
        active_duels = await get_active_duels(limit=10)
        
        if not active_duels:
            await message.answer(DUEL_TEXTS['no_active_duels'])
            return
        
        text = f"{DUEL_EMOJI['fire']} <b>–ê–ö–¢–ò–í–ù–Ü –î–£–ï–õ–Ü</b>\n\n"
        
        for i, duel in enumerate(active_duels, 1):
            votes_total = duel.get('challenger_votes', 0) + duel.get('opponent_votes', 0)
            time_left = calculate_time_left(duel.get('ends_at'))
            
            text += f"{i}. –î—É–µ–ª—å #{duel['id']}\n"
            text += f"   üë• –ì–æ–ª–æ—Å—ñ–≤: {votes_total}\n"
            text += f"   ‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
        keyboard = create_duels_list_keyboard(active_duels[:5])
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error getting active duels: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤.")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def handle_duel_callbacks(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö callback'—ñ–≤ –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –¥—É–µ–ª—è–º–∏"""
    try:
        data = callback.data
        user_id = callback.from_user.id
        
        # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        await get_or_create_user(user_id, callback.from_user.username, callback.from_user.full_name)
        
        if data == "create_duel":
            await handle_create_duel_callback(callback)
            
        elif data == "view_duels":
            await handle_view_duels_callback(callback)
            
        elif data == "duel_stats":
            await handle_duel_stats_callback(callback)
            
        elif data == "duel_rules":
            await handle_duel_rules_callback(callback)
            
        elif data.startswith("view_duel_"):
            duel_id = int(data.split("_")[2])
            await handle_view_specific_duel(callback, duel_id)
            
        elif data.startswith("vote_"):
            await handle_vote_callback(callback)
            
        elif data.startswith("duel_refresh_"):
            duel_id = int(data.split("_")[2])
            await handle_refresh_duel(callback, duel_id)
            
        else:
            await callback.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
            
    except Exception as e:
        logger.error(f"Error in duel callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥—ñ—ó")

async def handle_create_duel_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ —á–µ—Ä–µ–∑ callback"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥—É–µ–ª—å
        duel = await create_random_duel()
        
        if not duel:
            await callback.answer(DUEL_TEXTS['no_content'], show_alert=True)
            return
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–≤–æ—é –¥—É–µ–ª–ª—é
        await show_duel_in_message(callback.message, duel['id'], edit=True)
        await callback.answer(f"{DUEL_EMOJI['fire']} –î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
    except Exception as e:
        logger.error(f"Error in create duel callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ")

async def handle_vote_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    try:
        # –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ: vote_duelID_side (challenger/opponent)
        parts = callback.data.split("_")
        duel_id = int(parts[1])
        side = parts[2]  # 'challenger' –∞–±–æ 'opponent'
        
        user_id = callback.from_user.id
        
        # –ì–æ–ª–æ—Å—É—î–º–æ
        result = await vote_in_duel(duel_id, user_id, side)
        
        if result['success']:
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥—É–µ–ª—å —Ç–∞ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await show_duel_in_message(callback.message, duel_id, edit=True)
            
            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
            await update_user_points(user_id, RANK_REWARDS['vote_in_duel'], "–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ")
            
            await callback.answer(DUEL_TEXTS['vote_registered'])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—É–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            await check_and_finish_duel(duel_id)
            
        elif result['error'] == 'already_voted':
            await callback.answer(DUEL_TEXTS['already_voted'], show_alert=True)
            
        elif result['error'] == 'duel_finished':
            await callback.answer("–î—É–µ–ª—å –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True)
            await show_duel_in_message(callback.message, duel_id, edit=True)
            
        else:
            await callback.answer(f"‚ùå {result.get('error', '–ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è')}")
            
    except Exception as e:
        logger.error(f"Error in vote callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")

async def handle_view_duels_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤"""
    try:
        active_duels = await get_active_duels(limit=10)
        
        if not active_duels:
            await callback.answer(DUEL_TEXTS['no_active_duels'], show_alert=True)
            return
        
        text = f"{DUEL_EMOJI['fire']} <b>–ê–ö–¢–ò–í–ù–Ü –î–£–ï–õ–Ü</b>\n\n"
        
        for i, duel in enumerate(active_duels, 1):
            votes_total = duel.get('challenger_votes', 0) + duel.get('opponent_votes', 0)
            time_left = calculate_time_left(duel.get('ends_at'))
            
            text += f"{i}. –î—É–µ–ª—å #{duel['id']} ({votes_total} –≥–æ–ª–æ—Å—ñ–≤)\n"
            text += f"   ‚è∞ {time_left}\n\n"
        
        keyboard = create_duels_list_keyboard(active_duels[:5])
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in view duels callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤")

async def handle_duel_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–µ–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        user_id = callback.from_user.id
        stats = await get_user_duel_stats(user_id)
        
        if not stats:
            await callback.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–µ–ª—ñ–≤", show_alert=True)
            return
        
        wins = stats.get('wins', 0)
        losses = stats.get('losses', 0)
        total = wins + losses
        win_rate = (wins / total * 100) if total > 0 else 0
        rating = stats.get('rating', 1000)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–Ω–≥
        rank = get_duel_rank(rating)
        
        text = f"{DUEL_EMOJI['trophy']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–Ü–í</b>\n\n"
        text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {wins}\n"
        text += f"üíî –ü–æ—Ä–∞–∑–∫–∏: {losses}\n"
        text += f"üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: {win_rate:.1f}%\n"
        text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}\n"
        text += f"üëë –†–∞–Ω–≥: {rank}\n\n"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if stats.get('best_win_streak', 0) > 0:
            text += f"üî• –ù–∞–π–∫—Ä–∞—â–∞ —Å–µ—Ä—ñ—è: {stats['best_win_streak']} –ø–µ—Ä–µ–º–æ–≥\n"
        
        if stats.get('total_votes_received', 0) > 0:
            text += f"üë• –û—Ç—Ä–∏–º–∞–Ω–æ –≥–æ–ª–æ—Å—ñ–≤: {stats['total_votes_received']}\n"
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –¥—É–µ–ª—ñ–≤", callback_data="back_to_duels")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in duel stats callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def create_random_duel() -> Optional[Dict[str, Any]]:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –¥—É–µ–ª—ñ –º—ñ–∂ –¥–≤–æ–º–∞ –∂–∞—Ä—Ç–∞–º–∏"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–≤–∞ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—Ö–≤–∞–ª–µ–Ω—ñ –∂–∞—Ä—Ç–∏
        content1 = await get_random_approved_content(ContentType.JOKE)
        content2 = await get_random_approved_content(ContentType.JOKE)
        
        if not content1 or not content2 or content1['id'] == content2['id']:
            # –ü—Ä–æ–±—É—î–º–æ –º–µ–º–∏ —è–∫—â–æ –∂–∞—Ä—Ç—ñ–≤ –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î
            if not content1:
                content1 = await get_random_approved_content(ContentType.MEME)
            if not content2:
                content2 = await get_random_approved_content(ContentType.MEME)
        
        if not content1 or not content2:
            return None
        
        # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥—É–µ–ª—ñ (5 —Ö–≤–∏–ª–∏–Ω)
        duration_minutes = 5
        ends_at = datetime.utcnow() + timedelta(minutes=duration_minutes)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥—É–µ–ª—å
        duel = await create_duel(
            content1_id=content1['id'],
            content2_id=content2['id'],
            ends_at=ends_at,
            min_votes=3
        )
        
        return duel
        
    except Exception as e:
        logger.error(f"Error creating random duel: {e}")
        return None

async def show_duel(message: Message, duel_id: int):
    """–ü–æ–∫–∞–∑ –¥—É–µ–ª—ñ –≤ –Ω–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"""
    try:
        duel = await get_duel_by_id(duel_id)
        
        if not duel:
            await message.answer("‚ùå –î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return
        
        text = format_duel_text(duel)
        keyboard = create_duel_keyboard(duel)
        
        await message.answer(text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error showing duel: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ")

async def show_duel_in_message(message: Message, duel_id: int, edit: bool = False):
    """–ü–æ–∫–∞–∑ –¥—É–µ–ª—ñ –≤ —ñ—Å–Ω—É—é—á–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ"""
    try:
        duel = await get_duel_by_id(duel_id)
        
        if not duel:
            text = "‚ùå –î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
            keyboard = None
        else:
            text = format_duel_text(duel)
            keyboard = create_duel_keyboard(duel)
        
        if edit:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"Error showing duel in message: {e}")

def format_duel_text(duel: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –¥—É–µ–ª—ñ"""
    try:
        # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        duel_id = duel['id']
        status = duel['status']
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content1 = duel.get('content1', {})
        content2 = duel.get('content2', {})
        
        # –ì–æ–ª–æ—Å–∏
        votes1 = duel.get('content1_votes', 0)
        votes2 = duel.get('content2_votes', 0)
        total_votes = votes1 + votes2
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        text = f"{DUEL_EMOJI['sword']} <b>–î–£–ï–õ–¨ #{duel_id}</b> {DUEL_EMOJI['sword']}\n\n"
        
        if status == DuelStatus.FINISHED:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –¥—É–µ–ª—å
            winner_text = "ü§ù –ù—ñ—á–∏—è!"
            if votes1 > votes2:
                winner_text = f"{DUEL_EMOJI['crown']} –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: –ñ–∞—Ä—Ç A!"
            elif votes2 > votes1:
                winner_text = f"{DUEL_EMOJI['crown']} –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: –ñ–∞—Ä—Ç B!"
            
            text += f"{winner_text}\n\n"
        else:
            # –ê–∫—Ç–∏–≤–Ω–∞ –¥—É–µ–ª—å
            time_left = calculate_time_left(duel.get('ends_at'))
            text += f"{DUEL_EMOJI['timer']} –ó–∞–ª–∏—à–∏–ª–æ—Å—å —á–∞—Å—É: {time_left}\n\n"
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç –¥—É–µ–ª—ñ
        text += f"üÖ∞Ô∏è <b>–ñ–∞—Ä—Ç A</b> ({votes1} {get_votes_word(votes1)}):\n"
        text += f"<i>{content1.get('text', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')}</i>\n\n"
        
        text += f"üÖ±Ô∏è <b>–ñ–∞—Ä—Ç B</b> ({votes2} {get_votes_word(votes2)}):\n"
        text += f"<i>{content2.get('text', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')}</i>\n\n"
        
        # –ü—ñ–¥—Å—É–º–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        if total_votes > 0:
            percentage1 = (votes1 / total_votes * 100) if total_votes > 0 else 0
            percentage2 = (votes2 / total_votes * 100) if total_votes > 0 else 0
            
            text += f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</b>\n"
            text += f"üÖ∞Ô∏è {percentage1:.1f}% ({'‚ñà' * int(percentage1/10)}{' ' * (10 - int(percentage1/10))})\n"
            text += f"üÖ±Ô∏è {percentage2:.1f}% ({'‚ñà' * int(percentage2/10)}{' ' * (10 - int(percentage2/10))})\n\n"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ–≤
        if status == DuelStatus.ACTIVE:
            min_votes = duel.get('min_votes', 3)
            if total_votes < min_votes:
                text += f"üí° –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ {min_votes - total_votes} {get_votes_word(min_votes - total_votes)}\n"
        
        return text
        
    except Exception as e:
        logger.error(f"Error formatting duel text: {e}")
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥—É–µ–ª—ñ #{duel.get('id', '?')}"

def create_duel_keyboard(duel: Dict[str, Any]) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –¥—É–µ–ª—ñ"""
    try:
        duel_id = duel['id']
        status = duel['status']
        
        buttons = []
        
        if status == DuelStatus.ACTIVE:
            # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—É–µ–ª—ñ
            buttons.append([
                InlineKeyboardButton(
                    text=f"üÖ∞Ô∏è –ì–æ–ª–æ—Å—É—é –∑–∞ A", 
                    callback_data=f"vote_{duel_id}_content1"
                ),
                InlineKeyboardButton(
                    text=f"üÖ±Ô∏è –ì–æ–ª–æ—Å—É—é –∑–∞ B", 
                    callback_data=f"vote_{duel_id}_content2"
                )
            ])
            
            # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            buttons.append([
                InlineKeyboardButton(
                    text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", 
                    callback_data=f"duel_refresh_{duel_id}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        buttons.append([
            InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –¥–æ –¥—É–µ–ª—ñ–≤", 
                callback_data="back_to_duels"
            )
        ])
        
        return InlineKeyboardMarkup(inline_keyboard=buttons)
        
    except Exception as e:
        logger.error(f"Error creating duel keyboard: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

def create_duel_main_keyboard(has_active_duels: bool = False) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥—É–µ–ª—ñ–≤"""
    buttons = [
        [InlineKeyboardButton(text=f"{DUEL_EMOJI['fire']} –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å", callback_data="create_duel")],
    ]
    
    if has_active_duels:
        buttons.append([
            InlineKeyboardButton(text=f"{DUEL_EMOJI['target']} –ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ", callback_data="view_duels")
        ])
    
    buttons.extend([
        [InlineKeyboardButton(text=f"{DUEL_EMOJI['trophy']} –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="duel_stats")],
        [InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞ –¥—É–µ–ª—ñ–≤", callback_data="duel_rules")],
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def create_duels_list_keyboard(duels: List[Dict]) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫–æ–º –¥—É–µ–ª—ñ–≤"""
    buttons = []
    
    for duel in duels[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5 –¥—É–µ–ª—ñ–≤
        votes_total = duel.get('content1_votes', 0) + duel.get('content2_votes', 0)
        button_text = f"–î—É–µ–ª—å #{duel['id']} ({votes_total} –≥–æ–ª–æ—Å—ñ–≤)"
        buttons.append([
            InlineKeyboardButton(
                text=button_text, 
                callback_data=f"view_duel_{duel['id']}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –¥—É–µ–ª—ñ
    buttons.append([
        InlineKeyboardButton(text=f"{DUEL_EMOJI['fire']} –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É", callback_data="create_duel")
    ])
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_duels")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def calculate_time_left(ends_at) -> str:
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è"""
    try:
        if not ends_at:
            return "–ù–µ–≤—ñ–¥–æ–º–æ"
        
        if isinstance(ends_at, str):
            ends_at = datetime.fromisoformat(ends_at.replace('Z', '+00:00'))
        
        now = datetime.utcnow()
        if ends_at.tzinfo:
            from datetime import timezone
            now = now.replace(tzinfo=timezone.utc)
        
        diff = ends_at - now
        
        if diff.total_seconds() <= 0:
            return "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"
        
        minutes = int(diff.total_seconds() // 60)
        seconds = int(diff.total_seconds() % 60)
        
        if minutes > 0:
            return f"{minutes}—Ö–≤ {seconds}—Å"
        else:
            return f"{seconds}—Å"
            
    except Exception:
        return "–ù–µ–≤—ñ–¥–æ–º–æ"

def get_votes_word(count: int) -> str:
    """–ü—Ä–∞–≤–∏–ª—å–Ω–∞ —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞ '–≥–æ–ª–æ—Å'"""
    if count % 10 == 1 and count % 100 != 11:
        return "–≥–æ–ª–æ—Å"
    elif count % 10 in [2, 3, 4] and count % 100 not in [12, 13, 14]:
        return "–≥–æ–ª–æ—Å–∏"
    else:
        return "–≥–æ–ª–æ—Å—ñ–≤"

def get_duel_rank(rating: int) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –¥—É–µ–ª—ñ—Å—Ç–∞ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–º"""
    if rating >= 2000:
        return f"{DUEL_EMOJI['crown']} –ì—Ä–∞–Ω–¥-–º–∞–π—Å—Ç–µ—Ä"
    elif rating >= 1800:
        return f"{DUEL_EMOJI['trophy']} –ú–∞–π—Å—Ç–µ—Ä"
    elif rating >= 1600:
        return f"{DUEL_EMOJI['star']} –ï–∫—Å–ø–µ—Ä—Ç"
    elif rating >= 1400:
        return f"{DUEL_EMOJI['lightning']} –ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª"
    elif rating >= 1200:
        return f"{DUEL_EMOJI['fire']} –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π"
    elif rating >= 1000:
        return f"{DUEL_EMOJI['target']} –ù–æ–≤–∞—á–æ–∫"
    else:
        return "ü•â –°—Ç–∞–∂–µ—Ä"

async def check_and_finish_duel(duel_id: int):
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ"""
    try:
        duel = await get_duel_by_id(duel_id)
        
        if not duel or duel['status'] != DuelStatus.ACTIVE:
            return
        
        total_votes = duel.get('content1_votes', 0) + duel.get('content2_votes', 0)
        min_votes = duel.get('min_votes', 3)
        ends_at = duel.get('ends_at')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        should_finish = False
        
        # –ß–∞—Å –≤–∏—á–µ—Ä–ø–∞–Ω–æ
        if ends_at:
            if isinstance(ends_at, str):
                ends_at = datetime.fromisoformat(ends_at.replace('Z', '+00:00'))
            
            now = datetime.utcnow()
            if ends_at.tzinfo:
                from datetime import timezone
                now = now.replace(tzinfo=timezone.utc)
            
            if now >= ends_at and total_votes >= min_votes:
                should_finish = True
        
        # –î–æ—Å—Ç–∞—Ç–Ω—å–æ –≥–æ–ª–æ—Å—ñ–≤ —ñ —è–≤–Ω–∏–π –ª—ñ–¥–µ—Ä
        if total_votes >= min_votes * 2:  # –í –¥–≤–∞ —Ä–∞–∑–∏ –±—ñ–ª—å—à–µ –º—ñ–Ω—ñ–º—É–º—É
            votes1 = duel.get('content1_votes', 0)
            votes2 = duel.get('content2_votes', 0)
            
            # –Ø–∫—â–æ —Ä—ñ–∑–Ω–∏—Ü—è –±—ñ–ª—å—à–µ 50% –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
            if abs(votes1 - votes2) > total_votes * 0.5:
                should_finish = True
        
        if should_finish:
            await finish_duel(duel_id)
            logger.info(f"Duel {duel_id} finished automatically")
        
    except Exception as e:
        logger.error(f"Error checking duel finish: {e}")

# ===== –î–û–î–ê–¢–ö–û–í–Ü –•–ï–ù–î–õ–ï–†–ò =====

async def handle_duel_rules_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑ –ø—Ä–∞–≤–∏–ª –¥—É–µ–ª—ñ–≤"""
    text = f"{DUEL_EMOJI['sword']} <b>–ü–†–ê–í–ò–õ–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í</b>\n\n"
    text += "üéØ <b>–Ø–∫ –ø—Ä–∞—Ü—é—Ç—å –¥—É–µ–ª—ñ:</b>\n"
    text += "‚Ä¢ –î–≤–∞ –∂–∞—Ä—Ç–∏ –∑–º–∞–≥–∞—é—Ç—å—Å—è –∑–∞ –≥–æ–ª–æ—Å–∏\n"
    text += "‚Ä¢ –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑\n"
    text += "‚Ä¢ –î—É–µ–ª—å —Ç—Ä–∏–≤–∞—î 5 —Ö–≤–∏–ª–∏–Ω\n"
    text += "‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 3 –≥–æ–ª–æ—Å–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è\n\n"
    
    text += "üèÜ <b>–ù–∞–≥–æ—Ä–æ–¥–∏:</b>\n"
    text += f"‚Ä¢ –ó–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: +{RANK_REWARDS['vote_in_duel']} –±–∞–ª—ñ–≤\n"
    text += f"‚Ä¢ –ó–∞ —É—á–∞—Å—Ç—å: +{RANK_REWARDS['duel_participate']} –±–∞–ª—ñ–≤\n"
    text += f"‚Ä¢ –ó–∞ –ø–µ—Ä–µ–º–æ–≥—É: +{RANK_REWARDS['duel_win']} –±–∞–ª—ñ–≤\n"
    text += f"‚Ä¢ –ó–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É: +{RANK_REWARDS['epic_victory']} –±–∞–ª—ñ–≤\n\n"
    
    text += "üìä <b>–†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞:</b>\n"
    text += "‚Ä¢ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥: 1000\n"
    text += "‚Ä¢ –ó–∞ –ø–µ—Ä–µ–º–æ–≥—É: +20-40 —Ä–µ–π—Ç–∏–Ω–≥—É\n"
    text += "‚Ä¢ –ó–∞ –ø–æ—Ä–∞–∑–∫—É: -10-20 —Ä–µ–π—Ç–∏–Ω–≥—É\n"
    text += "‚Ä¢ –†–∞–Ω–≥–∏ –≤—ñ–¥ –°—Ç–∞–∂–µ—Ä–∞ –¥–æ –ì—Ä–∞–Ω–¥-–º–∞–π—Å—Ç—Ä–∞\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –¥—É–µ–ª—ñ–≤", callback_data="back_to_duels")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_duel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥—É–µ–ª—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_duel, Command("duel"))
    dp.message.register(cmd_create_duel, Command("create_duel"))
    dp.message.register(cmd_active_duels, Command("duels"))
    
    # Callback'–∏
    dp.callback_query.register(
        handle_duel_callbacks,
        lambda c: c.data and (
            c.data.startswith("duel_") or
            c.data.startswith("vote_") or
            c.data in ["create_duel", "view_duels", "duel_stats", "duel_rules", "back_to_duels"]
        )
    )
    
    logger.info("‚úÖ Duel handlers registered")

# ===== –ï–ö–°–ü–û–†–¢ =====

__all__ = [
    'register_duel_handlers',
    'cmd_duel',
    'create_random_duel',
    'check_and_finish_duel',
    'DuelStates',
    'RANK_REWARDS'
]