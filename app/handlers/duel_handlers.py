#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –¥—É–µ–ª–µ–π –∂–∞—Ä—Ç—ñ–≤ üß†üòÇüî•
"""

import logging
import asyncio
import random
from datetime import datetime, timedelta

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# Fallback —ñ–º–ø–æ—Ä—Ç–∏
try:
    from config.settings import Settings
    settings = Settings()
    
    if not hasattr(settings, 'DUEL_VOTING_TIME'):
        settings.DUEL_VOTING_TIME = 300  # 5 —Ö–≤–∏–ª–∏–Ω
    if not hasattr(settings, 'POINTS_FOR_DUEL_WIN'):
        settings.POINTS_FOR_DUEL_WIN = 15
    if not hasattr(settings, 'MIN_VOTES_FOR_DUEL'):
        settings.MIN_VOTES_FOR_DUEL = 3
    if not hasattr(settings, 'MAX_JOKE_LENGTH'):
        settings.MAX_JOKE_LENGTH = 1000
        
except ImportError:
    import os
    class FallbackSettings:
        DUEL_VOTING_TIME = int(os.getenv("DUEL_VOTING_TIME", "300"))
        POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "15"))
        MIN_VOTES_FOR_DUEL = int(os.getenv("MIN_VOTES_FOR_DUEL", "3"))
        MAX_JOKE_LENGTH = int(os.getenv("MAX_JOKE_LENGTH", "1000"))
    settings = FallbackSettings()

# EMOJI –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
EMOJI = {
    "vs": "‚öîÔ∏è", "fire": "üî•", "brain": "üß†", "laugh": "üòÇ",
    "trophy": "üèÜ", "star": "‚≠ê", "thinking": "ü§î", 
    "time": "‚è∞", "check": "‚úÖ", "cross": "‚ùå",
    "stats": "üìä", "profile": "üë§", "party": "üéâ"
}

# FSM –¥–ª—è –¥—É–µ–ª–µ–π
class DuelStates(StatesGroup):
    waiting_for_joke = State()

# –ü—Ä–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ –¥–ª—è –¥—É–µ–ª–µ–π (fallback)
class Duel:
    def __init__(self, id, initiator_id, opponent_id=None):
        self.id = id
        self.initiator_id = initiator_id
        self.opponent_id = opponent_id
        self.initiator_joke = ""
        self.opponent_joke = ""
        self.initiator_votes = 0
        self.opponent_votes = 0
        self.total_votes = 0
        self.voting_ends_at = datetime.now() + timedelta(seconds=settings.DUEL_VOTING_TIME)
        self.voters = set()  # ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞–ª–∏
        self.status = "active"
        self.winner_id = None

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥—É–µ–ª–µ–π
ACTIVE_DUELS = {}
DUEL_COUNTER = 1

# –ó—Ä–∞–∑–∫–∏ –∂–∞—Ä—Ç—ñ–≤ –¥–ª—è –æ–ø–æ–Ω–µ–Ω—Ç—ñ–≤
OPPONENT_JOKES = [
    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –º–æ–∂—É—Ç—å –∑–Ω–∞–π—Ç–∏ –∫–æ—Ö–∞–Ω–Ω—è? –ë–æ –≤–æ–Ω–∏ –∑–∞–≤–∂–¥–∏ —à—É–∫–∞—é—Ç—å —ñ–¥–µ–∞–ª—å–Ω–∏–π –º–∞—Ç—á!",
    "–©–æ —Ä–æ–±–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∫–æ–ª–∏ —Ö–æ–ª–æ–¥–Ω–æ? –í—ñ–¥–∫—Ä–∏–≤–∞—î Java!",
    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å —Ç–µ–º–Ω—É —Ç–µ–º—É? –ë–æ —Å–≤—ñ—Ç–ª–æ –ø—Ä–∏–≤–∞–±–ª—é—î –±–∞–≥–∏!",
    "–Ø–∫ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —Ä–∞—Ö—É—î –≤—ñ–≤—Ü—ñ? 1 –æ–≤—Ü—è, 2 –æ–≤—Ü—ñ, 3 –æ–≤—Ü—ñ... stack overflow!",
    "–ß–æ–º—É —É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î –¥—ñ—Ç–µ–π? –ë–æ –≤–æ–Ω–∏ –Ω–µ –º–æ–∂—É—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–º—ñ—Ç –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤!"
]

async def get_random_joke_for_duel():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∂–∞—Ä—Ç—É –¥–ª—è –¥—É–µ–ª—ñ"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from handlers.content_handlers import get_random_joke
        joke = await get_random_joke()
        if joke:
            return joke.text
    except ImportError:
        pass
    
    # Fallback
    return random.choice(OPPONENT_JOKES)

async def update_user_points(user_id: int, points: int, reason: str):
    """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        from database.database import update_user_points as db_update_points
        await db_update_points(user_id, points, reason)
    except ImportError:
        logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: +{points} –±–∞–ª—ñ–≤ –∑–∞ {reason}")

# ===== –ö–û–ú–ê–ù–î–ò –î–£–ï–õ–ï–ô =====

async def cmd_duel(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /duel - –ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤"""
    user_id = message.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—É–µ–ª—ñ
    for duel in ACTIVE_DUELS.values():
        if duel.initiator_id == user_id and duel.status == "active":
            await show_active_duel(message, duel)
            return
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥—É–µ–ª—ñ
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['brain']} –î—É–µ–ª—å –∑ –º–æ—ó–º –∂–∞—Ä—Ç–æ–º",
                callback_data="duel_with_my_joke"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –î—É–µ–ª—å –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –∂–∞—Ä—Ç–æ–º",
                callback_data="duel_with_random_joke"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['thinking']} –Ø–∫ –ø—Ä–∞—Ü—é—î –¥—É–µ–ª—å?",
                callback_data="duel_info"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['stats']} –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                callback_data="show_profile"
            )
        ]
    ])
    
    await message.answer(
        f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –ñ–ê–†–¢–Ü–í!</b>\n\n"
        f"{EMOJI['fire']} –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç –¥—É–µ–ª—ñ:\n\n"
        f"{EMOJI['brain']} <b>–ó –º–æ—ó–º –∂–∞—Ä—Ç–æ–º</b> - –Ω–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç\n"
        f"{EMOJI['laugh']} <b>–ó –≤–∏–ø–∞–¥–∫–æ–≤–∏–º</b> - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∂–∞—Ä—Ç –∑ –±–∞–∑–∏\n\n"
        f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤!</b>\n"
        f"{EMOJI['time']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞—î {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω</b>",
        reply_markup=keyboard
    )

async def show_active_duel(message: Message, duel: Duel):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω–æ—ó –¥—É–µ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    time_left = (duel.voting_ends_at - datetime.now()).total_seconds()
    time_left_minutes = max(0, int(time_left // 60))
    
    duel_text = (
        f"{EMOJI['vs']} <b>–¢–í–û–Ø –ê–ö–¢–ò–í–ù–ê –î–£–ï–õ–¨ #{duel.id}</b>\n\n"
        f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê</b> (—Ç–≤—ñ–π):\n"
        f"{duel.initiator_joke}\n\n"
        f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë</b> (–æ–ø–æ–Ω–µ–Ω—Ç):\n"
        f"{duel.opponent_joke}\n\n"
        f"{EMOJI['fire']} –ì–æ–ª–æ—Å—ñ–≤ –∑–∞ –ê: {duel.initiator_votes}\n"
        f"{EMOJI['brain']} –ì–æ–ª–æ—Å—ñ–≤ –∑–∞ –ë: {duel.opponent_votes}\n"
        f"{EMOJI['time']} –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {time_left_minutes} —Ö–≤–∏–ª–∏–Ω"
    )
    
    if time_left <= 0:
        # –î—É–µ–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        winner = determine_winner(duel)
        duel_text += f"\n\n{EMOJI['trophy']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {winner}"
    else:
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({duel.initiator_votes})",
                    callback_data=f"vote_duel:{duel.id}:initiator"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({duel.opponent_votes})",
                    callback_data=f"vote_duel:{duel.id}:opponent"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    callback_data=f"duel_results:{duel.id}"
                )
            ]
        ])
        
        await message.answer(duel_text, reply_markup=keyboard)
        return
    
    await message.answer(duel_text)

async def create_duel_with_joke(user_id: int, user_joke: str, bot) -> Duel:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ –∑ –∂–∞—Ä—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    global DUEL_COUNTER
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞—Ä—Ç—É –æ–ø–æ–Ω–µ–Ω—Ç–∞
    opponent_joke = await get_random_joke_for_duel()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
    duel = Duel(DUEL_COUNTER, user_id)
    duel.initiator_joke = user_joke
    duel.opponent_joke = opponent_joke
    
    ACTIVE_DUELS[DUEL_COUNTER] = duel
    DUEL_COUNTER += 1
    
    logger.info(f"üî• –°—Ç–≤–æ—Ä–µ–Ω–æ –¥—É–µ–ª—å {duel.id} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    return duel

async def start_duel_voting(duel: Duel, bot, initiator_message: Message):
    """–ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({duel.initiator_votes})",
                callback_data=f"vote_duel:{duel.id}:initiator"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({duel.opponent_votes})",
                callback_data=f"vote_duel:{duel.id}:opponent"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                callback_data=f"duel_results:{duel.id}"
            )
        ]
    ])
    
    duel_text = (
        f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ –ñ–ê–†–¢–Ü–í #{duel.id}</b>\n\n"
        f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê:</b>\n"
        f"{duel.initiator_joke}\n\n"
        f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë:</b>\n"
        f"{duel.opponent_joke}\n\n"
        f"{EMOJI['time']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω</b>\n"
        f"{EMOJI['trophy']} –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤!\n"
        f"{EMOJI['star']} –ö–æ–∂–µ–Ω –≥–æ–ª–æ—Å: +2 –±–∞–ª–∏ —É—á–∞—Å–Ω–∏–∫—É"
    )
    
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä—É
    await initiator_message.answer(
        f"{EMOJI['vs']} <b>–¢–≤–æ—è –¥—É–µ–ª—å –ø–æ—á–∞–ª–∞—Å—è!</b>\n\n{duel_text}",
        reply_markup=keyboard
    )
    
    # –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    asyncio.create_task(auto_finish_duel(duel.id, bot))

async def auto_finish_duel(duel_id: int, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
    await asyncio.sleep(settings.DUEL_VOTING_TIME)
    
    if duel_id in ACTIVE_DUELS:
        duel = ACTIVE_DUELS[duel_id]
        if duel.status == "active":
            await finish_duel(duel_id, bot)

async def vote_in_duel(duel_id: int, voter_id: int, vote_for: str) -> dict:
    """–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    if duel_id not in ACTIVE_DUELS:
        return {"success": False, "message": "–î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"}
    
    duel = ACTIVE_DUELS[duel_id]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    if datetime.now() > duel.voting_ends_at:
        return {"success": False, "message": "–ß–∞—Å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ"}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ –≤–∂–µ
    if voter_id in duel.voters:
        return {"success": False, "message": "–¢–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤ —É —Ü—ñ–π –¥—É–µ–ª—ñ"}
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–µ —É—á–∞—Å–Ω–∏–∫ –¥—É–µ–ª—ñ
    if voter_id == duel.initiator_id:
        return {"success": False, "message": "–Ü–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –¥—É–µ–ª—ñ –Ω–µ –º–æ–∂–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏"}
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É
    duel.voters.add(voter_id)
    
    if vote_for == "initiator":
        duel.initiator_votes += 1
    else:
        duel.opponent_votes += 1
    
    duel.total_votes += 1
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    await update_user_points(voter_id, 2, "–≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ")
    
    return {
        "success": True,
        "message": f"–ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ! +2 –±–∞–ª–∏",
        "initiator_votes": duel.initiator_votes,
        "opponent_votes": duel.opponent_votes
    }

def determine_winner(duel: Duel) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è –¥—É–µ–ª—ñ"""
    if duel.initiator_votes > duel.opponent_votes:
        return "–ñ–∞—Ä—Ç –ê –ø–µ—Ä–µ–º—ñ–≥!"
    elif duel.opponent_votes > duel.initiator_votes:
        return "–ñ–∞—Ä—Ç –ë –ø–µ—Ä–µ–º—ñ–≥!"
    else:
        return "–ù—ñ—á–∏—è!"

async def finish_duel(duel_id: int, bot):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ —Ç–∞ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
    if duel_id not in ACTIVE_DUELS:
        return
    
    duel = ACTIVE_DUELS[duel_id]
    duel.status = "completed"
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
    winner_text = determine_winner(duel)
    
    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –ø–µ—Ä–µ–º–æ–∂—Ü—é
    if duel.initiator_votes > duel.opponent_votes:
        duel.winner_id = duel.initiator_id
        await update_user_points(duel.initiator_id, settings.POINTS_FOR_DUEL_WIN, "–ø–µ—Ä–µ–º–æ–≥–∞ –≤ –¥—É–µ–ª—ñ")
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
        try:
            await bot.send_message(
                duel.initiator_id,
                f"{EMOJI['trophy']} <b>–ü–ï–†–ï–ú–û–ì–ê –í –î–£–ï–õ–Ü #{duel.id}!</b>\n\n"
                f"{EMOJI['fire']} –¢–≤—ñ–π –∂–∞—Ä—Ç –ø–µ—Ä–µ–º—ñ–≥!\n"
                f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç: {duel.initiator_votes} vs {duel.opponent_votes}\n"
                f"{EMOJI['star']} +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤ –¥–æ —Ç–≤–æ—î—ó —Å–∫–∞—Ä–±–Ω–∏—á–∫–∏!"
            )
        except:
            pass
    
    logger.info(f"üèÜ –î—É–µ–ª—å {duel_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. {winner_text}")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_duel_info(callback_query: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥—É–µ–ª—ñ"""
    info_text = (
        f"{EMOJI['vs']} <b>–Ø–ö –ü–†–ê–¶–Æ–Æ–¢–¨ –î–£–ï–õ–Ü:</b>\n\n"
        f"{EMOJI['fire']} <b>1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ</b>\n"
        f"‚Ä¢ –û–±–µ—Ä–∏ —Å–≤—ñ–π –∂–∞—Ä—Ç –∞–±–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∑–Ω–∞–π–¥–µ –æ–ø–æ–Ω–µ–Ω—Ç–∞ –∑ –±–∞–∑–∏\n\n"
        f"{EMOJI['brain']} <b>2. –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è</b>\n"
        f"‚Ä¢ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω\n"
        f"‚Ä¢ –ì–æ–ª–æ—Å—É—é—Ç—å —ñ–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
        f"‚Ä¢ –£—á–∞—Å–Ω–∏–∫–∏ –¥—É–µ–ª—ñ –Ω–µ –≥–æ–ª–æ—Å—É—é—Ç—å\n\n"
        f"{EMOJI['trophy']} <b>3. –ù–∞–≥–æ—Ä–æ–¥–∏</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤\n"
        f"‚Ä¢ –ö–æ–∂–µ–Ω –≥–æ–ª–æ—Å: +2 –±–∞–ª–∏\n"
        f"‚Ä¢ –ú—ñ–Ω—ñ–º—É–º {settings.MIN_VOTES_FOR_DUEL} –≥–æ–ª–æ—Å—ñ–≤ –¥–ª—è –¥—ñ–π—Å–Ω–æ—Å—Ç—ñ\n\n"
        f"{EMOJI['star']} <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –±–∞—Ç–ª—É?</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å!",
                callback_data="start_new_duel"
            )
        ]
    ])
    
    await callback_query.message.edit_text(info_text, reply_markup=keyboard)
    await callback_query.answer()

async def callback_duel_with_my_joke(callback_query: CallbackQuery, state: FSMContext):
    """–î—É–µ–ª—å –∑ –≤–ª–∞—Å–Ω–∏–º –∂–∞—Ä—Ç–æ–º"""
    await callback_query.message.edit_text(
        f"{EMOJI['brain']} <b>–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –¥—É–µ–ª—ñ!</b>\n\n"
        f"{EMOJI['fire']} –ù–∞–ø–∏—à–∏ –Ω–∞–π—Å–º—ñ—à–Ω—ñ—à–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['star']} –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n"
        f"{EMOJI['time']} –ß–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: 2 —Ö–≤–∏–ª–∏–Ω–∏\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è!"
    )
    
    await state.set_state(DuelStates.waiting_for_joke)
    await callback_query.answer()

async def callback_duel_with_random_joke(callback_query: CallbackQuery):
    """–î—É–µ–ª—å –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º –∂–∞—Ä—Ç–æ–º"""
    user_id = callback_query.from_user.id
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É
    random_joke = await get_random_joke_for_duel()
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel = await create_duel_with_joke(user_id, random_joke, callback_query.bot)
        
        # –ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        await start_duel_voting(duel, callback_query.bot, callback_query.message)
        
        await callback_query.answer(f"{EMOJI['check']} –î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        await callback_query.message.edit_text(
            f"{EMOJI['cross']} <b>–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ!</b>\n\n"
            f"{EMOJI['thinking']} –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
        )
        await callback_query.answer()

async def handle_duel_joke_submission(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∂–∞—Ä—Ç—É –¥–ª—è –¥—É–µ–ª—ñ"""
    user_id = message.from_user.id
    joke_text = message.text.strip()
    
    if len(joke_text) > settings.MAX_JOKE_LENGTH:
        await message.answer(
            f"{EMOJI['cross']} –ñ–∞—Ä—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π!\n"
            f"–ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ
        duel = await create_duel_with_joke(user_id, joke_text, message.bot)
        
        # –ü–æ—á–∞—Ç–æ–∫ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
        await start_duel_voting(duel, message.bot, message)
        
        await message.answer(
            f"{EMOJI['check']} <b>–î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n"
            f"{EMOJI['fire']} –¢–≤—ñ–π –∂–∞—Ä—Ç:\n{joke_text}\n\n"
            f"{EMOJI['vs']} –ü–æ—á–∞—Ç–æ–∫ –±–∞—Ç–ª—É!\n"
            f"{EMOJI['time']} –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞—î {settings.DUEL_VOTING_TIME // 60} —Ö–≤–∏–ª–∏–Ω"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—É–µ–ª—ñ: {e}")
        await message.answer(
            f"{EMOJI['cross']} <b>–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å!</b>\n\n"
            f"{EMOJI['thinking']} –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ"
        )
    
    await state.clear()

async def callback_vote_duel(callback_query: CallbackQuery):
    """–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    data_parts = callback_query.data.split(':')
    duel_id = int(data_parts[1])
    vote_for = data_parts[2]
    
    result = await vote_in_duel(duel_id, callback_query.from_user.id, vote_for)
    
    if result["success"]:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –Ω–æ–≤–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê ({result['initiator_votes']})",
                    callback_data=f"vote_duel:{duel_id}:initiator"
                ),
                InlineKeyboardButton(
                    text=f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë ({result['opponent_votes']})",
                    callback_data=f"vote_duel:{duel_id}:opponent"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"{EMOJI['stats']} –†–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                    callback_data=f"duel_results:{duel_id}"
                )
            ]
        ])
        
        try:
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
        except:
            pass
    
    await callback_query.answer(result["message"])

async def callback_duel_results(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥—É–µ–ª—ñ"""
    duel_id = int(callback_query.data.split(':')[1])
    
    if duel_id not in ACTIVE_DUELS:
        await callback_query.answer("‚ùå –î—É–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return
    
    duel = ACTIVE_DUELS[duel_id]
    
    results_text = (
        f"{EMOJI['stats']} <b>–†–ï–ó–£–õ–¨–¢–ê–¢–ò –î–£–ï–õ–Ü #{duel_id}</b>\n\n"
        f"{EMOJI['fire']} <b>–ñ–∞—Ä—Ç –ê:</b> {duel.initiator_votes} –≥–æ–ª–æ—Å—ñ–≤\n"
        f"{EMOJI['brain']} <b>–ñ–∞—Ä—Ç –ë:</b> {duel.opponent_votes} –≥–æ–ª–æ—Å—ñ–≤\n"
        f"{EMOJI['vs']} <b>–í—Å—å–æ–≥–æ –≥–æ–ª–æ—Å—ñ–≤:</b> {duel.total_votes}\n\n"
    )
    
    if duel.status == "completed":
        results_text += f"{EMOJI['trophy']} <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {determine_winner(duel)}"
    else:
        time_left = (duel.voting_ends_at - datetime.now()).total_seconds()
        if time_left > 0:
            results_text += f"{EMOJI['time']} <b>–ó–∞–ª–∏—à–∏–ª–æ—Å—å:</b> {int(time_left // 60)} —Ö–≤ {int(time_left % 60)} —Å–µ–∫"
        else:
            results_text += f"{EMOJI['time']} <b>–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–µ</b>"
    
    await callback_query.answer(results_text, show_alert=True)

async def callback_start_new_duel(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ—ó –¥—É–µ–ª—ñ"""
    await callback_query.message.answer(
        f"{EMOJI['vs']} <b>–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –¥—É–µ–ª—å!</b>\n\n"
        f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /duel –¥–ª—è –ø–æ—á–∞—Ç–∫—É"
    )
    await callback_query.answer()

def register_duel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥—É–µ–ª–µ–π"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_duel, Command("duel"))
    
    # FSM —Ö–µ–Ω–¥–ª–µ—Ä–∏
    dp.message.register(handle_duel_joke_submission, DuelStates.waiting_for_joke)
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_duel_info, F.data == "duel_info")
    dp.callback_query.register(callback_duel_with_my_joke, F.data == "duel_with_my_joke")
    dp.callback_query.register(callback_duel_with_random_joke, F.data == "duel_with_random_joke")
    dp.callback_query.register(callback_vote_duel, F.data.startswith("vote_duel:"))
    dp.callback_query.register(callback_duel_results, F.data.startswith("duel_results:"))
    dp.callback_query.register(callback_start_new_duel, F.data == "start_new_duel")
    
    logger.info("‚úÖ Duel handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")