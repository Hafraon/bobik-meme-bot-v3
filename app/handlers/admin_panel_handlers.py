#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üëë –ü–û–õ–Ü–ü–®–ï–ù–ê –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨ –ó –°–¢–ê–¢–ò–ß–ù–ò–ú –ú–ï–ù–Æ üëë

–ù–û–í–Ü –§–£–ù–ö–¶–Ü–á:
‚úÖ –°—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é –∑ –∫–Ω–æ–ø–∫–∞–º–∏
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚úÖ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
‚úÖ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
‚úÖ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó
‚úÖ –ë–µ–∫–∞–ø —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
"""

import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import F
from aiogram.filters import Command
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from config.settings import ALL_ADMIN_IDS
        return user_id in ALL_ADMIN_IDS
    except ImportError:
        admin_id = int(os.getenv("ADMIN_ID", 603047391))
        return user_id == admin_id

def get_admin_static_menu() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    keyboard = [
        [
            KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            KeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è")
        ],
        [
            KeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
            KeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç")
        ],
        [
            KeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ"),
            KeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
        ],
        [
            KeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó"),
            KeyboardButton(text="üíæ –ë–µ–∫–∞–ø")
        ],
        [
            KeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é")
        ]
    ]
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        persistent=True
    )

def get_admin_inline_menu() -> InlineKeyboardMarkup:
    """Inline –º–µ–Ω—é –¥–ª—è –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats_general"),
            InlineKeyboardButton(text="üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_stats_users")
        ],
        [
            InlineKeyboardButton(text="üìù –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É", callback_data="admin_moderate_content"),
            InlineKeyboardButton(text="‚öîÔ∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥—É–µ–ª—è–º–∏", callback_data="admin_manage_duels")
        ],
        [
            InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="admin_mass_actions"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø –ë–î", callback_data="admin_backup"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="admin_restart")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def get_bot_statistics() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ë–î
        from database.database import get_database_stats, is_database_available
        
        if is_database_available():
            db_stats = await get_database_stats()
            return {
                "source": "database",
                "users_total": db_stats.get("users_total", 0),
                "users_active": db_stats.get("users_active", 0),
                "content_total": db_stats.get("content_total", 0),
                "content_approved": db_stats.get("content_approved", 0),
                "content_pending": db_stats.get("content_pending", 0),
                "duels_total": db_stats.get("duels_total", 0),
                "duels_active": db_stats.get("duels_active", 0),
                "database_status": "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞"
            }
        else:
            return {
                "source": "fallback",
                "users_total": "–ù/–î",
                "users_active": "–ù/–î", 
                "content_total": "–ù/–î",
                "content_approved": "–ù/–î",
                "content_pending": "–ù/–î",
                "duels_total": "–ù/–î",
                "duels_active": "–ù/–î",
                "database_status": "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            "source": "error",
            "error": str(e),
            "database_status": "‚ùå –ü–æ–º–∏–ª–∫–∞"
        }

async def get_system_info() -> Dict[str, Any]:
    """–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"""
    import psutil
    import sys
    
    try:
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        return {
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "memory_total": f"{memory.total / (1024**3):.1f} GB",
            "memory_used": f"{memory.used / (1024**3):.1f} GB", 
            "memory_percent": f"{memory.percent:.1f}%",
            "disk_total": f"{disk.total / (1024**3):.1f} GB",
            "disk_used": f"{disk.used / (1024**3):.1f} GB",
            "disk_percent": f"{(disk.used/disk.total)*100:.1f}%",
            "uptime": str(datetime.now() - datetime.fromtimestamp(psutil.boot_time())).split('.')[0]
        }
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: {e}")
        return {"error": str(e)}

# ===== –ö–û–ú–ê–ù–î–ò –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–Ü =====

async def cmd_admin(message: Message):
    """–ì–æ–ª–æ–≤–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—ñ"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return
    
    stats = await get_bot_statistics()
    system = await get_system_info()
    
    # –§–æ—Ä–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    text = f"üëë <b>–ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
    
    text += f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:</b>\n"
    text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {stats.get('users_total', '–ù/–î')} (–∞–∫—Ç–∏–≤–Ω—ñ: {stats.get('users_active', '–ù/–î')})\n"
    text += f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {stats.get('content_total', '–ù/–î')} (—Å—Ö–≤–∞–ª–µ–Ω–æ: {stats.get('content_approved', '–ù/–î')})\n"
    text += f"‚öîÔ∏è –î—É–µ–ª—ñ: {stats.get('duels_total', '–ù/–î')} (–∞–∫—Ç–∏–≤–Ω—ñ: {stats.get('duels_active', '–ù/–î')})\n"
    text += f"üíæ –ë–î: {stats.get('database_status', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
    
    if 'error' not in system:
        text += f"üñ•Ô∏è <b>–°–ò–°–¢–ï–ú–ê:</b>\n"
        text += f"üêç Python: {system.get('python_version', '–ù/–î')}\n"
        text += f"üíæ RAM: {system.get('memory_used', '–ù/–î')} / {system.get('memory_total', '–ù/–î')} ({system.get('memory_percent', '–ù/–î')})\n"
        text += f"üíø –î–∏—Å–∫: {system.get('disk_used', '–ù/–î')} / {system.get('disk_total', '–ù/–î')} ({system.get('disk_percent', '–ù/–î')})\n"
        text += f"‚è±Ô∏è Uptime: {system.get('uptime', '–ù/–î')}\n\n"
    
    text += f"‚ö° <b>–®–í–ò–î–ö–Ü –î–Ü–á:</b>\n"
    text += f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –∞–±–æ —Å—Ç–∞—Ç–∏—á–Ω–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º.\n\n"
    text += f"üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    
    await message.answer(
        text,
        reply_markup=get_admin_inline_menu(),
        parse_mode="HTML"
    )

async def cmd_admin_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç–∏—á–Ω–µ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    await message.answer(
        "üëë <b>–ê–î–ú–Ü–ù –ú–ï–ù–Æ –ê–ö–¢–ò–í–û–í–ê–ù–û</b>\n\n"
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è.\n\n"
        "üì± –ö–Ω–æ–ø–∫–∏ –∑–∞–ª–∏—à–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ –¥–æ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –º–µ–Ω—é.",
        reply_markup=get_admin_static_menu(),
        parse_mode="HTML"
    )

# ===== –û–ë–†–û–ë–ö–ê –°–¢–ê–¢–ò–ß–ù–ò–• –ö–ù–û–ü–û–ö =====

async def handle_admin_static_buttons(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –∞–¥–º—ñ–Ω –º–µ–Ω—é"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
        return
    
    text = message.text
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_detailed_statistics(message)
    elif text == "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è":
        await show_moderation_panel(message)
    elif text == "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ":
        await show_users_management(message)
    elif text == "üìù –ö–æ–Ω—Ç–µ–Ω—Ç":
        await show_content_management(message)
    elif text == "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ":
        await show_trending_content(message)
    elif text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è":
        await show_bot_settings(message)
    elif text == "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó":
        await show_mass_actions(message)
    elif text == "üíæ –ë–µ–∫–∞–ø":
        await show_backup_options(message)
    elif text == "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é":
        await message.answer(
            "‚úÖ –ê–¥–º—ñ–Ω –º–µ–Ω—é –≤–∏–º–∫–Ω–µ–Ω–æ.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /admin –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–∞–Ω–µ–ª—ñ.",
            reply_markup=ReplyKeyboardRemove()
        )

# ===== –î–ï–¢–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á –ü–ê–ù–ï–õ–ï–ô =====

async def show_detailed_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = await get_bot_statistics()
    
    text = "üìä <b>–î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
    
    if stats.get("source") == "database":
        text += "üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b> ‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞\n\n"
        text += f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
        text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {stats['users_total']}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ: {stats['users_active']}\n"
        text += f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ: {stats['users_total'] - stats['users_active']}\n\n"
        
        text += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
        text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {stats['content_total']}\n"
        text += f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {stats['content_approved']}\n"
        text += f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats['content_pending']}\n\n"
        
        text += f"‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\n"
        text += f"‚Ä¢ –í—Å—å–æ–≥–æ: {stats['duels_total']}\n"
        text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ñ: {stats['duels_active']}\n"
    else:
        text += "üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b> ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
        text += "‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î.\n"
        text += "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ:\n"
        text += "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ DATABASE_URL\n"
        text += "‚Ä¢ –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ PostgreSQL –ø—Ä–∞—Ü—é—î\n"
        text += "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n\n"
    
    text += f"üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="admin_refresh_stats")],
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ—ñ–∫–∏", callback_data="admin_show_charts")],
        [InlineKeyboardButton(text="üìã –ï–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_stats")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_moderation_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    text = "üõ°Ô∏è <b>–ü–ê–ù–ï–õ–¨ –ú–û–î–ï–†–ê–¶–Ü–á</b>\n\n"
    
    try:
        from database.database import is_database_available
        if is_database_available():
            text += "‚úÖ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
            text += "üìù <b>–§—É–Ω–∫—Ü—ñ—ó:</b>\n"
            text += "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\n"
            text += "‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∂–∞—Ä—Ç—ñ–≤\n"
            text += "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\n"
            text += "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
            text += "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        else:
            text += "‚ùå –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –ë–î\n\n"
            text += "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n"
            text += "‚Ä¢ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ PostgreSQL\n"
            text += "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—ñ –ë–î\n"
            text += "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    except:
        text += "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–∏—Å—Ç–µ–º–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="moderate_pending")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="moderate_blocked")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó", callback_data="moderate_settings")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_users_management(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    text = "üë• <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò</b>\n\n"
    
    try:
        from database.database import is_database_available
        if is_database_available():
            stats = await get_bot_statistics()
            text += f"üìä –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('users_total', 0)}\n"
            text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats.get('users_active', 0)}\n\n"
            text += "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n"
            text += "‚Ä¢ –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            text += "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤\n"
            text += "‚Ä¢ –ó–º—ñ–Ω–∞ –±–∞–ª—ñ–≤\n"
            text += "‚Ä¢ –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è/—Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è\n"
            text += "‚Ä¢ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª–µ–π"
        else:
            text += "‚ùå –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –±–µ–∑ –ë–î"
    except:
        text += "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="users_search")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="users_top")],
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ", callback_data="users_blocked")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_content_management(message: Message):
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    text = "üìù <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ö–û–ù–¢–ï–ù–¢–û–ú</b>\n\n"
    
    try:
        from database.database import is_database_available
        if is_database_available():
            stats = await get_bot_statistics()
            text += f"üìä –í—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {stats.get('content_total', 0)}\n"
            text += f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ: {stats.get('content_approved', 0)}\n"
            text += f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats.get('content_pending', 0)}\n\n"
            text += "üîß <b>–§—É–Ω–∫—Ü—ñ—ó:</b>\n"
            text += "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            text += "‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ\n"
            text += "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ\n"
            text += "‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–∞–º–∏\n"
            text += "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ"
        else:
            text += "‚ùå –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ –±–µ–∑ –ë–î"
    except:
        text += "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="content_add")],
        [InlineKeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="content_edit")],
        [InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="content_delete")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_trending_content(message: Message):
    """–¢—Ä–µ–Ω–¥–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    text = "üî• <b>–¢–†–ï–ù–î–û–í–ò–ô –ö–û–ù–¢–ï–ù–¢</b>\n\n"
    text += "üìà –ê–Ω–∞–ª—ñ–∑ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", callback_data="trending_today")],
        [InlineKeyboardButton(text="üìÖ –ó–∞ —Ç–∏–∂–¥–µ–Ω—å", callback_data="trending_week")],
        [InlineKeyboardButton(text="üìÖ –ó–∞ –º—ñ—Å—è—Ü—å", callback_data="trending_month")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_bot_settings(message: Message):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    text = "‚öôÔ∏è <b>–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–û–¢–ê</b>\n\n"
    text += "üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ä–æ–±–æ—Ç–∏\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü§ñ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞", callback_data="settings_bot")],
        [InlineKeyboardButton(text="üíæ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î", callback_data="settings_database")],
        [InlineKeyboardButton(text="üéÆ –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è", callback_data="settings_gamification")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_mass_actions(message: Message):
    """–ú–∞—Å–æ–≤—ñ –¥—ñ—ó"""
    text = "üöÄ <b>–ú–ê–°–û–í–Ü –î–Ü–á</b>\n\n"
    text += "‚ö†Ô∏è <b>–£–í–ê–ì–ê:</b> –¶—ñ –¥—ñ—ó –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤!\n\n"
    text += "üì¢ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:</b>\n"
    text += "‚Ä¢ –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
    text += "‚Ä¢ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
    text += "‚Ä¢ –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö\n"
    text += "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∞", callback_data="mass_broadcast")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="mass_cleanup")],
        [InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø", callback_data="mass_backup")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

async def show_backup_options(message: Message):
    """–û–ø—Ü—ñ—ó –±–µ–∫–∞–ø—É"""
    text = "üíæ <b>–ë–ï–ö–ê–ü –¢–ê –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø</b>\n\n"
    text += "üîí –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø", callback_data="backup_create")],
        [InlineKeyboardButton(text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –±–µ–∫–∞–ø", callback_data="backup_download")],
        [InlineKeyboardButton(text="üîÑ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ", callback_data="backup_restore")]
    ])
    
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def handle_admin_callbacks(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω callback'—ñ–≤"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ", show_alert=True)
        return
    
    data = callback_query.data
    
    if data == "admin_refresh_stats":
        await callback_query.answer("üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        await show_detailed_statistics(callback_query.message)
    
    elif data == "moderate_pending":
        await callback_query.answer("üìù –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        await callback_query.message.answer("üìù –¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
    
    elif data.startswith("admin_"):
        await callback_query.answer("‚öôÔ∏è –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        await callback_query.message.answer(f"üîß –§—É–Ω–∫—Ü—ñ—è '{data}' –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ")
    
    else:
        await callback_query.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_admin_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_admin_menu, Command("adminmenu"))
    
    # –°—Ç–∞—Ç–∏—á–Ω—ñ –∫–Ω–æ–ø–∫–∏
    dp.message.register(
        handle_admin_static_buttons,
        F.text.in_([
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", "üìù –ö–æ–Ω—Ç–µ–Ω—Ç",
            "üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", "üíæ –ë–µ–∫–∞–ø",
            "‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é"
        ])
    )
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("admin_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("moderate_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("users_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("content_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("settings_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("mass_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("backup_"))
    dp.callback_query.register(handle_admin_callbacks, F.data.startswith("trending_"))
    
    logger.info("‚úÖ –ê–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ —Å—Ç–∞—Ç–∏—á–Ω–∏–º –º–µ–Ω—é –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'register_admin_handlers', 'is_admin', 'get_admin_static_menu',
    'cmd_admin', 'cmd_admin_menu'
]