#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from datetime import datetime
from typing import Optional, List

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
class ModerationStates(StatesGroup):
    waiting_for_rejection_reason = State()

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        from config.settings import settings
        return settings.is_admin(user_id)
    except ImportError:
        import os
        admin_id = int(os.getenv('ADMIN_ID', 0))
        return user_id == admin_id

async def admin_required(message: Message) -> bool:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("üîí <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤</b>\n\n–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return False
    return True

async def cmd_admin_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if not await admin_required(message):
        return
    
    try:
        from database.services import get_basic_stats
        
        stats = get_basic_stats()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞
        stats_text = f"üìä <b>–ê–î–ú–Ü–ù –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
        
        stats_text += f"üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:</b>\n"
        stats_text += f"   –í—Å—å–æ–≥–æ: {stats['total_users']}\n"
        stats_text += f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: calculating...\n\n"
        
        stats_text += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
        stats_text += f"   –í—Å—å–æ–≥–æ: {stats['total_content']}\n"
        stats_text += f"   ‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ: {stats['approved_content']}\n"
        stats_text += f"   ‚è≥ –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ: {stats['pending_content']}\n"
        stats_text += f"   ‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: calculating...\n\n"
        
        stats_text += f"‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\n"
        stats_text += f"   –í—Å—å–æ–≥–æ: {stats['total_duels']}\n"
        stats_text += f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö: calculating...\n\n"
        
        stats_text += f"üïê <b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        
        # –ö–Ω–æ–ø–∫–∏ –∞–¥–º—ñ–Ω –¥—ñ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏", callback_data="admin_moderate"),
                InlineKeyboardButton(text="üìã –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ", callback_data="admin_pending")
            ],
            [
                InlineKeyboardButton(text="üë• –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_top_users"),
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="admin_refresh_stats")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)
        
        logger.info(f"Admin {message.from_user.id} viewed stats")
        
    except Exception as e:
        logger.error(f"Error in admin stats: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def cmd_moderate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /moderate - –ø–æ—á–∞—Ç–æ–∫ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not await admin_required(message):
        return
    
    try:
        from database.services import get_db_session
        from database.models import Content, ContentStatus, User
        
        with get_db_session() as session:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            pending_content = session.query(Content)\
                                   .filter(Content.status == ContentStatus.PENDING.value)\
                                   .order_by(Content.created_at.asc())\
                                   .limit(1)\
                                   .first()
            
            if not pending_content:
                await message.answer(
                    "‚úÖ <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    "–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ."
                )
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∞
            author = session.query(User).filter(User.id == pending_content.author_id).first()
            author_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
            if author:
                author_name = author.first_name or author.username or f"User{author.user_id}"
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            moderation_text = f"üõ°Ô∏è <b>–ú–û–î–ï–†–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
            moderation_text += f"üìÑ <b>ID:</b> {pending_content.id}\n"
            moderation_text += f"üìÇ <b>–¢–∏–ø:</b> {pending_content.content_type}\n"
            moderation_text += f"üë§ <b>–ê–≤—Ç–æ—Ä:</b> {author_name} (ID: {pending_content.author_user_id})\n"
            moderation_text += f"üìÖ <b>–î–∞—Ç–∞:</b> {pending_content.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            moderation_text += f"üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n{pending_content.text}"
            
            # –ö–Ω–æ–ø–∫–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"moderate_approve_{pending_content.id}"),
                    InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"moderate_reject_{pending_content.id}")
                ],
                [
                    InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="moderate_next"),
                    InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="moderate_refresh")
                ]
            ])
            
            await message.answer(moderation_text, reply_markup=keyboard)
            
            logger.info(f"Admin {message.from_user.id} started moderating content {pending_content.id}")
        
    except Exception as e:
        logger.error(f"Error in moderate command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.")

async def cmd_pending(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /pending - —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ"""
    if not await admin_required(message):
        return
    
    try:
        from database.services import get_db_session
        from database.models import Content, ContentStatus, User
        
        with get_db_session() as session:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
            pending_content = session.query(Content)\
                                   .filter(Content.status == ContentStatus.PENDING.value)\
                                   .order_by(Content.created_at.asc())\
                                   .limit(10)\
                                   .all()
            
            if not pending_content:
                await message.answer(
                    "‚úÖ <b>–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!</b>\n\n"
                    "–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ."
                )
                return
            
            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫
            pending_text = f"üìã <b>–ö–û–ù–¢–ï–ù–¢ –ù–ê –†–û–ó–ì–õ–Ø–î–Ü</b>\n\n"
            
            for content in pending_content:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∞–≤—Ç–æ—Ä–∞
                author = session.query(User).filter(User.id == content.author_id).first()
                author_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π"
                if author:
                    author_name = author.first_name or author.username or f"User{author.user_id}"
                
                pending_text += f"üîπ <b>ID {content.id}</b> ({content.content_type})\n"
                pending_text += f"   üë§ {author_name}\n"
                pending_text += f"   üìÖ {content.created_at.strftime('%d.%m %H:%M')}\n"
                pending_text += f"   üìù {content.text[:50]}{'...' if len(content.text) > 50 else ''}\n\n"
            
            if len(pending_content) == 10:
                pending_text += "üìå –ü–æ–∫–∞–∑–∞–Ω–æ –ø–µ—Ä—à–∏—Ö 10 –∑–∞–ø–∏—Å—ñ–≤\n\n"
            
            # –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üõ°Ô∏è –ü–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é", callback_data="admin_moderate"),
                    InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", callback_data="admin_pending")
                ]
            ])
            
            await message.answer(pending_text, reply_markup=keyboard)
            
            logger.info(f"Admin {message.from_user.id} viewed pending list")
        
    except Exception as e:
        logger.error(f"Error in pending command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É.")

async def cmd_approve(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /approve_ID - —à–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è"""
    if not await admin_required(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /approve_ID\n–ü—Ä–∏–∫–ª–∞–¥: /approve_5")
            return
        
        try:
            content_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            return
        
        # –°—Ö–≤–∞–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        result = await approve_content(content_id, message.from_user.id)
        
        if result:
            await message.answer(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç ID {content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ!")
        else:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}")
            
    except Exception as e:
        logger.error(f"Error in approve command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è.")

async def cmd_reject(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /reject_ID - —à–≤–∏–¥–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"""
    if not await admin_required(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /reject_ID [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–∫–ª–∞–¥: /reject_5 –ù–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            return
        
        try:
            content_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        reason = " ".join(parts[2:]) if len(parts) > 2 else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        result = await reject_content(content_id, message.from_user.id, reason)
        
        if result:
            await message.answer(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç ID {content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        else:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}")
            
    except Exception as e:
        logger.error(f"Error in reject command: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.")

async def approve_content(content_id: int, admin_id: int) -> bool:
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        from database.services import get_db_session, update_user_points
        from database.models import Content, ContentStatus, AdminAction
        
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if not content:
                return False
            
            if content.status != ContentStatus.PENDING.value:
                return False
            
            # –°—Ö–≤–∞–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
            content.status = ContentStatus.APPROVED.value
            content.moderated_by = admin_id
            content.moderated_at = datetime.now()
            
            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∞–≤—Ç–æ—Ä—É
            update_user_points(content.author_user_id, 20, f"—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ—Ä–∞
            from database.models import User
            author = session.query(User).filter(User.id == content.author_id).first()
            if author:
                author.total_approvals += 1
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –¥—ñ—é –∞–¥–º—ñ–Ω–∞
            admin_action = AdminAction(
                admin_id=admin_id,
                action_type="approve_content",
                target_type="content",
                target_id=content_id,
                description=f"–°—Ö–≤–∞–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø—É {content.content_type}",
                created_at=datetime.now()
            )
            session.add(admin_action)
            
            session.commit()
            
            logger.info(f"Admin {admin_id} approved content {content_id}")
            return True
            
    except Exception as e:
        logger.error(f"Error approving content {content_id}: {e}")
        return False

async def reject_content(content_id: int, admin_id: int, reason: str = "") -> bool:
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        from database.services import get_db_session
        from database.models import Content, ContentStatus, AdminAction
        
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if not content:
                return False
            
            if content.status != ContentStatus.PENDING.value:
                return False
            
            # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
            content.status = ContentStatus.REJECTED.value
            content.moderated_by = admin_id
            content.moderated_at = datetime.now()
            content.rejection_reason = reason
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –¥—ñ—é –∞–¥–º—ñ–Ω–∞
            admin_action = AdminAction(
                admin_id=admin_id,
                action_type="reject_content",
                target_type="content",
                target_id=content_id,
                description=f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–ø—É {content.content_type}",
                reason=reason,
                created_at=datetime.now()
            )
            session.add(admin_action)
            
            session.commit()
            
            logger.info(f"Admin {admin_id} rejected content {content_id}: {reason}")
            return True
            
    except Exception as e:
        logger.error(f"Error rejecting content {content_id}: {e}")
        return False

async def handle_admin_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ callback'—ñ–≤ –∞–¥–º—ñ–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("üîí –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤")
        return
    
    try:
        data = callback.data
        
        if data == "admin_moderate":
            # –ü–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
            await cmd_moderate(callback.message)
            await callback.answer()
            
        elif data == "admin_pending":
            # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ
            await cmd_pending(callback.message)
            await callback.answer()
            
        elif data == "admin_refresh_stats":
            # –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await cmd_admin_stats(callback.message)
            await callback.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ")
            
        elif data == "admin_top_users":
            # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            try:
                from database.services import get_top_users
                top_users = get_top_users(10)
                
                if top_users:
                    top_text = "üèÜ <b>–¢–û–ü –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í</b>\n\n"
                    for i, user in enumerate(top_users, 1):
                        name = user['first_name'] or user['username'] or f"User{user['user_id']}"
                        top_text += f"{i}. {name} - {user['points']} –±–∞–ª—ñ–≤ ({user['rank']})\n"
                    
                    await callback.message.answer(top_text)
                else:
                    await callback.message.answer("üë• –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É")
                    
            except Exception as e:
                logger.error(f"Error getting top users: {e}")
                await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É")
            
            await callback.answer()
            
        elif data.startswith("moderate_approve_"):
            # –°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_id = int(data.split("_")[-1])
            
            result = await approve_content(content_id, callback.from_user.id)
            
            if result:
                await callback.answer("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ!", show_alert=True)
                # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                await cmd_moderate(callback.message)
            else:
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è", show_alert=True)
                
        elif data.startswith("moderate_reject_"):
            # –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_id = int(data.split("_")[-1])
            
            # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–∏—á–∏–Ω—É
            await state.update_data(reject_content_id=content_id)
            await state.set_state(ModerationStates.waiting_for_rejection_reason)
            
            await callback.message.answer(
                f"‚ùå <b>–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}</b>\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å /skip –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏:"
            )
            await callback.answer()
            
        elif data == "moderate_next":
            # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await cmd_moderate(callback.message)
            await callback.answer("‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            
        elif data == "moderate_refresh":
            # –û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await cmd_moderate(callback.message)
            await callback.answer("üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ")
            
        else:
            await callback.answer("‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
            
    except Exception as e:
        logger.error(f"Error in admin callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏!")

async def handle_rejection_reason(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"""
    try:
        data = await state.get_data()
        content_id = data.get('reject_content_id')
        
        if not content_id:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: ID –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        
        reason = message.text.strip() if message.text else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        # –í—ñ–¥—Ö–∏–ª—è—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        result = await reject_content(content_id, message.from_user.id, reason)
        
        if result:
            await message.answer(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç ID {content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
            # –ü–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            await cmd_moderate(message)
        else:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling rejection reason: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—Ä–∏—á–∏–Ω–∏.")
        await state.clear()

async def cmd_skip_rejection(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /skip - –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏"""
    try:
        data = await state.get_data()
        content_id = data.get('reject_content_id')
        
        if content_id:
            result = await reject_content(content_id, message.from_user.id, "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞")
            
            if result:
                await message.answer(f"‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç ID {content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –±–µ–∑ –≤–∫–∞–∑–∞–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏.")
                await cmd_moderate(message)
            else:
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É ID {content_id}")
        else:
            await message.answer("‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in skip rejection: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–∞–Ω–¥–∏.")
        await state.clear()

def register_admin_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω–∞
    dp.message.register(cmd_admin_stats, Command("admin_stats"))
    dp.message.register(cmd_moderate, Command("moderate"))
    dp.message.register(cmd_pending, Command("pending"))
    dp.message.register(cmd_approve, Command("approve"))
    dp.message.register(cmd_reject, Command("reject"))
    dp.message.register(cmd_skip_rejection, Command("skip"))
    
    # Callback'–∏ –∞–¥–º—ñ–Ω–∞
    dp.callback_query.register(
        handle_admin_callbacks,
        lambda c: c.data and c.data.startswith(("admin_", "moderate_"))
    )
    
    # FSM –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    dp.message.register(
        handle_rejection_reason,
        ModerationStates.waiting_for_rejection_reason
    )
    
    logger.info("‚úÖ Admin handlers registered")

# –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
__all__ = [
    'register_admin_handlers',
    'is_admin',
    'approve_content',
    'reject_content',
    'ModerationStates'
]