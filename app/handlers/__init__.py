#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéÆ –í–ò–ü–†–ê–í–õ–ï–ù–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –í–°–Ü–• –•–ï–ù–î–õ–ï–†–Ü–í üéÆ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –î–æ–¥–∞–Ω–æ –≤—Å—ñ typing —ñ–º–ø–æ—Ä—Ç–∏ (List, Dict, Any, Optional)
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ ImportError –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –º–æ–¥—É–ª—ñ–≤
‚úÖ Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
"""

import logging
from typing import Optional, List, Dict, Any, Union, Callable  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤—Å—ñ typing —ñ–º–ø–æ—Ä—Ç–∏
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram import F

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher) -> bool:
    """
    –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –±–æ—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    
    –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
    ‚úÖ –î–æ–¥–∞–Ω–æ typing —ñ–º–ø–æ—Ä—Ç–∏
    ‚úÖ Graceful fallback –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —ñ–º–ø–æ—Ä—Ç—É
    ‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
    
    Args:
        dp: Dispatcher –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    
    Returns:
        bool: True —è–∫—â–æ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ
    """
    
    logger.info("üéÆ –ü–æ—á–∏–Ω–∞—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤...")
    
    handlers_status: Dict[str, bool] = {}
    total_handlers = 0
    registered_handlers = 0
    
    # ===== 1. –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =====
    try:
        from .basic_commands import register_basic_handlers
        register_basic_handlers(dp)
        handlers_status['basic_commands'] = True
        registered_handlers += 1
        logger.info("‚úÖ Basic commands –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['basic_commands'] = False
        logger.warning(f"‚ö†Ô∏è Basic commands –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_basic_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['basic_commands'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ basic commands: {e}")
    
    total_handlers += 1
    
    # ===== 2. –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–¨ =====
    try:
        from .admin_panel_handlers import register_admin_handlers
        register_admin_handlers(dp)
        handlers_status['admin_panel'] = True
        registered_handlers += 1
        logger.info("‚úÖ Admin panel –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['admin_panel'] = False
        logger.warning(f"‚ö†Ô∏è Admin panel –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_admin_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['admin_panel'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ admin panel: {e}")
    
    total_handlers += 1
    
    # ===== 3. –ö–û–ù–¢–ï–ù–¢ (–ú–ï–ú–ò/–ñ–ê–†–¢–ò) =====
    try:
        from .content_handlers import register_content_handlers
        register_content_handlers(dp)
        handlers_status['content'] = True
        registered_handlers += 1
        logger.info("‚úÖ Content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['content'] = False
        logger.warning(f"‚ö†Ô∏è Content handlers –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_content_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['content'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ content handlers: {e}")
    
    total_handlers += 1
    
    # ===== 4. –î–£–ï–õ–Ü =====
    try:
        from .duel_handlers import register_duel_handlers
        register_duel_handlers(dp)
        handlers_status['duels'] = True
        registered_handlers += 1
        logger.info("‚úÖ Duel handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['duels'] = False
        logger.warning(f"‚ö†Ô∏è Duel handlers –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –¥—É–µ–ª—å –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_duel_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['duels'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ duel handlers: {e}")
    
    total_handlers += 1
    
    # ===== 5. –ú–û–î–ï–†–ê–¶–Ü–Ø =====
    try:
        from .moderation_handlers import register_moderation_handlers
        register_moderation_handlers(dp)
        handlers_status['moderation'] = True
        registered_handlers += 1
        logger.info("‚úÖ Moderation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['moderation'] = False
        logger.warning(f"‚ö†Ô∏è Moderation handlers –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_moderation_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['moderation'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ moderation handlers: {e}")
    
    total_handlers += 1
    
    # ===== 6. –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø =====
    try:
        from .gamification_handlers import register_gamification_handlers
        register_gamification_handlers(dp)
        handlers_status['gamification'] = True
        registered_handlers += 1
        logger.info("‚úÖ Gamification handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError as e:
        handlers_status['gamification'] = False
        logger.warning(f"‚ö†Ô∏è Gamification handlers –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ: {e}")
        # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è –∫–æ–º–∞–Ω–¥–∏
        _register_fallback_gamification_handlers(dp)
        registered_handlers += 1
    except Exception as e:
        handlers_status['gamification'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ gamification handlers: {e}")
    
    total_handlers += 1
    
    # ===== 7. CALLBACK –•–ï–ù–î–õ–ï–†–ò =====
    try:
        _register_universal_callback_handlers(dp)
        handlers_status['callbacks'] = True
        registered_handlers += 1
        logger.info("‚úÖ Universal callback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except Exception as e:
        handlers_status['callbacks'] = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback handlers: {e}")
    
    total_handlers += 1
    
    # ===== –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á =====
    success_rate = (registered_handlers / total_handlers) * 100 if total_handlers > 0 else 0
    
    logger.info("üéÆ" + "="*50)
    logger.info(f"üéÆ –ü–Ü–î–°–£–ú–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –•–ï–ù–î–õ–ï–†–Ü–í")
    logger.info("üéÆ" + "="*50)
    logger.info(f"üìä –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ: {registered_handlers}/{total_handlers} ({success_rate:.1f}%)")
    
    for handler_name, status in handlers_status.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        logger.info(f"   {status_icon} {handler_name}")
    
    if success_rate >= 80:
        logger.info("üéâ –•–µ–Ω–¥–ª–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!")
        result = True
    elif success_rate >= 50:
        logger.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ - –±–æ—Ç –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∏–π")
        result = True
    else:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ - –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ—Ä–æ–±–æ—á–∏–π")
        result = False
    
    logger.info("üéÆ" + "="*50)
    
    return result

# ===== FALLBACK –•–ï–ù–î–õ–ï–†–ò =====

def _register_fallback_basic_handlers(dp: Dispatcher) -> None:
    """Fallback –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("start"))
    async def fallback_start(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /start"""
        try:
            # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            try:
                from config.settings import BOT_USERNAME, ALL_ADMIN_IDS
                bot_name = BOT_USERNAME
                is_admin = message.from_user.id in ALL_ADMIN_IDS
            except ImportError:
                bot_name = "UkrainianBot"
                is_admin = message.from_user.id == 603047391
            
            user_name = message.from_user.first_name or "–î—Ä—É–∂–µ"
            
            welcome_text = (
                f"üß†üòÇüî• <b>–í—ñ—Ç–∞—é, {user_name}!</b>\n\n"
                f"ü§ñ <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç @{bot_name}</b>\n\n"
                f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                f"‚Ä¢ /help - –î–æ–≤—ñ–¥–∫–∞\n"
                f"‚Ä¢ /joke - –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç\n"
                f"‚Ä¢ /meme - –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                f"‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            )
            
            if is_admin:
                welcome_text += (
                    f"\nüõ°Ô∏è <b>–ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                    f"‚Ä¢ /admin - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n"
                    f"‚Ä¢ /moderate - –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                    f"‚Ä¢ /broadcast - –†–æ–∑—Å–∏–ª–∫–∞\n"
                )
            
            welcome_text += (
                f"\nüéÆ <b>–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:</b>\n"
                f"‚Ä¢ üòÇ –ñ–∞—Ä—Ç–∏ —Ç–∞ –º–µ–º–∏\n"
                f"‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\n"
                f"‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥—ñ–≤\n"
                f"‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è\n\n"
                f"üöÄ <i>Fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π</i>"
            )
            
            await message.answer(welcome_text)
            
        except Exception as e:
            logger.error(f"‚ùå Fallback start error: {e}")
            await message.answer("ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")
    
    @dp.message(Command("help"))
    async def fallback_help(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /help"""
        help_text = (
            "üìö <b>–î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£</b>\n\n"
            "üéÆ <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "‚Ä¢ /start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –¶—è –¥–æ–≤—ñ–¥–∫–∞\n"
            "‚Ä¢ /joke - –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç\n"
            "‚Ä¢ /meme - –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /profile - –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n\n"
            "‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\n"
            "‚Ä¢ /duel - –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å\n"
            "‚Ä¢ /duel_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª–µ–π\n\n"
            "üõ°Ô∏è <b>–î–ª—è –∞–¥–º—ñ–Ω—ñ–≤:</b>\n"
            "‚Ä¢ /admin - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ /moderate - –ú–æ–¥–µ—Ä–∞—Ü—ñ—è\n\n"
            "üí° <b>–ü—ñ–¥–∫–∞–∑–∫–∞:</b> –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!"
        )
        await message.answer(help_text)
    
    @dp.message(Command("joke"))
    async def fallback_joke(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /joke"""
        import random
        
        jokes: List[str] = [
            "üòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –ö–∞–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean! ü§ì",
            "üéØ –£–∫—Ä–∞—ó–Ω–µ—Ü—å –∫—É–ø—É—î iPhone:\n- –ù–µ –∑–∞–≥—É–±—ñ—Ç—å!\n- –£ –º–µ–Ω–µ —î Find My iPhone!\n- –ê —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ?\n- –ó–Ω–∞—á–∏—Ç—å –≤–∫—Ä–∞–ª–∏ –º–æ—Å–∫–∞–ª—ñ! üá∫üá¶",
            "üî• IT-—à–Ω–∏–∫ –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ.\n- –Ø fullstack.\n- –ö—Ä—É—Ç–æ! –ê —â–æ –≤–º—ñ—î—Ç–µ?\n- HTML! ü§°"
        ]
        
        selected_joke = random.choice(jokes)
        await message.answer(f"üòÑ <b>–ñ–∞—Ä—Ç –¥–Ω—è:</b>\n\n{selected_joke}")
    
    logger.info("‚úÖ Fallback basic handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_fallback_admin_handlers(dp: Dispatcher) -> None:
    """Fallback –∞–¥–º—ñ–Ω —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("admin"))
    async def fallback_admin(message: Message):
        """Fallback –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"""
        try:
            from config.settings import ALL_ADMIN_IDS
            admin_ids = ALL_ADMIN_IDS
        except ImportError:
            admin_ids = [603047391]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
            return
        
        admin_text = (
            "üõ°Ô∏è <b>–ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
            "üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:</b>\n"
            "‚Ä¢ –ë–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π\n"
            "‚Ä¢ –ë–î: ‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: ‚ö†Ô∏è –û–±–º–µ–∂–µ–Ω–∞\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "‚Ä¢ /moderate - –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            "‚Ä¢ /stats - –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ /broadcast - –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"
            "‚Ä¢ /users - –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
            "‚ö†Ô∏è <i>Fallback —Ä–µ–∂–∏–º - –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±–º–µ–∂–µ–Ω—ñ</i>"
        )
        
        await message.answer(admin_text)
    
    @dp.message(Command("broadcast"))
    async def fallback_broadcast(message: Message):
        """Fallback —Ä–æ–∑—Å–∏–ª–∫–∞"""
        try:
            from config.settings import ALL_ADMIN_IDS
            admin_ids = ALL_ADMIN_IDS
        except ImportError:
            admin_ids = [603047391]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        await message.answer(
            "üì¢ <b>–°–ò–°–¢–ï–ú–ê –†–û–ó–°–ò–õ–û–ö</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º - —Ä–æ–∑—Å–∏–ª–∫–∏ –æ–±–º–µ–∂–µ–Ω—ñ\n\n"
            "–î–ª—è –ø–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ë–î —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è."
        )
    
    logger.info("‚úÖ Fallback admin handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_fallback_content_handlers(dp: Dispatcher) -> None:
    """Fallback –∫–æ–Ω—Ç–µ–Ω—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("meme"))
    async def fallback_meme(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /meme"""
        import random
        
        memes: List[str] = [
            "ü§£ –ö–æ–ª–∏ –±–∞—á–∏—à —â–æ Wi-Fi –Ω–∞ —Ä–æ–±–æ—Ç—ñ —à–≤–∏–¥—à–∏–π –∑–∞ –¥–æ–º–∞—à–Ω—ñ–π:\n*–∑–¥–∏–≤–æ–≤–∞–Ω–∏–π –∫—ñ—Ç* üò∏",
            "üòÇ –ú—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∫–æ–ª–∏ –ø'—è—Ç–Ω–∏—Ü—è:\n*—Ç–∞–Ω—Ü—é—é—á–∞ –ª—é–¥–∏–Ω–∞* üíÉ",
            "üéÆ –ö–æ–ª–∏ –º–∞–º–∞ –∫–∞–∂–µ '–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –≥—Ä–∞—î—à':\n*—Ö–∏—Ç—Ä–∞ —É—Å–º—ñ—à–∫–∞* üòè"
        ]
        
        selected_meme = random.choice(memes)
        await message.answer(f"üî• <b>–ú–µ–º –¥–Ω—è:</b>\n\n{selected_meme}")
    
    @dp.message(Command("submit"))
    async def fallback_submit(message: Message):
        """Fallback –ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        await message.answer(
            "üìù <b>–ü–û–î–ê–ß–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
            "–î–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ä–æ–±–æ—á–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    logger.info("‚úÖ Fallback content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_fallback_duel_handlers(dp: Dispatcher) -> None:
    """Fallback –¥—É–µ–ª—å —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("duel"))
    async def fallback_duel(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ –¥—É–µ–ª—ñ"""
        await message.answer(
            "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º - –¥—É–µ–ª—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ\n\n"
            "–î–ª—è –¥—É–µ–ª–µ–π –ø–æ—Ç—Ä—ñ–±–Ω–∞:\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–º–∞–≥–∞–Ω–Ω—è\n\n"
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ë–î –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –¥—É–µ–ª–µ–π."
        )
    
    @dp.message(Command("duel_stats"))
    async def fallback_duel_stats(message: Message):
        """Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª–µ–π"""
        await message.answer(
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–ï–ô</b>\n\n"
            "‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ fallback —Ä–µ–∂–∏–º—ñ\n\n"
            "–î–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö."
        )
    
    logger.info("‚úÖ Fallback duel handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_fallback_moderation_handlers(dp: Dispatcher) -> None:
    """Fallback –º–æ–¥–µ—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("moderate"))
    async def fallback_moderate(message: Message):
        """Fallback –º–æ–¥–µ—Ä–∞—Ü—ñ—è"""
        try:
            from config.settings import ALL_ADMIN_IDS
            admin_ids = ALL_ADMIN_IDS
        except ImportError:
            admin_ids = [603047391]
        
        if message.from_user.id not in admin_ids:
            await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
            return
        
        await message.answer(
            "üõ°Ô∏è <b>–ú–û–î–ï–†–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
            "–î–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–∞:\n"
            "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö\n"
            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
            "‚Ä¢ –ß–µ—Ä–≥–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\n\n"
            "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ë–î –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
        )
    
    logger.info("‚úÖ Fallback moderation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_fallback_gamification_handlers(dp: Dispatcher) -> None:
    """Fallback –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.message(Command("profile"))
    async def fallback_profile(message: Message):
        """Fallback –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        user_name = message.from_user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        username = f"@{message.from_user.username}" if message.from_user.username else "–ë–µ–∑ username"
        
        profile_text = (
            f"üë§ <b>–ü–†–û–§–Ü–õ–¨</b>\n\n"
            f"üë®‚Äçüíº –Ü–º'—è: {user_name}\n"
            f"üì± Username: {username}\n"
            f"üÜî ID: {message.from_user.id}\n\n"
            f"‚ö†Ô∏è <b>Fallback —Ä–µ–∂–∏–º</b>\n"
            f"üéØ –ë–∞–ª–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            f"üèÜ –†–∞–Ω–≥: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
            f"üí° –î–ª—è –ø–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ë–î"
        )
        
        await message.answer(profile_text)
    
    @dp.message(Command("stats"))
    async def fallback_stats(message: Message):
        """Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        await message.answer(
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º\n\n"
            "ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–Ω–∏–π\n"
            "üíæ –ë–î: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            "üéÆ –•–µ–Ω–¥–ª–µ—Ä–∏: Fallback\n"
            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: –û–±–º–µ–∂–µ–Ω–∞\n\n"
            "üìù –î–ª—è –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö."
        )
    
    logger.info("‚úÖ Fallback gamification handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def _register_universal_callback_handlers(dp: Dispatcher) -> None:
    """–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ callback —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    
    @dp.callback_query(F.data == "back_to_main")
    async def callback_back_to_main(callback: CallbackQuery):
        """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        await callback.answer()
        
        welcome_text = (
            "üß†üòÇüî• <b>–ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ</b>\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
        )
        
        # –ü—Ä–æ—Å—Ç–∏–π inline keyboard
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üòÇ –ñ–∞—Ä—Ç", callback_data="get_joke")],
            [InlineKeyboardButton(text="üî• –ú–µ–º", callback_data="get_meme")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")]
        ])
        
        await callback.message.edit_text(welcome_text, reply_markup=keyboard)
    
    @dp.callback_query(F.data == "get_joke")
    async def callback_get_joke(callback: CallbackQuery):
        """Callback –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞—Ä—Ç—É"""
        await callback.answer()
        
        import random
        jokes: List[str] = [
            "üòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —É –∫–∞—Ñ–µ:\n- –ö–∞–≤—É?\n- –¢–∞–∫.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean!",
            "üéØ –ö—É–ø—É—é iPhone:\n- –ù–µ –∑–∞–≥—É–±—ñ—Ç—å!\n- Find My iPhone —î!\n- –ê —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ?\n- –ú–æ—Å–∫–∞–ª—ñ –≤–∫—Ä–∞–ª–∏!",
            "üíª –°–ø—ñ–≤–±–µ—Å—ñ–¥–∞:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ.\n- Fullstack.\n- –©–æ –≤–º—ñ—î—Ç–µ?\n- HTML!"
        ]
        
        joke = random.choice(jokes)
        await callback.message.edit_text(f"üòÑ <b>–ñ–∞—Ä—Ç:</b>\n\n{joke}")
    
    @dp.callback_query(F.data == "get_meme")
    async def callback_get_meme(callback: CallbackQuery):
        """Callback –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
        await callback.answer()
        
        import random
        memes: List[str] = [
            "ü§£ Wi-Fi –Ω–∞ —Ä–æ–±–æ—Ç—ñ —à–≤–∏–¥—à–∏–π –∑–∞ –¥–æ–º–∞—à–Ω—ñ–π:\n*–∑–¥–∏–≤–æ–≤–∞–Ω–∏–π –∫—ñ—Ç*",
            "üòÇ –ù–∞—Å—Ç—Ä—ñ–π –∫–æ–ª–∏ –ø'—è—Ç–Ω–∏—Ü—è:\n*—Ç–∞–Ω—Ü—é—é—á–∞ –ª—é–¥–∏–Ω–∞*",
            "üéÆ '–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –≥—Ä–∞—î—à':\n*—Ö–∏—Ç—Ä–∞ —É—Å–º—ñ—à–∫–∞*"
        ]
        
        meme = random.choice(memes)
        await callback.message.edit_text(f"üî• <b>–ú–µ–º:</b>\n\n{meme}")
    
    @dp.callback_query(F.data == "show_stats")
    async def callback_show_stats(callback: CallbackQuery):
        """Callback –ø–æ–∫–∞–∑—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        await callback.answer()
        
        stats_text = (
            "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
            "‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º\n\n"
            "ü§ñ –ë–æ—Ç: –ê–∫—Ç–∏–≤–Ω–∏–π\n"
            "üíæ –ë–î: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            "üéÆ –†–µ–∂–∏–º: Fallback\n\n"
            "üí° –î–ª—è –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –ë–î"
        )
        
        await callback.message.edit_text(stats_text)
    
    @dp.callback_query(F.data == "show_profile")
    async def callback_show_profile(callback: CallbackQuery):
        """Callback –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
        await callback.answer()
        
        user = callback.from_user
        profile_text = (
            f"üë§ <b>–ü–†–û–§–Ü–õ–¨</b>\n\n"
            f"üë®‚Äçüíº –Ü–º'—è: {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
            f"üì± Username: @{user.username or '–≤—ñ–¥—Å—É—Ç–Ω—ñ–π'}\n"
            f"üÜî ID: {user.id}\n\n"
            f"‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º\n"
            f"üéØ –ë–∞–ª–∏: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
            f"üèÜ –†–∞–Ω–≥: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        )
        
        await callback.message.edit_text(profile_text)
    
    # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö callback'—ñ–≤
    @dp.callback_query()
    async def universal_callback_handler(callback: CallbackQuery):
        """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö callback'—ñ–≤"""
        await callback.answer()
        
        unknown_text = (
            f"ü§ñ <b>–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è</b>\n\n"
            f"Callback: <code>{callback.data}</code>\n\n"
            f"‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ fallback —Ä–µ–∂–∏–º—ñ.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
        await callback.message.answer(unknown_text)
    
    logger.info("‚úÖ Universal callback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

# ===== –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á =====

def check_handlers_status() -> Dict[str, Any]:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    status: Dict[str, Any] = {
        "basic_commands": False,
        "admin_panel": False,
        "content": False,
        "duels": False,
        "moderation": False,
        "gamification": False,
        "errors": []
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–¥—É–ª—ñ–≤
    modules_to_check: List[str] = [
        "basic_commands",
        "admin_panel_handlers",
        "content_handlers", 
        "duel_handlers",
        "moderation_handlers",
        "gamification_handlers"
    ]
    
    for module_name in modules_to_check:
        try:
            __import__(f"handlers.{module_name}")
            status[module_name.replace("_handlers", "")] = True
        except ImportError as e:
            status["errors"].append(f"{module_name}: {e}")
    
    return status

def get_handlers_summary() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ —Å—Ç–∞–Ω—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    status = check_handlers_status()
    
    total_modules = 6
    available_modules = sum(1 for v in status.values() if isinstance(v, bool) and v)
    
    return {
        "total_modules": total_modules,
        "available_modules": available_modules,
        "availability_rate": (available_modules / total_modules) * 100,
        "status": status,
        "recommendation": _get_status_recommendation(available_modules, total_modules)
    }

def _get_status_recommendation(available: int, total: int) -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—Ç–∞—Ç—É—Å—É"""
    rate = (available / total) * 100
    
    if rate >= 90:
        return "üéâ –í—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å –≤—ñ–¥–º—ñ–Ω–Ω–æ!"
    elif rate >= 70:
        return "‚úÖ –ë—ñ–ª—å—à—ñ—Å—Ç—å —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –ø—Ä–∞—Ü—é—î, –±–æ—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π"
    elif rate >= 50:
        return "‚ö†Ô∏è –ß–∞—Å—Ç–∏–Ω–∞ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –¥–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –æ–±–º–µ–∂–µ–Ω—ñ"
    else:
        return "‚ùå –ë–∞–≥–∞—Ç–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    "register_handlers",
    "check_handlers_status", 
    "get_handlers_summary"
]

logger.info(f"üéÆ Handlers –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ fallback –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")