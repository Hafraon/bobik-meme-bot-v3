#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –±–æ—Ç–∞

–í–∫–ª—é—á–∞—î:
‚úÖ Content handlers - –º–µ–º–∏, –∂–∞—Ä—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏
‚úÖ Admin handlers - –º–æ–¥–µ—Ä–∞—Ü—ñ—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
‚úÖ Duel handlers - –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤ –∑ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º
‚úÖ Fallback handlers - –±–∞–∑–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª
"""

import logging
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher) -> dict:
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –ø–æ–≤–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    
    handlers_status = {
        'content': False,
        'admin': False, 
        'duel': False,
        'fallback': False,
        'total_registered': 0,
        'errors': []
    }
    
    logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤...")
    
    # ===== CONTENT HANDLERS =====
    try:
        from .content_handlers import register_content_handlers
        register_content_handlers(dp)
        handlers_status['content'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–º–µ–º–∏, –∂–∞—Ä—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏)")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Content handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        handlers_status['errors'].append(f"Content: {e}")
        handlers_status['content'] = 'fallback'
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó content handlers: {e}")
        handlers_status['errors'].append(f"Content error: {e}")
    
    # ===== ADMIN HANDLERS =====
    try:
        from .admin_handlers import register_admin_handlers
        register_admin_handlers(dp)
        handlers_status['admin'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–º–æ–¥–µ—Ä–∞—Ü—ñ—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Admin handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        handlers_status['errors'].append(f"Admin: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó admin handlers: {e}")
        handlers_status['errors'].append(f"Admin error: {e}")
    
    # ===== DUEL HANDLERS (–ù–û–í–ò–ô!) =====
    try:
        from .duel_handlers import register_duel_handlers
        register_duel_handlers(dp)
        handlers_status['duel'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Duel handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è)")
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Duel handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
        handlers_status['errors'].append(f"Duel: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó duel handlers: {e}")
        handlers_status['errors'].append(f"Duel error: {e}")
    
    # ===== FALLBACK HANDLERS =====
    try:
        register_fallback_handlers(dp)
        handlers_status['fallback'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Fallback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ (–±–∞–∑–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª)")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó fallback handlers: {e}")
        handlers_status['errors'].append(f"Fallback error: {e}")
    
    # ===== –ü–Ü–î–°–£–ú–û–ö =====
    total_possible = 4  # content, admin, duel, fallback
    success_rate = (handlers_status['total_registered'] / total_possible) * 100
    
    logger.info(f"üìä –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {handlers_status['total_registered']}/{total_possible} ({success_rate:.1f}%)")
    
    if handlers_status['total_registered'] >= 3:
        logger.info("üéâ –•–µ–Ω–¥–ª–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
    elif handlers_status['total_registered'] >= 2:
        logger.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ - –±–æ—Ç –ø—Ä–∞—Ü–µ–∑–¥–∞—Ç–Ω–∏–π –∑ –æ–±–º–µ–∂–µ–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏")
    else:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤! –ë–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ")
    
    if handlers_status['errors']:
        logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∏ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {handlers_status['errors']}")
    
    return handlers_status

def register_fallback_handlers(dp: Dispatcher):
    """–ë–∞–∑–æ–≤—ñ fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∞"""
    
    from aiogram import F
    from aiogram.filters import Command
    from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
    
    @dp.message(Command("start"))
    async def fallback_start(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /start"""
        text = (
            "üß†üòÇüî• <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
            "‚úÖ –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π\n\n"
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
            "‚Ä¢ /start - —Ü–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\n"
            "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "‚Ä¢ /duel - –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤ ‚öîÔ∏è\n"
            "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
            "‚Ä¢ /profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤", callback_data="duel_menu")],
            [InlineKeyboardButton(text="üòÇ –ú–µ–º", callback_data="get_meme")],
            [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ])
        
        await message.answer(text, reply_markup=keyboard)
    
    @dp.message(Command("help"))
    async def fallback_help(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /help"""
        text = (
            "üìñ <b>–î–û–í–Ü–î–ö–ê –ë–û–¢–ê</b>\n\n"
            "üéØ <b>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
            "‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤ - –∑–º–∞–≥–∞–Ω–Ω—è –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç\n"
            "‚Ä¢ üòÇ –ú–µ–º–∏ —Ç–∞ –∂–∞—Ä—Ç–∏ - —Ä–æ–∑–≤–∞–∂–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            "‚Ä¢ üë§ –ü—Ä–æ—Ñ—ñ–ª—å - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —Ä–∞–Ω–≥\n"
            "‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ - –Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n\n"
            
            "‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\n"
            "‚Ä¢ /duel - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤\n"
            "‚Ä¢ –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç\n"
            "‚Ä¢ –û—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏ –∑–∞ —É—á–∞—Å—Ç—å\n\n"
            
            "üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>\n"
            "‚Ä¢ +2 –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è\n"
            "‚Ä¢ +10 –±–∞–ª—ñ–≤ –∑–∞ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—ñ\n"
            "‚Ä¢ +25 –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É\n"
            "‚Ä¢ +50 –±–∞–ª—ñ–≤ –∑–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É"
        )
        
        await message.answer(text)
    
    @dp.message(Command("status"))
    async def fallback_status(message: Message):
        """Fallback –∫–æ–º–∞–Ω–¥–∞ /status"""
        from datetime import datetime
        
        uptime = datetime.now().strftime("%H:%M:%S")
        
        text = (
            f"ü§ñ <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n"
            f"‚è∞ –ß–∞—Å: {uptime}\n"
            f"üîß –†–µ–∂–∏–º: Production\n"
            f"üì¶ –ú–æ–¥—É–ª—ñ: –ë–∞–∑–æ–≤—ñ + –î—É–µ–ª—ñ\n\n"
            f"üéØ <b>–î–æ—Å—Ç—É–ø–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:</b>\n"
            f"‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\n"
            f"‚Ä¢ üòÇ –ë–∞–∑–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            f"‚Ä¢ üë§ –ü—Ä–æ—Ñ—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            f"‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
        )
        
        await message.answer(text)
    
    # Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥—É–µ–ª—ñ–≤
    @dp.callback_query(F.data == "duel_menu")
    async def fallback_duel_menu(callback: CallbackQuery):
        """Fallback –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–ø—Ä–∞–≤–∂–Ω—ñ duel handlers
            from .duel_handlers import cmd_duel
            await cmd_duel(callback.message)
            await callback.answer()
        except:
            # Fallback —è–∫—â–æ duel handlers –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
            text = (
                "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í</b>\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /duel"
            )
            await callback.message.edit_text(text)
            await callback.answer("Duel —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
    
    # –ë–∞–∑–æ–≤–∏–π callback —Ö–µ–Ω–¥–ª–µ—Ä
    @dp.callback_query()
    async def fallback_callbacks(callback: CallbackQuery):
        """Fallback –¥–ª—è –≤—Å—ñ—Ö callback'—ñ–≤"""
        data = callback.data
        
        if data == "get_meme":
            await callback.message.answer("üòÇ –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º:\n\n<i>–ö–æ–ª–∏ —Ç–≤—ñ–π –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É... ü§î\n–ó–Ω–∞—á–∏—Ç—å —Ç–∏ —â–æ—Å—å –∑—Ä–æ–±–∏–≤ –Ω–µ —Ç–∞–∫!</i>")
        elif data == "profile":
            await callback.message.answer("üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\nüéÆ –†–∞–Ω–≥: –ù–æ–≤–∞—á–æ–∫\nüí∞ –ë–∞–ª–∏: 0\nüèÜ –î—É–µ–ª—ñ: 0/0")
        elif data == "stats":
            await callback.message.answer("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ‚àû\nüòÇ –ú–µ–º—ñ–≤: ‚àû\n‚öîÔ∏è –î—É–µ–ª—ñ: –ê–∫—Ç–∏–≤–Ω—ñ")
        else:
            await callback.answer("üîÑ –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
        
        await callback.answer()
    
    logger.info("‚úÖ Fallback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

def check_handlers_status() -> dict:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    status = {
        'content_handlers': False,
        'admin_handlers': False,
        'duel_handlers': False,
        'fallback_handlers': True,  # –ó–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ
        'errors': []
    }
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ content handlers
    try:
        from . import content_handlers
        status['content_handlers'] = True
    except ImportError as e:
        status['errors'].append(f"Content handlers: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ admin handlers  
    try:
        from . import admin_handlers
        status['admin_handlers'] = True
    except ImportError as e:
        status['errors'].append(f"Admin handlers: {e}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ duel handlers
    try:
        from . import duel_handlers
        status['duel_handlers'] = True
    except ImportError as e:
        status['errors'].append(f"Duel handlers: {e}")
    
    return status

def log_handlers_status():
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    status = check_handlers_status()
    
    available_count = sum(1 for v in status.values() if v is True and isinstance(v, bool))
    total_count = 4  # content, admin, duel, fallback
    
    logger.info(f"üì¶ –°—Ç–∞—Ç—É—Å —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {available_count}/{total_count}")
    
    if status['content_handlers']:
        logger.info("‚úÖ Content handlers: –º–µ–º–∏, –∂–∞—Ä—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏")
    if status['admin_handlers']:
        logger.info("‚úÖ Admin handlers: –º–æ–¥–µ—Ä–∞—Ü—ñ—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    if status['duel_handlers']:
        logger.info("‚úÖ Duel handlers: –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤, –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")
    if status['fallback_handlers']:
        logger.info("‚úÖ Fallback handlers: –±–∞–∑–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª")
    
    if status['errors']:
        for error in status['errors']:
            logger.warning(f"‚ö†Ô∏è {error}")
    
    if available_count >= 3:
        logger.info("üéâ –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ!")
    elif available_count >= 2:
        logger.warning("‚ö†Ô∏è –ß–∞—Å—Ç–∫–æ–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏")
    else:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–æ –º–∞–ª–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤!")
    
    return status

# ===== –ï–ö–°–ü–û–†–¢ =====

__all__ = [
    'register_handlers',
    'check_handlers_status', 
    'log_handlers_status',
    'register_fallback_handlers'
]

# –í–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != "__main__":
    log_handlers_status()