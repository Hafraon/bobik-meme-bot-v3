#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üß†üòÇüî•
"""

import logging
import re
from datetime import datetime, timedelta

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

# Fallback —ñ–º–ø–æ—Ä—Ç–∏
try:
    from config.settings import Settings
    settings = Settings()
    
    if not hasattr(settings, 'ADMIN_ID'):
        settings.ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
    if not hasattr(settings, 'POINTS_FOR_APPROVAL'):
        settings.POINTS_FOR_APPROVAL = 20
        
except ImportError:
    import os
    class FallbackSettings:
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        POINTS_FOR_APPROVAL = int(os.getenv("POINTS_FOR_APPROVAL", "20"))
    settings = FallbackSettings()

# EMOJI –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
EMOJI = {
    "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê", 
    "check": "‚úÖ", "cross": "‚ùå", "warning": "‚ö†Ô∏è", "info": "‚ÑπÔ∏è",
    "new": "üÜï", "profile": "üë§", "stats": "üìä", "time": "‚è∞",
    "crown": "üëë", "thinking": "ü§î", "party": "üéâ"
}

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID

# Fallback –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –±–µ–∑ –ë–î
PENDING_CONTENT = []  # –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
CONTENT_COUNTER = 1

class ContentItem:
    def __init__(self, id, author_id, text, content_type="joke", author_name="–ù–µ–≤—ñ–¥–æ–º–∏–π"):
        self.id = id
        self.author_id = author_id
        self.text = text
        self.content_type = content_type
        self.author_name = author_name
        self.created_at = datetime.now()

async def get_pending_content():
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_pending_content as db_get_pending
        return await db_get_pending()
    except ImportError:
        # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å
        return PENDING_CONTENT

async def update_user_points(user_id: int, points: int, reason: str):
    """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
    try:
        from database.database import update_user_points as db_update_points
        await db_update_points(user_id, points, reason)
    except ImportError:
        logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}: +{points} –±–∞–ª—ñ–≤ –∑–∞ {reason}")

async def cmd_pending(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /pending - –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await message.answer(f"{EMOJI['check']} –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!")
        return
    
    # –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –∑–∞ —Ç–∏–ø–æ–º
    jokes = [c for c in pending_content if getattr(c, 'content_type', 'joke') == 'joke']
    memes = [c for c in pending_content if getattr(c, 'content_type', 'joke') == 'meme']
    
    pending_text = (
        f"{EMOJI['brain']} <b>–ö–û–ù–¢–ï–ù–¢ –ù–ê –ú–û–î–ï–†–ê–¶–Ü–á</b>\n\n"
        f"{EMOJI['fire']} <b>–í—Å—å–æ–≥–æ:</b> {len(pending_content)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤\n"
        f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤: {len(jokes)}\n"
        f"{EMOJI['laugh']} –ú–µ–º—ñ–≤: {len(memes)}\n\n"
        f"{EMOJI['info']} –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /moderate –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ —á–µ—Ä–∑—ñ\n"
        f"–∞–±–æ /approve_ID —ñ /reject_ID –¥–ª—è —à–≤–∏–¥–∫–æ—ó –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ü–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é", callback_data="start_moderation"),
            InlineKeyboardButton(text=f"{EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="refresh_admin_stats")
        ]
    ])
    
    await message.answer(pending_text, reply_markup=keyboard)

async def cmd_moderate(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ —á–µ—Ä–∑—ñ"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await message.answer(f"{EMOJI['check']} –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó!")
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    content = pending_content[0]
    await show_content_for_moderation(message, content)

async def show_content_for_moderation(message: Message, content):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é"""
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ—Ä–∞
    author_info = getattr(content, 'author_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')
    author_id = getattr(content, 'author_id', 0)
    
    content_type_emoji = EMOJI['brain'] if getattr(content, 'content_type', 'joke') == 'joke' else EMOJI['laugh']
    content_type_name = "–ê–Ω–µ–∫–¥–æ—Ç" if getattr(content, 'content_type', 'joke') == 'joke' else "–ú–µ–º"
    
    # –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
    created_at = getattr(content, 'created_at', datetime.now())
    waiting_time = datetime.now() - created_at
    waiting_hours = int(waiting_time.total_seconds() // 3600)
    
    moderation_text = (
        f"{EMOJI['new']} <b>–ú–û–î–ï–†–ê–¶–Ü–Ø –ö–û–ù–¢–ï–ù–¢–£ #{content.id}</b>\n\n"
        f"{content_type_emoji} <b>–¢–∏–ø:</b> {content_type_name}\n"
        f"{EMOJI['profile']} <b>–ê–≤—Ç–æ—Ä:</b> {author_info} (ID: {author_id})\n"
        f"{EMOJI['time']} <b>–û—á—ñ–∫—É—î:</b> {waiting_hours} –≥–æ–¥–∏–Ω\n\n"
        f"{EMOJI['fire']} <b>–ö–û–ù–¢–ï–ù–¢:</b>\n{content.text}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –æ–ø—Ü—ñ—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['check']} –°—Ö–≤–∞–ª–∏—Ç–∏ (+{settings.POINTS_FOR_APPROVAL})",
                callback_data=f"approve:{content.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['cross']} –í—ñ–¥—Ö–∏–ª–∏—Ç–∏",
                callback_data=f"reject:{content.id}"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['thinking']} –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏",
                callback_data=f"skip:{content.id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['stats']} –ù–∞—Å—Ç—É–ø–Ω–∏–π",
                callback_data="next_moderation"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['brain']} –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é",
                callback_data="finish_moderation"
            )
        ]
    ])
    
    await message.answer(moderation_text, reply_markup=keyboard)

async def cmd_approve_content(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /approve_ID - —à–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ ID"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
    match = re.search(r'/approve_(\d+)', message.text)
    if not match:
        await message.answer(f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /approve_ID")
        return
    
    content_id = int(match.group(1))
    await approve_content(message, content_id, "–®–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")

async def cmd_reject_content(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /reject_ID - —à–≤–∏–¥–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ ID"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∑ –∫–æ–º–∞–Ω–¥–∏
    match = re.search(r'/reject_(\d+)', message.text)
    if not match:
        await message.answer(f"{EMOJI['warning']} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π: /reject_ID")
        return
    
    content_id = int(match.group(1))
    await reject_content(message, content_id, "–®–≤–∏–¥–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")

async def approve_content(message: Message, content_id: int, comment: str = ""):
    """–°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø–æ–≤–Ω–∏–º —Ü–∏–∫–ª–æ–º –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤"""
    try:
        # –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Ç–∏–º—á–∞—Å–æ–≤–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
        global PENDING_CONTENT
        content = None
        for item in PENDING_CONTENT:
            if item.id == content_id:
                content = item
                break
        
        if not content:
            await message.answer(f"{EMOJI['cross']} –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        PENDING_CONTENT.remove(content)
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∞–≤—Ç–æ—Ä—É
        await update_user_points(
            content.author_id,
            settings.POINTS_FOR_APPROVAL,
            "—Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"
        )
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
        try:
            content_type_name = "–∞–Ω–µ–∫–¥–æ—Ç" if getattr(content, 'content_type', 'joke') == 'joke' else "–º–µ–º"
            notification_text = (
                f"{EMOJI['party']} <b>–£–†–ê! –¢–≤—ñ–π {content_type_name} —Å—Ö–≤–∞–ª–µ–Ω–æ!</b>\n\n"
                f"{EMOJI['star']} –í—ñ–Ω –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ—ó –±–∞–∑–∏\n"
                f"{EMOJI['fire']} –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤!\n\n"
                f"{EMOJI['info']} –ü—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ –æ—Ç—Ä–∏–º–∞—î—à —â–µ –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤!\n\n"
                f"{EMOJI['star']} –ü–µ—Ä–µ–≥–ª—è–Ω—å —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å: /profile"
            )
            
            await message.bot.send_message(content.author_id, notification_text)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        success_text = (
            f"{EMOJI['check']} <b>–ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} —Å—Ö–≤–∞–ª–µ–Ω–æ!</b>\n\n"
            f"{EMOJI['profile']} –ê–≤—Ç–æ—Ä: {content.author_name}\n"
            f"{EMOJI['fire']} –ê–≤—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤"
        )
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="next_moderation"),
                InlineKeyboardButton(text=f"{EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="refresh_admin_stats")
            ]
        ])
        
        await message.answer(success_text, reply_markup=keyboard)
        
        logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} —Å—Ö–≤–∞–ª–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç {content_id}")
        
    except Exception as e:
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")

async def reject_content(message: Message, content_id: int, comment: str = ""):
    """–í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º"""
    try:
        # –ü–æ—à—É–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Ç–∏–º—á–∞—Å–æ–≤–æ–º—É —Å—Ö–æ–≤–∏—â—ñ
        global PENDING_CONTENT
        content = None
        for item in PENDING_CONTENT:
            if item.id == content_id:
                content = item
                break
        
        if not content:
            await message.answer(f"{EMOJI['cross']} –ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
            return
        
        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —á–µ—Ä–≥–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
        PENDING_CONTENT.remove(content)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä—É
        try:
            content_type_name = "–∞–Ω–µ–∫–¥–æ—Ç" if getattr(content, 'content_type', 'joke') == 'joke' else "–º–µ–º"
            rejection_text = (
                f"{EMOJI['cross']} <b>–¢–≤—ñ–π {content_type_name} –Ω–µ –ø—Ä–æ–π—à–æ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—é</b>\n\n"
                f"{EMOJI['thinking']} –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
                f"‚Ä¢ –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—Ä–∞–≤–∏–ª–∞–º —Å–ø—ñ–ª—å–Ω–æ—Ç–∏\n"
                f"‚Ä¢ –í–∂–µ —î –≤ –±–∞–∑—ñ\n"
                f"‚Ä¢ –ù–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
                f"{EMOJI['fire']} –°–ø—Ä–æ–±—É–π –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —ñ–Ω—à–∏–π!\n"
                f"{EMOJI['info']} –ë–∞–ª–∏ –∑–∞ –ø–æ–¥–∞—á—É –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —É —Ç–µ–±–µ"
            )
            
            if comment:
                rejection_text += f"\n\n{EMOJI['info']} <b>–ö–æ–º–µ–Ω—Ç–∞—Ä –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:</b> {comment}"
            
            await message.bot.send_message(content.author_id, rejection_text)
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∞: {e}")
        
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        rejection_response = (
            f"{EMOJI['cross']} <b>–ö–æ–Ω—Ç–µ–Ω—Ç #{content_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ</b>\n\n"
            f"{EMOJI['profile']} –ê–≤—Ç–æ—Ä: {content.author_name}\n"
            f"{EMOJI['thinking']} –ê–≤—Ç–æ—Ä –æ—Ç—Ä–∏–º–∞–≤ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"
        )
        
        if comment:
            rejection_response += f"\n{EMOJI['info']} –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="next_moderation"),
                InlineKeyboardButton(text=f"{EMOJI['stats']} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="refresh_admin_stats")
            ]
        ])
        
        await message.answer(rejection_response, reply_markup=keyboard)
        
        logger.info(f"‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤—ñ–¥—Ö–∏–ª–∏–≤ –∫–æ–Ω—Ç–µ–Ω—Ç {content_id}")
        
    except Exception as e:
        await message.answer(f"{EMOJI['cross']} –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {e}")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")

async def cmd_admin_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(message.from_user.id):
        await message.answer(f"{EMOJI['cross']} –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_db_session
        from database.models import User, Content, Duel
        
        with get_db_session() as session:
            total_users = session.query(User).count()
            
            # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            today = datetime.utcnow().date()
            active_users_today = session.query(User).filter(
                User.last_active >= today
            ).count()
            
            users_with_points = session.query(User).filter(User.points > 0).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            from database.models import ContentStatus
            pending_count = session.query(Content).filter(
                Content.status == ContentStatus.PENDING
            ).count()
            
            approved_count = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED
            ).count()
            
            rejected_count = session.query(Content).filter(
                Content.status == ContentStatus.REJECTED
            ).count()
            
            # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            top_users = session.query(User).order_by(User.points.desc()).limit(3).all()
            
            stats_text = (
                f"{EMOJI['crown']} <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\n\n"
                f"{EMOJI['profile']} <b>–ö–û–†–ò–°–¢–£–í–ê–ß–Ü:</b>\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ: {total_users}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ: {active_users_today}\n"
                f"‚Ä¢ –ó –±–∞–ª–∞–º–∏: {users_with_points}\n\n"
                
                f"{EMOJI['brain']} <b>–ö–û–ù–¢–ï–ù–¢:</b>\n"
                f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n"
                f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–æ: {approved_count}\n"
                f"‚Ä¢ –í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected_count}\n\n"
                
                f"{EMOJI['fire']} <b>–¢–û–ü-3 –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í:</b>\n"
            )
            
            medals = ["ü•á", "ü•à", "ü•â"]
            for i, user in enumerate(top_users):
                medal = medals[i] if i < len(medals) else "üèÖ"
                stats_text += f"{medal} {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} - {user.points} –±–∞–ª—ñ–≤\n"
            
    except ImportError:
        # Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pending_count = len(PENDING_CONTENT)
        
        stats_text = (
            f"{EMOJI['crown']} <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\n\n"
            f"{EMOJI['warning']} <b>–†–µ–∂–∏–º:</b> Fallback (–±–µ–∑ –ë–î)\n\n"
            f"{EMOJI['brain']} <b>–ö–û–ù–¢–ï–ù–¢:</b>\n"
            f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n\n"
            f"{EMOJI['info']} –î–ª—è –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–π –ë–î"
        )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['brain']} –ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏", 
                callback_data="start_moderation"
            ),
            InlineKeyboardButton(text=f"{EMOJI['stats']} –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_admin_stats")
        ]
    ])
    
    await message.answer(stats_text, reply_markup=keyboard)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_approve_content(callback_query):
    """Callback —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    content_id = int(callback_query.data.split(':')[1])
    await approve_content(callback_query.message, content_id, "–°—Ö–≤–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
    await callback_query.answer(f"{EMOJI['check']} –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ!")

async def callback_reject_content(callback_query):
    """Callback –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    content_id = int(callback_query.data.split(':')[1])
    await reject_content(callback_query.message, content_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó")
    await callback_query.answer(f"{EMOJI['cross']} –ö–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!")

async def callback_skip_content(callback_query):
    """Callback –ø—Ä–æ–ø—É—Å–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await callback_query.answer("‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await callback_next_moderation(callback_query)

async def callback_next_moderation(callback_query):
    """Callback –ø–æ–∫–∞–∑—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    pending_content = await get_pending_content()
    
    if not pending_content:
        await callback_query.message.edit_text(
            f"{EMOJI['check']} <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
            f"{EMOJI['fire']} –ù–µ–º–∞—î –±—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ\n\n"
            f"{EMOJI['stats']} –ü–µ—Ä–µ–≥–ª—è–Ω—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: /admin_stats"
        )
        return
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –∑—ñ —Å–ø–∏—Å–∫—É
    content = pending_content[0]
    await show_content_for_moderation(callback_query.message, content)
    await callback_query.answer()

async def callback_start_moderation(callback_query):
    """Callback –ø–æ—á–∞—Ç–∫—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await callback_next_moderation(callback_query)

async def callback_refresh_admin_stats(callback_query):
    """Callback –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    await cmd_admin_stats(callback_query.message)
    await callback_query.answer("üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ!")

async def callback_finish_moderation(callback_query):
    """Callback –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!")
        return
    
    pending_count = len(await get_pending_content())
    
    finish_text = (
        f"{EMOJI['check']} <b>–°–µ—Å—ñ—é –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        f"{EMOJI['brain']} –ó–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {pending_count}\n\n"
        f"{EMOJI['info']} –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /moderate"
    )
    
    await callback_query.message.edit_text(finish_text)
    await callback_query.answer("‚úÖ –ú–æ–¥–µ—Ä–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —á–µ—Ä–≥—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (–¥–ª—è fallback)
def add_content_to_moderation(author_id: int, text: str, content_type: str = "joke", author_name: str = "–ù–µ–≤—ñ–¥–æ–º–∏–π"):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —á–µ—Ä–≥—É –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (fallback —Ñ—É–Ω–∫—Ü—ñ—è)"""
    global CONTENT_COUNTER, PENDING_CONTENT
    
    content = ContentItem(
        id=CONTENT_COUNTER,
        author_id=author_id,
        text=text,
        content_type=content_type,
        author_name=author_name
    )
    
    PENDING_CONTENT.append(content)
    CONTENT_COUNTER += 1
    
    logger.info(f"üìù –î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç #{content.id} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥ {author_name}")
    return content

def register_moderation_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    dp.message.register(cmd_pending, Command("pending"))
    dp.message.register(cmd_moderate, Command("moderate"))
    dp.message.register(cmd_admin_stats, Command("admin_stats"))
    
    # –ö–æ–º–∞–Ω–¥–∏ —à–≤–∏–¥–∫–æ–≥–æ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    dp.message.register(cmd_approve_content, F.text.regexp(r'/approve_\d+'))
    dp.message.register(cmd_reject_content, F.text.regexp(r'/reject_\d+'))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_approve_content, F.data.startswith("approve:"))
    dp.callback_query.register(callback_reject_content, F.data.startswith("reject:"))
    dp.callback_query.register(callback_skip_content, F.data.startswith("skip:"))
    dp.callback_query.register(callback_next_moderation, F.data == "next_moderation")
    dp.callback_query.register(callback_start_moderation, F.data == "start_moderation")
    dp.callback_query.register(callback_refresh_admin_stats, F.data == "refresh_admin_stats")
    dp.callback_query.register(callback_finish_moderation, F.data == "finish_moderation")
    
    logger.info("‚úÖ Moderation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")