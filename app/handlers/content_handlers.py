#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import random
from datetime import datetime
from typing import Optional

from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
class ContentSubmissionStates(StatesGroup):
    waiting_for_meme = State()
    waiting_for_joke = State()
    waiting_for_anekdot = State()

# –ì–æ—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
DEMO_MEMES = [
    "–ö–æ–ª–∏ –±–∞—á–∏—à —Ü—ñ–Ω–∏ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ –ø—ñ—Å–ª—è –∑–∞—Ä–ø–ª–∞—Ç–∏: '–Ø –±–∞–≥–∞—Ç–∏–π!' \n\n*—á–µ—Ä–µ–∑ 3 –¥–Ω—ñ* \n\n'–•–ª—ñ–±–æ–º –ø—ñ–¥–æ–π–¥—É...' üòÖ",
    "–£–∫—Ä–∞—ó–Ω–µ—Ü—å –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –©–æ —É –≤–∞—Å —î?\n- –í—Å–µ —î!\n- –ê –±–æ—Ä—â?\n- –ù–µ–º–∞.\n- –ê –≤–∞—Ä–µ–Ω–∏–∫–∏?\n- –ù–µ–º–∞.\n- –¢–æ —â–æ —î?\n- –í—Å–µ –Ω–µ–º–∞! üòÇ",
    "–ö–æ–ª–∏ –º–∞–º–∞ –∫–∞–∂–µ '–ü—Ä–∏–±–µ—Ä–∏—Å—è –≤ –∫—ñ–º–Ω–∞—Ç—ñ':\n\n–Ø: *–ø–µ—Ä–µ–∫–ª–∞–≤ –≤—Å–µ –∑ –ø—ñ–¥–ª–æ–≥–∏ –Ω–∞ –ª—ñ–∂–∫–æ*\n\n–¢–µ—Ö–Ω—ñ—á–Ω–æ, –ø—ñ–¥–ª–æ–≥–∞ —á–∏—Å—Ç–∞! üß†",
    "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ - —Ü–µ —è–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞:\n–ù—ñ—Ö—Ç–æ –Ω–µ –ª—é–±–∏—Ç—å, –∞–ª–µ –≤—Å—ñ –∑–º—É—à–µ–Ω—ñ —Ç–µ—Ä–ø—ñ—Ç–∏ üò§",
    "–ö–æ–ª–∏ –¥—Ä—É–∑—ñ –∑–∞–ø–∏—Ç—É—é—Ç—å —á–æ–º—É —è –Ω–µ –≤–∏—Ö–æ–¥–∂—É:\n\n–ì—Ä–æ—à—ñ: –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚úó\n–ï–Ω–µ—Ä–≥—ñ—è: –≤—ñ–¥—Å—É—Ç–Ω—è ‚úó \n–ë–∞–∂–∞–Ω–Ω—è: –≤—ñ–¥—Å—É—Ç–Ω—î ‚úó\n\n–î–∏–≤–∞–Ω: –ø—Ä–∏—Å—É—Ç–Ω—ñ–π ‚úì"
]

DEMO_JOKES = [
    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É?\n\n–ë–æ —Ç–∞–º –∑–∞–±–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤! üêõüíª",
    "–£—á–∏—Ç–µ–ª—å:\n- –ü–µ—Ç—Ä–∏–∫—É, –Ω–∞–∑–≤–∏ –º–µ–Ω—ñ 5 —Ä–µ—á–µ–π, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å –º–æ–ª–æ–∫–æ.\n- –°–∏—Ä, –º–∞—Å–ª–æ, –º–æ—Ä–æ–∑–∏–≤–æ —Ç–∞... –¥–≤—ñ –∫–æ—Ä–æ–≤–∏! üêÑ",
    "–î—Ä—É–∂–∏–Ω–∞ —á–æ–ª–æ–≤—ñ–∫–æ–≤—ñ:\n- –î–æ—Ä–æ–≥–∏–π, —Ç–∏ –º–µ–Ω–µ –ª—é–±–∏—à?\n- –ê–≤–∂–µ–∂!\n- –ê –Ω–∞—Å–∫—ñ–ª—å–∫–∏?\n- –ù–∞ –≤—Å—ñ –º–æ—ó –≥—Ä–æ—à—ñ! üí∞",
    "–ß–æ–º—É –≤–µ–¥–º–µ–¥—ñ –Ω–µ –Ω–æ—Å—è—Ç—å –∫—Ä–æ—Å—ñ–≤–∫–∏?\n\n–ë–æ –≤ –Ω–∏—Ö –ª–∞–ø–∏! üêªüëü",
    "–ó–∞—Ö–æ–¥–∏—Ç—å —á–æ–ª–æ–≤—ñ–∫ –¥–æ –∞–ø—Ç–µ–∫–∏:\n- –î–∞–π—Ç–µ —â–æ—Å—å –≤—ñ–¥ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –±–æ–ª—é.\n- –í—ñ–∑—å–º—ñ—Ç—å –∞—Å–ø—ñ—Ä–∏–Ω.\n- –ê —â–æ –¥–µ—à–µ–≤—à–µ?\n- –†–æ–∑–ª—É—á–µ–Ω–Ω—è! üíäüíî"
]

DEMO_ANEKDOTS = [
    "–Ü–¥–µ –í–∞—Å–∏–ª—å –ø–æ –ª—ñ—Å—É, –±–∞—á–∏—Ç—å - –≤–µ–¥–º—ñ–¥—å.\n–í–µ–¥–º—ñ–¥—å:\n- –¢–∏ –º–µ–Ω–µ –±–æ—ó—à—Å—è?\n- –ù—ñ.\n- –ê —á–æ–º—É —Ç–æ–¥—ñ —Ç—Ä–µ–º—Ç–∏—à?\n- –¢–∞ —è –æ—Ç –¥—É–º–∞—é, —Ç–∏ –º–µ–Ω–µ –±–æ—ó—à—Å—è —á–∏ –Ω—ñ... üêªüòÖ",
    "–ü—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–∏–Ω –¥–æ–¥–æ–º—É:\n- –ú–∞–º, —è –æ–¥—Ä—É–∂—É—é—Å—è!\n- –ó –∫–∏–º?\n- –ó –ú–∞—à–µ—é –∑ —Å—É—Å—ñ–¥–Ω—å–æ–≥–æ –¥–≤–æ—Ä—É.\n- –°–∏–Ω–∫—É, –≤–æ–Ω–∞ –∂ —Ç–æ–±—ñ –Ω–µ –ø–∞—Ä–∞!\n- –ß–æ–º—É?\n- –¢–∞–∫ –≤–æ–Ω–∞ –∂ —Ä–æ–∑—É–º–Ω–∞! ü§¶‚Äç‚ôÇÔ∏è",
    "–î–∑–≤–æ–Ω–∏—Ç—å –Ü–≤–∞–Ω –¥–æ–¥–æ–º—É:\n- –ê–ª–ª–æ, —Ü–µ –¥—ñ–º –ü–µ—Ç—Ä–µ–Ω–∫—ñ–≤?\n- –ù—ñ, —Ü–µ –¥—ñ–º –°–∏–¥–æ—Ä–µ–Ω–∫—ñ–≤.\n- –í–∏–±–∞—á—Ç–µ, —è –ø–æ–º–∏–ª–∏–≤—Å—è –Ω–æ–º–µ—Ä–æ–º.\n- –ù—ñ—á–æ–≥–æ, –º–∏ —Ç–µ–∂ –Ω–µ –∑–∞–≤–∂–¥–∏ –¥–æ–º–∞! üìûüòÇ",
    "–ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ –¥—Ä—É–∑—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –≤—Å–µ –¥–æ–±—Ä–µ, —Ç—ñ–ª—å–∫–∏ –∑ –≥—Ä–æ—à–∏–º–∞ –ø–æ–≥–∞–Ω–æ.\n- –ê —â–æ –∑ –Ω–∏–º–∏?\n- –í–æ–Ω–∏ –≤ –º–µ–Ω–µ —î! üí∏",
    "–£—á–∏—Ç–µ–ª—å:\n- –î—ñ—Ç–∫–∏, —Ö—Ç–æ –∑–Ω–∞—î, —â–æ —Ç–∞–∫–µ '–Ω—ñ–∫–æ–ª–∏'?\n–ü–µ—Ç—Ä–∏–∫:\n- –¶–µ –∫–æ–ª–∏ –º–∞–º–∞ –∫–∞–∂–µ '–∑–∞—Ä–∞–∑'! ‚è∞"
]

def get_content_keyboard(content_id: int, content_type: str = "demo") -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like_{content_type}_{content_id}"),
            InlineKeyboardButton(text="üëé –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike_{content_type}_{content_id}")
        ],
        [
            InlineKeyboardButton(text="üîÑ –©–µ –æ–¥–∏–Ω", callback_data=f"more_{content_type}"),
            InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç–∏ —Å–≤—ñ–π", callback_data=f"submit_{content_type}")
        ]
    ])
    return keyboard

async def handle_meme_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /meme"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ –ë–î
        try:
            from database.services import get_random_approved_content, update_user_points
            
            content = get_random_approved_content("meme")
            if content:
                # –ö–æ–Ω—Ç–µ–Ω—Ç –∑ –ë–î
                keyboard = get_content_keyboard(content['id'], "db_meme")
                
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
                update_user_points(message.from_user.id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É")
                
                await message.answer(
                    f"üòÇ <b>–ú–µ–º –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n{content['text']}\n\n"
                    f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {content['views']} | üëç –õ–∞–π–∫—ñ–≤: {content['likes']}",
                    reply_markup=keyboard
                )
                return
        except ImportError:
            pass
        
        # Fallback –¥–æ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        meme = random.choice(DEMO_MEMES)
        meme_id = DEMO_MEMES.index(meme)
        
        keyboard = get_content_keyboard(meme_id, "demo_meme")
        
        await message.answer(
            f"üòÇ <b>–î–µ–º–æ –º–µ–º:</b>\n\n{meme}",
            reply_markup=keyboard
        )
        
        logger.info(f"User {message.from_user.id} viewed demo meme {meme_id}")
        
    except Exception as e:
        logger.error(f"Error in meme handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–º—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def handle_joke_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /joke"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ –ë–î
        try:
            from database.services import get_random_approved_content, update_user_points
            
            content = get_random_approved_content("joke")
            if content:
                keyboard = get_content_keyboard(content['id'], "db_joke")
                
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
                update_user_points(message.from_user.id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –∂–∞—Ä—Ç—É")
                
                await message.answer(
                    f"ü§£ <b>–ñ–∞—Ä—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n{content['text']}\n\n"
                    f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {content['views']} | üëç –õ–∞–π–∫—ñ–≤: {content['likes']}",
                    reply_markup=keyboard
                )
                return
        except ImportError:
            pass
        
        # Fallback –¥–æ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        joke = random.choice(DEMO_JOKES)
        joke_id = DEMO_JOKES.index(joke)
        
        keyboard = get_content_keyboard(joke_id, "demo_joke")
        
        await message.answer(
            f"ü§£ <b>–î–µ–º–æ –∂–∞—Ä—Ç:</b>\n\n{joke}",
            reply_markup=keyboard
        )
        
        logger.info(f"User {message.from_user.id} viewed demo joke {joke_id}")
        
    except Exception as e:
        logger.error(f"Error in joke handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∂–∞—Ä—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def handle_anekdot_command(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /anekdot"""
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑ –ë–î
        try:
            from database.services import get_random_approved_content, update_user_points
            
            content = get_random_approved_content("anekdot")
            if content:
                keyboard = get_content_keyboard(content['id'], "db_anekdot")
                
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
                update_user_points(message.from_user.id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –∞–Ω–µ–∫–¥–æ—Ç—É")
                
                await message.answer(
                    f"üß† <b>–ê–Ω–µ–∫–¥–æ—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n{content['text']}\n\n"
                    f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {content['views']} | üëç –õ–∞–π–∫—ñ–≤: {content['likes']}",
                    reply_markup=keyboard
                )
                return
        except ImportError:
            pass
        
        # Fallback –¥–æ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        anekdot = random.choice(DEMO_ANEKDOTS)
        anekdot_id = DEMO_ANEKDOTS.index(anekdot)
        
        keyboard = get_content_keyboard(anekdot_id, "demo_anekdot")
        
        await message.answer(
            f"üß† <b>–î–µ–º–æ –∞–Ω–µ–∫–¥–æ—Ç:</b>\n\n{anekdot}",
            reply_markup=keyboard
        )
        
        logger.info(f"User {message.from_user.id} viewed demo anekdot {anekdot_id}")
        
    except Exception as e:
        logger.error(f"Error in anekdot handler: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

async def handle_content_callbacks(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ callback'—ñ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        data = callback.data
        user_id = callback.from_user.id
        
        if data.startswith("like_"):
            # –û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫—ñ–≤
            parts = data.split("_")
            content_type = "_".join(parts[1:-1])
            content_id = parts[-1]
            
            try:
                from database.services import update_user_points
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ —Ä–µ–∞–∫—Ü—ñ—é
                update_user_points(user_id, 2, f"–ª–∞–π–∫ {content_type}")
                await callback.answer("üëç –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É! +2 –±–∞–ª–∏")
            except ImportError:
                await callback.answer("üëç –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!")
            
            logger.info(f"User {user_id} liked {content_type} {content_id}")
            
        elif data.startswith("dislike_"):
            await callback.answer("üëé –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É!")
            
        elif data.startswith("more_"):
            # –ó–∞–ø–∏—Ç —â–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_type = data.replace("more_", "")
            
            if "meme" in content_type:
                await handle_meme_command(callback.message)
            elif "joke" in content_type:
                await handle_joke_command(callback.message)
            elif "anekdot" in content_type:
                await handle_anekdot_command(callback.message)
            
            await callback.answer()
            
        elif data.startswith("submit_"):
            # –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content_type = data.replace("submit_", "")
            
            if "meme" in content_type:
                await state.set_state(ContentSubmissionStates.waiting_for_meme)
                await callback.message.answer(
                    "üìù <b>–ü–æ–¥–∞—á–∞ –º–µ–º—É</b>\n\n"
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –º–µ–º —Ç–µ–∫—Å—Ç–æ–º. –í—ñ–Ω –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ +20 –±–∞–ª—ñ–≤!\n\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
                )
            elif "joke" in content_type:
                await state.set_state(ContentSubmissionStates.waiting_for_joke)
                await callback.message.answer(
                    "üìù <b>–ü–æ–¥–∞—á–∞ –∂–∞—Ä—Ç—É</b>\n\n"
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç —Ç–µ–∫—Å—Ç–æ–º. –í—ñ–Ω –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ +20 –±–∞–ª—ñ–≤!\n\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
                )
            elif "anekdot" in content_type:
                await state.set_state(ContentSubmissionStates.waiting_for_anekdot)
                await callback.message.answer(
                    "üìù <b>–ü–æ–¥–∞—á–∞ –∞–Ω–µ–∫–¥–æ—Ç—É</b>\n\n"
                    "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç —Ç–µ–∫—Å—Ç–æ–º. –í—ñ–Ω –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    "–ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ +20 –±–∞–ª—ñ–≤!\n\n"
                    "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è."
                )
            
            await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in content callback: {e}")
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏!")

async def handle_content_submission(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        current_state = await state.get_state()
        
        if not current_state:
            return
        
        content_text = message.text
        if not content_text or len(content_text.strip()) < 10:
            await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π. –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        
        if len(content_text) > 1000:
            await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤.")
            return
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É
        content_type = None
        if current_state == ContentSubmissionStates.waiting_for_meme:
            content_type = "meme"
        elif current_state == ContentSubmissionStates.waiting_for_joke:
            content_type = "joke"
        elif current_state == ContentSubmissionStates.waiting_for_anekdot:
            content_type = "anekdot"
        
        if not content_type:
            await message.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
            await state.clear()
            return
        
        # –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –ë–î
        try:
            from database.services import add_content, update_user_points
            
            content_id = add_content(
                author_user_id=message.from_user.id,
                content_type=content_type,
                text=content_text
            )
            
            if content_id:
                # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∏ –∑–∞ –ø–æ–¥–∞—á—É
                update_user_points(message.from_user.id, 10, f"–ø–æ–¥–∞—á–∞ {content_type}")
                
                await message.answer(
                    f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!</b>\n\n"
                    f"–¢–∏–ø: {content_type}\n"
                    f"ID: {content_id}\n\n"
                    f"–ó–∞ –ø–æ–¥–∞—á—É –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +10 –±–∞–ª—ñ–≤!\n"
                    f"–ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—î—Ç–µ —â–µ +20 –±–∞–ª—ñ–≤!"
                )
                
                logger.info(f"User {message.from_user.id} submitted {content_type} content (ID: {content_id})")
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                
        except ImportError:
            # Fallback –±–µ–∑ –ë–î
            await message.answer(
                f"‚úÖ <b>–î—è–∫—É—î–º–æ –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç!</b>\n\n"
                f"–í–∞—à {content_type} –±—É–¥–µ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏–π –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö –±–æ—Ç–∞.\n"
                f"–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error in content submission: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É.")
        await state.clear()

async def handle_cancel_command(message: Message, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥—ñ—ó"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—ñ–π –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    dp.message.register(handle_meme_command, Command("meme"))
    dp.message.register(handle_joke_command, Command("joke"))
    dp.message.register(handle_anekdot_command, Command("anekdot"))
    dp.message.register(handle_cancel_command, Command("cancel"))
    
    # Callback'–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É (—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –æ–∫—Ä–µ–º–æ –≤—ñ–¥ –æ—Å–Ω–æ–≤–Ω–∏—Ö)
    dp.callback_query.register(
        handle_content_callbacks,
        lambda c: c.data and (
            c.data.startswith("like_") or 
            c.data.startswith("dislike_") or 
            c.data.startswith("more_") or 
            c.data.startswith("submit_")
        )
    )
    
    # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ FSM —Å—Ç–∞–Ω–∞—Ö
    dp.message.register(
        handle_content_submission,
        ContentSubmissionStates.waiting_for_meme
    )
    dp.message.register(
        handle_content_submission,
        ContentSubmissionStates.waiting_for_joke
    )
    dp.message.register(
        handle_content_submission,
        ContentSubmissionStates.waiting_for_anekdot
    )
    
    logger.info("‚úÖ Content handlers registered")

# –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'register_content_handlers',
    'handle_meme_command',
    'handle_joke_command', 
    'handle_anekdot_command',
    'ContentSubmissionStates'
]