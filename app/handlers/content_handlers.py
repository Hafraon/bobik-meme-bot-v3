#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üß†üòÇüî•
"""

import logging
import random
from datetime import datetime
from typing import Dict, Set, Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –Ü–º–ø–æ—Ä—Ç–∏ –∑ –Ω–∞—à–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É
from settings import settings, EMOJI, TEXTS, TIME_GREETINGS

logger = logging.getLogger(__name__)

# FSM –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
class SubmissionStates(StatesGroup):
    waiting_for_content = State()

# –ì–ª–æ–±–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–∫–∞–∑–∞–Ω–∏—Ö –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤/–º–µ–º—ñ–≤ (FALLBACK)
# –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ —Ü–µ –±—É–¥–µ –≤ –ë–î —á–µ—Ä–µ–∑ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
USER_SHOWN_JOKES: Dict[int, Set[int]] = {}
USER_SHOWN_MEMES: Dict[int, Set[int]] = {}

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –ø–æ–∫–∏ –ë–î –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞
SAMPLE_JOKES = [
    "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\n- –ê –¥–µ —Å–∞–º–µ?\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
    "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\n- –ê —â–æ —Ä–æ–±–∏—à?\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ",
    "üòÇ –£—á–∏—Ç–µ–ª—å –∑–∞–ø–∏—Ç—É—î:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†",
    "üî• –ü–æ–∫—É–ø–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ —ñ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ",
    "üß† –î—Ä—É–∂–∏–Ω–∞ —á–æ–ª–æ–≤—ñ–∫–æ–≤—ñ:\n- –õ—é–±–∏–π, —è —Å—Ö—É–¥–ª–∞ –Ω–∞ 5 –∫–≥!\n- –ê –¥–µ –≤–æ–Ω–∏?\n- –í —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É! üòÇüî•",
    "üòÇ –°–∏–Ω –ø–∏—Ç–∞—î –±–∞—Ç—å–∫–∞:\n- –¢–∞—Ç—É, –∞ —â–æ —Ç–∞–∫–µ –ø–æ–ª—ñ—Ç–∏–∫–∞?\n- –¶–µ –∫–æ–ª–∏ –±–∞–≥–∞—Ç–æ –ª—é–¥–µ–π –≥–æ–≤–æ—Ä—è—Ç—å, –∞ –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–ª—è—Ç—å.\n- –ê —â–æ —Ç–∞–∫–µ –¥–µ–º–æ–∫—Ä–∞—Ç—ñ—è?\n- –¶–µ –∫–æ–ª–∏ –≤—Å—ñ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç–∏, –∞–ª–µ —Å–ª—É—Ö–∞—î —Ç—ñ–ª—å–∫–∏ –º–∞–º–∞! üß†",
    "üî• –õ—ñ–∫–∞—Ä –ø–∞—Ü—ñ—î–Ω—Ç–æ–≤—ñ:\n- –í–∏ –∫—É—Ä–∏?\n- –ù—ñ.\n- –ü'—î—Ç–µ?\n- –ù—ñ.\n- –¢–æ–¥—ñ –∂–∏–≤—ñ—Ç—å —è–∫ —Ö–æ—á–µ—Ç–µ - –≤—Å–µ –æ–¥–Ω–æ –¥–æ–≤–≥–æ –ø—Ä–æ—Ç—è–≥–Ω–µ—Ç–µ! üòÇ",
    "üß† –ó–∞—Ö–æ–¥–∏—Ç—å —á–æ–ª–æ–≤—ñ–∫ –¥–æ –∞–ø—Ç–µ–∫–∏:\n- –î–∞–π—Ç–µ —â–æ—Å—å –≤—ñ–¥ –≥–æ–ª–æ–≤–∏!\n- –ê —â–æ —Å–∞–º–µ –±–æ–ª–∏—Ç—å?\n- –î—Ä—É–∂–∏–Ω–∞! üòÇüî•",
    "üòÇ –†–æ–∑–º–æ–≤–∞ –≤ –æ—Ñ—ñ—Å—ñ:\n- –¢–∏ —á–æ–º—É —Ç–∞–∫–∏–π –≤–µ—Å–µ–ª–∏–π?\n- –ó–∞—Ä–ø–ª–∞—Ç—É –ø—ñ–¥–Ω—è–ª–∏!\n- –ù–∞ —Å–∫—ñ–ª—å–∫–∏?\n- –ù–∞ –¥—Ä—É–≥–∏–π –ø–æ–≤–µ—Ä—Ö! üß†",
    "üî• –°—Ç—É–¥–µ–Ω—Ç –∑–¥–∞—î –µ–∫–∑–∞–º–µ–Ω:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ –ù–∞–ø–æ–ª–µ–æ–Ω–∞.\n- –ù–µ –º–æ–∂—É, –º–∏ –Ω–µ –∑–Ω–∞–π–æ–º—ñ –æ—Å–æ–±–∏—Å—Ç–æ.\n- –¢–æ–¥—ñ –ø—Ä–æ –ü—É—à–∫—ñ–Ω–∞.\n- –¢–µ–∂ –Ω–µ –∑–Ω–∞–π–æ–º—ñ.\n- –ù–µ–∑–∞–¥–æ–≤—ñ–ª—å–Ω–æ!\n- –ê –∑ –∫–∏–º –≤–∏ –∑–Ω–∞–π–æ–º—ñ?\n- –ó –≤–∞–º–∏... —ñ —Ç–æ –ø–æ–≥–∞–Ω–æ! üòÇ"
]

SAMPLE_MEMES = [
    {
        "caption": "üß† –ö–æ–ª–∏ –Ω–∞—Ä–µ—à—Ç—ñ –∑—Ä–æ–∑—É–º—ñ–≤ —è–∫ –ø—Ä–∞—Ü—é—î async/await üòÇ",
        "description": "–ú–µ–º –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    },
    {
        "caption": "üî• –ù–∞—Å—Ç—Ä—ñ–π –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ vs –Ω–∞—Å—Ç—Ä—ñ–π –ø'—è—Ç–Ω–∏—Ü—ñ üòÇ",
        "description": "–ú–µ–º –ø—Ä–æ —Ä–æ–±–æ—á–∏–π —Ç–∏–∂–¥–µ–Ω—å"
    },
    {
        "caption": "üß† –ö–æ–ª–∏ –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É üòÇüî•",
        "description": "–ú–µ–º –ø—Ä–æ —á—É–¥–µ—Å–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è"
    },
    {
        "caption": "üòÇ –ö–æ–ª–∏ –ø–æ–±–∞—á–∏–≤ –∑–∞—Ä–ø–ª–∞—Ç—É –ø—ñ—Å–ª—è –ø–æ–¥–∞—Ç–∫—ñ–≤ ü§î",
        "description": "–ú–µ–º –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç—É"
    },
    {
        "caption": "üî• –£–∫—Ä–∞—ó–Ω–µ—Ü—å –ø—ñ–¥ —á–∞—Å –±–ª–µ–∫–∞—É—Ç—É: '–ê —É –Ω–∞—Å —Å–≤—ñ—Ç–ª–æ —î!' üòé",
        "description": "–ú–µ–º –ø—Ä–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É —Å—Ç—ñ–π–∫—ñ—Å—Ç—å"
    }
]

# ===== –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ü–ï–†–°–û–ù–ê–õ–Ü–ó–ê–¶–Ü–á =====

async def get_personalized_content(user_id: int, content_type: str) -> Optional[dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ë–î + fallback)"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–≤—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        from database import get_recommended_content, record_content_view
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await ensure_user_exists(user_id)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_obj = await get_recommended_content(user_id, content_type)
        
        if content_obj:
            # –ó–∞–ø–∏—Å—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–¥
            view_recorded = await record_content_view(user_id, content_obj.id, "command")
            
            return {
                "text": content_obj.text,
                "views": content_obj.views,
                "likes": content_obj.likes,
                "content_id": content_obj.id,
                "is_new": view_recorded,
                "topic": getattr(content_obj, 'topic', None),
                "quality": getattr(content_obj, 'quality_score', 0.8)
            }
    except Exception as e:
        logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    # FALLBACK - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä—É –ª–æ–≥—ñ–∫—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤
    if content_type == "joke":
        joke_index, joke_text = get_random_joke_without_repeat(user_id)
        return {
            "text": joke_text,
            "views": random.randint(50, 500),
            "likes": random.randint(5, 50),
            "content_id": None,
            "is_new": True,
            "topic": "life"
        }
    else:
        meme_index, meme_data = get_random_meme_without_repeat(user_id)
        return {
            "text": meme_data["caption"],
            "views": random.randint(80, 600),
            "likes": random.randint(8, 60),
            "content_id": None,
            "is_new": True,
            "topic": "life"
        }

async def ensure_user_exists(user_id: int):
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –≤ –ë–î"""
    try:
        from database import get_or_create_user
        # –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–¥—É—Ç—å –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ Message –ø—ñ–∑–Ω—ñ—à–µ
        await get_or_create_user(user_id)
    except:
        pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —è–∫—â–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

def get_random_joke_without_repeat(user_id: int) -> tuple:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤ (FALLBACK)"""
    global USER_SHOWN_JOKES
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if user_id not in USER_SHOWN_JOKES:
        USER_SHOWN_JOKES[user_id] = set()
    
    shown_jokes = USER_SHOWN_JOKES[user_id]
    available_jokes = []
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–Ω–µ–∫–¥–æ—Ç–∏ (–Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ñ)
    for i, joke in enumerate(SAMPLE_JOKES):
        if i not in shown_jokes:
            available_jokes.append((i, joke))
    
    # –Ø–∫—â–æ –≤—Å—ñ –∞–Ω–µ–∫–¥–æ—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–æ - —Å–∫–∏–¥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    if not available_jokes:
        USER_SHOWN_JOKES[user_id] = set()
        available_jokes = [(i, joke) for i, joke in enumerate(SAMPLE_JOKES)]
        logger.info(f"üîÑ –°–∫–∏–Ω—É—Ç–æ —ñ—Å—Ç–æ—Ä—ñ—é –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç
    joke_index, joke_text = random.choice(available_jokes)
    
    # –î–æ–¥–∞—î–º–æ –¥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—Ö
    USER_SHOWN_JOKES[user_id].add(joke_index)
    
    return joke_index, joke_text

def get_random_meme_without_repeat(user_id: int) -> tuple:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–µ–º—É –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤ (FALLBACK)"""
    global USER_SHOWN_MEMES
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if user_id not in USER_SHOWN_MEMES:
        USER_SHOWN_MEMES[user_id] = set()
    
    shown_memes = USER_SHOWN_MEMES[user_id]
    available_memes = []
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ–º–∏ (–Ω–µ –ø–æ–∫–∞–∑–∞–Ω—ñ)
    for i, meme in enumerate(SAMPLE_MEMES):
        if i not in shown_memes:
            available_memes.append((i, meme))
    
    # –Ø–∫—â–æ –≤—Å—ñ –º–µ–º–∏ –ø–æ–∫–∞–∑–∞–Ω–æ - —Å–∫–∏–¥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    if not available_memes:
        USER_SHOWN_MEMES[user_id] = set()
        available_memes = [(i, meme) for i, meme in enumerate(SAMPLE_MEMES)]
        logger.info(f"üîÑ –°–∫–∏–Ω—É—Ç–æ —ñ—Å—Ç–æ—Ä—ñ—é –º–µ–º—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –º–µ–º
    meme_index, meme_data = random.choice(available_memes)
    
    # –î–æ–¥–∞—î–º–æ –¥–æ –ø–æ–∫–∞–∑–∞–Ω–∏—Ö
    USER_SHOWN_MEMES[user_id].add(meme_index)
    
    return meme_index, meme_data

# ===== –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò =====

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /anekdot"""
    await send_personalized_joke(message)

async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /meme"""
    await send_personalized_meme(message)

async def send_personalized_joke(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É"""
    user_id = message.from_user.id
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        try:
            from database import get_or_create_user
            await get_or_create_user(
                user_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
        except:
            pass  # –ë–î –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_data = await get_personalized_content(user_id, "joke")
        
        if not content_data:
            await message.answer(f"{EMOJI['cross']} –£–ø—Å! –ê–Ω–µ–∫–¥–æ—Ç–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")
            return
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É
        current_hour = datetime.now().hour
        if 6 <= current_hour < 12:
            greeting = random.choice(TIME_GREETINGS["morning"])
        elif 12 <= current_hour < 18:
            greeting = random.choice(TIME_GREETINGS["day"])
        elif 18 <= current_hour < 23:
            greeting = random.choice(TIME_GREETINGS["evening"])
        else:
            greeting = random.choice(TIME_GREETINGS["night"])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard_buttons = [
            [
                InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                                   callback_data=f"like_joke_{content_data.get('content_id', 0)}"),
                InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                                   callback_data=f"dislike_joke_{content_data.get('content_id', 0)}")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –©–µ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
            ]
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if content_data.get('content_id'):
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"{EMOJI['fire']} –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", 
                                   callback_data=f"share_joke_{content_data['content_id']}"),
                InlineKeyboardButton(text=f"üìä –¢–æ–ø –∞–Ω–µ–∫–¥–æ—Ç–∏", callback_data="top_jokes")
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{EMOJI['star']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_joke")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        content_info = []
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–º–∞—Ç–∏—á–Ω—ñ –µ–º–æ–¥–∑—ñ
        if content_data.get('topic'):
            topic_emoji = {
                "programming": "üíª", 
                "work": "üè¢", 
                "life": "üåç", 
                "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                "education": "üéì"
            }.get(content_data['topic'], "üìù")
            content_info.append(f"{topic_emoji}")
        
        content_info.append(f"üëÅÔ∏è {content_data['views']}")
        
        if content_data['likes'] > 0:
            content_info.append(f"‚ù§Ô∏è {content_data['likes']}")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –º—ñ—Ç–∫–∏
        personal_tag = ""
        if not content_data.get('is_new'):
            personal_tag = f" {EMOJI['thinking']} (–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ)"
        elif content_data.get('topic') in ['programming', 'work']:
            personal_tag = f" {EMOJI['brain']} (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)"
        elif content_data.get('quality', 0) > 0.9:
            personal_tag = f" {EMOJI['star']} (—Ç–æ–ø —è–∫—ñ—Å—Ç—å)"
        
        info_line = " ‚Ä¢ ".join(content_info) + personal_tag if content_info else personal_tag
        
        response_text = f"{greeting}\n\n{content_data['text']}\n\n{info_line}\n{EMOJI['star']} –°–ø–æ–¥–æ–±–∞–≤—Å—è –∞–Ω–µ–∫–¥–æ—Ç? –û—Ü—ñ–Ω–∏!"
        
        await message.answer(
            response_text,
            reply_markup=keyboard
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
        try:
            from database import update_user_points
            if content_data.get('is_new'):
                await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –Ω–æ–≤–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç—É")
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
        
        if not from_callback:
            logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É: {e}")
        await message.answer(f"{EMOJI['cross']} –£–ø—Å! –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

async def send_personalized_meme(message: Message, from_callback: bool = False):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –º–µ–º—É"""
    user_id = message.from_user.id
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        try:
            from database import get_or_create_user
            await get_or_create_user(
                user_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
        except:
            pass  # –ë–î –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        content_data = await get_personalized_content(user_id, "meme")
        
        if not content_data:
            await message.answer(f"{EMOJI['cross']} –£–ø—Å! –ú–µ–º–∏ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!")
            return
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        current_hour = datetime.now().hour
        if 6 <= current_hour < 12:
            greeting = random.choice(TIME_GREETINGS["morning"])
        elif 12 <= current_hour < 18:
            greeting = random.choice(TIME_GREETINGS["day"])
        elif 18 <= current_hour < 23:
            greeting = random.choice(TIME_GREETINGS["evening"])
        else:
            greeting = random.choice(TIME_GREETINGS["night"])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        keyboard_buttons = [
            [
                InlineKeyboardButton(text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                                   callback_data=f"like_meme_{content_data.get('content_id', 0)}"),
                InlineKeyboardButton(text=f"{EMOJI['dislike']} –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                                   callback_data=f"dislike_meme_{content_data.get('content_id', 0)}")
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –©–µ –º–µ–º", callback_data="get_meme"),
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
            ]
        ]
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if content_data.get('content_id'):
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"{EMOJI['fire']} –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", 
                                   callback_data=f"share_meme_{content_data['content_id']}"),
                InlineKeyboardButton(text=f"üìä –¢–æ–ø –º–µ–º–∏", callback_data="top_memes")
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"{EMOJI['star']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π", callback_data="submit_meme")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        content_info = []
        
        # –î–æ–¥–∞—î–º–æ —Ç–µ–º–∞—Ç–∏—á–Ω—ñ –µ–º–æ–¥–∑—ñ
        if content_data.get('topic'):
            topic_emoji = {
                "programming": "üíª", 
                "work": "üè¢", 
                "life": "üåç", 
                "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶"
            }.get(content_data['topic'], "üìù")
            content_info.append(f"{topic_emoji}")
        
        content_info.append(f"üëÅÔ∏è {content_data['views']}")
        
        if content_data['likes'] > 0:
            content_info.append(f"‚ù§Ô∏è {content_data['likes']}")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –º—ñ—Ç–∫–∏
        personal_tag = ""
        if not content_data.get('is_new'):
            personal_tag = f" {EMOJI['thinking']} (–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ)"
        elif content_data.get('topic') in ['programming', 'work']:
            personal_tag = f" {EMOJI['brain']} (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)"
        elif content_data.get('quality', 0) > 0.9:
            personal_tag = f" {EMOJI['star']} (—Ç–æ–ø —è–∫—ñ—Å—Ç—å)"
        
        info_line = " ‚Ä¢ ".join(content_info) + personal_tag if content_info else personal_tag
        
        response_text = f"{greeting}\n\n{content_data['text']}\n\n{info_line}\n{EMOJI['star']} –°–ø–æ–¥–æ–±–∞–≤—Å—è –º–µ–º? –û—Ü—ñ–Ω–∏!"
        
        await message.answer(
            response_text,
            reply_markup=keyboard
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥
        try:
            from database import update_user_points
            if content_data.get('is_new'):
                await update_user_points(user_id, 1, "–ø–µ—Ä–µ–≥–ª—è–¥ –Ω–æ–≤–æ–≥–æ –º–µ–º—É")
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ë–î
        
        if not from_callback:
            logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –º–µ–º")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –º–µ–º—É: {e}")
        await message.answer(f"{EMOJI['cross']} –£–ø—Å! –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

# ===== –°–¢–ê–†–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–£–ú–Ü–°–ù–û–°–¢–Ü =====

async def send_joke(message: Message, from_callback: bool = False):
    """–°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ"""
    await send_personalized_joke(message, from_callback)

async def send_meme(message: Message, from_callback: bool = False):
    """–°—Ç–∞—Ä–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ"""
    await send_personalized_meme(message, from_callback)

# ===== –ü–û–î–ê–ß–ê –ö–û–ù–¢–ï–ù–¢–£ (–ë–ï–ó –ó–ú–Ü–ù) =====

async def cmd_submit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /submit - –ø–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    user_id = message.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏
    text_parts = message.text.split(maxsplit=1)
    
    if len(text_parts) > 1:
        # –Ø–∫—â–æ —î —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ - —Ü–µ –∞–Ω–µ–∫–¥–æ—Ç
        joke_text = text_parts[1].strip()
        
        if len(joke_text) < 10:
            await message.answer(
                f"{EMOJI['cross']} –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π! –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        if len(joke_text) > settings.MAX_JOKE_LENGTH:
            await message.answer(
                f"{EMOJI['cross']} –ê–Ω–µ–∫–¥–æ—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
        try:
            from database import add_content_for_moderation
            await add_content_for_moderation(
                user_id=user_id,
                content_type="joke",
                text=joke_text
            )
            
            # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É
            from database import update_user_points
            await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –∞–Ω–µ–∫–¥–æ—Ç—É")
            
            await message.answer(
                f"{EMOJI['star']} –î—è–∫—É—é! –¢–≤—ñ–π –∞–Ω–µ–∫–¥–æ—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
                f"–û—Ç—Ä–∏–º–∞–Ω–æ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤!\n\n"
                f"–ü—ñ—Å–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—î—à —â–µ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤! {EMOJI['fire']}"
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É: {e}")
            await message.answer(
                f"{EMOJI['cross']} –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
            )
    else:
        # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç?", callback_data="how_submit_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º?", callback_data="how_submit_meme")
            ]
        ])
        
        await message.answer(
            f"{EMOJI['fire']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
            f"{EMOJI['brain']} <b>–ê–Ω–µ–∫–¥–æ—Ç:</b>\n"
            f"<code>/submit –¢–≤—ñ–π —Å–º—ñ—à–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç —Ç—É—Ç</code>\n\n"
            f"{EMOJI['laugh']} <b>–ú–µ–º:</b>\n"
            f"–ù–∞–¥—ñ—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n\n"
            f"{EMOJI['star']} –ó–∞ –∫–æ–∂–Ω—É –ø–æ–¥–∞—á—É: <b>+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤</b>\n"
            f"–ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: <b>+{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤</b>",
            reply_markup=keyboard
        )
    
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é")

async def handle_photo_submission(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥–∞—á—ñ –º–µ–º—É"""
    user_id = message.from_user.id
    
    if not message.caption:
        await message.answer(
            f"{EMOJI['cross']} –î–ª—è –º–µ–º—É –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø—ñ–¥–ø–∏—Å! –î–æ–¥–∞–π –ø—ñ–¥–ø–∏—Å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
        )
        return
    
    caption = message.caption.strip()
    
    if len(caption) < 5:
        await message.answer(
            f"{EMOJI['cross']} –ü—ñ–¥–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π! –ú—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    if len(caption) > settings.MAX_MEME_CAPTION_LENGTH:
        await message.answer(
            f"{EMOJI['cross']} –ü—ñ–¥–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! –ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤."
        )
        return
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
    try:
        from database import add_content_for_moderation
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        
        await add_content_for_moderation(
            user_id=user_id,
            content_type="meme",
            text=caption,
            file_id=photo.file_id
        )
        
        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É
        from database import update_user_points
        await update_user_points(user_id, settings.POINTS_FOR_SUBMISSION, "–ø–æ–¥–∞—á–∞ –º–µ–º—É")
        
        await message.answer(
            f"{EMOJI['star']} –î—è–∫—É—é! –¢–≤—ñ–π –º–µ–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n"
            f"–û—Ç—Ä–∏–º–∞–Ω–æ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤!\n\n"
            f"–ü—ñ—Å–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞—î—à —â–µ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤! {EMOJI['fire']}"
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–º—É: {e}")
        await message.answer(
            f"{EMOJI['cross']} –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!"
        )
    
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –º–µ–º")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_get_joke(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É"""
    await send_personalized_joke(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_get_meme(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
    await send_personalized_meme(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_like_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é"""
    user_id = callback_query.from_user.id
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ callback_data
    callback_data = callback_query.data
    content_id = None
    
    if "_" in callback_data:
        parts = callback_data.split("_")
        if len(parts) >= 3:
            try:
                content_id = int(parts[2])
            except:
                content_id = None
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –ª–∞–π–∫ –≤ –ë–î –∑ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –±–∞–ª—ñ–≤ –∞–≤—Ç–æ—Ä—É
    try:
        from database import add_content_rating
        if content_id:
            success = await add_content_rating(user_id, content_id, "like", settings.POINTS_FOR_REACTION)
            if success:
                # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–æ–≤–µ–¥—ñ–Ω–∫—É –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó
                try:
                    from database import analyze_user_behavior
                    await analyze_user_behavior(user_id)
                except:
                    pass
                
                await callback_query.answer(f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤")
            else:
                await callback_query.answer(f"{EMOJI['like']} –í–∏ –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        else:
            # Fallback –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –±–µ–∑ ID
            from database import update_user_points
            await update_user_points(user_id, settings.POINTS_FOR_REACTION, "–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            await callback_query.answer(f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É! +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ª–∞–π–∫–∞: {e}")
        await callback_query.answer(f"{EMOJI['like']} –î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É!")

async def callback_dislike_content(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    user_id = callback_query.from_user.id
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ callback_data
    callback_data = callback_query.data
    content_id = None
    
    if "_" in callback_data:
        parts = callback_data.split("_")
        if len(parts) >= 3:
            try:
                content_id = int(parts[2])
            except:
                content_id = None
    
    # –ó–∞–ø–∏—Å—É—î–º–æ –¥–∏–∑–ª–∞–π–∫ –≤ –ë–î
    try:
        from database import add_content_rating
        if content_id:
            success = await add_content_rating(user_id, content_id, "dislike", 1)
            if success:
                await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! +1 –±–∞–ª")
            else:
                await callback_query.answer(f"{EMOJI['dislike']} –í–∏ –≤–∂–µ –æ—Ü—ñ–Ω—é–≤–∞–ª–∏ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!")
        else:
            # Fallback
            from database import update_user_points
            await update_user_points(user_id, 1, "–¥–∏–∑–ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫! +1 –±–∞–ª")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞: {e}")
        await callback_query.answer(f"{EMOJI['dislike']} –î—è–∫—É—é –∑–∞ –≤—ñ–¥–≥—É–∫!")

async def callback_share_content(callback_query: CallbackQuery):
    """–ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø - –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    user_id = callback_query.from_user.id
    
    # –í–∏—Ç—è–≥—É—î–º–æ ID –∫–æ–Ω—Ç–µ–Ω—Ç—É
    callback_data = callback_query.data
    if "_" in callback_data:
        parts = callback_data.split("_")
        if len(parts) >= 3:
            try:
                content_id = int(parts[2])
                
                # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤ –ë–î
                from database import add_content_rating, update_user_points
                await add_content_rating(user_id, content_id, "share", 3)
                await update_user_points(user_id, 3, "–ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º")
                
                await callback_query.answer(f"{EMOJI['fire']} –î—è–∫—É—é –∑–∞ –ø–æ—à–∏—Ä–µ–Ω–Ω—è! +3 –±–∞–ª–∏")
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è
                await callback_query.message.answer(
                    f"{EMOJI['fire']} <b>–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:</b>\n\n"
                    f"–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥—Ä—É–∑—è–º!\n"
                    f"–ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫—É '–ü–µ—Ä–µ—Å–ª–∞—Ç–∏' üì§"
                )
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è: {e}")
                await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è")

async def callback_top_content(callback_query: CallbackQuery):
    """–ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        content_type = "joke" if "jokes" in callback_query.data else "meme"
        emoji = EMOJI['brain'] if content_type == "joke" else EMOJI['laugh']
        name = "–ê–ù–ï–ö–î–û–¢–ò" if content_type == "joke" else "–ú–ï–ú–ò"
        
        # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –∑ –ë–î
        try:
            from database import get_trending_content, get_popular_content
            
            trending = await get_trending_content(content_type, 3)
            popular = await get_popular_content(content_type, 3)
            
            response = f"{emoji} <b>–¢–û–ü {name}</b>\n\n"
            
            if trending:
                response += f"üî• <b>–¢—Ä–µ–Ω–¥–æ–≤—ñ –∑–∞—Ä–∞–∑:</b>\n"
                for i, item in enumerate(trending, 1):
                    response += f"{i}. üëÅÔ∏è{item.views} ‚ù§Ô∏è{item.likes} - {item.text[:50]}...\n"
                response += "\n"
            
            if popular:
                response += f"‚≠ê <b>–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∑–∞ –≤–µ—Å—å —á–∞—Å:</b>\n"
                for i, item in enumerate(popular, 1):
                    response += f"{i}. üëÅÔ∏è{item.views} ‚ù§Ô∏è{item.likes} - {item.text[:50]}...\n"
            
        except:
            # Fallback —è–∫—â–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
            response = f"{emoji} <b>–¢–û–ü {name}</b>\n\nüîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è..."
        
        await callback_query.message.edit_text(
            response,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", 
                                   callback_data="get_joke" if content_type == "joke" else "get_meme")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–ø—É")

async def callback_submit_instructions(callback_query: CallbackQuery):
    """–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ –ø–æ–¥–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_type = "–∞–Ω–µ–∫–¥–æ—Ç" if "joke" in callback_query.data else "–º–µ–º"
    
    if "joke" in callback_query.data:
        instructions = (
            f"{EMOJI['brain']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç:</b>\n\n"
            f"1. –ù–∞–ø–∏—à–∏ <code>/submit</code> —ñ –æ–¥—Ä–∞–∑—É —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n"
            f"2. –ú–∞–∫—Å–∏–º—É–º {settings.MAX_JOKE_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤\n"
            f"3. –ê–Ω–µ–∫–¥–æ—Ç –º–∞—î –±—É—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
            f"4. –ë–µ–∑ –º–∞—Ç—É —Ç–∞ –æ–±—Ä–∞–∑\n\n"
            f"{EMOJI['star']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
            f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É? –ë–æ –≤ –Ω—ñ–π –Ω–µ–º–∞—î –±–∞–≥—ñ–≤! {EMOJI['laugh']}</code>"
        )
    else:
        instructions = (
            f"{EMOJI['laugh']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –º–µ–º:</b>\n\n"
            f"1. –ü—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
            f"2. –î–æ–¥–∞–π –ø—ñ–¥–ø–∏—Å –¥–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n"
            f"3. –ú–∞–∫—Å–∏–º—É–º {settings.MAX_MEME_CAPTION_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤ —É –ø—ñ–¥–ø–∏—Å—ñ\n"
            f"4. –ú–µ–º –º–∞—î –±—É—Ç–∏ —Å–º—ñ—à–Ω–∏–º —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞–º\n\n"
            f"{EMOJI['star']} <b>–ü—ñ–¥–ø–∏—Å - –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π!</b>"
        )
    
    await callback_query.message.edit_text(instructions)
    await callback_query.answer()

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
    dp.message.register(handle_photo_submission, F.photo)
    
    # –û—Å–Ω–æ–≤–Ω—ñ callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_get_joke, F.data == "get_joke")
    dp.callback_query.register(callback_get_meme, F.data == "get_meme")
    
    # –û—Ü—ñ–Ω–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É (—Å—Ç–∞—Ä—ñ + –Ω–æ–≤—ñ –∑ ID)
    dp.callback_query.register(callback_like_content, F.data.in_(["like_joke", "like_meme"]))
    dp.callback_query.register(callback_like_content, F.data.startswith("like_"))
    dp.callback_query.register(callback_dislike_content, F.data.in_(["dislike_joke", "dislike_meme"]))
    dp.callback_query.register(callback_dislike_content, F.data.startswith("dislike_"))
    
    # –ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
    dp.callback_query.register(callback_share_content, F.data.startswith("share_"))
    dp.callback_query.register(callback_top_content, F.data.in_(["top_jokes", "top_memes"]))
    
    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    dp.callback_query.register(callback_submit_instructions, F.data.in_(["how_submit_joke", "how_submit_meme"]))
    dp.callback_query.register(callback_submit_instructions, F.data.in_(["submit_joke", "submit_meme"]))