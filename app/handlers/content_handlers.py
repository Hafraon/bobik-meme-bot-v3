#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìù –°–ò–°–¢–ï–ú–ê –ö–û–ù–¢–ï–ù–¢–£ –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê üìù

–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:
‚úÖ –ü–æ–¥–∞—á–∞ –∂–∞—Ä—Ç—ñ–≤, –º–µ–º—ñ–≤, –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è
‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫—ñ–≤ —Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤
‚úÖ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
"""

import logging
import random
from datetime import datetime
from typing import Optional, List, Dict, Any, Union
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

logger = logging.getLogger(__name__)

# ===== STATES –î–õ–Ø FSM =====
class ContentSubmissionStates(StatesGroup):
    """–°—Ç–∞–Ω–∏ –¥–ª—è –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    waiting_for_content = State()
    waiting_for_type = State()
    waiting_for_confirmation = State()

# ===== –ï–ú–û–î–ñ–Ü –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò =====
EMOJI = {
    'joke': 'üòÇ',
    'meme': 'üî•', 
    'anekdot': 'üéØ',
    'like': 'üëç',
    'dislike': 'üëé',
    'love': '‚ù§Ô∏è',
    'laugh': 'ü§£',
    'fire': 'üî•',
    'star': '‚≠ê'
}

CONTENT_TYPES = {
    'joke': '–ñ–∞—Ä—Ç',
    'meme': '–ú–µ–º', 
    'anekdot': '–ê–Ω–µ–∫–¥–æ—Ç'
}

# ===== –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á –ö–û–ù–¢–ï–ù–¢–£ =====

async def get_random_content(content_type: str = None, user_id: int = None) -> Optional[Dict]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        try:
            from database import get_random_approved_content, DATABASE_AVAILABLE
            if DATABASE_AVAILABLE:
                content = await get_random_approved_content(content_type, user_id)
                if content:
                    return {
                        'id': content.id,
                        'text': content.text,
                        'type': content.content_type,
                        'author_id': content.author_id,
                        'views': content.views,
                        'likes': content.likes,
                        'dislikes': content.dislikes
                    }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è DB content error: {e}")
        
        # Fallback –∫–æ–Ω—Ç–µ–Ω—Ç
        fallback_content = {
            'joke': [
                "üòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –ö–∞–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean! ü§ì",
                "üéØ –£–∫—Ä–∞—ó–Ω–µ—Ü—å –∫—É–ø—É—î iPhone:\n- –ù–µ –∑–∞–≥—É–±—ñ—Ç—å!\n- –£ –º–µ–Ω–µ —î Find My iPhone!\n- –ê —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ?\n- –ó–Ω–∞—á–∏—Ç—å –≤–∫—Ä–∞–ª–∏ –º–æ—Å–∫–∞–ª—ñ! üá∫üá¶",
                "üî• IT-—à–Ω–∏–∫ –Ω–∞ —Å–ø—ñ–≤–±–µ—Å—ñ–¥—ñ:\n- –†–æ–∑–∫–∞–∂—ñ—Ç—å –ø—Ä–æ —Å–µ–±–µ.\n- –Ø fullstack.\n- –ö—Ä—É—Ç–æ! –ê —â–æ –≤–º—ñ—î—Ç–µ?\n- HTML! ü§°",
                "üíª –¢–∞–∫—Å–∏—Å—Ç –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—É:\n- –ö—É–¥–∏ —ó–¥–µ–º–æ?\n- –î–æ production!\n- –ê–¥—Ä–µ—Å–∞?\n- 127.0.0.1! üè†",
                "üß† –£ —à–∫–æ–ª—ñ:\n- –ü–µ—Ç—Ä–∏–∫—É, 2+2?\n- –ê —Ü–µ –¥–ª—è —á–æ–≥–æ?\n- –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏.\n- –ê-–∞, —Ç–æ 4! –ê —è –¥—É–º–∞–≤ –¥–ª—è JavaScript! üòÑ"
            ],
            'meme': [
                "ü§£ –ö–æ–ª–∏ –±–∞—á–∏—à —â–æ Wi-Fi –Ω–∞ —Ä–æ–±–æ—Ç—ñ —à–≤–∏–¥—à–∏–π –∑–∞ –¥–æ–º–∞—à–Ω—ñ–π:\n*–∑–¥–∏–≤–æ–≤–∞–Ω–∏–π –∫—ñ—Ç –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º —Ä–æ—Ç–æ–º* üò∏",
                "üòÇ –ú—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∫–æ–ª–∏ –ø'—è—Ç–Ω–∏—Ü—è:\n*—Ç–∞–Ω—Ü—é—é—á–∞ –ª—é–¥–∏–Ω–∞ –∑ –∫–æ–Ω—Ñ–µ—Ç—ñ* üéâüíÉ",
                "üéÆ –ö–æ–ª–∏ –º–∞–º–∞ –∫–∞–∂–µ '–æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –≥—Ä–∞—î—à':\n*—Ö–∏—Ç—Ä–∞ —É—Å–º—ñ—à–∫–∞ –∑ –ø—ñ–¥–º–∏–≥—É–≤–∞–Ω–Ω—è–º* üòè",
                "üíº –ö–æ–ª–∏ boss –∫–∞–∂–µ '—à–≤–∏–¥–∫–µ –ø–∏—Ç–∞–Ω–Ω—è':\n*–ø–∞–Ω—ñ–∫–∞ —Ç–∞ –±—ñ–≥* üèÉ‚Äç‚ôÇÔ∏èüí®",
                "üçï –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞–º–æ–≤–ª—è—î –ø—ñ—Ü—É:\n*–∫–æ–Ω—Ñ—ñ–≥—É—Ä—É—î —Ç–æ–ø—ñ–Ω–≥–∏ —è–∫ –∫–æ–¥* üë®‚Äçüíª"
            ],
            'anekdot': [
                "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†üí∞",
                "üè™ –£ –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ",
                "üöó –¢–∞–∫—Å–∏—Å—Ç:\n- –ö—É–¥–∏ —ó–¥–µ–º–æ?\n- –î–æ –ø–µ—Ä–µ–º–æ–≥–∏!\n- –ê–¥—Ä–µ—Å–∞ —è–∫–∞?\n- –ö–∏—ó–≤, –≤—É–ª–∏—Ü—è –ë–∞–Ω–∫–æ–≤–∞, 11! üèõÔ∏èüá∫üá¶",
                "üíª –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥—Ä—É–∂–∏–Ω—ñ:\n- –î–æ—Ä–æ–≥–∞, —è –π–¥—É –≤ –º–∞–≥–∞–∑–∏–Ω.\n- –ö—É–ø–∏ —Ö–ª—ñ–±, –∞ —è–∫—â–æ –±—É–¥—É—Ç—å —è–π—Ü—è - –≤—ñ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫.\n*–ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ 10 —Ö–ª—ñ–±–∞–º–∏*\n- –ë—É–ª–∏ —è–π—Ü—è! ü•ö",
                "üì± –î—ñ–¥—É—Å—å –∫—É–ø—É—î —Å–º–∞—Ä—Ç—Ñ–æ–Ω:\n- –ê –≤—ñ–Ω –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏–∫–Ω–∏–π?\n- –¢–∞–∫.\n- –ê –∫–∏—Å–ª–æ—Ç–æ—Å—Ç—ñ–π–∫–∏–π?\n- –ù–∞–≤—ñ—â–æ?\n- –Ø —Å–∞–º–æ–≥–æ–Ω –≥–æ–Ω—é! üç∂"
            ]
        }
        
        # –í–∏–±—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É
        if content_type and content_type in fallback_content:
            content_list = fallback_content[content_type]
        else:
            # –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ç–∏–ø
            all_content = []
            for contents in fallback_content.values():
                all_content.extend(contents)
            content_list = all_content
        
        selected_text = random.choice(content_list)
        
        return {
            'id': 0,
            'text': selected_text,
            'type': content_type or 'joke',
            'author_id': 1,
            'views': random.randint(10, 100),
            'likes': random.randint(5, 50),
            'dislikes': random.randint(0, 5)
        }
        
    except Exception as e:
        logger.error(f"‚ùå Error getting content: {e}")
        return None

def create_content_keyboard(content_id: int, content_type: str, 
                          likes: int = 0, dislikes: int = 0) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['like']} {likes}", 
                callback_data=f"like_content:{content_id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['dislike']} {dislikes}", 
                callback_data=f"dislike_content:{content_id}"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['love']}", 
                callback_data=f"love_content:{content_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîÑ –©–µ –æ–¥–∏–Ω", 
                callback_data=f"more_content:{content_type}"
            ),
            InlineKeyboardButton(
                text="üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è", 
                callback_data=f"share_content:{content_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìù –ü–æ–¥–∞—Ç–∏ —Å–≤—ñ–π", 
                callback_data="submit_content"
            ),
            InlineKeyboardButton(
                text="‚öîÔ∏è –î—É–µ–ª—å", 
                callback_data=f"duel_with_content:{content_id}"
            )
        ]
    ])
    
    return keyboard

def create_content_type_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['joke']} –ñ–∞—Ä—Ç", 
                callback_data="content_type:joke"
            ),
            InlineKeyboardButton(
                text=f"{EMOJI['meme']} –ú–µ–º", 
                callback_data="content_type:meme"
            )
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['anekdot']} –ê–Ω–µ–∫–¥–æ—Ç", 
                callback_data="content_type:anekdot"
            ),
            InlineKeyboardButton(
                text="üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π", 
                callback_data="content_type:random"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É", 
                callback_data="content_stats"
            )
        ]
    ])
    
    return keyboard

# ===== COMMAND HANDLERS =====

async def cmd_joke(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∂–∞—Ä—Ç—É"""
    content = await get_random_content('joke', message.from_user.id)
    
    if not content:
        await message.answer("üòÖ –í–∏–±–∞—á—Ç–µ, –∂–∞—Ä—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!")
        return
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (—è–∫—â–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
    try:
        from database import DATABASE_AVAILABLE
        if DATABASE_AVAILABLE and content['id'] > 0:
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –≤ –ë–î
            pass
    except:
        pass
    
    text = (
        f"{EMOJI['joke']} <b>–ñ–∞—Ä—Ç –¥–Ω—è:</b>\n\n"
        f"{content['text']}\n\n"
        f"üëÅ {content['views']} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"
    )
    
    keyboard = create_content_keyboard(
        content['id'], 'joke', 
        content['likes'], content['dislikes']
    )
    
    await message.answer(text, reply_markup=keyboard)

async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
    content = await get_random_content('meme', message.from_user.id)
    
    if not content:
        await message.answer("üòÖ –í–∏–±–∞—á—Ç–µ, –º–µ–º–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!")
        return
    
    text = (
        f"{EMOJI['meme']} <b>–ú–µ–º –¥–Ω—è:</b>\n\n"
        f"{content['text']}\n\n"
        f"üëÅ {content['views']} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"
    )
    
    keyboard = create_content_keyboard(
        content['id'], 'meme',
        content['likes'], content['dislikes']
    )
    
    await message.answer(text, reply_markup=keyboard)

async def cmd_anekdot(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É"""
    content = await get_random_content('anekdot', message.from_user.id)
    
    if not content:
        await message.answer("üòÖ –í–∏–±–∞—á—Ç–µ, –∞–Ω–µ–∫–¥–æ—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ!")
        return
    
    text = (
        f"{EMOJI['anekdot']} <b>–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è:</b>\n\n"
        f"{content['text']}\n\n"
        f"üëÅ {content['views']} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"
    )
    
    keyboard = create_content_keyboard(
        content['id'], 'anekdot',
        content['likes'], content['dislikes']
    )
    
    await message.answer(text, reply_markup=keyboard)

async def cmd_content(message: Message):
    """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    text = (
        f"üìù <b>–ö–û–ù–¢–ï–ù–¢ –¶–ï–ù–¢–†</b>\n\n"
        f"üéØ –©–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?\n\n"
        f"{EMOJI['joke']} –ñ–∞—Ä—Ç–∏ - –≥—É–º–æ—Ä —Ç–∞ —Ä–æ–∑–≤–∞–≥–∏\n"
        f"{EMOJI['meme']} –ú–µ–º–∏ - —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –∫—É–ª—å—Ç—É—Ä–∞\n"
        f"{EMOJI['anekdot']} –ê–Ω–µ–∫–¥–æ—Ç–∏ - –∫–ª–∞—Å–∏—á–Ω–∏–π –≥—É–º–æ—Ä\n\n"
        f"üé≤ –ê–±–æ –æ—Ç—Ä–∏–º–∞–π—Ç–µ —â–æ—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–µ!"
    )
    
    keyboard = create_content_type_keyboard()
    await message.answer(text, reply_markup=keyboard)

async def cmd_submit(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    text = (
        f"üìù <b>–ü–û–î–ê–ß–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
        f"üéØ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –≥—É–º–æ—Ä–æ–º –∑ —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é!\n\n"
        f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
        f"‚Ä¢ –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏\n"
        f"‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞–±–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏–π\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç, –º–µ–º –∞–±–æ –∞–Ω–µ–∫–¥–æ—Ç:"
    )
    
    await state.set_state(ContentSubmissionStates.waiting_for_content)
    await message.answer(text)

# ===== FSM HANDLERS =====

async def process_content_submission(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    content_text = message.text.strip()
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if len(content_text) < 10:
        await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π! –ú—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    if len(content_text) > 2000:
        await message.answer("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π! –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(content_text=content_text)
    
    # –í–∏–±—ñ—Ä —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
    text = (
        f"üìù <b>–í–ò–ë–Ü–† –¢–ò–ü–£ –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
        f"üìÑ –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç:\n"
        f"<i>{content_text[:200]}{'...' if len(content_text) > 200 else ''}</i>\n\n"
        f"üéØ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['joke']} –ñ–∞—Ä—Ç", callback_data="submit_type:joke"),
            InlineKeyboardButton(text=f"{EMOJI['meme']} –ú–µ–º", callback_data="submit_type:meme")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['anekdot']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="submit_type:anekdot")
        ],
        [
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_submission")
        ]
    ])
    
    await state.set_state(ContentSubmissionStates.waiting_for_type)
    await message.answer(text, reply_markup=keyboard)

# ===== CALLBACK HANDLERS =====

async def callback_content_type(callback: CallbackQuery):
    """Callback –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É"""
    await callback.answer()
    
    content_type = callback.data.split(':')[1]
    
    if content_type == 'random':
        content = await get_random_content(None, callback.from_user.id)
        type_name = "–í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    else:
        content = await get_random_content(content_type, callback.from_user.id)
        type_name = CONTENT_TYPES.get(content_type, content_type)
    
    if not content:
        await callback.message.edit_text("üòÖ –í–∏–±–∞—á—Ç–µ, –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π!")
        return
    
    text = (
        f"{EMOJI.get(content_type, 'üé≤')} <b>{type_name}:</b>\n\n"
        f"{content['text']}\n\n"
        f"üëÅ {content['views']} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"
    )
    
    keyboard = create_content_keyboard(
        content['id'], content['type'],
        content['likes'], content['dislikes']
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def callback_like_content(callback: CallbackQuery):
    """Callback –ª–∞–π–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer("üëç –õ–∞–π–∫ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!")
    
    content_id = int(callback.data.split(':')[1])
    
    # –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î
    try:
        from database import DATABASE_AVAILABLE
        if DATABASE_AVAILABLE and content_id > 0:
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–∞–π–∫—ñ–≤ –≤ –ë–î
            pass
    except:
        pass
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –Ω–æ–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ª–∞–π–∫—ñ–≤
    current_text = callback.message.text
    await callback.message.edit_text(
        current_text + f"\n\nüëç –í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!"
    )

async def callback_dislike_content(callback: CallbackQuery):
    """Callback –¥–∏–∑–ª–∞–π–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer("üëé –î–∏–∑–ª–∞–π–∫ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!")
    
    # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –¥–∏–∑–ª–∞–π–∫—ñ–≤
    current_text = callback.message.text
    await callback.message.edit_text(
        current_text + f"\n\nüëé –í–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫."
    )

async def callback_love_content(callback: CallbackQuery):
    """Callback –ª—é–±–æ–≤—ñ –¥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer("‚ù§Ô∏è –î—É–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å!")
    
    current_text = callback.message.text
    await callback.message.edit_text(
        current_text + f"\n\n‚ù§Ô∏è –í–∏ –ø–æ–∫–æ—Ö–∞–ª–∏ —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç!"
    )

async def callback_more_content(callback: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–µ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer()
    
    content_type = callback.data.split(':')[1]
    content = await get_random_content(content_type, callback.from_user.id)
    
    if not content:
        await callback.answer("üòÖ –ë—ñ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø–æ–∫–∏ –Ω–µ–º–∞—î!")
        return
    
    type_name = CONTENT_TYPES.get(content_type, content_type)
    text = (
        f"{EMOJI.get(content_type, 'üé≤')} <b>{type_name}:</b>\n\n"
        f"{content['text']}\n\n"
        f"üëÅ {content['views']} –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤"
    )
    
    keyboard = create_content_keyboard(
        content['id'], content['type'],
        content['likes'], content['dislikes']
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)

async def callback_share_content(callback: CallbackQuery):
    """Callback –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    await callback.answer("üì§ –§—É–Ω–∫—Ü—ñ—è –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
    
    # –¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —à–µ—Ä—ñ–Ω–≥—É

async def callback_submit_content(callback: CallbackQuery, state: FSMContext):
    """Callback –ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer()
    
    text = (
        f"üìù <b>–ü–û–î–ê–ß–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
        f"üéØ –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –≥—É–º–æ—Ä–æ–º –∑ —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é!\n\n"
        f"üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–Ω—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é\n"
        f"‚Ä¢ –ë–µ–∑ –æ–±—Ä–∞–∑ —Ç–∞ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏\n"
        f"‚Ä¢ –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∞–±–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏–π\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª—ñ–≤\n\n"
        f"‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç, –º–µ–º –∞–±–æ –∞–Ω–µ–∫–¥–æ—Ç:"
    )
    
    await state.set_state(ContentSubmissionStates.waiting_for_content)
    await callback.message.edit_text(text)

async def callback_submit_type(callback: CallbackQuery, state: FSMContext):
    """Callback –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –¥–ª—è –ø–æ–¥–∞—á—ñ"""
    await callback.answer()
    
    content_type = callback.data.split(':')[1]
    data = await state.get_data()
    content_text = data.get('content_text')
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∏–ø—É
    await state.update_data(content_type=content_type)
    
    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–¥–∞—á—ñ
    type_name = CONTENT_TYPES.get(content_type, content_type)
    
    text = (
        f"‚úÖ <b>–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –ü–û–î–ê–ß–Ü</b>\n\n"
        f"üìù –¢–∏–ø: {EMOJI.get(content_type, 'üìÑ')} {type_name}\n\n"
        f"üìÑ –ö–æ–Ω—Ç–µ–Ω—Ç:\n"
        f"<i>{content_text}</i>\n\n"
        f"üéØ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_submission"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_submission")
        ]
    ])
    
    await state.set_state(ContentSubmissionStates.waiting_for_confirmation)
    await callback.message.edit_text(text, reply_markup=keyboard)

async def callback_confirm_submission(callback: CallbackQuery, state: FSMContext):
    """Callback –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–¥–∞—á—ñ"""
    await callback.answer()
    
    data = await state.get_data()
    content_text = data.get('content_text')
    content_type = data.get('content_type')
    
    # –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ë–î
    try:
        from database import add_content_for_moderation, DATABASE_AVAILABLE
        if DATABASE_AVAILABLE:
            content = await add_content_for_moderation(
                author_id=callback.from_user.id,
                text=content_text,
                content_type=content_type
            )
            
            if content:
                success_text = (
                    f"‚úÖ <b>–ö–û–ù–¢–ï–ù–¢ –ü–û–î–ê–ù–û!</b>\n\n"
                    f"üìù –í–∞—à {CONTENT_TYPES.get(content_type, content_type).lower()} "
                    f"#{content.id} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n\n"
                    f"‚è∞ –û—á—ñ–∫—É–π—Ç–µ —Ä–æ–∑–≥–ª—è–¥—É –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\n"
                    f"üèÜ –ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –±–∞–ª–∏!\n\n"
                    f"üìä –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤ –ø—Ä–æ—Ñ—ñ–ª—ñ."
                )
            else:
                success_text = (
                    f"‚úÖ <b>–ö–û–ù–¢–ï–ù–¢ –ü–û–î–ê–ù–û!</b>\n\n"
                    f"üìù –í–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.\n\n"
                    f"‚ö†Ô∏è –ë–î —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∞–ª–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n"
                    f"‚è∞ –û—á—ñ–∫—É–π—Ç–µ —Ä–æ–∑–≥–ª—è–¥—É."
                )
        else:
            success_text = (
                f"‚úÖ <b>–ö–û–ù–¢–ï–ù–¢ –ü–û–î–ê–ù–û!</b>\n\n"
                f"üìù –í–∞—à {CONTENT_TYPES.get(content_type, content_type).lower()} "
                f"–æ—Ç—Ä–∏–º–∞–Ω–æ.\n\n"
                f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                f"üìû –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É."
            )
    except Exception as e:
        logger.error(f"‚ùå Submission error: {e}")
        success_text = (
            f"‚ùå <b>–ü–û–ú–ò–õ–ö–ê –ü–û–î–ê–ß–Ü</b>\n\n"
            f"–í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞.\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
    
    await state.clear()
    await callback.message.edit_text(success_text)

async def callback_cancel_submission(callback: CallbackQuery, state: FSMContext):
    """Callback —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–¥–∞—á—ñ"""
    await callback.answer()
    await state.clear()
    
    text = "‚ùå –ü–æ–¥–∞—á—É –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
    await callback.message.edit_text(text)

async def callback_content_stats(callback: CallbackQuery):
    """Callback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback.answer()
    
    # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ë–î
    try:
        from database import get_bot_statistics, DATABASE_AVAILABLE
        if DATABASE_AVAILABLE:
            stats = await get_bot_statistics()
            stats_text = (
                f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
                f"üìù –í—Å—å–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {stats.get('total_content', 'N/A')}\n"
                f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ–≥–æ: {stats.get('approved_content', 'N/A')}\n"
                f"‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats.get('pending_content', 'N/A')}\n"
                f"üëÅ –í—Å—å–æ–≥–æ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {stats.get('total_views', 'N/A')}\n"
                f"üëç –í—Å—å–æ–≥–æ –ª–∞–π–∫—ñ–≤: {stats.get('total_likes', 'N/A')}\n\n"
                f"üî• –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π —Ç–∏–ø: –ñ–∞—Ä—Ç–∏\n"
                f"üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: –í–∏—Å–æ–∫–∞"
            )
        else:
            stats_text = (
                f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£</b>\n\n"
                f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
                f"üìù –†–µ–∂–∏–º: Fallback\n"
                f"üé≤ –î–æ—Å—Ç—É–ø–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: Demo\n"
                f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ\n\n"
                f"üí° –î–ª—è –ø–æ–≤–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ë–î"
            )
    except Exception as e:
        logger.error(f"‚ùå Stats error: {e}")
        stats_text = "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    await callback.message.edit_text(stats_text)

async def callback_duel_with_content(callback: CallbackQuery):
    """Callback –ø–æ—á–∞—Ç–∫—É –¥—É–µ–ª—ñ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    await callback.answer("‚öîÔ∏è –î—É–µ–ª—ñ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
    
    # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –ø–æ—á–∞—Ç–∫—É –¥—É–µ–ª—ñ –∑ –≤–∏–±—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_content_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_joke, Command("joke"))
    dp.message.register(cmd_meme, Command("meme"))
    dp.message.register(cmd_anekdot, Command("anekdot"))
    dp.message.register(cmd_content, Command("content"))
    dp.message.register(cmd_submit, Command("submit"))
    
    # FSM —Ö–µ–Ω–¥–ª–µ—Ä–∏
    dp.message.register(
        process_content_submission, 
        ContentSubmissionStates.waiting_for_content
    )
    
    # Callback —Ö–µ–Ω–¥–ª–µ—Ä–∏
    dp.callback_query.register(
        callback_content_type, 
        F.data.startswith("content_type:")
    )
    dp.callback_query.register(
        callback_like_content, 
        F.data.startswith("like_content:")
    )
    dp.callback_query.register(
        callback_dislike_content, 
        F.data.startswith("dislike_content:")
    )
    dp.callback_query.register(
        callback_love_content, 
        F.data.startswith("love_content:")
    )
    dp.callback_query.register(
        callback_more_content, 
        F.data.startswith("more_content:")
    )
    dp.callback_query.register(
        callback_share_content, 
        F.data.startswith("share_content:")
    )
    dp.callback_query.register(
        callback_submit_content, 
        F.data == "submit_content"
    )
    dp.callback_query.register(
        callback_submit_type, 
        F.data.startswith("submit_type:")
    )
    dp.callback_query.register(
        callback_confirm_submission, 
        F.data == "confirm_submission"
    )
    dp.callback_query.register(
        callback_cancel_submission, 
        F.data == "cancel_submission"
    )
    dp.callback_query.register(
        callback_content_stats, 
        F.data == "content_stats"
    )
    dp.callback_query.register(
        callback_duel_with_content, 
        F.data.startswith("duel_with_content:")
    )
    
    logger.info("‚úÖ Content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!")

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'register_content_handlers',
    'get_random_content',
    'create_content_keyboard',
    'CONTENT_TYPES',
    'EMOJI'
]

logger.info("üìù Content handlers –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")