#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó (–ø—Ä–æ—Ñ—ñ–ª—ñ, –±–∞–ª–∏, —Ä–∞–Ω–≥–∏) üß†üòÇüî•
"""

import logging
from datetime import datetime, timedelta

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

logger = logging.getLogger(__name__)

# Fallback —ñ–º–ø–æ—Ä—Ç–∏
try:
    from config.settings import Settings
    settings = Settings()
except ImportError:
    import os
    class FallbackSettings:
        POINTS_FOR_DAILY_ACTIVITY = int(os.getenv("POINTS_FOR_DAILY_ACTIVITY", "2"))
        DAILY_BROADCAST_HOUR = int(os.getenv("DAILY_BROADCAST_HOUR", "9"))
    settings = FallbackSettings()

# EMOJI –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
EMOJI = {
    "brain": "üß†", "laugh": "üòÇ", "fire": "üî•", "star": "‚≠ê", 
    "heart": "‚ù§Ô∏è", "trophy": "üèÜ", "crown": "üëë", "rocket": "üöÄ",
    "party": "üéâ", "profile": "üë§", "top": "üîù", "calendar": "üìÖ",
    "stats": "üìä", "check": "‚úÖ", "thinking": "ü§î", "vs": "‚öîÔ∏è"
}

# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥—ñ–≤
RANKS = {
    0: "ü§° –ù–æ–≤–∞—á–æ–∫",
    50: "üòÑ –°–º—ñ—Ö—É–Ω", 
    150: "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç",
    350: "üé≠ –ö–æ–º—ñ–∫",
    750: "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É",
    1500: "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É",
    3000: "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤",
    5000: "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
}

def get_rank_by_points(points: int) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –ø–æ –±–∞–ª–∞—Ö"""
    for min_points in sorted(RANKS.keys(), reverse=True):
        if points >= min_points:
            return RANKS[min_points]
    return RANKS[0]

def get_next_rank_info(points: int) -> dict:
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–Ω–≥"""
    current_rank = get_rank_by_points(points)
    
    for min_points in sorted(RANKS.keys()):
        if min_points > points:
            return {
                "next_rank": RANKS[min_points],
                "points_needed": min_points - points,
                "current_points": points
            }
    
    return {
        "next_rank": None,
        "points_needed": 0,
        "current_points": points
    }

# –ü—Ä–æ—Å—Ç–∏–π –∫–ª–∞—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (fallback)
class User:
    def __init__(self, user_id, first_name=None, username=None):
        self.id = user_id
        self.first_name = first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        self.username = username
        self.points = 0
        self.rank = get_rank_by_points(0)
        self.daily_subscription = False
        self.jokes_submitted = 0
        self.jokes_approved = 0
        self.memes_submitted = 0
        self.memes_approved = 0
        self.duels_won = 0
        self.duels_lost = 0
        self.last_active = datetime.now()

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ - –ë–î)
USERS_STORAGE = {}

async def get_or_create_user(user_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_or_create_user as db_get_user
        return await db_get_user(user_id, username, first_name, last_name)
    except ImportError:
        # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞–º'—è—Ç—å
        if user_id not in USERS_STORAGE:
            USERS_STORAGE[user_id] = User(user_id, first_name, username)
        return USERS_STORAGE[user_id]

async def get_user_stats(user_id: int):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_user_stats as db_get_stats
        return await db_get_stats(user_id)
    except ImportError:
        # Fallback
        user = await get_or_create_user(user_id)
        return {"user": user}

async def get_top_users(limit: int = 10):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        # –°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
        from database.database import get_db_session
        from database.models import User as DBUser
        
        with get_db_session() as session:
            return session.query(DBUser).order_by(DBUser.points.desc()).limit(limit).all()
    except ImportError:
        # Fallback - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–∞–º'—è—Ç—ñ
        sorted_users = sorted(USERS_STORAGE.values(), key=lambda u: u.points, reverse=True)
        return sorted_users[:limit]

async def toggle_daily_subscription_db(user_id: int):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É"""
    try:
        from database.database import get_db_session
        from database.models import User as DBUser
        
        with get_db_session() as session:
            user = session.query(DBUser).filter(DBUser.id == user_id).first()
            if user:
                user.daily_subscription = not user.daily_subscription
                session.commit()
                return user.daily_subscription
    except ImportError:
        # Fallback
        user = await get_or_create_user(user_id)
        user.daily_subscription = not user.daily_subscription
        return user.daily_subscription
    
    return False

# ===== –ö–û–ú–ê–ù–î–ò –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–á =====

async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await show_profile(message, message.from_user.id)

async def show_profile(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_stats = await get_user_stats(user_id)
    user_data = user_stats.get("user") if user_stats else None
    
    if not user_data:
        await message.answer("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return
    
    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–Ω–≥
    next_rank_info = get_next_rank_info(user_data.points)
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–æ–≥—Ä–µ—Å—É
    if next_rank_info["points_needed"] > 0:
        progress_text = (
            f"{EMOJI['rocket']} <b>–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É:</b>\n"
            f"üéØ {next_rank_info['next_rank']}\n"
            f"üî• –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {next_rank_info['points_needed']} –±–∞–ª—ñ–≤"
        )
    else:
        progress_text = f"{EMOJI['crown']} <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∞–Ω–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ!</b>"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    activity_stats = ""
    if hasattr(user_data, 'jokes_submitted'):
        approval_rate_jokes = round(user_data.jokes_approved / max(user_data.jokes_submitted, 1) * 100)
        approval_rate_memes = round(user_data.memes_approved / max(user_data.memes_submitted, 1) * 100)
        
        activity_stats = (
            f"\n{EMOJI['stats']} <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b>\n"
            f"üìù –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤: {user_data.jokes_submitted} (—Å—Ö–≤–∞–ª–µ–Ω–æ {approval_rate_jokes}%)\n"
            f"üñº –ú–µ–º—ñ–≤: {user_data.memes_submitted} (—Å—Ö–≤–∞–ª–µ–Ω–æ {approval_rate_memes}%)\n"
            f"‚öîÔ∏è –î—É–µ–ª–µ–π: {user_data.duels_won}W/{user_data.duels_lost}L"
        )
    
    profile_text = (
        f"{EMOJI['profile']} <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
        f"üë§ <b>–Ü–º'—è:</b> {user_data.first_name}\n"
        f"{EMOJI['fire']} <b>–ë–∞–ª—ñ–≤:</b> {user_data.points}\n"
        f"{EMOJI['crown']} <b>–†–∞–Ω–≥:</b> {user_data.rank}\n\n"
        f"{progress_text}"
        f"{activity_stats}\n\n"
        f"{EMOJI['calendar']} –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞' if user_data.daily_subscription else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∞'}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—é
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['top']} –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data="show_leaderboard"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ],
        [
            InlineKeyboardButton(
                text=f"{'‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å' if user_data.daily_subscription else '‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å'} –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É",
                callback_data="toggle_daily"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ]
    ])
    
    await message.answer(profile_text, reply_markup=keyboard)

async def cmd_top(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /top - —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤"""
    await show_leaderboard(message)

async def show_leaderboard(message: Message):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    top_users = await get_top_users(10)
    
    if not top_users:
        await message.answer("üòî –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É!")
        return
    
    leaderboard_text = f"{EMOJI['trophy']} <b>–¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í –¢–û–ü-10</b>\n\n"
    
    medals = ["ü•á", "ü•à", "ü•â"] + ["üèÖ"] * 7
    
    for i, user in enumerate(top_users):
        medal = medals[i] if i < len(medals) else "üèÖ"
        
        # –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–æ—Å—Ç—ñ 
        name = user.first_name or "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        if len(name) > 10:
            name = name[:8] + "..."
        
        leaderboard_text += (
            f"{medal} <b>{i+1}.</b> {name}\n"
            f"   {EMOJI['fire']} {user.points} –±–∞–ª—ñ–≤ | {user.rank}\n"
        )
        
        if i < 2:  # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Ç–æ–ø-3
            if hasattr(user, 'duels_won'):
                leaderboard_text += f"   ‚öîÔ∏è –î—É–µ–ª–µ–π –≤–∏–≥—Ä–∞–Ω–æ: {user.duels_won}\n"
        
        leaderboard_text += "\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_stats = await get_user_stats(message.from_user.id)
    user_data = user_stats.get("user") if user_stats else None
    
    if user_data and user_data.points > 0:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_position = next((i+1 for i, u in enumerate(top_users) if u.id == user_data.id), "10+")
        
        leaderboard_text += (
            f"{EMOJI['star']} <b>–¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è:</b>\n"
            f"üèÖ #{user_position} | {user_data.points} –±–∞–ª—ñ–≤ | {user_data.rank}"
        )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥—ñ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏", callback_data="earn_points_info"),
            InlineKeyboardButton(text=f"üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="show_leaderboard")
        ]
    ])
    
    await message.answer(leaderboard_text, reply_markup=keyboard)

async def cmd_daily(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /daily - —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—é —Ä–æ–∑—Å–∏–ª–∫–æ—é"""
    await toggle_daily_subscription(message, message.from_user.id)

async def toggle_daily_subscription(message: Message, user_id: int):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É"""
    new_status = await toggle_daily_subscription_db(user_id)
    
    if new_status:
        response_text = (
            f"{EMOJI['check']} <b>–ü—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!</b>\n\n"
            f"{EMOJI['calendar']} –¢–µ–ø–µ—Ä —Ç–∏ –±—É–¥–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏:\n"
            f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–∏–π –º–µ–º –æ {settings.DAILY_BROADCAST_HOUR}:00\n"
            f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è\n"
            f"‚Ä¢ +{settings.POINTS_FOR_DAILY_ACTIVITY} –±–∞–ª—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n\n"
            f"{EMOJI['star']} –î–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /daily –∑–Ω–æ–≤—É"
        )
    else:
        response_text = (
            f"{EMOJI['calendar']} <b>–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ</b>\n\n"
            f"üòî –¢–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—à –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É\n\n"
            f"{EMOJI['thinking']} –î–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π /daily –∑–Ω–æ–≤—É"
        )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
        ]
    ])
    
    await message.answer(response_text, reply_markup=keyboard)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_show_profile(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    await show_profile(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_show_leaderboard(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    await show_leaderboard(callback_query.message)
    await callback_query.answer()

async def callback_toggle_daily(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    await toggle_daily_subscription(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_earn_points_info(callback_query: CallbackQuery):
    """Callback –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –±–∞–ª—ñ–≤"""
    info_text = (
        f"{EMOJI['fire']} <b>–Ø–ö –ó–ê–†–û–ë–ò–¢–ò –ë–ê–õ–ò:</b>\n\n"
        f"{EMOJI['brain']} <b>+1 –±–∞–ª</b> - –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É/–∞–Ω–µ–∫–¥–æ—Ç—É\n"
        f"{EMOJI['heart']} <b>+5 –±–∞–ª—ñ–≤</b> - –∑–∞ –ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        f"{EMOJI['fire']} <b>+10 –±–∞–ª—ñ–≤</b> - –∑–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['check']} <b>+20 –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ\n"
        f"{EMOJI['trophy']} <b>+50 –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —É –¢–û–ü—ñ\n"
        f"{EMOJI['vs']} <b>+15 –±–∞–ª—ñ–≤</b> - –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ\n"
        f"{EMOJI['calendar']} <b>+2 –±–∞–ª–∏</b> - –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n\n"
        f"{EMOJI['rocket']} <b>–†–∞–Ω–≥–∏:</b>\n"
        f"ü§° –ù–æ–≤–∞—á–æ–∫ (0+) ‚Üí üòÑ –°–º—ñ—Ö—É–Ω (50+) ‚Üí üòÇ –ì—É–º–æ—Ä–∏—Å—Ç (150+)\n"
        f"üé≠ –ö–æ–º—ñ–∫ (350+) ‚Üí üëë –ú–∞—Å—Ç–µ—Ä (750+) ‚Üí üèÜ –ö–æ—Ä–æ–ª—å (1500+)\n"
        f"üåü –õ–µ–≥–µ–Ω–¥–∞ (3000+) ‚Üí üöÄ –ì–µ–Ω—ñ–π (5000+)\n\n"
        f"{EMOJI['party']} <b>–ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —ñ —Å—Ç–∞–≤–∞–π –ª–µ–≥–µ–Ω–¥–æ—é –≥—É–º–æ—Ä—É!</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
        ]
    ])
    
    await callback_query.message.answer(info_text, reply_markup=keyboard)
    await callback_query.answer()

async def callback_start_duel(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥—É–µ–ª—ñ"""
    await callback_query.message.answer(
        f"{EMOJI['vs']} <b>–î—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤!</b>\n\n"
        f"{EMOJI['fire']} –©–æ–± –ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É:\n"
        f"<code>/duel</code>\n\n"
        f"{EMOJI['brain']} –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        f"1. –¢–∏ –Ω–∞–¥—Å–∏–ª–∞—î—à —Å–≤—ñ–π –∂–∞—Ä—Ç\n"
        f"2. –ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø–æ–Ω–µ–Ω—Ç–∞\n" 
        f"3. –Ü–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≥–æ–ª–æ—Å—É—é—Ç—å\n"
        f"4. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +15 –±–∞–ª—ñ–≤!\n\n"
        f"{EMOJI['thinking']} <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –±–∞—Ç–ª—É?</b>"
    )
    await callback_query.answer()

def register_gamification_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_top, Command("top"))
    dp.message.register(cmd_daily, Command("daily"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_show_profile, F.data == "show_profile")
    dp.callback_query.register(callback_show_leaderboard, F.data == "show_leaderboard")
    dp.callback_query.register(callback_toggle_daily, F.data == "toggle_daily")
    dp.callback_query.register(callback_earn_points_info, F.data == "earn_points_info")
    dp.callback_query.register(callback_start_duel, F.data == "start_duel")
    
    logger.info("‚úÖ Gamification handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")