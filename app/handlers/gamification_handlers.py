#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéÆ –í–ò–ü–†–ê–í–õ–ï–ù–Ü –•–ï–ù–î–õ–ï–†–ò –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–á –ë–ï–ó –ö–†–ê–®–Ü–í üéÆ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ë–î
‚úÖ Fallback —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –ë–î
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚úÖ –ù—ñ–∫–æ–ª–∏ –Ω–µ –∫—Ä–∞—à–∏—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ–π –ë–î
"""

import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

logger = logging.getLogger(__name__)

# ===== –†–ê–ù–ì–ò –¢–ê –ö–û–ù–°–¢–ê–ù–¢–ò =====
RANKS = {
    0: "ü•ö –ù–æ–≤–∞—á–æ–∫",
    50: "üê£ –ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å", 
    150: "üê§ –í–µ—Å–µ–ª—å—á–∞–∫",
    300: "üêì –ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫",
    500: "ü¶Ö –ú–∞–π—Å—Ç–µ—Ä –ì—É–º–æ—Ä—É",
    1000: "ü¶∏ –õ–µ–≥–µ–Ω–¥–∞ –ñ–∞—Ä—Ç—ñ–≤"
}

EMOJI = {
    'profile': 'üë§',
    'fire': 'üî•',
    'crown': 'üëë',
    'top': 'üèÜ',
    'vs': '‚öîÔ∏è',
    'brain': 'üß†',
    'laugh': 'üòÇ',
    'rocket': 'üöÄ',
    'stats': 'üìä',
    'calendar': 'üìÖ',
    'warning': '‚ö†Ô∏è',
    'thinking': 'ü§î'
}

# ===== FALLBACK –°–•–û–í–ò–©–ï –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====
USERS_STORAGE: Dict[int, Dict[str, Any]] = {}

# ===== –ü–ï–†–ï–í–Ü–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–Ü –ë–î =====
def is_database_available() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö"""
    try:
        from database.database import is_database_available
        return is_database_available()
    except ImportError:
        return False
    except Exception:
        return False

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====
async def get_or_create_user(user_id: int, username: str = None, 
                           first_name: str = None, last_name: str = None) -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–µ–∑–ø–µ—á–Ω–æ—é fallback –ª–æ–≥—ñ–∫–æ—é"""
    
    # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ë–î
    if is_database_available():
        try:
            from database.database import get_or_create_user as db_get_user
            db_user = await db_get_user(user_id, username, first_name, last_name)
            if db_user:
                return {
                    'id': db_user.id,
                    'username': db_user.username,
                    'first_name': db_user.first_name,
                    'last_name': db_user.last_name,
                    'points': db_user.points,
                    'rank': db_user.rank,
                    'total_content_submitted': getattr(db_user, 'total_content_submitted', 0),
                    'total_content_approved': getattr(db_user, 'total_content_approved', 0),
                    'total_duels_won': getattr(db_user, 'total_duels_won', 0),
                    'total_duels_participated': getattr(db_user, 'total_duels_participated', 0),
                    'daily_subscription': getattr(db_user, 'daily_subscription', False),
                    'is_admin': getattr(db_user, 'is_admin', False),
                    'created_at': getattr(db_user, 'created_at', datetime.utcnow()),
                    'source': 'database'
                }
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è get_or_create_user: {e}")
    
    # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
    if user_id not in USERS_STORAGE:
        USERS_STORAGE[user_id] = {
            'id': user_id,
            'username': username,
            'first_name': first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
            'last_name': last_name,
            'points': 0,
            'rank': get_rank_by_points(0),
            'total_content_submitted': 0,
            'total_content_approved': 0,
            'total_duels_won': 0,
            'total_duels_participated': 0,
            'daily_subscription': False,
            'is_admin': is_admin(user_id),
            'created_at': datetime.utcnow(),
            'source': 'memory'
        }
        logger.info(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–æ fallback –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")
    else:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
        user = USERS_STORAGE[user_id]
        if username and user['username'] != username:
            user['username'] = username
        if first_name and user['first_name'] != first_name:
            user['first_name'] = first_name
        if last_name and user['last_name'] != last_name:
            user['last_name'] = last_name
    
    return USERS_STORAGE[user_id]

async def get_top_users(limit: int = 10) -> List[Dict[str, Any]]:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ë–ï–ó –ö–†–ê–®–Ü–í"""
    
    # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ë–î
    if is_database_available():
        try:
            from database.database import get_top_users as db_get_top
            db_users = await db_get_top(limit)
            if db_users:
                logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î: {len(db_users)}")
                result = []
                for user in db_users:
                    result.append({
                        'id': user.id,
                        'first_name': user.first_name,
                        'username': user.username,
                        'points': user.points,
                        'rank': user.rank,
                        'source': 'database'
                    })
                return result
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è get_top_users: {e}")
    
    # Fallback - —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–∞–º'—è—Ç—ñ
    if USERS_STORAGE:
        sorted_users = sorted(USERS_STORAGE.values(), key=lambda u: u['points'], reverse=True)
        result = sorted_users[:limit]
        logger.info(f"üìä –û—Ç—Ä–∏–º–∞–Ω–æ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–∞–º'—è—Ç—ñ: {len(result)}")
        return result
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤–∑–∞–≥–∞–ª—ñ
    logger.info("üìä –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
    return []

async def update_user_points(user_id: int, points: int, reason: str = "") -> bool:
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–µ–∑–ø–µ—á–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é"""
    
    # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ë–î
    if is_database_available():
        try:
            from database.database import update_user_points as db_update_points
            success = await db_update_points(user_id, points)
            if success:
                logger.info(f"üìà –ë–î: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤ –∑–∞ {reason}")
                return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è update_user_points: {e}")
    
    # Fallback - –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –ø–∞–º'—è—Ç—ñ
    user = await get_or_create_user(user_id)
    old_points = user['points']
    user['points'] += points
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
    old_rank = user['rank']
    new_rank = get_rank_by_points(user['points'])
    user['rank'] = new_rank
    
    logger.info(f"üìà –ü–∞–º'—è—Ç—å: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤ –∑–∞ {reason} (–±—É–ª–æ {old_points}, —Å—Ç–∞–ª–æ {user['points']})")
    
    if old_rank != new_rank:
        logger.info(f"üéñÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø—ñ–¥–≤–∏—â–∏–≤ —Ä–∞–Ω–≥: {old_rank} ‚Üí {new_rank}")
    
    return True

def get_rank_by_points(points: int) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –∑–∞ –±–∞–ª–∞–º–∏"""
    for min_points in sorted(RANKS.keys(), reverse=True):
        if points >= min_points:
            return RANKS[min_points]
    return RANKS[0]

def get_next_rank_info(current_points: int) -> Dict[str, Any]:
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä–∞–Ω–≥"""
    current_rank = get_rank_by_points(current_points)
    
    for min_points in sorted(RANKS.keys()):
        if min_points > current_points:
            return {
                "next_rank": RANKS[min_points],
                "points_needed": min_points - current_points,
                "current_points": current_points
            }
    
    return {
        "next_rank": None,
        "points_needed": 0,
        "current_points": current_points
    }

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from config.settings import ALL_ADMIN_IDS
        return user_id in ALL_ADMIN_IDS
    except ImportError:
        admin_id = int(os.getenv("ADMIN_ID", 603047391))
        return user_id == admin_id

# ===== –ö–û–ú–ê–ù–î–ò –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–á =====

async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile - –ø–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = message.from_user.id
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_or_create_user(
            user_id, 
            message.from_user.username,
            message.from_user.first_name,
            message.from_user.last_name
        )
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ—ñ–ª—é
        next_rank_info = get_next_rank_info(user['points'])
        
        if next_rank_info["points_needed"] > 0:
            progress_text = (
                f"{EMOJI['rocket']} <b>–î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É:</b>\n"
                f"üéØ {next_rank_info['next_rank']}\n"
                f"üî• –ü–æ—Ç—Ä—ñ–±–Ω–æ —â–µ: {next_rank_info['points_needed']} –±–∞–ª—ñ–≤"
            )
        else:
            progress_text = f"{EMOJI['crown']} <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∞–Ω–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ!</b>"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        stats_text = (
            f"\n{EMOJI['stats']} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–∞–Ω–æ: {user['total_content_submitted']}\n"
            f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ: {user['total_content_approved']}\n"
            f"‚öîÔ∏è –î—É–µ–ª–µ–π –≤–∏–≥—Ä–∞–Ω–æ: {user['total_duels_won']}\n"
            f"üéÆ –î—É–µ–ª–µ–π –∑—ñ–≥—Ä–∞–Ω–æ: {user['total_duels_participated']}"
        )
        
        data_source = "üíæ –ë–î" if user.get('source') == 'database' else "üíª –ü–∞–º'—è—Ç—å"
        
        profile_text = (
            f"{EMOJI['profile']} <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
            f"üë§ <b>–Ü–º'—è:</b> {user['first_name']}\n"
            f"üÜî <b>ID:</b> {user['id']}\n"
            f"{EMOJI['fire']} <b>–ë–∞–ª—ñ–≤:</b> {user['points']}\n"
            f"{EMOJI['crown']} <b>–†–∞–Ω–≥:</b> {user['rank']}\n\n"
            f"{progress_text}"
            f"{stats_text}\n\n"
            f"{EMOJI['calendar']} –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞' if user['daily_subscription'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∞'}\n"
            f"üìä –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö: {data_source}"
        )
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ—ñ–ª—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['top']} –†–µ–π—Ç–∏–Ω–≥", callback_data="show_leaderboard"),
                InlineKeyboardButton(text=f"{EMOJI['vs']} –î—É–µ–ª—å", callback_data="start_duel")
            ],
            [
                InlineKeyboardButton(
                    text=f"{'‚ùå –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å' if user['daily_subscription'] else '‚úÖ –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å'} –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É",
                    callback_data="toggle_daily"
                )
            ],
            [
                InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
                InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
            ]
        ])
        
        await message.answer(profile_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ cmd_profile: {e}")
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é.\n\n"
            f"üîß –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            f"üí° –î–µ—è–∫—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ë–î."
        )

async def cmd_top(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /top - —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –ë–ï–ó –ö–†–ê–®–Ü–í"""
    try:
        await show_leaderboard(message)
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ cmd_top: {e}")
        await message.answer(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É.\n\n"
            f"üîß –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n"
            f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º\n\n"
            f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É."
        )

async def show_leaderboard(message: Message):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤ –ë–ï–ó –ö–†–ê–®–Ü–í"""
    try:
        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        top_users = await get_top_users(10)
        
        if not top_users:
            await message.answer(
                f"{EMOJI['warning']} <b>–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–∂–Ω—ñ–π</b>\n\n"
                f"üòî –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É.\n"
                f"üöÄ –ë—É–¥—å—Ç–µ –ø–µ—Ä—à–∏–º! –ó–±–∏—Ä–∞–π—Ç–µ –±–∞–ª–∏:\n\n"
                f"‚Ä¢ üìù –ü–æ–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç (/submit)\n"
                f"‚Ä¢ ‚öîÔ∏è –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å –≤ –¥—É–µ–ª—è—Ö (/duel)\n"
                f"‚Ä¢ üëç –°—Ç–∞–≤—Ç–µ –ª–∞–π–∫–∏ —ñ–Ω—à–∏–º\n"
                f"‚Ä¢ üéØ –ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏–º–∏!\n\n"
                f"üí° <i>–°–∏—Å—Ç–µ–º–∞ –∑–±–µ—Ä–µ–∂–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–ª–∏ –ë–î –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞</i>",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ä–µ–π—Ç–∏–Ω–≥—É
        leaderboard_text = f"{EMOJI['top']} <b>–†–ï–ô–¢–ò–ù–ì –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í</b>\n\n"
        
        medals = ["ü•á", "ü•à", "ü•â"]
        for i, user in enumerate(top_users):
            position = i + 1
            medal = medals[i] if i < 3 else f"{position}."
            
            username_display = f"@{user['username']}" if user.get('username') else user['first_name']
            
            leaderboard_text += (
                f"{medal} <b>{username_display}</b>\n"
                f"   üî• {user['points']} –±–∞–ª—ñ–≤ | {user['rank']}\n\n"
            )
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö
        data_source = "–ë–î" if top_users[0].get('source') == 'database' else "–ø–∞–º'—è—Ç—å"
        leaderboard_text += f"üìä <i>–î–∞–Ω—ñ –∑: {data_source}</i>\n"
        leaderboard_text += f"üïê –û–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_leaderboard"),
                InlineKeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
            ],
            [
                InlineKeyboardButton(text="üéØ –Ø–∫ –∑–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏?", callback_data="earn_points_info")
            ]
        ])
        
        await message.answer(leaderboard_text, reply_markup=keyboard, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ show_leaderboard: {e}")
        await message.answer(
            f"‚ùå <b>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É</b>\n\n"
            f"üîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ:\n"
            f"‚Ä¢ –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}\n"
            f"‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}\n\n"
            f"üí° –°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö.",
            parse_mode="HTML"
        )

async def cmd_daily(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /daily - —â–æ–¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"""
    user_id = message.from_user.id
    
    try:
        user = await get_or_create_user(user_id, message.from_user.username, message.from_user.first_name)
        
        # –õ–æ–≥—ñ–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
        daily_points = 5
        await update_user_points(user_id, daily_points, "—â–æ–¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
        
        await message.answer(
            f"üéÅ <b>–©–æ–¥–µ–Ω–Ω–∞ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∞!</b>\n\n"
            f"üî• –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {daily_points} –±–∞–ª—ñ–≤ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!\n"
            f"üìä –í–∞—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {user['points'] + daily_points} –±–∞–ª—ñ–≤\n\n"
            f"üí° –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤–æ—é –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–æ—é!",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ cmd_daily: {e}")
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# ===== CALLBACK –•–ï–ù–î–õ–ï–†–ò =====

async def callback_show_profile(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å —á–µ—Ä–µ–∑ callback"""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ "—Ñ–µ–π–∫–æ–≤–µ" –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ—ó –ª–æ–≥—ñ–∫–∏
        fake_message = callback_query.message
        fake_message.from_user = callback_query.from_user
        
        await cmd_profile(fake_message)
        await callback_query.answer("‚úÖ –ü—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback_show_profile: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é", show_alert=True)

async def callback_show_leaderboard(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ callback"""
    try:
        await show_leaderboard(callback_query.message)
        await callback_query.answer("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback_show_leaderboard: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–π—Ç–∏–Ω–≥—É", show_alert=True)

async def callback_refresh_leaderboard(callback_query: CallbackQuery):
    """–û–Ω–æ–≤–∏—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥"""
    try:
        await show_leaderboard(callback_query.message)
        await callback_query.answer("üîÑ –†–µ–π—Ç–∏–Ω–≥ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback_refresh_leaderboard: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", show_alert=True)

async def callback_toggle_daily(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id
    
    try:
        user = await get_or_create_user(user_id)
        user['daily_subscription'] = not user['daily_subscription']
        
        status = "‚úÖ —É–≤—ñ–º–∫–Ω–µ–Ω–∞" if user['daily_subscription'] else "‚ùå –≤–∏–º–∫–Ω–µ–Ω–∞"
        await callback_query.answer(f"–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ {status}!")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        fake_message = callback_query.message
        fake_message.from_user = callback_query.from_user
        await cmd_profile(fake_message)
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ callback_toggle_daily: {e}")
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", show_alert=True)

async def callback_earn_points_info(callback_query: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞—Ä–æ–±–ª—è–Ω–Ω—è –±–∞–ª—ñ–≤"""
    info_text = (
        f"üéØ <b>–Ø–ö –ó–ê–†–û–ë–ò–¢–ò –ë–ê–õ–ò?</b>\n\n"
        f"üìù <b>–°—Ç–≤–æ—Ä—é–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
        f"‚Ä¢ –ü–æ–¥–∞–π—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç: +5 –±–∞–ª—ñ–≤\n"
        f"‚Ä¢ –°—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: +15 –±–∞–ª—ñ–≤\n\n"
        f"‚öîÔ∏è <b>–ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å –≤ –¥—É–µ–ª—è—Ö:</b>\n"
        f"‚Ä¢ –£—á–∞—Å—Ç—å: +3 –±–∞–ª–∏\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–æ–≥–∞: +15 –±–∞–ª—ñ–≤\n\n"
        f"üëç <b>–ë—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏–º–∏:</b>\n"
        f"‚Ä¢ –õ–∞–π–∫ —ñ–Ω—à–æ–º—É: +1 –±–∞–ª\n"
        f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: +5 –±–∞–ª—ñ–≤\n\n"
        f"üèÜ <b>–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è:</b>\n"
        f"‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–Ω–∞–≥–æ—Ä–æ–¥–∏ –∑–∞ –≤—ñ—Ö–∏\n\n"
        f"üí° <i>–ß–∏–º –∞–∫—Ç–∏–≤–Ω—ñ—à–µ, —Ç–∏–º –±—ñ–ª—å—à–µ –±–∞–ª—ñ–≤!</i>"
    )
    
    await callback_query.message.answer(info_text, parse_mode="HTML")
    await callback_query.answer()

async def callback_start_duel(callback_query: CallbackQuery):
    """–ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å"""
    await callback_query.answer("‚öîÔ∏è –§—É–Ω–∫—Ü—ñ—è –¥—É–µ–ª–µ–π –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ!", show_alert=True)

async def callback_get_content(callback_query: CallbackQuery):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç (–∞–Ω–µ–∫–¥–æ—Ç/–º–µ–º)"""
    content_type = "–∞–Ω–µ–∫–¥–æ—Ç" if callback_query.data == "get_joke" else "–º–µ–º"
    await callback_query.answer(f"üòÇ {content_type.capitalize()} –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
    await callback_query.message.answer(f"üòÇ –û—Å—å –≤–∞—à {content_type}! (—Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

# ===== –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –•–ï–ù–î–õ–ï–†–Ü–í =====

def register_gamification_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_top, Command("top"))
    dp.message.register(cmd_daily, Command("daily"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_show_profile, F.data == "show_profile")
    dp.callback_query.register(callback_show_leaderboard, F.data == "show_leaderboard")
    dp.callback_query.register(callback_refresh_leaderboard, F.data == "refresh_leaderboard")
    dp.callback_query.register(callback_toggle_daily, F.data == "toggle_daily")
    dp.callback_query.register(callback_earn_points_info, F.data == "earn_points_info")
    dp.callback_query.register(callback_start_duel, F.data == "start_duel")
    dp.callback_query.register(callback_get_content, F.data.in_(["get_joke", "get_meme"]))
    
    logger.info("‚úÖ Gamification handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –ë–ï–ó –†–ò–ó–ò–ö–£ –ö–†–ê–®–Ü–í")

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'register_gamification_handlers',
    'get_or_create_user', 
    'update_user_points',
    'get_top_users',
    'get_rank_by_points'
]

logger.info("üéÆ Gamification handlers –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –±–µ–∑–ø–µ—á–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é")