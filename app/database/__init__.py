#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ Database –º–æ–¥—É–ª—å - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –ï–ö–°–ü–û–†–¢

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ Graceful fallback –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö —ñ–º–ø–æ—Ä—Ç—É
‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É
‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
"""

import logging

logger = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
FUNCTIONS_LOADED = False
MODELS_LOADED = False

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô =====
try:
    from .models import (
        # –ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å
        Base,
        
        # –û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥–µ–ª—ñ
        User,
        Content,
        Rating,
        Duel,
        DuelVote,
        AdminAction,
        BotStatistics,
        
        # –ï–Ω—É–º–∏
        ContentType,
        ContentStatus,
        DuelStatus
    )
    
    MODELS_LOADED = True
    logger.info("‚úÖ Database models –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
except ImportError as e:
    MODELS_LOADED = False
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É models: {e}")

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –§–£–ù–ö–¶–Ü–ô =====
try:
    from .database import (
        # –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ë–î
        init_db,
        get_db_session,
        
        # –§—É–Ω–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        get_or_create_user,
        get_user_by_id,
        update_user_points,
        get_rank_by_points,
        
        # –§—É–Ω–∫—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
        add_content_for_moderation,
        get_pending_content,
        moderate_content,
        get_random_approved_content,
        
        # –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
        ensure_admin_exists,
        add_initial_data
    )
    
    FUNCTIONS_LOADED = True
    logger.info("‚úÖ Database functions –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
except ImportError as e:
    FUNCTIONS_LOADED = False
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É database functions: {e}")

# ===== –î–û–î–ê–¢–ö–û–í–Ü –§–£–ù–ö–¶–Ü–á (–û–ü–¶–Ü–û–ù–ê–õ–¨–ù–û) =====
ADVANCED_FUNCTIONS_LOADED = False
try:
    from .database import (
        check_if_migration_needed,
        migrate_database,
        verify_database_integrity
    )
    ADVANCED_FUNCTIONS_LOADED = True
    logger.info("‚úÖ Advanced database functions –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")
except ImportError:
    logger.warning("‚ö†Ô∏è Advanced database functions –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")

# ===== –°–¢–í–û–†–ï–ù–ù–Ø FALLBACK –§–£–ù–ö–¶–Ü–ô =====
if not FUNCTIONS_LOADED:
    logger.warning("‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback database functions")
    
    async def init_db():
        """Fallback —Ñ—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î"""
        logger.warning("‚ö†Ô∏è Using fallback init_db - database not fully available")
        return False
    
    def get_db_session():
        """Fallback session manager"""
        logger.warning("‚ö†Ô∏è Database session not available")
        from contextlib import contextmanager
        
        @contextmanager
        def dummy_session():
            yield None
        
        return dummy_session()
    
    async def get_or_create_user(telegram_id, username=None, first_name=None):
        """Fallback —Ñ—É–Ω–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        logger.warning(f"‚ö†Ô∏è User {telegram_id} not saved - database not available")
        return None
    
    async def get_user_by_id(telegram_id):
        """Fallback –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return None
    
    async def update_user_points(telegram_id, points_delta):
        """Fallback –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤"""
        logger.warning(f"‚ö†Ô∏è Points update for {telegram_id} skipped - database not available")
        return False
    
    async def get_rank_by_points(points):
        """Fallback —Ä–∞–Ω–≥ –∑–∞ –±–∞–ª–∞–º–∏"""
        if points >= 5000:
            return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
        elif points >= 3000:
            return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
        elif points >= 1500:
            return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
        elif points >= 750:
            return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
        elif points >= 350:
            return "üé≠ –ö–æ–º—ñ–∫"
        elif points >= 150:
            return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
        elif points >= 50:
            return "üòÑ –°–º—ñ—Ö—É–Ω"
        else:
            return "ü§° –ù–æ–≤–∞—á–æ–∫"
    
    async def add_content_for_moderation(author_id, content_type, text):
        """Fallback –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        logger.warning(f"‚ö†Ô∏è Content from {author_id} not saved - database not available")
        return None
    
    async def get_pending_content():
        """Fallback –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        return []
    
    async def moderate_content(content_id, approved, moderator_id, reason=None):
        """Fallback –º–æ–¥–µ—Ä–∞—Ü—ñ—è"""
        logger.warning(f"‚ö†Ô∏è Content {content_id} moderation skipped - database not available")
        return False
    
    async def get_random_approved_content(content_type):
        """Fallback –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–µ–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
        if hasattr(content_type, 'name'):
            content_type_name = content_type.name
        else:
            content_type_name = str(content_type)
        
        demo_content = {
            'JOKE': [
                "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\n- –ê –¥–µ —Å–∞–º–µ?\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
                "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\n- –ê —â–æ —Ä–æ–±–∏—à?\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ"
            ],
            'MEME': [
                "üòÇ –ö–æ–ª–∏ –±–∞—á–∏—à —â–æ –Ω–∞ —Ä–æ–±–æ—Ç—ñ Wi-Fi —à–≤–∏–¥—à–∏–π –∑–∞ –¥–æ–º–∞—à–Ω—ñ–π:\n*–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–¥–∏–≤–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ç–∞*",
                "ü§£ –ú—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π –∫–æ–ª–∏ –ø'—è—Ç–Ω–∏—Ü—è:\n*–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–Ω—Ü—é—é—á–æ—ó –ª—é–¥–∏–Ω–∏*"
            ],
            'ANEKDOT': [
                "üòÇ –£—á–∏—Ç–µ–ª—å –∑–∞–ø–∏—Ç—É—î:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†",
                "üî• –ü–æ–∫—É–ø–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ —ñ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ"
            ]
        }
        
        import random
        content_list = demo_content.get(content_type_name.upper(), demo_content['JOKE'])
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –æ–±'—î–∫—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
        import types
        demo_obj = types.SimpleNamespace()
        demo_obj.text = random.choice(content_list)
        demo_obj.id = 0
        demo_obj.author_id = 1
        
        return demo_obj
    
    async def ensure_admin_exists():
        """Fallback —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞"""
        logger.warning("‚ö†Ô∏è Admin creation skipped - database not available")
        return
    
    async def add_initial_data():
        """Fallback –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ"""
        logger.warning("‚ö†Ô∏è Initial data skipped - database not available")
        return

# ===== FALLBACK –î–õÔøΩ–Ø ADVANCED –§–£–ù–ö–¶–Ü–ô =====
if not ADVANCED_FUNCTIONS_LOADED:
    async def check_if_migration_needed():
        """Fallback –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
        return False
    
    async def migrate_database():
        """Fallback –º—ñ–≥—Ä–∞—Ü—ñ—è"""
        logger.warning("‚ö†Ô∏è Database migration skipped - not available")
        return
    
    async def verify_database_integrity():
        """Fallback –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ"""
        return True

# ===== –°–¢–í–û–†–ï–ù–ù–Ø FALLBACK –ú–û–î–ï–õ–ï–ô =====
if not MODELS_LOADED:
    logger.warning("‚ö†Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è fallback models")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è enum'—ñ–≤
    import enum
    
    class ContentType(enum.Enum):
        JOKE = "joke"
        MEME = "meme"
        ANEKDOT = "anekdot"
    
    class ContentStatus(enum.Enum):
        PENDING = "pending"
        APPROVED = "approved"
        REJECTED = "rejected"
    
    class DuelStatus(enum.Enum):
        ACTIVE = "active"
        FINISHED = "finished"
        CANCELLED = "cancelled"

# ===== –ï–ö–°–ü–û–†–¢ –í–°–Ü–• –§–£–ù–ö–¶–Ü–ô –¢–ê –ö–õ–ê–°–Ü–í =====
__all__ = [
    # === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===
    'init_db',
    'get_db_session',
    'check_if_migration_needed',
    'migrate_database',
    'verify_database_integrity',
    
    # === –ö–û–†–ò–°–¢–£–í–ê–ß–Ü ===
    'get_or_create_user',
    'get_user_by_id',
    'update_user_points',
    'get_rank_by_points',
    
    # === –ö–û–ù–¢–ï–ù–¢ ===
    'add_content_for_moderation',
    'get_pending_content',
    'moderate_content',
    'get_random_approved_content',
    
    # === –î–û–ü–û–ú–Ü–ñ–ù–Ü ===
    'ensure_admin_exists',
    'add_initial_data',
    
    # === –ï–ù–£–ú–ò ===
    'ContentType',
    'ContentStatus',
    'DuelStatus',
    
    # === –§–õ–ê–ì–ò –°–¢–ê–¢–£–°–£ ===
    'FUNCTIONS_LOADED',
    'MODELS_LOADED',
    'ADVANCED_FUNCTIONS_LOADED'
]

# ===== –ï–ö–°–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô (–Ø–ö–©–û –î–û–°–¢–£–ü–ù–Ü) =====
if MODELS_LOADED:
    __all__.extend([
        'Base', 'User', 'Content', 'Rating', 
        'Duel', 'DuelVote', 'AdminAction', 'BotStatistics'
    ])

# ===== –í–ï–†–°–Ü–Ø –ú–û–î–£–õ–Ø =====
__version__ = "2.1.0"
__status__ = f"Functions: {'‚úÖ' if FUNCTIONS_LOADED else '‚ùå'}, Models: {'‚úÖ' if MODELS_LOADED else '‚ùå'}, Advanced: {'‚úÖ' if ADVANCED_FUNCTIONS_LOADED else '‚ùå'}"

logger.info(f"üì¶ Database –º–æ–¥—É–ª—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (v{__version__})")
logger.info(f"üìã –°—Ç–∞—Ç—É—Å: {__status__}")
logger.info(f"üéØ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ {len(__all__)} –æ–±'—î–∫—Ç—ñ–≤")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
if FUNCTIONS_LOADED:
    logger.info("‚úÖ Database functions: –ø–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª")
else:
    logger.warning("‚ö†Ô∏è Database functions: fallback —Ä–µ–∂–∏–º")

if MODELS_LOADED:
    logger.info("‚úÖ Database models: –ø–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª")
else:
    logger.warning("‚ö†Ô∏è Database models: fallback enum'–∏")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –¥–æ —Ä–æ–±–æ—Ç–∏
if FUNCTIONS_LOADED and MODELS_LOADED:
    logger.info("üéâ Database module: –ø–æ–≤–Ω—ñ—Å—Ç—é –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
elif FUNCTIONS_LOADED or MODELS_LOADED:
    logger.warning("‚ö†Ô∏è Database module: —á–∞—Å—Ç–∫–æ–≤–æ –≥–æ—Ç–æ–≤–∏–π (fallback —Ä–µ–∂–∏–º)")
else:
    logger.warning("‚ö†Ô∏è Database module: fallback —Ä–µ–∂–∏–º (–±–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")