#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ DATABASE –ú–û–î–£–õ–¨ - –ë–ï–ó –ö–û–ù–§–õ–Ü–ö–¢–Ü–í üì¶
"""

import logging

logger = logging.getLogger(__name__)

# –§–ª–∞–≥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
MODELS_LOADED = False
FUNCTIONS_LOADED = False
DATABASE_AVAILABLE = False

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
try:
    from .models import Base, User, Content, ContentType, ContentStatus, DuelStatus
    MODELS_LOADED = True
    logger.info("‚úÖ Models loaded")
except ImportError as e:
    MODELS_LOADED = False
    logger.error(f"‚ùå Models error: {e}")
    
    # Fallback –µ–Ω—É–º–∏
    import enum
    class ContentType(enum.Enum):
        JOKE = "joke"
    class ContentStatus(enum.Enum):
        PENDING = "pending"
    class DuelStatus(enum.Enum):
        ACTIVE = "active"

# –ë–µ–∑–ø–µ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
if MODELS_LOADED:
    try:
        from .database import (
            init_db, get_or_create_user, get_random_approved_content,
            DATABASE_AVAILABLE as DB_AVAILABLE
        )
        FUNCTIONS_LOADED = True
        DATABASE_AVAILABLE = DB_AVAILABLE
        logger.info("‚úÖ Functions loaded")
    except ImportError as e:
        FUNCTIONS_LOADED = False
        logger.error(f"‚ùå Functions error: {e}")

# Fallback —Ñ—É–Ω–∫—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–µ–∞–ª—å–Ω—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
if not FUNCTIONS_LOADED:
    async def init_db():
        return False
    
    async def get_or_create_user(telegram_id, **kwargs):
        return None
    
    async def get_random_approved_content(**kwargs):
        import types
        obj = types.SimpleNamespace()
        obj.text = "üòÇ Fallback –∂–∞—Ä—Ç: –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ..."
        return obj

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'init_db', 'get_or_create_user', 'get_random_approved_content',
    'ContentType', 'ContentStatus', 'DuelStatus',
    'MODELS_LOADED', 'FUNCTIONS_LOADED', 'DATABASE_AVAILABLE'
]

if MODELS_LOADED:
    __all__.extend(['Base', 'User', 'Content'])

logger.info(f"üì¶ Database module: Functions {'‚úÖ' if FUNCTIONS_LOADED else '‚ùå'}, Models {'‚úÖ' if MODELS_LOADED else '‚ùå'}")
