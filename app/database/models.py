#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –Ñ–î–ò–ù–ê –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –ú–û–î–ï–õ–¨ –ë–î - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ BigInteger –¥–ª—è Telegram User ID (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤–µ–ª–∏–∫–∏—Ö ID)
‚úÖ String –∑–∞–º—ñ—Å—Ç—å SQLEnum –¥–ª—è PostgreSQL —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
‚úÖ –£–∑–≥–æ–¥–∂–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ User –±–µ–∑ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –ø–æ–ª—ñ–≤
‚úÖ –î–æ–¥–∞–Ω–æ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ —Ç–∞–±–ª–∏—Ü—è–º–∏
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
"""

from datetime import datetime
from enum import Enum
from typing import Optional

from sqlalchemy import (
    BigInteger, Boolean, Column, DateTime, Float, ForeignKey, 
    Integer, String, Text, Index, UniqueConstraint
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()

# üéØ ENUM'–ò –î–õ–Ø PYTHON (–Ω–µ –¥–ª—è PostgreSQL)
class ContentType(Enum):
    """–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    MEME = "meme"
    JOKE = "joke"
    ANEKDOT = "anekdot"

class ContentStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class DuelStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –¥—É–µ–ª—ñ - –¥–ª—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è"""
    ACTIVE = "active"
    COMPLETED = "completed"
    CANCELLED = "cancelled"

class UserRank(Enum):
    """–†–∞–Ω–≥–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    NEWBIE = "ü§° –ù–æ–≤–∞—á–æ–∫"
    JOKER = "üòÑ –°–º—ñ—Ö—É–Ω"
    COMEDIAN = "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
    HUMORIST = "üé≠ –ö–æ–º—ñ–∫"
    MASTER = "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
    EXPERT = "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
    VIRTUOSO = "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
    LEGEND = "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"

# üë• –ú–û–î–ï–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê
class User(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ö–û–ù–°–û–õ–Ü–î–û–í–ê–ù–ê –í–ï–†–°–Ü–Ø"""
    __tablename__ = "users"
    
    # üéØ –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø - –í–ò–ü–†–ê–í–õ–ï–ù–û
    id = Column(BigInteger, primary_key=True)  # ‚úÖ Telegram User ID (BigInteger)
    username = Column(String(255), nullable=True, index=True)
    first_name = Column(String(255), nullable=True)
    last_name = Column(String(255), nullable=True)
    
    # üéÆ –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø - –†–û–ó–®–ò–†–ï–ù–û
    points = Column(Integer, default=0, index=True)
    rank = Column(String(100), default="ü§° –ù–æ–≤–∞—á–æ–∫")
    level = Column(Integer, default=1)
    experience = Column(Integer, default=0)
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£
    jokes_submitted = Column(Integer, default=0)
    jokes_approved = Column(Integer, default=0)
    memes_submitted = Column(Integer, default=0)
    memes_approved = Column(Integer, default=0)
    anekdots_submitted = Column(Integer, default=0)
    anekdots_approved = Column(Integer, default=0)
    
    # ‚öîÔ∏è –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–ï–ô
    duels_participated = Column(Integer, default=0)
    duels_won = Column(Integer, default=0)
    duels_lost = Column(Integer, default=0)
    duels_draw = Column(Integer, default=0)
    
    # üëç –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ó–ê–Ñ–ú–û–î–Ü–ô
    reactions_given = Column(Integer, default=0)
    reactions_received = Column(Integer, default=0)
    comments_made = Column(Integer, default=0)
    votes_cast = Column(Integer, default=0)
    
    # üìà –ü–û–ö–ê–ó–ù–ò–ö–ò –ê–ö–¢–ò–í–ù–û–°–¢–Ü
    total_views = Column(Integer, default=0)
    total_likes = Column(Integer, default=0)
    total_shares = Column(Integer, default=0)
    streak_days = Column(Integer, default=0)  # –î–Ω—ñ –ø–æ—Å–ø—ñ–ª—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    last_streak_date = Column(DateTime, nullable=True)
    
    # ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    daily_subscription = Column(Boolean, default=True)
    notifications_enabled = Column(Boolean, default=True)
    language_code = Column(String(10), default="uk")
    timezone = Column(String(50), default="Europe/Kiev")
    
    # üõ°Ô∏è –ú–û–î–ï–†–ê–¶–Ü–Ø –¢–ê –ë–ï–ó–ü–ï–ö–ê
    is_admin = Column(Boolean, default=False)
    is_moderator = Column(Boolean, default=False)
    is_banned = Column(Boolean, default=False)
    ban_reason = Column(Text, nullable=True)
    ban_until = Column(DateTime, nullable=True)
    warnings_count = Column(Integer, default=0)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    last_active = Column(DateTime, default=datetime.utcnow, index=True)
    last_content_submission = Column(DateTime, nullable=True)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    authored_content = relationship("Content", back_populates="author", foreign_keys="Content.author_id")
    moderated_content = relationship("Content", back_populates="moderator", foreign_keys="Content.moderator_id")
    ratings = relationship("Rating", back_populates="user")
    duel_participations = relationship("Duel", back_populates="challenger", foreign_keys="Duel.challenger_id")
    duel_targets = relationship("Duel", back_populates="target", foreign_keys="Duel.target_id")
    duel_votes = relationship("DuelVote", back_populates="voter")
    admin_actions = relationship("AdminAction", back_populates="admin")
    achievements = relationship("UserAchievement", back_populates="user")
    
    def __repr__(self):
        return f"<User(id={self.id}, username={self.username}, rank={self.rank})>"
    
    @property
    def display_name(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è"""
        if self.username:
            return f"@{self.username}"
        elif self.first_name:
            return self.first_name
        else:
            return f"User_{self.id}"
    
    @property
    def win_rate(self):
        """–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥ —É –¥—É–µ–ª—è—Ö"""
        if self.duels_participated == 0:
            return 0.0
        return round((self.duels_won / self.duels_participated) * 100, 1)
    
    @property
    def approval_rate(self):
        """–í—ñ–¥—Å–æ—Ç–æ–∫ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        total_submitted = self.jokes_submitted + self.memes_submitted + self.anekdots_submitted
        if total_submitted == 0:
            return 0.0
        total_approved = self.jokes_approved + self.memes_approved + self.anekdots_approved
        return round((total_approved / total_submitted) * 100, 1)

# üìù –ú–û–î–ï–õ–¨ –ö–û–ù–¢–ï–ù–¢–£
class Content(Base):
    """–ú–æ–¥–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É - –í–ò–ü–†–ê–í–õ–ï–ù–û –¥–ª—è PostgreSQL"""
    __tablename__ = "content"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # üéØ –û–°–ù–û–í–ù–Ü –ü–û–õ–Ø - –í–ò–ö–û–†–ò–°–¢–û–í–£–Ñ–ú–û STRING –∑–∞–º—ñ—Å—Ç—å ENUM
    content_type = Column(String(20), default="joke", index=True)  # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å Enum
    status = Column(String(20), default="pending", index=True)     # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å Enum
    
    # üìÑ –ö–û–ù–¢–ï–ù–¢
    text = Column(Text, nullable=True)
    media_url = Column(String(500), nullable=True)
    media_type = Column(String(50), nullable=True)  # photo, video, document
    file_id = Column(String(500), nullable=True)  # Telegram file_id
    
    # üë§ –ê–í–¢–û–† –Ü –ú–û–î–ï–†–ê–¢–û–†
    author_id = Column(BigInteger, ForeignKey('users.id'), nullable=False, index=True)
    author_user_id = Column(BigInteger, nullable=True)  # Backup –ø–æ–ª–µ
    moderator_id = Column(BigInteger, ForeignKey('users.id'), nullable=True)
    
    # üõ°Ô∏è –ú–û–î–ï–†–ê–¶–Ü–Ø
    moderated_at = Column(DateTime, nullable=True)
    rejection_reason = Column(Text, nullable=True)
    moderation_notes = Column(Text, nullable=True)
    
    # üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    views = Column(Integer, default=0, index=True)
    likes = Column(Integer, default=0)
    dislikes = Column(Integer, default=0)
    shares = Column(Integer, default=0)
    comments_count = Column(Integer, default=0)
    reports_count = Column(Integer, default=0)
    
    # üéØ –ú–ï–¢–†–ò–ö–ò –Ø–ö–û–°–¢–Ü
    rating_average = Column(Float, default=0.0)
    rating_count = Column(Integer, default=0)
    quality_score = Column(Float, default=0.0)
    popularity_score = Column(Float, default=0.0)
    engagement_rate = Column(Float, default=0.0)
    virality_score = Column(Float, default=0.0)
    
    # üè∑Ô∏è –ö–õ–ê–°–ò–§–Ü–ö–ê–¶–Ü–Ø
    topic = Column(String(100), nullable=True)
    tags = Column(Text, nullable=True)  # JSON —Å—Ç—Ä–æ–∫–∞ –∑ —Ç–µ–≥–∞–º–∏
    difficulty = Column(String(20), default="medium")
    target_audience = Column(String(50), default="general")
    
    # ‚≠ê –û–°–û–ë–õ–ò–í–Ü –°–¢–ê–¢–£–°–ò
    is_featured = Column(Boolean, default=False, index=True)
    is_archived = Column(Boolean, default=False)
    is_trending = Column(Boolean, default=False, index=True)
    featured_until = Column(DateTime, nullable=True)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    published_at = Column(DateTime, nullable=True)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    author = relationship("User", back_populates="authored_content", foreign_keys=[author_id])
    moderator = relationship("User", back_populates="moderated_content", foreign_keys=[moderator_id])
    ratings = relationship("Rating", back_populates="content")
    
    def __repr__(self):
        return f"<Content(id={self.id}, type={self.content_type}, status={self.status})>"

# ‚≠ê –ú–û–î–ï–õ–¨ –†–ï–ô–¢–ò–ù–ì–£
class Rating(Base):
    """–ú–æ–¥–µ–ª—å —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    __tablename__ = "ratings"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)
    content_id = Column(Integer, ForeignKey('content.id'), nullable=False)
    
    # üìä –†–ï–ô–¢–ò–ù–ì
    rating = Column(Integer, nullable=False)  # 1-5 –∑—ñ—Ä–æ–∫
    reaction_type = Column(String(20), nullable=True)  # like, dislike, love, laugh
    
    # üí¨ –ö–û–ú–ï–ù–¢–ê–†
    comment = Column(Text, nullable=True)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    user = relationship("User", back_populates="ratings")
    content = relationship("Content", back_populates="ratings")
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å - –æ–¥–∏–Ω —Ä–µ–π—Ç–∏–Ω–≥ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç
    __table_args__ = (UniqueConstraint('user_id', 'content_id', name='unique_user_content_rating'),)

# ‚öîÔ∏è –ú–û–î–ï–õ–¨ –î–£–ï–õ–Ü
class Duel(Base):
    """–ú–æ–¥–µ–ª—å –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤"""
    __tablename__ = "duels"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # üë• –£–ß–ê–°–ù–ò–ö–ò
    challenger_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)
    target_id = Column(BigInteger, ForeignKey('users.id'), nullable=True)  # None –¥–ª—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –æ–ø–æ–Ω–µ–Ω—Ç–∞
    
    # üìù –ö–û–ù–¢–ï–ù–¢ –î–£–ï–õ–Ü
    challenger_content_id = Column(Integer, ForeignKey('content.id'), nullable=False)
    target_content_id = Column(Integer, ForeignKey('content.id'), nullable=True)
    
    # üéØ –°–¢–ê–¢–£–° –¢–ê –ü–†–ê–í–ò–õ–ê
    status = Column(String(20), default="active", index=True)  # ‚úÖ String –∑–∞–º—ñ—Å—Ç—å Enum
    duel_type = Column(String(50), default="classic")  # classic, tournament, quick
    max_participants = Column(Integer, default=100)
    duration_minutes = Column(Integer, default=1440)  # 24 –≥–æ–¥–∏–Ω–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    # üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò
    challenger_votes = Column(Integer, default=0)
    target_votes = Column(Integer, default=0)
    total_votes = Column(Integer, default=0)
    winner_id = Column(BigInteger, ForeignKey('users.id'), nullable=True)
    
    # üèÜ –ù–ê–ì–û–†–û–î–ò
    prize_points = Column(Integer, default=10)
    bonus_points = Column(Integer, default=0)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow)
    started_at = Column(DateTime, nullable=True)
    ended_at = Column(DateTime, nullable=True)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    challenger = relationship("User", back_populates="duel_participations", foreign_keys=[challenger_id])
    target = relationship("User", back_populates="duel_targets", foreign_keys=[target_id])
    winner = relationship("User", foreign_keys=[winner_id])
    votes = relationship("DuelVote", back_populates="duel")
    
    def __repr__(self):
        return f"<Duel(id={self.id}, status={self.status}, votes={self.total_votes})>"

# üó≥Ô∏è –ú–û–î–ï–õ–¨ –ì–û–õ–û–°–£–í–ê–ù–ù–Ø –í –î–£–ï–õ–Ü
class DuelVote(Base):
    """–ú–æ–¥–µ–ª—å –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ"""
    __tablename__ = "duel_votes"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    duel_id = Column(Integer, ForeignKey('duels.id'), nullable=False)
    voter_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)
    
    # üó≥Ô∏è –ì–û–õ–û–°
    voted_for = Column(String(20), nullable=False)  # "challenger" –∞–±–æ "target"
    vote_weight = Column(Float, default=1.0)  # –ú–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ –±—ñ–ª—å—à—É –≤–∞–≥—É –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
    
    # üí¨ –ö–û–ú–ï–ù–¢–ê–† –î–û –ì–û–õ–û–°–£
    comment = Column(Text, nullable=True)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    duel = relationship("Duel", back_populates="votes")
    voter = relationship("User", back_populates="duel_votes")
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å - –æ–¥–∏–Ω –≥–æ–ª–æ—Å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –¥—É–µ–ª—ñ
    __table_args__ = (UniqueConstraint('duel_id', 'voter_id', name='unique_duel_voter'),)

# üõ°Ô∏è –ú–û–î–ï–õ–¨ –ê–î–ú–Ü–ù –î–Ü–ôSLOGAN
class AdminAction(Base):
    """–ú–æ–¥–µ–ª—å –¥—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    __tablename__ = "admin_actions"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    admin_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)
    
    # üéØ –î–Ü–Ø
    action_type = Column(String(50), nullable=False)  # moderate_content, ban_user, feature_content
    target_type = Column(String(50), nullable=False)  # user, content, duel
    target_id = Column(Integer, nullable=False)
    
    # üìù –î–ï–¢–ê–õ–Ü
    action_details = Column(Text, nullable=True)  # JSON –∑ –¥–µ—Ç–∞–ª—è–º–∏ –¥—ñ—ó
    reason = Column(Text, nullable=True)
    notes = Column(Text, nullable=True)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    admin = relationship("User", back_populates="admin_actions")
    
    def __repr__(self):
        return f"<AdminAction(action={self.action_type}, target={self.target_type}:{self.target_id})>"

# üìä –ú–û–î–ï–õ–¨ –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–û–¢–ê
class BotStatistics(Base):
    """–ú–æ–¥–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
    __tablename__ = "bot_statistics"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # üìÖ –ü–ï–†–Ü–û–î
    date = Column(DateTime, default=datetime.utcnow, index=True)
    period_type = Column(String(20), default="daily")  # daily, weekly, monthly
    
    # üë• –ö–û–†–ò–°–¢–£–í–ê–ß–Ü
    total_users = Column(Integer, default=0)
    new_users = Column(Integer, default=0)
    active_users = Column(Integer, default=0)
    returning_users = Column(Integer, default=0)
    
    # üìù –ö–û–ù–¢–ï–ù–¢
    total_content = Column(Integer, default=0)
    new_content = Column(Integer, default=0)
    approved_content = Column(Integer, default=0)
    rejected_content = Column(Integer, default=0)
    
    # ‚öîÔ∏è –î–£–ï–õ–Ü
    total_duels = Column(Integer, default=0)
    active_duels = Column(Integer, default=0)
    completed_duels = Column(Integer, default=0)
    total_votes = Column(Integer, default=0)
    
    # üìä –í–ó–ê–Ñ–ú–û–î–Ü–Ø
    total_views = Column(Integer, default=0)
    total_likes = Column(Integer, default=0)
    total_shares = Column(Integer, default=0)
    total_comments = Column(Integer, default=0)
    
    # ü§ñ –°–ò–°–¢–ï–ú–ê
    bot_uptime_minutes = Column(Integer, default=0)
    errors_count = Column(Integer, default=0)
    api_calls = Column(Integer, default=0)
    
    def __repr__(self):
        return f"<BotStatistics(date={self.date.date()}, users={self.total_users})>"

# üèÜ –ú–û–î–ï–õ–¨ –î–û–°–Ø–ì–ù–ï–ù–¨
class Achievement(Base):
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
    __tablename__ = "achievements"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    
    # üéØ –î–û–°–Ø–ì–ù–ï–ù–ù–Ø
    name = Column(String(100), nullable=False, unique=True)
    description = Column(Text, nullable=False)
    icon = Column(String(10), default="üèÜ")
    category = Column(String(50), nullable=False)  # content, duels, social, special
    
    # üìä –£–ú–û–í–ò
    requirement_type = Column(String(50), nullable=False)  # points, wins, submissions
    requirement_value = Column(Integer, nullable=False)
    
    # üéÅ –ù–ê–ì–û–†–û–î–ê
    reward_points = Column(Integer, default=0)
    reward_title = Column(String(100), nullable=True)
    
    # ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
    is_active = Column(Boolean, default=True)
    is_secret = Column(Boolean, default=False)  # –°–µ–∫—Ä–µ—Ç–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    created_at = Column(DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f"<Achievement(name={self.name}, category={self.category})>"

# üèÜ –ú–û–î–ï–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–¶–¨–ö–ò–• –î–û–°–Ø–ì–ù–ï–ù–¨
class UserAchievement(Base):
    """–ú–æ–¥–µ–ª—å –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    __tablename__ = "user_achievements"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(BigInteger, ForeignKey('users.id'), nullable=False)
    achievement_id = Column(Integer, ForeignKey('achievements.id'), nullable=False)
    
    # üìä –ü–†–û–ì–†–ï–°
    progress = Column(Float, default=0.0)  # 0.0 - 1.0
    is_completed = Column(Boolean, default=False)
    
    # üïí –ß–ê–°–û–í–Ü –ú–Ü–¢–ö–ò
    earned_at = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # üîó –ó–í'–Ø–ó–ö–ò
    user = relationship("User", back_populates="achievements")
    achievement = relationship("Achievement")
    
    # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å - –æ–¥–Ω–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    __table_args__ = (UniqueConstraint('user_id', 'achievement_id', name='unique_user_achievement'),)

# üìã –Ü–ù–î–ï–ö–°–ò –î–õ–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü
Index('idx_content_status_created', Content.status, Content.created_at)
Index('idx_content_type_featured', Content.content_type, Content.is_featured)
Index('idx_user_points_rank', User.points, User.rank)
Index('idx_duel_status_created', Duel.status, Duel.created_at)
Index('idx_rating_content_user', Rating.content_id, Rating.user_id)

# üéØ –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –†–û–ë–û–¢–ò –ó –ë–î
CONTENT_TYPES = ["meme", "joke", "anekdot"]
CONTENT_STATUSES = ["pending", "approved", "rejected"]
DUEL_STATUSES = ["active", "completed", "cancelled"]

# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
ALL_MODELS = [
    User, Content, Rating, Duel, DuelVote, 
    AdminAction, BotStatistics, Achievement, UserAchievement
]