#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíæ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–ê –ë–ê–ó–ê –î–ê–ù–ò–• - POSTGRESQL –°–£–ú–Ü–°–ù–ê üíæ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL Railway
‚úÖ Fallback —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–µ–∑ –ë–î
‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω—ñ enum'–∏ –¥–ª—è PostgreSQL
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ User –º–æ–¥–µ–ª—ñ
‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Union
from contextlib import contextmanager
import os

# SQLAlchemy —ñ–º–ø–æ—Ä—Ç–∏
try:
    from sqlalchemy import create_engine, text, MetaData
    from sqlalchemy.orm import sessionmaker, Session
    from sqlalchemy.exc import IntegrityError, OperationalError, SQLAlchemyError
    SQLALCHEMY_AVAILABLE = True
except ImportError:
    SQLALCHEMY_AVAILABLE = False

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –ë–î
engine = None
SessionLocal = None
DATABASE_AVAILABLE = False

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ =====
def get_database_url() -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è DATABASE_URL –∑ —Ä—ñ–∑–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª"""
    # 1. –ü—Ä—è–º–æ –∑ environment
    database_url = os.getenv("DATABASE_URL")
    if database_url:
        logger.info("‚úÖ DATABASE_URL –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ environment")
        return database_url
    
    # 2. –ó config.settings
    try:
        from config.settings import DATABASE_URL as settings_url
        if settings_url:
            logger.info("‚úÖ DATABASE_URL –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ config.settings")
            return settings_url
    except ImportError:
        pass
    
    # 3. Fallback
    logger.warning("‚ö†Ô∏è DATABASE_URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é fallback")
    return "sqlite:///fallback.db"

def get_admin_id() -> int:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è ADMIN_ID"""
    try:
        from config.settings import ADMIN_ID
        return ADMIN_ID
    except ImportError:
        return int(os.getenv("ADMIN_ID", 603047391))

# ===== –ë–ï–ó–ü–ï–ß–ù–ò–ô –Ü–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô =====
try:
    from .models import Base, User, Content, Duel, DuelVote, Rating
    MODELS_LOADED = True
    logger.info("‚úÖ –ú–æ–¥–µ–ª—ñ –ë–î —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError as e:
    MODELS_LOADED = False
    logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –ë–î –Ω–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {e}")

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–ê–ó–ò –î–ê–ù–ò–• =====
async def init_db() -> bool:
    """
    –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é
    
    Returns:
        bool: True —è–∫—â–æ –ë–î —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    """
    global engine, SessionLocal, DATABASE_AVAILABLE
    
    logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ SQLAlchemy
    if not SQLALCHEMY_AVAILABLE:
        logger.error("‚ùå SQLAlchemy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    if not MODELS_LOADED:
        logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –ë–î –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –ë–î")
        return False
    
    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è DATABASE_URL
        database_url = get_database_url()
        logger.info(f"üîó DATABASE_URL: {database_url[:30]}...{database_url[-10:]}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è engine –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è PostgreSQL
        if database_url.startswith('postgresql'):
            # PostgreSQL –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            engine = create_engine(
                database_url,
                echo=False,  # –í–∏–º–∫–Ω—É—Ç–∏ SQL –ª–æ–≥—É–≤–∞–Ω–Ω—è
                pool_size=5,
                max_overflow=10,
                pool_recycle=3600,
                pool_pre_ping=True,  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
                connect_args={
                    "connect_timeout": 10,
                    "application_name": "ukrainian_telegram_bot"
                }
            )
            logger.info("üêò PostgreSQL engine —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        else:
            # SQLite fallback
            engine = create_engine(
                database_url,
                echo=False,
                pool_pre_ping=True
            )
            logger.info("üìÅ SQLite engine —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SessionLocal
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        logger.info("‚úÖ Session factory —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1 as test"))
            test_row = result.fetchone()
            if test_row and test_row[0] == 1:
                logger.info("‚úÖ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ")
            else:
                logger.error("‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–æ–≤")
                return False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
        logger.info("üî® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –ë–î...")
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Ç–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–∏–ª–∏—Å—å
        metadata = MetaData()
        metadata.reflect(bind=engine)
        tables = list(metadata.tables.keys())
        logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—å: {len(tables)} - {tables}")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await ensure_admin_exists()
        await add_sample_content()
        
        DATABASE_AVAILABLE = True
        logger.info("üéâ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        return True
        
    except OperationalError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")
        DATABASE_AVAILABLE = False
        return False
    except SQLAlchemyError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SQLAlchemy: {e}")
        DATABASE_AVAILABLE = False
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
        DATABASE_AVAILABLE = False
        return False

@contextmanager
def get_db_session():
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Å–µ—Å—ñ—î—é –ë–î"""
    if not DATABASE_AVAILABLE or not SessionLocal:
        raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î —Å–µ—Å—ñ—ó: {e}")
        raise
    finally:
        session.close()

def is_database_available() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ë–î"""
    return DATABASE_AVAILABLE

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====
async def get_or_create_user(telegram_id: int, username: str = None, 
                           first_name: str = None, last_name: str = None) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not DATABASE_AVAILABLE:
        logger.warning("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è get_or_create_user")
        return None
        
    try:
        with get_db_session() as session:
            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id
            user = session.query(User).filter(User.id == telegram_id).first()
            
            if user:
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                if last_name and user.last_name != last_name:
                    user.last_name = last_name
                    updated = True
                
                if updated:
                    user.updated_at = datetime.utcnow()
                    logger.info(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id}")
                
                return user
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                new_user = User(
                    id=telegram_id,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ telegram_id —è–∫ primary key
                    username=username,
                    first_name=first_name or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                    last_name=last_name,
                    points=0,
                    rank="–ù–æ–≤–∞—á–æ–∫",
                    total_content_submitted=0,
                    total_content_approved=0,
                    total_duels_won=0,
                    total_duels_participated=0,
                    is_admin=(telegram_id == get_admin_id()),
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                
                session.add(new_user)
                session.flush()  # –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID
                
                logger.info(f"‚ûï –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_id} (@{username})")
                return new_user
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_or_create_user: {e}")
        return None

async def get_user_by_id(telegram_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID"""
    if not DATABASE_AVAILABLE:
        return None
        
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.id == telegram_id).first()
            return user
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_user_by_id: {e}")
        return None

async def update_user_points(telegram_id: int, points: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not DATABASE_AVAILABLE:
        return False
        
    try:
        with get_db_session() as session:
            user = session.query(User).filter(User.id == telegram_id).first()
            if user:
                user.points += points
                user.updated_at = datetime.utcnow()
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–∞–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–ª—ñ–≤
                if user.points >= 1000:
                    user.rank = "–ú–∞–π—Å—Ç–µ—Ä –ì—É–º–æ—Ä—É"
                elif user.points >= 500:
                    user.rank = "–ñ–∞—Ä—Ç—ñ–≤–Ω–∏–∫"
                elif user.points >= 100:
                    user.rank = "–í–µ—Å–µ–ª—å—á–∞–∫"
                elif user.points >= 50:
                    user.rank = "–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å"
                else:
                    user.rank = "–ù–æ–≤–∞—á–æ–∫"
                
                logger.info(f"üìà –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id} –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤ (–∑–∞–≥–∞–ª–æ–º: {user.points})")
                return True
            return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ update_user_points: {e}")
        return False

async def get_top_users(limit: int = 10) -> List[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –±–∞–ª–∞–º–∏"""
    if not DATABASE_AVAILABLE:
        return []
        
    try:
        with get_db_session() as session:
            users = session.query(User)\
                          .filter(User.is_active == True)\
                          .order_by(User.points.desc())\
                          .limit(limit)\
                          .all()
            return users
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_top_users: {e}")
        return []

# ===== –§–£–ù–ö–¶–Ü–á –ö–û–ù–¢–ï–ù–¢–£ =====
async def add_content(user_id: int, content_type: str, text: str) -> Optional[Content]:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if not DATABASE_AVAILABLE:
        return None
        
    try:
        with get_db_session() as session:
            new_content = Content(
                user_id=user_id,
                content_type=content_type,  # "meme" –∞–±–æ "anekdot"
                text=text,
                status="pending",  # String –∑–∞–º—ñ—Å—Ç—å enum –¥–ª—è PostgreSQL
                created_at=datetime.utcnow()
            )
            
            session.add(new_content)
            session.flush()
            
            logger.info(f"üìù –î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return new_content
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ add_content: {e}")
        return None

async def get_random_content(content_type: str) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    if not DATABASE_AVAILABLE:
        return None
        
    try:
        with get_db_session() as session:
            content = session.query(Content)\
                           .filter(Content.content_type == content_type,
                                  Content.status == "approved")\
                           .order_by(text("RANDOM()"))\
                           .first()
            return content
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_random_content: {e}")
        return None

# ===== –ü–û–ß–ê–¢–ö–û–í–Ü –î–ê–ù–Ü =====
async def ensure_admin_exists():
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ—Å–Ω—É—î –≤ –ë–î"""
    if not DATABASE_AVAILABLE:
        return
    
    admin_id = get_admin_id()
    logger.info(f"üëë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")
    
    admin = await get_or_create_user(
        telegram_id=admin_id,
        username="admin", 
        first_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
    )
    
    if admin:
        logger.info("‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –≤ –ë–î")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

async def add_sample_content():
    """–î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —è–∫—â–æ –ë–î –ø–æ—Ä–æ–∂–Ω—è"""
    if not DATABASE_AVAILABLE:
        return
        
    try:
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ–Ω—Ç–µ–Ω—Ç
            content_count = session.query(Content).count()
            
            if content_count == 0:
                logger.info("üìö –î–æ–¥–∞—é –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç...")
                
                sample_memes = [
                    "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥—Ä—É–∂–∏–Ω—ñ: ‚Äî –Ø –¥—ñ–∑–Ω–∞–≤—Å—è —â–æ —Ç–∏ –º–µ–Ω–µ –∑—Ä–∞–¥–∂—É—î—à! ‚Äî –Ø–∫?! ‚Äî git log",
                    "–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ó–Ω —ñ –†—ñ–∑–¥–≤–æ? –¢–æ–º—É —â–æ 31 OCT = 25 DEC!",
                    "–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É? –ñ–æ–¥–Ω–æ–≥–æ. –¶–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!"
                ]
                
                sample_anekdots = [
                    "–î—Ä—É–∂–∏–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—É: ‚Äî –ô–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω, –∫—É–ø–∏ —Ö–ª—ñ–±. –ê —è–∫—â–æ –±—É–¥—É—Ç—å —è–π—Ü—è ‚Äî –≤—ñ–∑—å–º–∏ –¥–µ—Å—è—Ç–æ–∫. –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ –¥–µ—Å—è—Ç—å–º–∞ —Ö–ª—ñ–±–∞–º–∏.",
                    "‚Äî –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –≤–∞—à —Å–∞–π—Ç? ‚Äî 300 –¥–æ–ª–∞—Ä—ñ–≤. ‚Äî –ê —è–∫—â–æ –±–µ–∑ JavaScript? ‚Äî –¢–æ–¥—ñ 50 –¥–æ–ª–∞—Ä—ñ–≤. ‚Äî –ê —è–∫—â–æ —Ç—ñ–ª—å–∫–∏ HTML? ‚Äî –¢–æ–¥—ñ —Ü–µ –≤–∂–µ –Ω–µ —Å–∞–π—Ç, –∞ –≤—ñ–∑–∏—Ç–∫–∞!",
                    "–î—ñ—Ç–µ–π –≤—á–∞—Ç—å —â–æ 2+2=4. –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –≤—á–∞—Ç—å —â–æ 2+2=5 –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–Ω–∞—á–µ–Ω—å 2."
                ]
                
                admin_id = get_admin_id()
                
                # –î–æ–¥–∞—î–º–æ –º–µ–º–∏
                for text in sample_memes:
                    content = Content(
                        user_id=admin_id,
                        content_type="meme",
                        text=text,
                        status="approved",
                        created_at=datetime.utcnow()
                    )
                    session.add(content)
                
                # –î–æ–¥–∞—î–º–æ –∞–Ω–µ–∫–¥–æ—Ç–∏
                for text in sample_anekdots:
                    content = Content(
                        user_id=admin_id,
                        content_type="anekdot", 
                        text=text,
                        status="approved",
                        created_at=datetime.utcnow()
                    )
                    session.add(content)
                
                session.commit()
                logger.info("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ")
            else:
                logger.info(f"üìö –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∂–µ —î: {content_count} –∑–∞–ø–∏—Å—ñ–≤")
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ add_sample_content: {e}")

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
async def get_database_stats() -> Dict[str, Any]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î"""
    if not DATABASE_AVAILABLE:
        return {"error": "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
    
    try:
        with get_db_session() as session:
            stats = {
                "users_total": session.query(User).count(),
                "users_active": session.query(User).filter(User.is_active == True).count(),
                "content_total": session.query(Content).count(),
                "content_approved": session.query(Content).filter(Content.status == "approved").count(),
                "content_pending": session.query(Content).filter(Content.status == "pending").count(),
            }
            
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–µ–ª–µ–π —è–∫—â–æ —Ç–∞–±–ª–∏—Ü—è —ñ—Å–Ω—É—î
            try:
                stats["duels_total"] = session.query(Duel).count()
                stats["duels_active"] = session.query(Duel).filter(Duel.status == "active").count()
            except:
                stats["duels_total"] = 0
                stats["duels_active"] = 0
            
            return stats
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ get_database_stats: {e}")
        return {"error": str(e)}

# ===== –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê =====
async def test_database_connection() -> bool:
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î"""
    try:
        if not DATABASE_AVAILABLE:
            logger.warning("‚ö†Ô∏è –ë–î –ø–æ–∑–Ω–∞—á–µ–Ω–∞ —è–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        
        with get_db_session() as session:
            result = session.execute(text("SELECT 1 as test"))
            test_row = result.fetchone()
            if test_row and test_row[0] == 1:
                logger.info("‚úÖ –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ë–î —É—Å–ø—ñ—à–Ω–∏–π")
                return True
            else:
                logger.error("‚ùå –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ë–î –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
        return False

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'init_db', 'get_db_session', 'is_database_available',
    'get_or_create_user', 'get_user_by_id', 'update_user_points', 'get_top_users',
    'add_content', 'get_random_content',
    'get_database_stats', 'test_database_connection'
]

logger.info("üíæ Database –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ PostgreSQL –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")