#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–û–í–ù–ê –ë–ê–ó–ê –î–ê–ù–ò–• –î–õ–Ø –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê üß†üòÇüî•

–ü–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –º–æ–¥—É–ª—å –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏
‚úÖ –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
‚úÖ PostgreSQL —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å  
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚úÖ –£—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ __init__.py –ø—Ä–∏—Å—É—Ç–Ω—ñ
"""

import logging
import random
from contextlib import contextmanager
from typing import List, Optional, Dict, Any, Union
from datetime import datetime, timedelta

from sqlalchemy import create_engine, func, and_, or_, desc, asc, text
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

logger = logging.getLogger(__name__)

# ===== –Ü–ú–ü–û–†–¢ –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨ =====
try:
    from config.settings import settings
    SETTINGS_LOADED = True
    logger.info("‚úÖ Settings –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ config.settings")
except ImportError:
    # Fallback –¥–ª—è –≤–∏–ø–∞–¥–∫—ñ–≤ –∫–æ–ª–∏ settings –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
    import os
    class FallbackSettings:
        BOT_TOKEN = os.getenv("BOT_TOKEN", "")
        ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
        DEBUG = os.getenv("DEBUG", "False").lower() == "true"
        POINTS_FOR_APPROVAL = 20
        POINTS_FOR_SUBMISSION = 10
        POINTS_FOR_VIEW = 1
        POINTS_FOR_REACTION = 2
    settings = FallbackSettings()
    SETTINGS_LOADED = False
    logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ fallback settings")

# ===== –Ü–ú–ü–û–†–¢ –ú–û–î–ï–õ–ï–ô –ë–î =====
try:
    from .models import (
        Base, User, Content, Rating, Duel, DuelVote, 
        AdminAction, BotStatistics, ContentType, ContentStatus, DuelStatus
    )
    MODELS_LOADED = True
    logger.info("‚úÖ –ú–æ–¥–µ–ª—ñ –ë–î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
except ImportError:
    try:
        from models import (
            Base, User, Content, Rating, Duel, DuelVote, 
            AdminAction, BotStatistics, ContentType, ContentStatus, DuelStatus
        )
        MODELS_LOADED = True
        logger.info("‚úÖ –ú–æ–¥–µ–ª—ñ –ë–î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (fallback import)")
    except ImportError:
        MODELS_LOADED = False
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥–µ–ª—ñ –ë–î")

# ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–î =====
if MODELS_LOADED:
    try:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–≤–∏–∂–∫–∞ –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        engine = create_engine(
            settings.DATABASE_URL,
            echo=settings.DEBUG if SETTINGS_LOADED else False,
            pool_pre_ping=True,
            pool_recycle=3600,
            connect_args={
                "check_same_thread": False,
                "timeout": 30
            } if "sqlite" in settings.DATABASE_URL else {
                "connect_timeout": 30,
                "application_name": "ukrainian_telegram_bot"
            }
        )
        
        SessionLocal = sessionmaker(
            autocommit=False, 
            autoflush=False, 
            bind=engine,
            expire_on_commit=False
        )
        
        ENGINE_CREATED = True
        logger.info("‚úÖ Database engine —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        ENGINE_CREATED = False
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è database engine: {e}")
else:
    ENGINE_CREATED = False

# ===== –ö–û–ù–¢–ï–ö–°–¢–ù–ò–ô –ú–ï–ù–ï–î–ñ–ï–† –°–ï–°–Ü–ô =====

@contextmanager
def get_db_session():
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    if not ENGINE_CREATED:
        logger.error("‚ùå Database engine –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        raise RuntimeError("Database –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
    
    session = SessionLocal()
    try:
        yield session
        session.commit()
    except Exception as e:
        session.rollback()
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ë–î: {e}")
        raise
    finally:
        session.close()

# ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–î =====

async def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    try:
        if not MODELS_LOADED:
            logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –ë–î")
            return False
        
        if not ENGINE_CREATED:
            logger.warning("‚ö†Ô∏è Database engine –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return False
        
        logger.info("üíæ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–±–ª–∏—Ü—å
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ñ –ë–î —Å—Ç–≤–æ—Ä–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ensure_admin_exists()
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
        await add_initial_data()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        return False

async def check_if_migration_needed() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –º—ñ–≥—Ä–∞—Ü—ñ—è –ë–î"""
    try:
        if not ENGINE_CREATED:
            return False
            
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—é—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
            try:
                session.execute(text("SELECT 1 FROM users LIMIT 1"))
                session.execute(text("SELECT 1 FROM content LIMIT 1"))
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ—Å–Ω—É—é—Ç—å")
                return False
            except Exception:
                logger.info("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
                return True
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é: {e}")
        return True

async def migrate_database():
    """–í–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é –ë–î"""
    try:
        if not MODELS_LOADED or not ENGINE_CREATED:
            logger.warning("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –º—ñ–≥—Ä–∞—Ü—ñ—é")
            return
        
        logger.info("üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –ë–î...")
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å (–±–µ–∑–ø–µ—á–Ω–æ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö)
        Base.metadata.create_all(bind=engine)
        
        logger.info("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")

async def verify_database_integrity() -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î"""
    try:
        if not ENGINE_CREATED:
            return False
            
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
            session.execute(text("SELECT COUNT(*) FROM users"))
            session.execute(text("SELECT COUNT(*) FROM content"))
            
            logger.info("‚úÖ –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")
            return True
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—é –ë–î: {e}")
        return False

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–û–†–ò–°–¢–£–í–ê–ß–ê–ú–ò =====

async def get_or_create_user(telegram_id: int, username: str = None, first_name: str = None) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        if not ENGINE_CREATED:
            logger.warning("‚ö†Ô∏è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return None
            
        with get_db_session() as session:
            # –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if user:
                # –û–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è —Ç–∞ username —è–∫—â–æ –∑–º—ñ–Ω–∏–ª–∏—Å—è
                updated = False
                if username and user.username != username:
                    user.username = username
                    updated = True
                if first_name and user.first_name != first_name:
                    user.first_name = first_name
                    updated = True
                
                if updated:
                    user.updated_at = datetime.utcnow()
                    session.commit()
                    logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
                
                return user
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            new_user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name or "User",
                points=0,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                is_active=True
            )
            
            session.add(new_user)
            session.commit()
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}")
            return new_user
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
        return None

async def get_user_by_id(telegram_id: int) -> Optional[User]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID"""
    try:
        if not ENGINE_CREATED:
            return None
            
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            return user
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {telegram_id}: {e}")
        return None

async def update_user_points(telegram_id: int, points_delta: int) -> bool:
    """–û–Ω–æ–≤–∏—Ç–∏ –±–∞–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        if not ENGINE_CREATED:
            return False
            
        with get_db_session() as session:
            user = session.query(User).filter(User.telegram_id == telegram_id).first()
            
            if user:
                user.points += points_delta
                user.updated_at = datetime.utcnow()
                session.commit()
                
                logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {telegram_id}: {points_delta:+d} –±–∞–ª—ñ–≤ (–≤—Å—å–æ–≥–æ: {user.points})")
                return True
            
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ {telegram_id}: {e}")
        return False

async def get_rank_by_points(points: int) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞–Ω–≥ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –±–∞–ª—ñ–≤"""
    try:
        if points >= 5000:
            return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
        elif points >= 3000:
            return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
        elif points >= 1500:
            return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
        elif points >= 750:
            return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
        elif points >= 350:
            return "üé≠ –ö–æ–º—ñ–∫"
        elif points >= 150:
            return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
        elif points >= 50:
            return "üòÑ –°–º—ñ—Ö—É–Ω"
        else:
            return "ü§° –ù–æ–≤–∞—á–æ–∫"
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É: {e}")
        return "ü§° –ù–æ–≤–∞—á–æ–∫"

# ===== –§–£–ù–ö–¶–Ü–á –†–û–ë–û–¢–ò –ó –ö–û–ù–¢–ï–ù–¢–û–ú =====

async def add_content_for_moderation(author_id: int, content_type: ContentType, text: str) -> Optional[Content]:
    """–î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"""
    try:
        if not ENGINE_CREATED:
            return None
            
        with get_db_session() as session:
            content = Content(
                content_type=content_type,
                text=text,
                author_id=author_id,
                status=ContentStatus.PENDING,
                created_at=datetime.utcnow()
            )
            
            session.add(content)
            session.commit()
            
            # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É
            await update_user_points(author_id, settings.POINTS_FOR_SUBMISSION)
            
            logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥ {author_id}")
            return content
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

async def get_pending_content() -> List[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
    try:
        if not ENGINE_CREATED:
            return []
            
        with get_db_session() as session:
            content_list = session.query(Content).filter(
                Content.status == ContentStatus.PENDING
            ).order_by(Content.created_at).all()
            
            return content_list
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {e}")
        return []

async def moderate_content(content_id: int, approved: bool, moderator_id: int, reason: str = None) -> bool:
    """–ú–æ–¥–µ—Ä—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        if not ENGINE_CREATED:
            return False
            
        with get_db_session() as session:
            content = session.query(Content).filter(Content.id == content_id).first()
            
            if content:
                content.status = ContentStatus.APPROVED if approved else ContentStatus.REJECTED
                content.moderated_at = datetime.utcnow()
                content.moderator_id = moderator_id
                content.rejection_reason = reason
                
                session.commit()
                
                # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
                if approved:
                    await update_user_points(content.author_id, settings.POINTS_FOR_APPROVAL)
                
                logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç {content_id} {'—Å—Ö–≤–∞–ª–µ–Ω–æ' if approved else '–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'}")
                return True
            
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É {content_id}: {e}")
        return False

async def get_random_approved_content(content_type: ContentType) -> Optional[Content]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ö–≤–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    try:
        if not ENGINE_CREATED:
            return None
            
        with get_db_session() as session:
            content_list = session.query(Content).filter(
                Content.content_type == content_type,
                Content.status == ContentStatus.APPROVED
            ).all()
            
            if content_list:
                return random.choice(content_list)
            
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
        return None

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def ensure_admin_exists():
    """–ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è —â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —ñ—Å–Ω—É—î –≤ –ë–î"""
    try:
        if not SETTINGS_LOADED or not settings.ADMIN_ID:
            logger.warning("‚ö†Ô∏è ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return
            
        admin_user = await get_or_create_user(
            telegram_id=settings.ADMIN_ID,
            username="admin",
            first_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
        )
        
        if admin_user:
            logger.info(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {settings.ADMIN_ID} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {settings.ADMIN_ID}")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

async def add_initial_data():
    """–î–æ–¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ (–∑—Ä–∞–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É)"""
    try:
        if not ENGINE_CREATED:
            return
            
        with get_db_session() as session:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –≤–∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç
            existing_content = session.query(Content).filter(
                Content.status == ContentStatus.APPROVED
            ).first()
            
            if existing_content:
                logger.info("‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∂–µ —ñ—Å–Ω—É—î")
                return
            
            # –î–æ–¥–∞—Ç–∏ –∑—Ä–∞–∑–∫–∏ –∂–∞—Ä—Ç—ñ–≤
            sample_jokes = [
                "üß† –ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\n- –î–æ–∫—Ç–æ—Ä, –≤ –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Ä—É–∫–∞!\n- –ê –¥–µ —Å–∞–º–µ?\n- –í –ª—ñ–≤–æ–º—É –∫–ª—ñ–∫—É! üòÇ",
                "üî• –ó—É—Å—Ç—Ä—ñ—á–∞—é—Ç—å—Å—è –¥–≤–∞ —É–∫—Ä–∞—ó–Ω—Ü—ñ:\n- –Ø–∫ —Å–ø—Ä–∞–≤–∏?\n- –¢–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –ø—Ä–∞—Ü—é—é –≤ IT.\n- –ê —â–æ —Ä–æ–±–∏—à?\n- –ë–æ—Ä—â –¥–æ—Å—Ç–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫! üòÇ",
                "üòÇ –£—á–∏—Ç–µ–ª—å –∑–∞–ø–∏—Ç—É—î:\n- –ü–µ—Ç—Ä–∏–∫—É, —Å–∫—ñ–ª—å–∫–∏ –±—É–¥–µ 2+2?\n- –ê –≤–∏ –ø—Ä–æ —â–æ? –ü—Ä–æ –≥—Ä–∏–≤–Ω—ñ —á–∏ –ø—Ä–æ –¥–æ–ª–∞—Ä–∏? üß†",
                "üî• –ü–æ–∫—É–ø–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ö–ª—ñ–±?\n- 20 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 15!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ —ñ –Ω–µ –∫—É–ø–∏–ª–∏! üòÇ"
            ]
            
            for joke_text in sample_jokes:
                joke = Content(
                    content_type=ContentType.JOKE,
                    text=joke_text,
                    author_id=settings.ADMIN_ID if SETTINGS_LOADED else 1,
                    status=ContentStatus.APPROVED,
                    created_at=datetime.utcnow(),
                    moderated_at=datetime.utcnow(),
                    moderator_id=settings.ADMIN_ID if SETTINGS_LOADED else 1
                )
                session.add(joke)
            
            session.commit()
            logger.info(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(sample_jokes)} –∑—Ä–∞–∑–∫—ñ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö: {e}")

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'init_db',
    'get_db_session',
    'check_if_migration_needed',
    'migrate_database', 
    'verify_database_integrity',
    'get_or_create_user',
    'get_user_by_id',
    'update_user_points',
    'get_rank_by_points',
    'add_content_for_moderation',
    'get_pending_content',
    'moderate_content',
    'get_random_approved_content',
    'ensure_admin_exists',
    'add_initial_data'
]

# –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–æ–¥—É–ª—è
logger.info(f"üì¶ Database –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:")
logger.info(f"  - Settings: {'‚úÖ' if SETTINGS_LOADED else '‚ùå'}")
logger.info(f"  - Models: {'‚úÖ' if MODELS_LOADED else '‚ùå'}")
logger.info(f"  - Engine: {'‚úÖ' if ENGINE_CREATED else '‚ùå'}")
logger.info(f"  - –§—É–Ω–∫—Ü—ñ–π –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ: {len(__all__)}")