#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ†Ô∏è –£–¢–ò–õ–Ü–¢–ò –¢–ê –ü–û–ú–Ü–ß–ù–ò–ö–ò –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê üõ†Ô∏è

–ö–æ–ª–µ–∫—Ü—ñ—è –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –≤—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É:
‚úÖ –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ç–∞ —á–∞—Å—É
‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
‚úÖ –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏ —Ç–∞ –º–µ–¥—ñ–∞
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
‚úÖ –ë–µ–∑–ø–µ–∫–∞ —Ç–∞ –∞–Ω—Ç–∏-—Å–ø–∞–º
‚úÖ –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
"""

import re
import json
import logging
import asyncio
import hashlib
from datetime import datetime, timedelta
from typing import Optional, List, Dict, Any, Union, Tuple
from pathlib import Path
import random
import string

logger = logging.getLogger(__name__)

# ===== –ö–û–ù–°–¢–ê–ù–¢–ò =====

# –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
UKRAINIAN_ALPHABET = "–∞–±–≤–≥“ë–¥–µ—î–∂–∑–∏—ñ—ó–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—é—è"
UKRAINIAN_PATTERN = re.compile(f"[{UKRAINIAN_ALPHABET}{UKRAINIAN_ALPHABET.upper()}\\s\\d.,!?;:()\\-\"'‚Äî]+")

# Emoji –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ü—ñ–ª–µ–π
EMOJI_SETS = {
    'positive': ['üòÇ', 'ü§£', 'üòÑ', 'üòä', 'üòÅ', 'üôÇ', 'ü§≠', 'üòÉ', 'üòÜ', 'ü§©'],
    'fire': ['üî•', 'üíØ', '‚ö°', 'üöÄ', 'üåü', 'üí•', '‚ú®', 'üéØ', 'üí´'],
    'hearts': ['‚ù§Ô∏è', 'üíô', 'üíö', 'üíõ', 'üß°', 'üíú', 'üñ§', 'ü§ç', 'üíñ'],
    'hands': ['üëç', 'üëé', 'üëå', 'ü§ù', 'üôå', 'üëè', 'üí™', 'ü§ò', '‚úåÔ∏è'],
    'faces': ['üòé', 'ü§ì', 'üßê', 'ü§î', 'üòè', 'üòå', 'ü§ó', 'ü§Ø', 'ü§™']
}

# –ß–∞—Å–æ–≤—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
SECONDS_IN_MINUTE = 60
SECONDS_IN_HOUR = 3600
SECONDS_IN_DAY = 86400
SECONDS_IN_WEEK = 604800

# ===== –§–û–†–ú–ê–¢–£–í–ê–ù–ù–Ø –¢–ï–ö–°–¢–£ =====

def format_number(number: Union[int, float], locale: str = "uk") -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ª–æ–∫–∞–ª—é
    
    Args:
        number: –ß–∏—Å–ª–æ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        locale: –õ–æ–∫–∞–ª—å (uk, en)
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —á–∏—Å–ª–æ
    """
    if locale == "uk":
        # –£–∫—Ä–∞—ó–Ω—Å—å–∫–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (–ø—Ä–æ–±—ñ–ª–∏ —è–∫ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∏ —Ç–∏—Å—è—á)
        if isinstance(number, float):
            return f"{number:,.2f}".replace(",", " ").replace(".", ",")
        else:
            return f"{number:,}".replace(",", " ")
    else:
        # –ê–Ω–≥–ª—ñ–π—Å—å–∫–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        return f"{number:,}"

def format_duration(seconds: int, short: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —á–∞—Å—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    
    Args:
        seconds: –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥
        short: –ö–æ—Ä–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞ (1–≥ 30—Ö–≤ –∑–∞–º—ñ—Å—Ç—å 1 –≥–æ–¥–∏–Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω)
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
    """
    if seconds < 60:
        return f"{seconds} —Å–µ–∫" if short else f"{seconds} —Å–µ–∫—É–Ω–¥"
    
    minutes = seconds // 60
    remaining_seconds = seconds % 60
    
    if minutes < 60:
        if short:
            return f"{minutes}—Ö–≤" + (f" {remaining_seconds}—Å" if remaining_seconds > 0 else "")
        else:
            return f"{minutes} —Ö–≤–∏–ª–∏–Ω" + (f" {remaining_seconds} —Å–µ–∫—É–Ω–¥" if remaining_seconds > 0 else "")
    
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    if hours < 24:
        if short:
            result = f"{hours}–≥"
            if remaining_minutes > 0:
                result += f" {remaining_minutes}—Ö–≤"
            return result
        else:
            result = f"{hours} –≥–æ–¥–∏–Ω"
            if remaining_minutes > 0:
                result += f" {remaining_minutes} —Ö–≤–∏–ª–∏–Ω"
            return result
    
    days = hours // 24
    remaining_hours = hours % 24
    
    if short:
        result = f"{days}–¥"
        if remaining_hours > 0:
            result += f" {remaining_hours}–≥"
        return result
    else:
        result = f"{days} –¥–Ω—ñ–≤"
        if remaining_hours > 0:
            result += f" {remaining_hours} –≥–æ–¥–∏–Ω"
        return result

def format_datetime(dt: datetime, format_type: str = "full") -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
    
    Args:
        dt: –û–±'—î–∫—Ç datetime
        format_type: –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (full, short, date, time)
    
    Returns:
        –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –¥–∞—Ç–∞/—á–∞—Å
    """
    months_uk = {
        1: "—Å—ñ—á–Ω—è", 2: "–ª—é—Ç–æ–≥–æ", 3: "–±–µ—Ä–µ–∑–Ω—è", 4: "–∫–≤—ñ—Ç–Ω—è",
        5: "—Ç—Ä–∞–≤–Ω—è", 6: "—á–µ—Ä–≤–Ω—è", 7: "–ª–∏–ø–Ω—è", 8: "—Å–µ—Ä–ø–Ω—è",
        9: "–≤–µ—Ä–µ—Å–Ω—è", 10: "–∂–æ–≤—Ç–Ω—è", 11: "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", 12: "–≥—Ä—É–¥–Ω—è"
    }
    
    if format_type == "date":
        return f"{dt.day} {months_uk[dt.month]} {dt.year}"
    elif format_type == "time":
        return f"{dt.hour:02d}:{dt.minute:02d}"
    elif format_type == "short":
        return f"{dt.day}.{dt.month:02d}.{dt.year} {dt.hour:02d}:{dt.minute:02d}"
    else:  # full
        return f"{dt.day} {months_uk[dt.month]} {dt.year} –æ {dt.hour:02d}:{dt.minute:02d}"

def format_time_ago(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —É —Å—Ç–∏–ª—ñ "X —á–∞—Å—É —Ç–æ–º—É"
    
    Args:
        dt: –î–∞—Ç–∞/—á–∞—Å –ø–æ–¥—ñ—ó
    
    Returns:
        –†—è–¥–æ–∫ —Ç–∏–ø—É "2 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É"
    """
    now = datetime.now()
    if dt.tzinfo and not now.tzinfo:
        # –Ø–∫—â–æ dt –º–∞—î timezone, –∞ now –Ω—ñ - –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        now = now.replace(tzinfo=dt.tzinfo)
    elif not dt.tzinfo and now.tzinfo:
        # –ê–±–æ –Ω–∞–≤–ø–∞–∫–∏
        dt = dt.replace(tzinfo=now.tzinfo)
    
    diff = now - dt
    seconds = int(diff.total_seconds())
    
    if seconds < 60:
        return "—â–æ–π–Ω–æ"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} —Ö–≤ —Ç–æ–º—É"
    elif seconds < 86400:
        hours = seconds // 3600
        return f"{hours} –≥–æ–¥ —Ç–æ–º—É"
    elif seconds < 604800:
        days = seconds // 86400
        return f"{days} –¥–Ω —Ç–æ–º—É"
    else:
        weeks = seconds // 604800
        return f"{weeks} —Ç–∏–∂ —Ç–æ–º—É"

def truncate_text(text: str, max_length: int = 100, suffix: str = "...") -> str:
    """
    –û–±—Ä—ñ–∑–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è–º —Å—É—Ñ—ñ–∫—Å—É
    
    Args:
        text: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
        suffix: –°—É—Ñ—ñ–∫—Å –¥–ª—è –æ–±—Ä—ñ–∑–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
    
    Returns:
        –û–±—Ä—ñ–∑–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    if len(text) <= max_length:
        return text
    
    return text[:max_length - len(suffix)] + suffix

def clean_text(text: str) -> str:
    """
    –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    
    Args:
        text: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    
    Returns:
        –û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    text = re.sub(r'\s+', ' ', text.strip())
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è HTML —Ç–µ–≥—ñ–≤
    text = re.sub(r'<[^>]+>', '', text)
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ (–æ–∫—Ä—ñ–º –±–∞–∑–æ–≤–∏—Ö)
    text = re.sub(r'[^\w\s\.,!?\-\'\"():]', '', text)
    
    return text.strip()

# ===== –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–• =====

def is_valid_ukrainian_text(text: str, min_length: int = 1) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–µ–∫—Å—Ç –º—ñ—Å—Ç–∏—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        min_length: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
    
    Returns:
        True —è–∫—â–æ —Ç–µ–∫—Å—Ç –≤–∞–ª—ñ–¥–Ω–∏–π
    """
    if len(text) < min_length:
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä
    ukrainian_letters = sum(1 for char in text.lower() if char in UKRAINIAN_ALPHABET)
    total_letters = sum(1 for char in text if char.isalpha())
    
    if total_letters == 0:
        return False
    
    # –ú—ñ–Ω—ñ–º—É–º 30% —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –ª—ñ—Ç–µ—Ä
    return (ukrainian_letters / total_letters) >= 0.3

def is_valid_content_length(text: str, min_length: int = 10, max_length: int = 2000) -> Tuple[bool, str]:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        min_length: –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
    
    Returns:
        Tuple (–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É)
    """
    length = len(text.strip())
    
    if length < min_length:
        return False, f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º—ñ–Ω—ñ–º—É–º {min_length} —Å–∏–º–≤–æ–ª—ñ–≤)"
    
    if length > max_length:
        return False, f"–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π (–º–∞–∫—Å–∏–º—É–º {max_length} —Å–∏–º–≤–æ–ª—ñ–≤)"
    
    return True, ""

def contains_profanity(text: str) -> bool:
    """
    –ü—Ä–æ—Å—Ç–∏–π —Ñ—ñ–ª—å—Ç—Ä –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—ó –ª–µ–∫—Å–∏–∫–∏
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    Returns:
        True —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ñ —Å–ª–æ–≤–∞
    """
    # –ë–∞–∑–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª—ñ–≤ (–º–æ–∂–Ω–∞ —Ä–æ–∑—à–∏—Ä–∏—Ç–∏)
    profanity_words = [
        # –¢—É—Ç –±—É–¥—É—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
        # –î–ª—è –¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ patterns
    ]
    
    text_lower = text.lower()
    
    for word in profanity_words:
        if word in text_lower:
            return True
    
    return False

def is_spam_content(text: str, user_history: List[str] = None) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        user_history: –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Returns:
        True —è–∫—â–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–æ–∂–∏–π –Ω–∞ —Å–ø–∞–º
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —Å–∏–º–≤–æ–ª—ñ–≤
    if re.search(r'(.)\1{5,}', text):  # 6+ –æ–¥–Ω–∞–∫–æ–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ –ø—ñ–¥—Ä—è–¥
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä
    upper_count = sum(1 for char in text if char.isupper())
    if len(text) > 10 and (upper_count / len(text)) > 0.7:
        return True
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    if user_history:
        for prev_text in user_history[-5:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            if text.lower() == prev_text.lower():
                return True
    
    return False

# ===== –°–¢–ê–¢–ò–°–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á =====

def calculate_engagement_rate(views: int, likes: int, dislikes: int = 0, comments: int = 0) -> float:
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä—ñ–≤–Ω—è –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ
    
    Args:
        views: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
        likes: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
        dislikes: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∏–∑–ª–∞–π–∫—ñ–≤
        comments: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
    
    Returns:
        –í—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–ª—É—á–µ–Ω–æ—Å—Ç—ñ
    """
    if views == 0:
        return 0.0
    
    total_interactions = likes + dislikes + comments
    return (total_interactions / views) * 100

def calculate_content_score(likes: int, dislikes: int, views: int, 
                          days_since_posted: int = 1) -> float:
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Args:
        likes: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª–∞–π–∫—ñ–≤
        dislikes: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–∏–∑–ª–∞–π–∫—ñ–≤
        views: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
        days_since_posted: –î–Ω—ñ–≤ –∑ –º–æ–º–µ–Ω—Ç—É –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó
    
    Returns:
        –†–µ–π—Ç–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç—É (0-100)
    """
    if views == 0:
        return 0.0
    
    # –ë–∞–∑–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª–∞–π–∫—ñ–≤/–¥–∏–∑–ª–∞–π–∫—ñ–≤
    like_ratio = likes / (likes + dislikes + 1)  # +1 —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ 0
    
    # –†–µ–π—Ç–∏–Ω–≥ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
    view_score = min(views / 100, 1.0)  # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ 1.0
    
    # –®—Ç—Ä–∞—Ñ –∑–∞ —á–∞—Å (—Å—Ç–∞—Ä—ñ –ø–æ—Å—Ç–∏ –º–∞—é—Ç—å –º–µ–Ω—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥)
    time_penalty = max(0.1, 1.0 - (days_since_posted * 0.1))
    
    # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    score = (like_ratio * 0.5 + view_score * 0.3) * time_penalty * 100
    
    return min(score, 100.0)

def get_trending_score(content_data: Dict[str, Any]) -> float:
    """
    –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ç—Ä–µ–Ω–¥–æ–≤–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Args:
        content_data: –î–∞–Ω—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    
    Returns:
        –¢—Ä–µ–Ω–¥–æ–≤–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    """
    likes = content_data.get('likes', 0)
    views = content_data.get('views', 0)
    shares = content_data.get('shares', 0)
    created_at = content_data.get('created_at', datetime.now())
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –∑ –º–æ–º–µ–Ω—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    hours_since_posted = (datetime.now() - created_at).total_seconds() / 3600
    
    # –†–µ–π—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    activity_score = (likes * 2 + shares * 3) / max(views, 1)
    
    # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å–≤—ñ–∂–æ—Å—Ç—ñ (–Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–∞—î –ø–µ—Ä–µ–≤–∞–≥—É)
    freshness = max(0.1, 1.0 - (hours_since_posted / 24))
    
    return activity_score * freshness * 100

# ===== –ë–ï–ó–ü–ï–ö–ê –¢–ê –ê–ù–¢–ò-–°–ü–ê–ú =====

def generate_content_hash(text: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ö–µ—à—É –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É (–¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
    
    Args:
        text: –¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É
    
    Returns:
        MD5 —Ö–µ—à —Ç–µ–∫—Å—Ç—É
    """
    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –ø–µ—Ä–µ–¥ —Ö–µ—à—É–≤–∞–Ω–Ω—è–º
    normalized = clean_text(text.lower())
    return hashlib.md5(normalized.encode('utf-8')).hexdigest()

def is_rate_limited(user_id: int, action: str, limit: int, window_seconds: int, 
                   storage: Dict[str, List] = None) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ rate limiting –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        action: –¢–∏–ø –¥—ñ—ó
        limit: –õ—ñ–º—ñ—Ç –¥—ñ–π
        window_seconds: –ß–∞—Å–æ–≤–µ –≤—ñ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        storage: –ó–æ–≤–Ω—ñ—à–Ω—î —Å—Ö–æ–≤–∏—â–µ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    
    Returns:
        True —è–∫—â–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç
    """
    if storage is None:
        storage = {}
    
    key = f"{user_id}_{action}"
    now = datetime.now()
    
    if key not in storage:
        storage[key] = []
    
    # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
    cutoff_time = now - timedelta(seconds=window_seconds)
    storage[key] = [timestamp for timestamp in storage[key] if timestamp > cutoff_time]
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    if len(storage[key]) >= limit:
        return True
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
    storage[key].append(now)
    return False

def sanitize_user_input(text: str) -> str:
    """
    –°–∞–Ω—ñ—Ç–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –≤–≤–æ–¥—É
    
    Args:
        text: –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
    
    Returns:
        –ë–µ–∑–ø–µ—á–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    text = re.sub(r'[<>{}]', '', text)
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    text = text[:2000]
    
    # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥ –∑–∞–π–≤–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤
    text = re.sub(r'\s+', ' ', text.strip())
    
    return text

# ===== –†–û–ë–û–¢–ê –ó –§–ê–ô–õ–ê–ú–ò =====

def ensure_directory_exists(path: Union[str, Path]) -> Path:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
    
    Args:
        path: –®–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    
    Returns:
        Path –æ–±'—î–∫—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
    """
    path_obj = Path(path)
    path_obj.mkdir(parents=True, exist_ok=True)
    return path_obj

def get_file_size_mb(file_path: Union[str, Path]) -> float:
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É –≤ –ú–ë
    
    Args:
        file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    
    Returns:
        –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ –ú–ë
    """
    try:
        size_bytes = Path(file_path).stat().st_size
        return size_bytes / (1024 * 1024)
    except FileNotFoundError:
        return 0.0

def save_json_data(data: Any, file_path: Union[str, Path], indent: int = 2) -> bool:
    """
    –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É JSON —Ñ–∞–π–ª
    
    Args:
        data: –î–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
        indent: –í—ñ–¥—Å—Ç—É–ø–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    
    Returns:
        True —è–∫—â–æ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ
    """
    try:
        ensure_directory_exists(Path(file_path).parent)
        
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=indent, default=str)
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving JSON: {e}")
        return False

def load_json_data(file_path: Union[str, Path], default: Any = None) -> Any:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ JSON —Ñ–∞–π–ª—É
    
    Args:
        file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
        default: –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    Returns:
        –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ default
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning(f"‚ö†Ô∏è JSON file not found: {file_path}")
        return default
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON decode error: {e}")
        return default

# ===== –ì–ï–ù–ï–†–ê–¶–Ü–Ø –í–ò–ü–ê–î–ö–û–í–ò–• –î–ê–ù–ò–• =====

def generate_random_emoji(category: str = 'positive') -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ emoji –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    
    Args:
        category: –ö–∞—Ç–µ–≥–æ—Ä—ñ—è emoji
    
    Returns:
        –í–∏–ø–∞–¥–∫–æ–≤–∏–π emoji
    """
    emojis = EMOJI_SETS.get(category, EMOJI_SETS['positive'])
    return random.choice(emojis)

def generate_random_string(length: int = 8, include_digits: bool = True) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    
    Args:
        length: –î–æ–≤–∂–∏–Ω–∞ —Ä—è–¥–∫–∞
        include_digits: –í–∫–ª—é—á–∞—Ç–∏ —Ü–∏—Ñ—Ä–∏
    
    Returns:
        –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
    """
    chars = string.ascii_letters
    if include_digits:
        chars += string.digits
    
    return ''.join(random.choice(chars) for _ in range(length))

def get_random_greeting() -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é"""
    greetings = [
        "–í—ñ—Ç–∞—é!", "–î–æ–±—Ä–∏–π –¥–µ–Ω—å!", "–ü—Ä–∏–≤—ñ—Ç!", "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!",
        "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!", "–î–æ–±—Ä–∏–¥–µ–Ω—å!", "–í—ñ—Ç–∞–Ω–Ω—è!", "–ó–¥–æ—Ä–æ–≤–µ–Ω—å–∫—ñ –±—É–ª–∏!"
    ]
    return random.choice(greetings)

def get_random_success_message() -> str:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö"""
    messages = [
        "–ß—É–¥–æ–≤–æ!", "–í—ñ–¥–º—ñ–Ω–Ω–æ!", "–°—É–ø–µ—Ä!", "–ö–ª–∞—Å–Ω–æ!",
        "–î—É–∂–µ –¥–æ–±—Ä–µ!", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!", "–ú–æ–ª–æ–¥–µ—Ü—å!", "–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏!"
    ]
    return random.choice(messages)

# ===== –õ–û–ì–£–í–ê–ù–ù–Ø –¢–ê –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê =====

def log_user_action(user_id: int, action: str, details: Dict[str, Any] = None):
    """
    –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    Args:
        user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        action: –¢–∏–ø –¥—ñ—ó
        details: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
    """
    log_data = {
        'user_id': user_id,
        'action': action,
        'timestamp': datetime.now().isoformat(),
        'details': details or {}
    }
    
    logger.info(f"üë§ User action: {json.dumps(log_data, ensure_ascii=False)}")

def measure_execution_time(func_name: str):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
    
    Args:
        func_name: –ù–∞–∑–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """
    def decorator(func):
        async def async_wrapper(*args, **kwargs):
            start_time = datetime.now()
            try:
                result = await func(*args, **kwargs)
                duration = (datetime.now() - start_time).total_seconds()
                logger.debug(f"‚è±Ô∏è {func_name} executed in {duration:.3f}s")
                return result
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds()
                logger.error(f"‚ùå {func_name} failed after {duration:.3f}s: {e}")
                raise
        
        def sync_wrapper(*args, **kwargs):
            start_time = datetime.now()
            try:
                result = func(*args, **kwargs)
                duration = (datetime.now() - start_time).total_seconds()
                logger.debug(f"‚è±Ô∏è {func_name} executed in {duration:.3f}s")
                return result
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds()
                logger.error(f"‚ùå {func_name} failed after {duration:.3f}s: {e}")
                raise
        
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    
    return decorator

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    'format_number', 'format_duration', 'format_datetime', 'format_time_ago',
    'truncate_text', 'clean_text',
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    'is_valid_ukrainian_text', 'is_valid_content_length', 'contains_profanity',
    'is_spam_content',
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    'calculate_engagement_rate', 'calculate_content_score', 'get_trending_score',
    
    # –ë–µ–∑–ø–µ–∫–∞
    'generate_content_hash', 'is_rate_limited', 'sanitize_user_input',
    
    # –§–∞–π–ª–∏
    'ensure_directory_exists', 'get_file_size_mb', 'save_json_data', 'load_json_data',
    
    # –í–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ
    'generate_random_emoji', 'generate_random_string', 'get_random_greeting',
    'get_random_success_message',
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    'log_user_action', 'measure_execution_time',
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
    'EMOJI_SETS', 'UKRAINIAN_ALPHABET'
]

logger.info(f"üõ†Ô∏è Utils helpers –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(__all__)} —Ñ—É–Ω–∫—Ü—ñ–π")