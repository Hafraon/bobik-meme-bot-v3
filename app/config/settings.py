#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚öôÔ∏è –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê ‚öôÔ∏è

–í—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –≤ –æ–¥–Ω–æ–º—É –º—ñ—Å—Ü—ñ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:
‚úÖ Environment variables
‚úÖ Fallback –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
‚úÖ –†—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏ (development, production)
‚úÖ –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
"""

import os
import logging
from typing import Optional, List, Dict, Any
from pathlib import Path

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –†–ï–ñ–ò–ú –†–û–ë–û–¢–ò =====
ENVIRONMENT = os.getenv("ENVIRONMENT", "development")  # development, production, testing
DEBUG = os.getenv("DEBUG", "true").lower() in ("true", "1", "yes")

logger.info(f"üîß –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–ª—è —Ä–µ–∂–∏–º—É: {ENVIRONMENT}")

# ===== TELEGRAM BOT –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====

# –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
BOT_USERNAME = os.getenv("BOT_USERNAME", "BobikFun_bot")

# –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É)
ADMIN_ID = int(os.getenv("ADMIN_ID", "603047391"))
ADDITIONAL_ADMINS = os.getenv("ADDITIONAL_ADMINS", "").split(",") if os.getenv("ADDITIONAL_ADMINS") else []
ALL_ADMIN_IDS = [ADMIN_ID] + [int(aid.strip()) for aid in ADDITIONAL_ADMINS if aid.strip().isdigit()]

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook (–¥–ª—è production)
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", f"/webhook/{BOT_TOKEN}" if BOT_TOKEN else "/webhook")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "0.0.0.0")
WEBHOOK_PORT = int(os.getenv("PORT", os.getenv("WEBHOOK_PORT", "8000")))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è polling (–¥–ª—è development)
POLLING_TIMEOUT = int(os.getenv("POLLING_TIMEOUT", "30"))
POLLING_LIMIT = int(os.getenv("POLLING_LIMIT", "100"))

logger.info(f"ü§ñ Bot –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: Username={BOT_USERNAME}, Admins={len(ALL_ADMIN_IDS)}")

# ===== –ë–ê–ó–ê –î–ê–ù–ò–• =====

# PostgreSQL (–æ—Å–Ω–æ–≤–Ω–∞ –ë–î –¥–ª—è production)
DATABASE_URL = os.getenv("DATABASE_URL")

# SQLite (fallback –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏)
SQLITE_DB_PATH = os.getenv("SQLITE_DB_PATH", "data/bot.db")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è connection pool
DB_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "10"))
DB_MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "20"))
DB_POOL_RECYCLE = int(os.getenv("DB_POOL_RECYCLE", "3600"))
DB_ECHO = os.getenv("DB_ECHO", "false").lower() in ("true", "1", "yes")

# Timeout'–∏
DB_CONNECT_TIMEOUT = int(os.getenv("DB_CONNECT_TIMEOUT", "10"))
DB_QUERY_TIMEOUT = int(os.getenv("DB_QUERY_TIMEOUT", "30"))

logger.info(f"üíæ Database: {'PostgreSQL' if DATABASE_URL else 'SQLite fallback'}")

# ===== –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –¢–ê –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö =====

# –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
TIMEZONE = os.getenv("TIMEZONE", "Europe/Kiev")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å (–º–æ–∂–Ω–∞ –≤–∏–º–∫–Ω—É—Ç–∏ –æ–∫—Ä–µ–º—ñ –∑–∞–≤–¥–∞–Ω–Ω—è)
AUTOMATION_ENABLED = os.getenv("AUTOMATION_ENABLED", "true").lower() in ("true", "1", "yes")
MORNING_BROADCAST_ENABLED = os.getenv("MORNING_BROADCAST_ENABLED", "true").lower() in ("true", "1", "yes")
EVENING_STATS_ENABLED = os.getenv("EVENING_STATS_ENABLED", "true").lower() in ("true", "1", "yes")
WEEKLY_TOURNAMENT_ENABLED = os.getenv("WEEKLY_TOURNAMENT_ENABLED", "true").lower() in ("true", "1", "yes")
DAILY_CLEANUP_ENABLED = os.getenv("DAILY_CLEANUP_ENABLED", "true").lower() in ("true", "1", "yes")
DUEL_CHECK_ENABLED = os.getenv("DUEL_CHECK_ENABLED", "true").lower() in ("true", "1", "yes")

# –†–æ–∑–∫–ª–∞–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å
MORNING_BROADCAST_TIME = {"hour": int(os.getenv("MORNING_BROADCAST_HOUR", "9")), "minute": 0}
EVENING_STATS_TIME = {"hour": int(os.getenv("EVENING_STATS_HOUR", "20")), "minute": 0}
WEEKLY_TOURNAMENT_TIME = {"day_of_week": 4, "hour": 19, "minute": 0}  # –ü'—è—Ç–Ω–∏—Ü—è
DAILY_CLEANUP_TIME = {"hour": 3, "minute": 0}
WEEKLY_DIGEST_TIME = {"day_of_week": 6, "hour": 18, "minute": 0}  # –ù–µ–¥—ñ–ª—è
MONTHLY_SUMMARY_TIME = {"day": 1, "hour": 12, "minute": 0}

# –Ü–Ω—Ç–µ—Ä–≤–∞–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ (—Ö–≤–∏–ª–∏–Ω–∏)
DUEL_CHECK_INTERVAL = int(os.getenv("DUEL_CHECK_INTERVAL", "1"))
DUEL_REMINDER_INTERVAL = int(os.getenv("DUEL_REMINDER_INTERVAL", "15"))
ACHIEVEMENT_CHECK_INTERVAL = int(os.getenv("ACHIEVEMENT_CHECK_INTERVAL", "30"))

logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if AUTOMATION_ENABLED else '–í–∏–º–∫–Ω–µ–Ω–∞'}")

# ===== –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø –¢–ê –ë–ê–õ–ò =====

# –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤
POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "5"))      # –ó–∞ –ø–æ–¥–∞—á—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
POINTS_FOR_APPROVAL = int(os.getenv("POINTS_FOR_APPROVAL", "15"))         # –ó–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
POINTS_FOR_LIKE = int(os.getenv("POINTS_FOR_LIKE", "1"))                  # –ó–∞ –ª–∞–π–∫
POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "20"))         # –ó–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ
POINTS_FOR_DUEL_PARTICIPATION = int(os.getenv("POINTS_FOR_DUEL_PARTICIPATION", "2"))  # –ó–∞ —É—á–∞—Å—Ç—å
POINTS_FOR_VOTE = int(os.getenv("POINTS_FOR_VOTE", "1"))                  # –ó–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
POINTS_FOR_COMMENT = int(os.getenv("POINTS_FOR_COMMENT", "1"))            # –ó–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä
POINTS_FOR_DAILY_STREAK = int(os.getenv("POINTS_FOR_DAILY_STREAK", "5"))  # –ó–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å

# –®—Ç—Ä–∞—Ñ–Ω—ñ –±–∞–ª–∏
POINTS_PENALTY_REJECTION = int(os.getenv("POINTS_PENALTY_REJECTION", "-2"))  # –ó–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
POINTS_PENALTY_SPAM = int(os.getenv("POINTS_PENALTY_SPAM", "-10"))           # –ó–∞ —Å–ø–∞–º
POINTS_PENALTY_INAPPROPRIATE = int(os.getenv("POINTS_PENALTY_INAPPROPRIATE", "-5"))  # –ó–∞ –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç

# –†–∞–Ω–≥–∏ —Ç–∞ —ó—Ö –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –±–∞–ª–∏
RANK_REQUIREMENTS = {
    "ü§° –ù–æ–≤–∞—á–æ–∫": 0,
    "üòÑ –°–º—ñ—Ö—É–Ω": int(os.getenv("RANK_JOKER_POINTS", "100")),
    "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç": int(os.getenv("RANK_COMEDIAN_POINTS", "250")),
    "üé≠ –ö–æ–º—ñ–∫": int(os.getenv("RANK_HUMORIST_POINTS", "500")),
    "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É": int(os.getenv("RANK_MASTER_POINTS", "1000")),
    "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É": int(os.getenv("RANK_EXPERT_POINTS", "2500")),
    "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤": int(os.getenv("RANK_VIRTUOSO_POINTS", "5000")),
    "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π": int(os.getenv("RANK_LEGEND_POINTS", "10000"))
}

logger.info(f"üéÆ –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è: {len(RANK_REQUIREMENTS)} —Ä–∞–Ω–≥—ñ–≤, {POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è")

# ===== –ö–û–ù–¢–ï–ù–¢ –¢–ê –ú–û–î–ï–†–ê–¶–Ü–Ø =====

# –¢–∏–ø–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
CONTENT_TYPES = ["joke", "meme", "anekdot"]
CONTENT_STATUSES = ["pending", "approved", "rejected"]

# –õ—ñ–º—ñ—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
MAX_CONTENT_LENGTH = int(os.getenv("MAX_CONTENT_LENGTH", "2000"))         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Ç–µ–∫—Å—Ç—É
MAX_SUBMISSIONS_PER_DAY = int(os.getenv("MAX_SUBMISSIONS_PER_DAY", "10")) # –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–∞—á –Ω–∞ –¥–µ–Ω—å
MAX_PENDING_CONTENT = int(os.getenv("MAX_PENDING_CONTENT", "100"))        # –ú–∞–∫—Å–∏–º—É–º –≤ —á–µ—Ä–∑—ñ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó

# –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü—ñ—è
AUTO_MODERATION_ENABLED = os.getenv("AUTO_MODERATION_ENABLED", "false").lower() in ("true", "1", "yes")
AUTO_REJECT_PROFANITY = os.getenv("AUTO_REJECT_PROFANITY", "true").lower() in ("true", "1", "yes")
AUTO_REJECT_SPAM = os.getenv("AUTO_REJECT_SPAM", "true").lower() in ("true", "1", "yes")

# –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó (–≥–æ–¥–∏–Ω–∏)
MODERATION_TIMEOUT_HOURS = int(os.getenv("MODERATION_TIMEOUT_HOURS", "24"))

logger.info(f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç: {len(CONTENT_TYPES)} —Ç–∏–ø—ñ–≤, –º–∞–∫—Å {MAX_SUBMISSIONS_PER_DAY} –ø–æ–¥–∞—á/–¥–µ–Ω—å")

# ===== –î–£–ï–õ–Ü –¢–ê –ó–ú–ê–ì–ê–ù–ù–Ø =====

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥—É–µ–ª–µ–π
DUEL_ENABLED = os.getenv("DUEL_ENABLED", "true").lower() in ("true", "1", "yes")
DUEL_DURATION_HOURS = int(os.getenv("DUEL_DURATION_HOURS", "24"))         # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥—É–µ–ª—ñ
DUEL_MIN_VOTES = int(os.getenv("DUEL_MIN_VOTES", "5"))                    # –ú—ñ–Ω—ñ–º—É–º –≥–æ–ª–æ—Å—ñ–≤ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—è
DUEL_MAX_PARTICIPANTS = int(os.getenv("DUEL_MAX_PARTICIPANTS", "100"))    # –ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å–Ω–∏–∫—ñ–≤ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è

# –¢—É—Ä–Ω—ñ—Ä–∏
TOURNAMENT_ENABLED = os.getenv("TOURNAMENT_ENABLED", "true").lower() in ("true", "1", "yes")
TOURNAMENT_MIN_PARTICIPANTS = int(os.getenv("TOURNAMENT_MIN_PARTICIPANTS", "4"))
TOURNAMENT_DURATION_DAYS = int(os.getenv("TOURNAMENT_DURATION_DAYS", "7"))

# –®–≤–∏–¥–∫—ñ –¥—É–µ–ª—ñ
QUICK_DUEL_ENABLED = os.getenv("QUICK_DUEL_ENABLED", "true").lower() in ("true", "1", "yes")
QUICK_DUEL_DURATION_MINUTES = int(os.getenv("QUICK_DUEL_DURATION_MINUTES", "30"))

logger.info(f"‚öîÔ∏è –î—É–µ–ª—ñ: {'–ê–∫—Ç–∏–≤–Ω—ñ' if DUEL_ENABLED else '–í–∏–º–∫–Ω–µ–Ω—ñ'}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å {DUEL_DURATION_HOURS}–≥")

# ===== –†–û–ó–°–ò–õ–ö–ò –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø =====

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–æ–∫
BROADCAST_ENABLED = os.getenv("BROADCAST_ENABLED", "true").lower() in ("true", "1", "yes")
BROADCAST_RATE_LIMIT = int(os.getenv("BROADCAST_RATE_LIMIT", "30"))       # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å–µ–∫—É–Ω–¥—É
BROADCAST_CHUNK_SIZE = int(os.getenv("BROADCAST_CHUNK_SIZE", "100"))       # –†–æ–∑–º—ñ—Ä –±–∞—Ç—á—É

# –¢–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
DAILY_DIGEST_ENABLED = os.getenv("DAILY_DIGEST_ENABLED", "true").lower() in ("true", "1", "yes")
WEEKLY_DIGEST_ENABLED = os.getenv("WEEKLY_DIGEST_ENABLED", "true").lower() in ("true", "1", "yes")
ACHIEVEMENT_NOTIFICATIONS = os.getenv("ACHIEVEMENT_NOTIFICATIONS", "true").lower() in ("true", "1", "yes")
DUEL_NOTIFICATIONS = os.getenv("DUEL_NOTIFICATIONS", "true").lower() in ("true", "1", "yes")

# –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
WELCOME_MESSAGE_ENABLED = os.getenv("WELCOME_MESSAGE_ENABLED", "true").lower() in ("true", "1", "yes")

logger.info(f"üì¢ –†–æ–∑—Å–∏–ª–∫–∏: {'–ê–∫—Ç–∏–≤–Ω—ñ' if BROADCAST_ENABLED else '–í–∏–º–∫–Ω–µ–Ω—ñ'}, {BROADCAST_RATE_LIMIT} msg/sec")

# ===== –ë–ï–ó–ü–ï–ö–ê –¢–ê –ê–ù–¢–ò-–°–ü–ê–ú =====

# –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É
RATE_LIMITING_ENABLED = os.getenv("RATE_LIMITING_ENABLED", "true").lower() in ("true", "1", "yes")
MAX_MESSAGES_PER_MINUTE = int(os.getenv("MAX_MESSAGES_PER_MINUTE", "10"))  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
SPAM_DETECTION_ENABLED = os.getenv("SPAM_DETECTION_ENABLED", "true").lower() in ("true", "1", "yes")

# –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
WARNING_SYSTEM_ENABLED = os.getenv("WARNING_SYSTEM_ENABLED", "true").lower() in ("true", "1", "yes")
MAX_WARNINGS_BEFORE_BAN = int(os.getenv("MAX_WARNINGS_BEFORE_BAN", "3"))
AUTO_BAN_DURATION_HOURS = int(os.getenv("AUTO_BAN_DURATION_HOURS", "24"))

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
CONTENT_FILTER_ENABLED = os.getenv("CONTENT_FILTER_ENABLED", "true").lower() in ("true", "1", "yes")
PROFANITY_FILTER_ENABLED = os.getenv("PROFANITY_FILTER_ENABLED", "true").lower() in ("true", "1", "yes")

logger.info(f"üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞: Rate limiting {'ON' if RATE_LIMITING_ENABLED else 'OFF'}, {MAX_WARNINGS_BEFORE_BAN} –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –¥–æ –±–∞–Ω—É")

# ===== –ö–ï–®–£–í–ê–ù–ù–Ø –¢–ê –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨ =====

# Redis –∫–µ—à (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
REDIS_URL = os.getenv("REDIS_URL")
CACHE_ENABLED = bool(REDIS_URL) and os.getenv("CACHE_ENABLED", "true").lower() in ("true", "1", "yes")
CACHE_TTL_SECONDS = int(os.getenv("CACHE_TTL_SECONDS", "3600"))            # 1 –≥–æ–¥–∏–Ω–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

# In-memory –∫–µ—à (fallback)
MEMORY_CACHE_SIZE = int(os.getenv("MEMORY_CACHE_SIZE", "1000"))            # –ú–∞–∫—Å–∏–º—É–º –æ–±'—î–∫—Ç—ñ–≤ –≤ –∫–µ—à—ñ

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
ASYNC_WORKERS = int(os.getenv("ASYNC_WORKERS", "4"))                      # –ö—ñ–ª—å–∫—ñ—Å—Ç—å async worker'—ñ–≤
MAX_CONCURRENT_REQUESTS = int(os.getenv("MAX_CONCURRENT_REQUESTS", "100"))

logger.info(f"‚ö° –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {ASYNC_WORKERS} worker'—ñ–≤, –∫–µ—à {'Redis' if REDIS_URL else 'Memory'}")

# ===== –õ–û–ì–£–í–ê–ù–ù–Ø –¢–ê –ú–û–ù–Ü–¢–û–†–ò–ù–ì =====

# –†—ñ–≤–Ω—ñ –ª–æ–≥—É–≤–∞–Ω–Ω—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
LOG_FORMAT = os.getenv("LOG_FORMAT", "%(asctime)s - %(name)s - %(levelname)s - %(message)s")
LOG_FILE = os.getenv("LOG_FILE")  # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)

# Sentry –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ–º–∏–ª–æ–∫ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
SENTRY_DSN = os.getenv("SENTRY_DSN")
SENTRY_ENABLED = bool(SENTRY_DSN)

# –ú–µ—Ç—Ä–∏–∫–∏
METRICS_ENABLED = os.getenv("METRICS_ENABLED", "false").lower() in ("true", "1", "yes")
PROMETHEUS_PORT = int(os.getenv("PROMETHEUS_PORT", "9090"))

logger.info(f"üìä –õ–æ–≥—É–≤–∞–Ω–Ω—è: {LOG_LEVEL}, Sentry {'ON' if SENTRY_ENABLED else 'OFF'}")

# ===== –§–ê–ô–õ–ò –¢–ê –ú–ï–î–Ü–ê =====

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_DIR = Path(os.getenv("DATA_DIR", "data"))
MEDIA_DIR = DATA_DIR / "media"
BACKUP_DIR = DATA_DIR / "backups"
LOGS_DIR = DATA_DIR / "logs"

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
for directory in [DATA_DIR, MEDIA_DIR, BACKUP_DIR, LOGS_DIR]:
    directory.mkdir(parents=True, exist_ok=True)

# –õ—ñ–º—ñ—Ç–∏ —Ñ–∞–π–ª—ñ–≤
MAX_FILE_SIZE_MB = int(os.getenv("MAX_FILE_SIZE_MB", "20"))               # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
ALLOWED_MEDIA_TYPES = os.getenv("ALLOWED_MEDIA_TYPES", "photo,video,document").split(",")

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤
AUTO_CLEANUP_ENABLED = os.getenv("AUTO_CLEANUP_ENABLED", "true").lower() in ("true", "1", "yes")
CLEANUP_OLDER_THAN_DAYS = int(os.getenv("CLEANUP_OLDER_THAN_DAYS", "30"))

logger.info(f"üìÅ –§–∞–π–ª–∏: {DATA_DIR}, –º–∞–∫—Å {MAX_FILE_SIZE_MB}MB, –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ {CLEANUP_OLDER_THAN_DAYS} –¥–Ω—ñ–≤")

# ===== –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –¢–ê API =====

# –ó–æ–≤–Ω—ñ—à–Ω—ñ API (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")                             # –î–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∂–∞—Ä—Ç—ñ–≤
TRANSLATION_API_KEY = os.getenv("TRANSLATION_API_KEY")                   # –î–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É
ANALYTICS_API_KEY = os.getenv("ANALYTICS_API_KEY")                       # –î–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏

# Webhook —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
DISCORD_WEBHOOK_URL = os.getenv("DISCORD_WEBHOOK_URL")                   # –î–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ Discord
SLACK_WEBHOOK_URL = os.getenv("SLACK_WEBHOOK_URL")                       # –î–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –≤ Slack

logger.info(f"üîó –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó: OpenAI {'ON' if OPENAI_API_KEY else 'OFF'}, Discord {'ON' if DISCORD_WEBHOOK_URL else 'OFF'}")

# ===== –í–ê–õ–Ü–î–ê–¶–Ü–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á =====

def validate_config() -> List[str]:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    errors = []
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    if not BOT_TOKEN:
        errors.append("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
    
    if not DATABASE_URL and ENVIRONMENT == "production":
        errors.append("‚ö†Ô∏è DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è production!")
    
    if ADMIN_ID <= 0:
        errors.append("‚ùå ADMIN_ID –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º Telegram User ID!")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤ –∑–Ω–∞—á–µ–Ω—å
    if not (1 <= DUEL_DURATION_HOURS <= 168):  # 1 –≥–æ–¥–∏–Ω–∞ - 1 —Ç–∏–∂–¥–µ–Ω—å
        errors.append(f"‚ö†Ô∏è DUEL_DURATION_HOURS ({DUEL_DURATION_HOURS}) –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º (1-168)")
    
    if not (1 <= BROADCAST_RATE_LIMIT <= 100):
        errors.append(f"‚ö†Ô∏è BROADCAST_RATE_LIMIT ({BROADCAST_RATE_LIMIT}) –ø–æ–∑–∞ –¥–æ–ø—É—Å—Ç–∏–º–∏–º –¥—ñ–∞–ø–∞–∑–æ–Ω–æ–º (1-100)")
    
    return errors

# ===== –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –î–õ–Ø –†–Ü–ó–ù–ò–• –†–ï–ñ–ò–ú–Ü–í =====

if ENVIRONMENT == "development":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
    DB_ECHO = True  # –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ SQL –∑–∞–ø–∏—Ç–∏
    CACHE_TTL_SECONDS = 60  # –ö–æ—Ä–æ—Ç–∫–∏–π —á–∞—Å –∫–µ—à—É–≤–∞–Ω–Ω—è
    MAX_SUBMISSIONS_PER_DAY = 100  # –ë—ñ–ª—å—à–µ –ø–æ–¥–∞—á –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    
elif ENVIRONMENT == "production":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è production
    DB_ECHO = False  # –ù–µ –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ SQL –∑–∞–ø–∏—Ç–∏
    RATE_LIMITING_ENABLED = True  # –°—Ç—Ä–æ–≥–∏–π rate limiting
    AUTO_CLEANUP_ENABLED = True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞
    
elif ENVIRONMENT == "testing":
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    AUTOMATION_ENABLED = False  # –í–∏–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
    BROADCAST_ENABLED = False   # –í–∏–º–∫–Ω—É—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫–∏
    MAX_SUBMISSIONS_PER_DAY = 1000  # –ù–µ–æ–±–º–µ–∂–µ–Ω—ñ –ø–æ–¥–∞—á—ñ –¥–ª—è —Ç–µ—Å—Ç—ñ–≤

# ===== –ï–ö–°–ü–û–†–¢ –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á =====

# –°–ª–æ–≤–Ω–∏–∫ –∑ —É—Å—ñ–º–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
CONFIG = {
    "environment": ENVIRONMENT,
    "debug": DEBUG,
    "bot": {
        "token": BOT_TOKEN,
        "username": BOT_USERNAME,
        "admin_ids": ALL_ADMIN_IDS,
        "webhook": {
            "url": WEBHOOK_URL,
            "path": WEBHOOK_PATH,
            "host": WEBHOOK_HOST,
            "port": WEBHOOK_PORT
        }
    },
    "database": {
        "url": DATABASE_URL,
        "pool_size": DB_POOL_SIZE,
        "echo": DB_ECHO
    },
    "automation": {
        "enabled": AUTOMATION_ENABLED,
        "timezone": TIMEZONE,
        "schedules": {
            "morning_broadcast": MORNING_BROADCAST_TIME,
            "evening_stats": EVENING_STATS_TIME,
            "weekly_tournament": WEEKLY_TOURNAMENT_TIME
        }
    },
    "gamification": {
        "points": {
            "submission": POINTS_FOR_SUBMISSION,
            "approval": POINTS_FOR_APPROVAL,
            "duel_win": POINTS_FOR_DUEL_WIN
        },
        "ranks": RANK_REQUIREMENTS
    },
    "content": {
        "types": CONTENT_TYPES,
        "max_length": MAX_CONTENT_LENGTH,
        "max_per_day": MAX_SUBMISSIONS_PER_DAY
    },
    "duels": {
        "enabled": DUEL_ENABLED,
        "duration_hours": DUEL_DURATION_HOURS,
        "min_votes": DUEL_MIN_VOTES
    },
    "security": {
        "rate_limiting": RATE_LIMITING_ENABLED,
        "max_messages_per_minute": MAX_MESSAGES_PER_MINUTE,
        "max_warnings": MAX_WARNINGS_BEFORE_BAN
    }
}

# ===== –õ–û–ì–£–í–ê–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á =====

def log_config_summary():
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É"""
    logger.info("‚öôÔ∏è" + "="*50)
    logger.info("‚öôÔ∏è –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê")
    logger.info("‚öôÔ∏è" + "="*50)
    logger.info(f"üéØ –†–µ–∂–∏–º: {ENVIRONMENT.upper()}")
    logger.info(f"ü§ñ –ë–æ—Ç: @{BOT_USERNAME}")
    logger.info(f"üëë –ê–¥–º—ñ–Ω—ñ–≤: {len(ALL_ADMIN_IDS)}")
    logger.info(f"üíæ –ë–î: {'PostgreSQL' if DATABASE_URL else 'SQLite'}")
    logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'ON' if AUTOMATION_ENABLED else 'OFF'}")
    logger.info(f"‚öîÔ∏è –î—É–µ–ª—ñ: {'ON' if DUEL_ENABLED else 'OFF'}")
    logger.info(f"üì¢ –†–æ–∑—Å–∏–ª–∫–∏: {'ON' if BROADCAST_ENABLED else 'OFF'}")
    logger.info(f"üõ°Ô∏è –ë–µ–∑–ø–µ–∫–∞: {'ON' if RATE_LIMITING_ENABLED else 'OFF'}")
    logger.info(f"‚ö° –ö–µ—à: {'Redis' if REDIS_URL else 'Memory'}")
    logger.info("‚öôÔ∏è" + "="*50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    config_errors = validate_config()
    if config_errors:
        logger.error("üö® –ü–û–ú–ò–õ–ö–ò –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á:")
        for error in config_errors:
            logger.error(f"   {error}")
        logger.error("üö® –í–ò–ü–†–ê–í–¢–ï –ü–û–ú–ò–õ–ö–ò –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú!")
    else:
        logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞!")

# –í–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != "__main__":
    log_config_summary()

# ===== –§–£–ù–ö–¶–Ü–á –î–û–ü–û–ú–Ü–ñ–ù–ò–ö–Ü–í =====

def get_config(key_path: str, default: Any = None) -> Any:
    """
    –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –ø–æ —à–ª—è—Ö—É –∑ –∫—Ä–∞–ø–∫–∞–º–∏
    
    Args:
        key_path: –®–ª—è—Ö –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–ø—Ä. "bot.webhook.port"
        default: –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    
    Returns:
        –ó–Ω–∞—á–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ default
    """
    try:
        keys = key_path.split(".")
        value = CONFIG
        for key in keys:
            value = value[key]
        return value
    except (KeyError, TypeError):
        return default

def is_admin(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ALL_ADMIN_IDS

def get_points_for_action(action: str) -> int:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞ –¥—ñ—é"""
    points_map = {
        "submission": POINTS_FOR_SUBMISSION,
        "approval": POINTS_FOR_APPROVAL,
        "like": POINTS_FOR_LIKE,
        "duel_win": POINTS_FOR_DUEL_WIN,
        "duel_participation": POINTS_FOR_DUEL_PARTICIPATION,
        "vote": POINTS_FOR_VOTE,
        "comment": POINTS_FOR_COMMENT,
        "daily_streak": POINTS_FOR_DAILY_STREAK,
        "rejection": POINTS_PENALTY_REJECTION,
        "spam": POINTS_PENALTY_SPAM,
        "inappropriate": POINTS_PENALTY_INAPPROPRIATE
    }
    return points_map.get(action, 0)

def get_rank_for_points(points: int) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–∞–Ω–≥ –¥–ª—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –±–∞–ª—ñ–≤"""
    for rank, min_points in reversed(list(RANK_REQUIREMENTS.items())):
        if points >= min_points:
            return rank
    return "ü§° –ù–æ–≤–∞—á–æ–∫"

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    "ENVIRONMENT", "DEBUG", "BOT_TOKEN", "BOT_USERNAME", "ALL_ADMIN_IDS",
    
    # –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö
    "DATABASE_URL", "DB_POOL_SIZE", "DB_ECHO",
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è
    "AUTOMATION_ENABLED", "TIMEZONE", 
    "MORNING_BROADCAST_TIME", "EVENING_STATS_TIME", "WEEKLY_TOURNAMENT_TIME",
    
    # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
    "POINTS_FOR_SUBMISSION", "POINTS_FOR_APPROVAL", "POINTS_FOR_DUEL_WIN",
    "RANK_REQUIREMENTS",
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    "CONTENT_TYPES", "MAX_CONTENT_LENGTH", "MAX_SUBMISSIONS_PER_DAY",
    
    # –î—É–µ–ª—ñ
    "DUEL_ENABLED", "DUEL_DURATION_HOURS", "DUEL_MIN_VOTES",
    
    # –ë–µ–∑–ø–µ–∫–∞
    "RATE_LIMITING_ENABLED", "MAX_MESSAGES_PER_MINUTE", "MAX_WARNINGS_BEFORE_BAN",
    
    # –£—Ç–∏–ª—ñ—Ç–∏
    "CONFIG", "get_config", "is_admin", "get_points_for_action", "get_rank_for_points",
    "validate_config", "log_config_summary"
]

logger.info(f"‚öôÔ∏è Settings –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(__all__)} –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")