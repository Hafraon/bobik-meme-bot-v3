#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–¥–∞—á –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ üß†üòÇüî•
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from config.settings import EMOJI, settings, TIME_GREETINGS
from database.database import get_db_session, get_random_joke, get_random_meme, update_user_points
from database.models import User, Content, ContentStatus, Duel, DuelStatus

logger = logging.getLogger(__name__)

class SchedulerService:
    """–°–µ—Ä–≤—ñ—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler(timezone=settings.TIMEZONE)
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑ —É—Å—ñ–º–∞ –∑–∞–¥–∞—á–∞–º–∏"""
        try:
            # –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
            self.scheduler.add_job(
                self.daily_broadcast,
                CronTrigger(
                    hour=settings.DAILY_BROADCAST_HOUR,
                    minute=settings.DAILY_BROADCAST_MINUTE
                ),
                id='daily_broadcast',
                name='–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
                max_instances=1
            )
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)
            self.scheduler.add_job(
                self.finish_expired_duels,
                CronTrigger(minute='*/5'),
                id='finish_duels',
                name='–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π',
                max_instances=1
            )
            
            # –©–æ–¥–µ–Ω–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–æ 19:00)
            self.scheduler.add_job(
                self.inactive_users_reminder,
                CronTrigger(hour=19, minute=0),
                id='inactive_reminder',
                name='–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º',
                max_instances=1
            )
            
            # –¢–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ —Ç–æ–ø-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º (–Ω–µ–¥—ñ–ª—è –æ 20:00)
            self.scheduler.add_job(
                self.weekly_top_rewards,
                CronTrigger(day_of_week=6, hour=20, minute=0),  # –ù–µ–¥—ñ–ª—è
                id='weekly_rewards',
                name='–¢–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏',
                max_instances=1
            )
            
            self.scheduler.start()
            logger.info("üî• –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –∑ —É—Å—ñ–º–∞ –∑–∞–¥–∞—á–∞–º–∏!")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            raise
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
    
    async def daily_broadcast(self):
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º"""
        logger.info("üìÖ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏...")
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
            subscribers = await self.get_daily_subscribers()
            
            if not subscribers:
                logger.info("üì≠ –ù–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–Ω—è
            daily_joke = await get_random_joke()
            daily_meme = await get_random_meme()
            
            if not daily_joke and not daily_meme:
                logger.warning("üì≠ –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
            current_hour = datetime.now().hour
            if 6 <= current_hour < 12:
                greeting = f"{EMOJI['fire']} –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
                mood_text = "–ó–∞—Ä—è–¥–∂–∞–π—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!"
            elif 12 <= current_hour < 18:
                greeting = f"{EMOJI['laugh']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
                mood_text = "–ß–∞—Å –¥–ª—è –≥—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–æ—ó –ø–∞—É–∑–∏!"
            else:
                greeting = f"{EMOJI['brain']} –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
                mood_text = "–†–æ–∑—Å–ª–∞–±—Å—è –∑ —Ö–æ—Ä–æ—à–∏–º –≥—É–º–æ—Ä–æ–º!"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü—ñ—ó
            stats_text = await self.get_motivation_stats()
            
            success_count = 0
            for subscriber in subscribers:
                try:
                    # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
                    user_name = subscriber.first_name or "–î—Ä—É–∂–µ"
                    personal_greeting = f"{greeting}\n\n{EMOJI['star']} {user_name}, {mood_text}\n\n"
                    
                    # –û—Å–Ω–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–Ω–µ–∫–¥–æ—Ç–æ–º
                    if daily_joke:
                        joke_message = (
                            f"{personal_greeting}"
                            f"{EMOJI['brain']} <b>–ê–ù–ï–ö–î–û–¢ –î–ù–Ø:</b>\n\n"
                            f"{daily_joke.text}\n\n"
                            f"{stats_text}\n\n"
                            f"{EMOJI['like']} –û—Ü—ñ–Ω–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π +{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤!"
                        )
                        
                        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(
                                    text=f"{EMOJI['like']} –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", 
                                    callback_data=f"like_content:{daily_joke.id}"
                                ),
                                InlineKeyboardButton(
                                    text=f"{EMOJI['laugh']} –©–µ –º–µ–º", 
                                    callback_data="get_meme"
                                )
                            ],
                            [
                                InlineKeyboardButton(
                                    text=f"{EMOJI['fire']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", 
                                    callback_data="show_profile"
                                ),
                                InlineKeyboardButton(
                                    text=f"{EMOJI['vs']} –î—É–µ–ª—å", 
                                    callback_data="start_duel"
                                )
                            ]
                        ])
                        
                        await self.bot.send_message(
                            subscriber.id,
                            joke_message,
                            reply_markup=keyboard
                        )
                        
                        await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –º–µ–º–æ–º (—è–∫—â–æ —î)
                    if daily_meme and daily_meme.file_id:
                        meme_caption = (
                            f"{EMOJI['laugh']} <b>–ú–ï–ú –î–ù–Ø:</b>\n\n"
                            f"{daily_meme.text}\n\n"
                            f"{EMOJI['fire']} –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {daily_meme.views}"
                        )
                        
                        try:
                            await self.bot.send_photo(
                                subscriber.id,
                                photo=daily_meme.file_id,
                                caption=meme_caption
                            )
                        except:
                            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ç–æ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
                            await self.bot.send_message(subscriber.id, meme_caption)
                        
                        await asyncio.sleep(0.5)
                    
                    # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
                    await update_user_points(
                        subscriber.id, 
                        settings.POINTS_FOR_DAILY_ACTIVITY, 
                        "—â–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"
                    )
                    
                    success_count += 1
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {subscriber.id}: {e}")
                    continue
            
            logger.info(f"üì§ –©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {success_count}/{len(subscribers)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['check']} <b>–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                    f"{EMOJI['profile']} –ü—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: {len(subscribers)}\n"
                    f"{EMOJI['fire']} –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count}\n"
                    f"{EMOJI['cross']} –ü–æ–º–∏–ª–æ–∫: {len(subscribers) - success_count}"
                )
            except:
                pass
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    async def get_daily_subscribers(self) -> List[User]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
        with get_db_session() as session:
            return session.query(User).filter(
                User.daily_subscription == True
            ).all()
    
    async def get_motivation_stats(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        with get_db_session() as session:
            total_users = session.query(User).count()
            users_with_points = session.query(User).filter(User.points > 0).count()
            active_duels = session.query(Duel).filter(Duel.status == DuelStatus.ACTIVE).count()
            
            motivational_phrases = [
                f"{EMOJI['rocket']} –°—å–æ–≥–æ–¥–Ω—ñ {total_users} –ª—é–¥–µ–π —Å–º—ñ—é—Ç—å—Å—è —Ä–∞–∑–æ–º –∑ –Ω–∞–º–∏!",
                f"{EMOJI['fire']} –í–∂–µ {users_with_points} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞—Ä–æ–±–∏–ª–∏ –±–∞–ª–∏!",
                f"{EMOJI['vs']} –ó–∞—Ä–∞–∑ –π–¥–µ {active_duels} –¥—É–µ–ª–µ–π –∂–∞—Ä—Ç—ñ–≤!",
                f"{EMOJI['star']} –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –≥—É–º–æ—Ä–∏—Å—Ç—ñ–≤!",
                f"{EMOJI['trophy']} –ö–æ–∂–µ–Ω –¥–µ–Ω—å - –Ω–æ–≤–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ—Å–º—ñ—è—Ç–∏—Å—è!",
                f"{EMOJI['heart']} –ì—É–º–æ—Ä –æ–±'—î–¥–Ω—É—î –Ω–∞—Å –≤—Å—ñ—Ö!"
            ]
            
            import random
            return random.choice(motivational_phrases)
    
    async def finish_expired_duels(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π"""
        try:
            from handlers.duel_handlers import finish_duel
            
            with get_db_session() as session:
                expired_duels = session.query(Duel).filter(
                    Duel.status == DuelStatus.ACTIVE,
                    Duel.voting_ends_at <= datetime.utcnow()
                ).all()
                
                for duel in expired_duels:
                    try:
                        result = await finish_duel(duel.id)
                        
                        if result:
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞–º –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            result_text = (
                                f"{EMOJI['vs']} <b>–î–£–ï–õ–¨ #{duel.id} –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
                                f"{EMOJI['fire']} –ñ–∞—Ä—Ç –ê: {result['initiator_votes']} –≥–æ–ª–æ—Å—ñ–≤\n"
                                f"{EMOJI['brain']} –ñ–∞—Ä—Ç –ë: {result['opponent_votes']} –≥–æ–ª–æ—Å—ñ–≤\n\n"
                            )
                            
                            if result['winner_id']:
                                result_text += f"{EMOJI['trophy']} <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º–∞–≤ +{settings.POINTS_FOR_DUEL_WIN} –±–∞–ª—ñ–≤!</b>"
                            else:
                                result_text += f"{EMOJI['thinking']} <b>–ù—ñ—á–∏—è! –û–±–∏–¥–≤–∞ —É—á–∞—Å–Ω–∏–∫–∏ –º–æ–ª–æ–¥—Ü—ñ!</b>"
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä—É
                            try:
                                await self.bot.send_message(duel.initiator_id, result_text)
                            except:
                                pass
                            
                            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–ø–æ–Ω–µ–Ω—Ç—É
                            if duel.opponent_id:
                                try:
                                    await self.bot.send_message(duel.opponent_id, result_text)
                                except:
                                    pass
                        
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ {duel.id}: {e}")
                
                if expired_duels:
                    logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(expired_duels)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª–µ–π")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π: {e}")
    
    async def inactive_users_reminder(self):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
        try:
            # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, —è–∫—ñ –Ω–µ –±—É–ª–∏ –∞–∫—Ç–∏–≤–Ω—ñ 3 –¥–Ω—ñ
            three_days_ago = datetime.utcnow() - timedelta(days=3)
            
            with get_db_session() as session:
                inactive_users = session.query(User).filter(
                    User.last_active < three_days_ago,
                    User.daily_subscription == False,  # –ù–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Ä–æ–∑—Å–∏–ª–∫—É
                    User.points > 0  # –ê–ª–µ –º–∞—é—Ç—å –±–∞–ª–∏ (–∫–æ–ª–∏—Å—å –±—É–ª–∏ –∞–∫—Ç–∏–≤–Ω–∏–º–∏)
                ).limit(50).all()  # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                
                reminder_text = (
                    f"{EMOJI['thinking']} <b>–°—É–º—É—î–º–æ –∑–∞ —Ç–æ–±–æ—é!</b>\n\n"
                    f"{EMOJI['brain']} –ü–æ–∫–∏ —Ç–∏ –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑'—è–≤–∏–ª–æ—Å—è –±–∞–≥–∞—Ç–æ –Ω–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤\n"
                    f"{EMOJI['fire']} –¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É –º–æ–∂–µ –∑–º—ñ–Ω–∏—Ç–∏—Å—è\n"
                    f"{EMOJI['vs']} –ó'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\n"
                    f"{EMOJI['star']} –ü–æ–≤–µ—Ä—Ç–∞–π—Å—è —à–≤–∏–¥—à–µ!\n\n"
                    f"{EMOJI['laugh']} /meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π –º–µ–º\n"
                    f"{EMOJI['calendar']} /daily - –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É\n"
                    f"{EMOJI['profile']} /profile - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å"
                )
                
                sent_count = 0
                for user in inactive_users:
                    try:
                        await self.bot.send_message(user.id, reminder_text)
                        sent_count += 1
                        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                    except:
                        continue
                
                if sent_count > 0:
                    logger.info(f"üì¨ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å {sent_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
    
    async def weekly_top_rewards(self):
        """–¢–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ —Ç–æ–ø-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
        try:
            with get_db_session() as session:
                # –¢–æ–ø-3 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ –±–∞–ª–∞–º–∏
                top_users = session.query(User).order_by(User.points.desc()).limit(3).all()
                
                if not top_users:
                    return
                
                rewards = [
                    (50, "ü•á", "–ß–ï–ú–ü–Ü–û–ù –¢–ò–ñ–ù–Ø"),
                    (30, "ü•à", "–°–†–Ü–ë–ù–ò–ô –ü–†–ò–ó–ï–†"),
                    (20, "ü•â", "–ë–†–û–ù–ó–û–í–ò–ô –ü–†–ò–ó–ï–†")
                ]
                
                for i, user in enumerate(top_users):
                    if i < len(rewards):
                        bonus_points, medal, title = rewards[i]
                        
                        # –ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤
                        await update_user_points(
                            user.id, 
                            bonus_points, 
                            f"—Ç–∏–∂–Ω–µ–≤–∞ –Ω–∞–≥–æ—Ä–æ–¥–∞ - {title.lower()}"
                        )
                        
                        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—é
                        try:
                            reward_text = (
                                f"{medal} <b>{title}!</b>\n\n"
                                f"{EMOJI['trophy']} –í—ñ—Ç–∞—î–º–æ, {user.first_name or '–ì—É–º–æ—Ä–∏—Å—Ç–µ'}!\n"
                                f"{EMOJI['fire']} –¢–∏ –≤ —Ç–æ–ø-{i+1} –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å!\n"
                                f"{EMOJI['star']} –ë–æ–Ω—É—Å: +{bonus_points} –±–∞–ª—ñ–≤\n\n"
                                f"{EMOJI['rocket']} –ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
                            )
                            
                            await self.bot.send_message(user.id, reward_text)
                        except:
                            pass
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∑–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Ç –ø—Ä–æ —Ç–æ–ø
                top_announcement = (
                    f"{EMOJI['trophy']} <b>–ü–Ü–î–°–£–ú–ö–ò –¢–ò–ñ–ù–Ø!</b>\n\n"
                    f"ü•á {top_users[0].first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} - {top_users[0].points} –±–∞–ª—ñ–≤\n"
                )
                
                if len(top_users) > 1:
                    top_announcement += f"ü•à {top_users[1].first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} - {top_users[1].points} –±–∞–ª—ñ–≤\n"
                
                if len(top_users) > 2:
                    top_announcement += f"ü•â {top_users[2].first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'} - {top_users[2].points} –±–∞–ª—ñ–≤\n"
                
                top_announcement += f"\n{EMOJI['fire']} –í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤!"
                
                # –†–æ–∑—Å–∏–ª–∫–∞ —Ç–æ–ø-5 –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
                active_users = session.query(User).filter(
                    User.last_active >= datetime.utcnow() - timedelta(days=7)
                ).limit(20).all()
                
                for user in active_users[:10]:  # –¢—ñ–ª—å–∫–∏ —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω–∏–º
                    try:
                        await self.bot.send_message(user.id, top_announcement)
                        await asyncio.sleep(0.5)
                    except:
                        continue
                
                logger.info(f"üèÜ –¢–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏ –Ω–∞–¥–∞–Ω–æ {len(top_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥: {e}")

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è

async def send_broadcast_message(bot, message_text: str, target_users: List[int] = None):
    """–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–±–æ –≤–∏–±—Ä–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"""
    try:
        if target_users is None:
            # –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            with get_db_session() as session:
                all_users = session.query(User).all()
                target_users = [user.id for user in all_users]
        
        success_count = 0
        for user_id in target_users:
            try:
                await bot.send_message(user_id, message_text)
                success_count += 1
                await asyncio.sleep(0.1)  # –ê–Ω—Ç–∏-—Å–ø–∞–º –ø–∞—É–∑–∞
            except:
                continue
        
        logger.info(f"üì¢ –†–æ–∑—Å–∏–ª–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {success_count}/{len(target_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        return success_count
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        return 0