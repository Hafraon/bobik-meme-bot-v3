#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ê–†–ì–£–ú–ï–ù–¢–ò ü§ñ
"""

import logging

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ê –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏"""
    
    def __init__(self, bot, db_available: bool = False):
        """
        ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        
        Args:
            bot: –Ü–Ω—Å—Ç–∞–Ω—Å Telegram –±–æ—Ç–∞
            db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        """
        self.bot = bot
        self.db_available = db_available
        self.is_running = False
        
        logger.info(f"ü§ñ AutomatedScheduler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–ë–î: {'‚úÖ' if db_available else '‚ùå'})")

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ!")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            return False

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")

async def create_automated_scheduler(bot, db_available: bool = False):
    """‚úÖ –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    scheduler = AutomatedScheduler(bot, db_available)
    await scheduler.start()
    return scheduler

__all__ = ['AutomatedScheduler', 'create_automated_scheduler']
