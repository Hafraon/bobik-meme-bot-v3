#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö - –í–ò–ü–†–ê–í–õ–ï–ù–Ü –ê–†–ì–£–ú–ï–ù–¢–ò ü§ñ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
‚úÖ –£–∑–≥–æ–¥–∂–µ–Ω—ñ—Å—Ç—å –∑ main.py –≤–∏–∫–ª–∏–∫–∞–º–∏
‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ë–î
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≤–¥–∞–Ω—å
‚úÖ –î–æ–¥–∞–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
"""

import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional, Callable
import traceback
import random

# APScheduler —ñ–º–ø–æ—Ä—Ç–∏
try:
    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    from apscheduler.triggers.cron import CronTrigger
    from apscheduler.triggers.interval import IntervalTrigger
    from apscheduler.events import EVENT_JOB_EXECUTED, EVENT_JOB_ERROR
    SCHEDULER_AVAILABLE = True
except ImportError:
    SCHEDULER_AVAILABLE = False

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
    
    –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î –ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤!
    """
    
    def __init__(self, bot, db_available: bool = False):  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        
        Args:
            bot: Telegram Bot instance
            db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        """
        self.bot = bot
        self.db_available = db_available  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ë–î
        self.scheduler = None
        self.is_running = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏
        self.stats = {
            'jobs_executed': 0,
            'jobs_failed': 0,
            'broadcasts_sent': 0,
            'duels_processed': 0,
            'cleanup_runs': 0,
            'errors': 0,
            'last_activity': None,
            'startup_time': datetime.now()
        }
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å
        self.job_config = {
            'morning_broadcast': {
                'hour': 9, 'minute': 0,
                'description': '–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
                'enabled': True
            },
            'evening_stats': {
                'hour': 20, 'minute': 0,
                'description': '–í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                'enabled': True
            },
            'weekly_tournament': {
                'day_of_week': 4, 'hour': 19, 'minute': 0,  # –ü'—è—Ç–Ω–∏—Ü—è
                'description': '–¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä',
                'enabled': True
            },
            'daily_cleanup': {
                'hour': 3, 'minute': 0,
                'description': '–©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö',
                'enabled': True
            },
            'duel_check': {
                'minutes': 1,
                'description': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π',
                'enabled': True
            },
            'duel_reminder': {
                'minutes': 15,
                'description': '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ',
                'enabled': True
            },
            'monthly_summary': {
                'day': 1, 'hour': 12, 'minute': 0,
                'description': '–ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤',
                'enabled': True
            },
            'achievement_check': {
                'minutes': 30,
                'description': '–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
                'enabled': self.db_available
            },
            'weekly_digest': {
                'day_of_week': 6, 'hour': 18, 'minute': 0,  # –ù–µ–¥—ñ–ª—è
                'description': '–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç',
                'enabled': True
            }
        }
        
        logger.info(f"ü§ñ AutomatedScheduler —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–ë–î: {'‚úÖ' if db_available else '‚ùå'})")

    async def initialize(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å"""
        try:
            if not SCHEDULER_AVAILABLE:
                logger.error("‚ùå APScheduler –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π!")
                return False
            
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            self.scheduler = AsyncIOScheduler(
                timezone='Europe/Kiev',
                job_defaults={
                    'coalesce': True,
                    'max_instances': 1,
                    'misfire_grace_time': 300  # 5 —Ö–≤–∏–ª–∏–Ω
                }
            )
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á–∞ –ø–æ–¥—ñ–π
            self.scheduler.add_listener(
                self._job_listener,
                EVENT_JOB_EXECUTED | EVENT_JOB_ERROR
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
            await self._setup_all_jobs()
            
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            logger.error(traceback.format_exc())
            return False

    async def _setup_all_jobs(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        jobs_created = 0
        
        try:
            # 1. –†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É (—â–æ–¥–Ω—è –æ 9:00)
            if self.job_config['morning_broadcast']['enabled']:
                self.scheduler.add_job(
                    self._morning_content_broadcast,
                    CronTrigger(
                        hour=self.job_config['morning_broadcast']['hour'],
                        minute=self.job_config['morning_broadcast']['minute']
                    ),
                    id='morning_broadcast',
                    name='–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 2. –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—â–æ–¥–Ω—è –æ 20:00)
            if self.job_config['evening_stats']['enabled']:
                self.scheduler.add_job(
                    self._evening_statistics,
                    CronTrigger(
                        hour=self.job_config['evening_stats']['hour'],
                        minute=self.job_config['evening_stats']['minute']
                    ),
                    id='evening_stats',
                    name='–í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 3. –¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä (–ø'—è—Ç–Ω–∏—Ü—è –æ 19:00)
            if self.job_config['weekly_tournament']['enabled']:
                self.scheduler.add_job(
                    self._weekly_tournament,
                    CronTrigger(
                        day_of_week=self.job_config['weekly_tournament']['day_of_week'],
                        hour=self.job_config['weekly_tournament']['hour'],
                        minute=self.job_config['weekly_tournament']['minute']
                    ),
                    id='weekly_tournament',
                    name='–¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 4. –©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö (—â–æ–¥–Ω—è –æ 3:00)
            if self.job_config['daily_cleanup']['enabled']:
                self.scheduler.add_job(
                    self._daily_cleanup,
                    CronTrigger(
                        hour=self.job_config['daily_cleanup']['hour'],
                        minute=self.job_config['daily_cleanup']['minute']
                    ),
                    id='daily_cleanup',
                    name='–©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π (–∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É)
            if self.job_config['duel_check']['enabled']:
                self.scheduler.add_job(
                    self._check_active_duels,
                    IntervalTrigger(
                        minutes=self.job_config['duel_check']['minutes']
                    ),
                    id='duel_check',
                    name='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 6. –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ (–∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω)
            if self.job_config['duel_reminder']['enabled']:
                self.scheduler.add_job(
                    self._duel_reminder,
                    IntervalTrigger(
                        minutes=self.job_config['duel_reminder']['minutes']
                    ),
                    id='duel_reminder',
                    name='–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 7. –ú—ñ—Å—è—á–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏ (1 —á–∏—Å–ª–æ –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è –æ 12:00)
            if self.job_config['monthly_summary']['enabled']:
                self.scheduler.add_job(
                    self._monthly_summary,
                    CronTrigger(
                        day=self.job_config['monthly_summary']['day'],
                        hour=self.job_config['monthly_summary']['hour'],
                        minute=self.job_config['monthly_summary']['minute']
                    ),
                    id='monthly_summary',
                    name='–ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å (–∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.job_config['achievement_check']['enabled'] and self.db_available:
                self.scheduler.add_job(
                    self._check_achievements,
                    IntervalTrigger(
                        minutes=self.job_config['achievement_check']['minutes']
                    ),
                    id='achievement_check',
                    name='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
                    replace_existing=True
                )
                jobs_created += 1
            
            # 9. –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç (–Ω–µ–¥—ñ–ª—è –æ 18:00)
            if self.job_config['weekly_digest']['enabled']:
                self.scheduler.add_job(
                    self._weekly_digest,
                    CronTrigger(
                        day_of_week=self.job_config['weekly_digest']['day_of_week'],
                        hour=self.job_config['weekly_digest']['hour'],
                        minute=self.job_config['weekly_digest']['minute']
                    ),
                    id='weekly_digest',
                    name='–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç',
                    replace_existing=True
                )
                jobs_created += 1
            
            logger.info(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {jobs_created} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å: {e}")
            logger.error(traceback.format_exc())

    async def start(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if not self.scheduler:
                logger.error("‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!")
                return False
            
            if self.is_running:
                logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
                return True
            
            self.scheduler.start()
            self.is_running = True
            self.stats['last_activity'] = datetime.now()
            
            jobs = self.scheduler.get_jobs()
            logger.info(f"üöÄ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ –∑ {len(jobs)} –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏")
            
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
            for job in jobs:
                next_run = job.next_run_time
                if next_run:
                    logger.info(f"üìÖ {job.name}: –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫ {next_run.strftime('%d.%m.%Y %H:%M:%S')}")
                else:
                    logger.info(f"üìÖ {job.name}: —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return False

    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if self.scheduler and self.is_running:
                self.scheduler.shutdown(wait=False)
                self.is_running = False
                logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")

    def _job_listener(self, event):
        """–°–ª—É—Ö–∞—á –ø–æ–¥—ñ–π –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å"""
        if event.exception:
            self.stats['jobs_failed'] += 1
            self.stats['errors'] += 1
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {event.job_id}: {event.exception}")
        else:
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            logger.info(f"‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è {event.job_id} –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    # ===== –ó–ê–í–î–ê–ù–ù–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á =====

    async def _morning_content_broadcast(self):
        """–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.info("üåÖ –ü–æ—á–∞—Ç–æ–∫ —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content = None
            if self.db_available:
                try:
                    from database import get_random_approved_content
                    content = await get_random_approved_content()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ë–î: {e}")
            
            # Fallback –∫–æ–Ω—Ç–µ–Ω—Ç
            if not content:
                fallback_content = [
                    "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –ß–∞—Å –¥–ª—è –ø–æ—Ä—Ü—ñ—ó —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –≥—É–º–æ—Ä—É!\n\nüòÇ –£–∫—Ä–∞—ó–Ω–µ—Ü—å —É –º–∞–≥–∞–∑–∏–Ω—ñ:\n- –°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î —Ü–µ–π —Ö–ª—ñ–±?\n- 25 –≥—Ä–∏–≤–µ–Ω—å.\n- –ê –≤—á–æ—Ä–∞ –±—É–≤ 20!\n- –í—á–æ—Ä–∞ –≤–∏ –π–æ–≥–æ –Ω–µ –∫—É–ø–∏–ª–∏! ü§£",
                    "‚òÄÔ∏è –†–∞–Ω–∫–æ–≤–∞ –¥–æ–∑–∞ –ø–æ–∑–∏—Ç–∏–≤—É!\n\nüéØ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –ú–µ–Ω—ñ –∫–∞–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean! üòÑ",
                    "üåû –ì–∞—Ä–Ω–æ–≥–æ —Ä–∞–Ω–∫—É –≤—Å—ñ–º!\n\nüöó –¢–∞–∫—Å–∏—Å—Ç —É–∫—Ä–∞—ó–Ω—Ü—é:\n- –ö—É–¥–∏ —ó–¥–µ–º–æ?\n- –î–æ –ø–µ—Ä–µ–º–æ–≥–∏!\n- –ê–¥—Ä–µ—Å–∞ —è–∫–∞?\n- –ö–∏—ó–≤, –ë–∞–Ω–∫–æ–≤–∞, 11! üá∫üá¶"
                ]
                content_text = random.choice(fallback_content)
            else:
                content_text = f"üåÖ –†–∞–Ω–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è!\n\n{content.text}"
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º)
            # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
            logger.info(f"üì¢ –†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: {content_text[:50]}...")
            self.stats['broadcasts_sent'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            self.stats['errors'] += 1

    async def _evening_statistics(self):
        """–í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            stats = {}
            if self.db_available:
                try:
                    from database import get_bot_statistics
                    stats = await get_bot_statistics()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –ë–î: {e}")
            
            # Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if not stats or stats.get('database_status') != 'online':
                stats = {
                    'total_users': 'N/A',
                    'active_users': 'N/A',
                    'total_content': 'N/A',
                    'active_duels': 'N/A'
                }
            
            logger.info(f"üìà –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {stats.get('total_users', 'N/A')}, "
                       f"–ö–æ–Ω—Ç–µ–Ω—Ç: {stats.get('total_content', 'N/A')}, "
                       f"–î—É–µ–ª—ñ: {stats.get('active_duels', 'N/A')}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.stats['errors'] += 1

    async def _weekly_tournament(self):
        """–¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä"""
        try:
            logger.info("üèÜ –ó–∞–ø—É—Å–∫ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É...")
            
            # –õ–æ–≥—ñ–∫–∞ —Ç—É—Ä–Ω—ñ—Ä—É (–ø–æ–∫–∏ —â–æ –±–∞–∑–æ–≤–∞)
            logger.info("üéÆ –¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä –∂–∞—Ä—Ç—ñ–≤ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è!")
            logger.info("‚öîÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –º–æ–∂—É—Ç—å –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–æ–Ω—É—Å–Ω–∏—Ö –±–∞–ª—ñ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É: {e}")
            self.stats['errors'] += 1

    async def _daily_cleanup(self):
        """–©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üßπ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–∏—Ö...")
            
            if self.db_available:
                try:
                    from database import cleanup_old_data
                    await cleanup_old_data()
                    self.stats['cleanup_runs'] += 1
                    logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            else:
                logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–∏—Ö: {e}")
            self.stats['errors'] += 1

    async def _check_active_duels(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π"""
        try:
            if not self.db_available:
                return
            
            # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–µ–ª–µ–π
            logger.debug("‚öîÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π...")
            self.stats['duels_processed'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–µ–ª–µ–π: {e}")
            self.stats['errors'] += 1

    async def _duel_reminder(self):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ"""
        try:
            logger.debug("üì¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥—É–µ–ª—ñ...")
            # –õ–æ–≥—ñ–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥—É–µ–ª—ñ: {e}")
            self.stats['errors'] += 1

    async def _monthly_summary(self):
        """–ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
        try:
            logger.info("üìÖ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")
            
            current_month = datetime.now().strftime("%B %Y")
            logger.info(f"üìä –ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {current_month} –≥–æ—Ç–æ–≤–∏–π")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ—Å—è—á–Ω–æ–≥–æ –∑–≤—ñ—Ç—É: {e}")
            self.stats['errors'] += 1

    async def _check_achievements(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            if not self.db_available:
                return
            
            logger.debug("üèÜ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")
            # –õ–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
            self.stats['errors'] += 1

    async def _weekly_digest(self):
        """–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"""
        try:
            logger.info("üì∞ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É...")
            
            # –õ–æ–≥—ñ–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç—É
            logger.info("üì® –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É: {e}")
            self.stats['errors'] += 1

    # ===== –ú–ï–¢–û–î–ò –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ =====

    def get_scheduler_status(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        if not self.scheduler:
            return {
                'is_running': False,
                'jobs_count': 0,
                'error': '–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π'
            }
        
        jobs = self.scheduler.get_jobs() if self.is_running else []
        
        return {
            'is_running': self.is_running,
            'jobs_count': len(jobs),
            'db_available': self.db_available,
            'stats': self.stats.copy(),
            'uptime_hours': (datetime.now() - self.stats['startup_time']).total_seconds() / 3600,
            'next_jobs': [
                {
                    'name': job.name,
                    'next_run': job.next_run_time.isoformat() if job.next_run_time else None
                }
                for job in jobs[:5]  # –ü–µ—Ä—à—ñ 5 –∑–∞–≤–¥–∞–Ω—å
            ]
        }

    def get_jobs_info(self) -> List[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        if not self.scheduler or not self.is_running:
            return []
        
        jobs = self.scheduler.get_jobs()
        return [
            {
                'id': job.id,
                'name': job.name,
                'next_run': job.next_run_time.isoformat() if job.next_run_time else None,
                'trigger': str(job.trigger),
                'enabled': self.job_config.get(job.id, {}).get('enabled', True)
            }
            for job in jobs
        ]

# ===== –§–ê–ë–†–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def create_automated_scheduler(bot, db_available: bool = False) -> Optional[AutomatedScheduler]:
    """
    –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    
    Args:
        bot: Telegram Bot instance
        db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
    
    Returns:
        AutomatedScheduler –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    """
    try:
        scheduler = AutomatedScheduler(bot, db_available)  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
        
        if await scheduler.initialize():
            logger.info("‚úÖ AutomatedScheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            return scheduler
        else:
            logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ AutomatedScheduler")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è AutomatedScheduler: {e}")
        return None

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'AutomatedScheduler',
    'create_automated_scheduler',
    'SCHEDULER_AVAILABLE'
]

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ
if SCHEDULER_AVAILABLE:
    logger.info("‚úÖ AutomatedScheduler –º–æ–¥—É–ª—å –≥–æ—Ç–æ–≤–∏–π")
else:
    logger.warning("‚ö†Ô∏è APScheduler –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –æ–±–º–µ–∂–µ–Ω–∞")