#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–û–í–ê–ù–ò–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö

–ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –±–æ—Ç–∞: —Ä–æ–∑—Å–∏–ª–∫–∏, –¥—É–µ–ª—ñ, –º–æ–¥–µ—Ä–∞—Ü—ñ—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
–†–æ–∑—É–º–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —â–æ –∫–µ—Ä—É—î –≤—Å—ñ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ—Å–∞–º–∏
"""

import logging
import asyncio
from datetime import datetime, timedelta, time
from typing import Optional, Dict, Any, List
import random

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.date import DateTrigger

from aiogram import Bot

logger = logging.getLogger(__name__)

class AutomatedScheduler:
    """–†–æ–∑—É–º–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.broadcast_system = None
        self.is_running = False
        self.jobs_registry = {}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏
        self.stats = {
            'jobs_executed': 0,
            'broadcasts_sent': 0,
            'duels_finished': 0,
            'data_cleaned': 0,
            'errors': 0,
            'last_activity': None
        }
    
    async def initialize(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è broadcast system
            from .broadcast_system import create_broadcast_system
            self.broadcast_system = await create_broadcast_system(self.bot)
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–≤–¥–∞–Ω—å
            await self.setup_all_jobs()
            
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            return False
    
    async def setup_all_jobs(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"""
        
        # ===== –©–û–î–ï–ù–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
        
        # –†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ (9:00)
        self.add_job(
            func=self.morning_content_broadcast,
            trigger=CronTrigger(hour=9, minute=0),
            id='morning_broadcast',
            name='–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É',
            replace_existing=True
        )
        
        # –í–µ—á—ñ—Ä–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (20:00)
        self.add_job(
            func=self.evening_stats_broadcast,
            trigger=CronTrigger(hour=20, minute=0),
            id='evening_stats',
            name='–í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            replace_existing=True
        )
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö –æ 3:00
        self.add_job(
            func=self.daily_cleanup,
            trigger=CronTrigger(hour=3, minute=0),
            id='daily_cleanup',
            name='–©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö',
            replace_existing=True
        )
        
        # ===== –†–ï–ì–£–õ–Ø–†–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        self.add_job(
            func=self.check_duels,
            trigger=IntervalTrigger(minutes=1),
            id='duel_checker',
            name='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π',
            replace_existing=True
        )
        
        # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ –∫–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω
        self.add_job(
            func=self.duel_reminders,
            trigger=IntervalTrigger(minutes=15),
            id='duel_reminders',
            name='–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ',
            replace_existing=True
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
        self.add_job(
            func=self.check_achievements,
            trigger=IntervalTrigger(minutes=5),
            id='achievement_checker',
            name='–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å',
            replace_existing=True
        )
        
        # ===== –¢–ò–ñ–ù–ï–í–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
        
        # –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç (–Ω–µ–¥—ñ–ª—è, 18:00)
        self.add_job(
            func=self.weekly_digest,
            trigger=CronTrigger(day_of_week=6, hour=18, minute=0),  # Sunday
            id='weekly_digest',
            name='–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç',
            replace_existing=True
        )
        
        # –¢—É—Ä–Ω—ñ—Ä –¥—É–µ–ª—ñ–≤ (–ø'—è—Ç–Ω–∏—Ü—è, 19:00)
        self.add_job(
            func=self.weekly_tournament,
            trigger=CronTrigger(day_of_week=4, hour=19, minute=0),  # Friday
            id='weekly_tournament',
            name='–¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä',
            replace_existing=True
        )
        
        # ===== –ú–Ü–°–Ø–ß–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
        
        # –ü—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ –º—ñ—Å—è—Ü—è (1 —á–∏—Å–ª–æ, 12:00)
        self.add_job(
            func=self.monthly_summary,
            trigger=CronTrigger(day=1, hour=12, minute=0),
            id='monthly_summary',
            name='–ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤',
            replace_existing=True
        )
        
        logger.info("üìÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è")
    
    def add_job(self, func, trigger, id: str, name: str, **kwargs):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—î—é"""
        try:
            job = self.scheduler.add_job(func, trigger, id=id, name=name, **kwargs)
            self.jobs_registry[id] = {
                'name': name,
                'function': func.__name__,
                'trigger': str(trigger),
                'added_at': datetime.now(),
                'last_run': None,
                'run_count': 0,
                'error_count': 0
            }
            logger.info(f"üìù –î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è: {name} ({id})")
            return job
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è {name}: {e}")
    
    # ===== –©–û–î–ï–ù–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
    
    async def morning_content_broadcast(self):
        """–†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.info("üåÖ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏...")
            
            if not self.broadcast_system:
                logger.warning("Broadcast system –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
                return
            
            await self.broadcast_system.send_daily_content()
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['broadcasts_sent'] += 1
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥—ñ—ó
            await self.check_for_special_events()
            
            logger.info("‚úÖ –†–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–∞–Ω–∫–æ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            self.stats['errors'] += 1
    
    async def evening_stats_broadcast(self):
        """–í–µ—á—ñ—Ä–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üåÜ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–µ–Ω–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            daily_stats = await self.generate_daily_stats()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.send_admin_daily_report(daily_stats)
            
            # –ú–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            if daily_stats.get('interesting_events'):
                await self.send_daily_highlights(daily_stats)
            
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            logger.info("‚úÖ –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.stats['errors'] += 1
    
    async def daily_cleanup(self):
        """–©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üßπ –í–∏–∫–æ–Ω–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏...")
            
            cleanup_stats = {
                'old_duels': 0,
                'old_ratings': 0,
                'inactive_users': 0,
                'temp_files': 0
            }
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –¥—É–µ–ª–µ–π
            from database.services import cleanup_old_duels
            cleanup_stats['old_duels'] = await cleanup_old_duels()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥—ñ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω—ñ–≤)
            cleanup_stats['old_ratings'] = await self.cleanup_old_ratings(days=30)
            
            # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            cleanup_stats['inactive_users'] = await self.mark_inactive_users(days=60)
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
            cleanup_stats['temp_files'] = await self.cleanup_temp_files()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
            await self.update_bot_statistics()
            
            self.stats['data_cleaned'] += sum(cleanup_stats.values())
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç –∞–¥–º—ñ–Ω—É
            await self.send_cleanup_report(cleanup_stats)
            
            logger.info(f"‚úÖ –©–æ–¥–µ–Ω–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {cleanup_stats}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó –æ—á–∏—Å—Ç–∫–∏: {e}")
            self.stats['errors'] += 1
    
    # ===== –†–ï–ì–£–õ–Ø–†–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
    
    async def check_duels(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤"""
        try:
            from database.services import auto_finish_expired_duels
            
            finished_count = await auto_finish_expired_duels()
            
            if finished_count > 0:
                logger.info(f"üèÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ {finished_count} –¥—É–µ–ª–µ–π")
                self.stats['duels_finished'] += finished_count
            
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–µ–ª–µ–π: {e}")
            self.stats['errors'] += 1
    
    async def duel_reminders(self):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
        try:
            if self.broadcast_system:
                await self.broadcast_system.send_duel_reminders()
            
            self.stats['jobs_executed'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥—É–µ–ª—ñ: {e}")
            self.stats['errors'] += 1
    
    async def check_achievements(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"""
        try:
            if self.broadcast_system:
                await self.broadcast_system.send_achievement_notifications()
                await self.broadcast_system.send_rank_up_notifications()
            
            self.stats['jobs_executed'] += 1
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—è–≥–Ω–µ–Ω—å: {e}")
            self.stats['errors'] += 1
    
    # ===== –¢–ò–ñ–ù–ï–í–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
    
    async def weekly_digest(self):
        """–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"""
        try:
            logger.info("üìä –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É...")
            
            if self.broadcast_system:
                await self.broadcast_system.send_weekly_digest()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –¥–ª—è –∞–¥–º—ñ–Ω–∞
            weekly_report = await self.generate_weekly_admin_report()
            await self.send_admin_weekly_report(weekly_report)
            
            self.stats['broadcasts_sent'] += 1
            self.stats['jobs_executed'] += 1
            self.stats['last_activity'] = datetime.now()
            
            logger.info("‚úÖ –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É: {e}")
            self.stats['errors'] += 1
    
    async def weekly_tournament(self):
        """–ó–∞–ø—É—Å–∫ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É"""
        try:
            logger.info("üèÜ –ó–∞–ø—É—Å–∫ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É...")
            
            tournament_data = {
                'name': '–¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä –¥—É–µ–ª—ñ–≤',
                'start_date': '–ó–∞—Ä–∞–∑',
                'duration': '48 –≥–æ–¥–∏–Ω',
                'prize': '+500 –±–∞–ª—ñ–≤ –ø–µ—Ä–µ–º–æ–∂—Ü—é + —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Ç—É–ª'
            }
            
            if self.broadcast_system:
                await self.broadcast_system.send_tournament_announcement(tournament_data)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥—É–µ–ª—ñ –¥–ª—è —Ç—É—Ä–Ω—ñ—Ä—É
            await self.create_tournament_duels()
            
            self.stats['jobs_executed'] += 1
            
            logger.info("‚úÖ –¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä –∑–∞–ø—É—â–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Ç—É—Ä–Ω—ñ—Ä—É: {e}")
            self.stats['errors'] += 1
    
    # ===== –ú–Ü–°–Ø–ß–ù–Ü –ó–ê–í–î–ê–ù–ù–Ø =====
    
    async def monthly_summary(self):
        """–ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤"""
        try:
            logger.info("üìà –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ—Å—è—á–Ω–æ–≥–æ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤...")
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –º—ñ—Å—è—á–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            monthly_stats = await self.generate_monthly_stats()
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –º—ñ—Å—è—Ü—è
            top_users = await self.get_monthly_top_users()
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞–≥–æ—Ä–æ–¥–∏
            await self.distribute_monthly_rewards(top_users)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º
            await self.send_monthly_summary_broadcast(monthly_stats, top_users)
            
            self.stats['broadcasts_sent'] += 1
            self.stats['jobs_executed'] += 1
            
            logger.info("‚úÖ –ú—ñ—Å—è—á–Ω–µ –ø—ñ–¥–±–∏—Ç—Ç—è –ø—ñ–¥—Å—É–º–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ—Å—è—á–Ω–æ–≥–æ –ø—ñ–¥—Å—É–º–∫—É: {e}")
            self.stats['errors'] += 1
    
    # ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò =====
    
    async def generate_daily_stats(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            from database.services import get_broadcast_statistics
            
            stats = await get_broadcast_statistics()
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞
            stats['interesting_events'] = await self.find_interesting_daily_events()
            stats['system_health'] = await self.check_system_health()
            
            return stats
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–µ–Ω–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'error': str(e)}
    
    async def find_interesting_daily_events(self) -> List[str]:
        """–ü–æ—à—É–∫ —Ü—ñ–∫–∞–≤–∏—Ö –ø–æ–¥—ñ–π –¥–Ω—è"""
        events = []
        
        try:
            from database.services import get_active_duels, get_daily_best_content
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –¥—É–µ–ª–µ–π
            active_duels = await get_active_duels()
            if len(active_duels) > 5:
                events.append(f"üî• –†–µ–∫–æ—Ä–¥–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥—É–µ–ª–µ–π: {len(active_duels)}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ–ø—É–ª—è—Ä–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            best_content = await get_daily_best_content()
            if best_content and best_content.get('likes', 0) > 10:
                events.append(f"‚≠ê –í—ñ—Ä—É—Å–Ω–∏–π –∂–∞—Ä—Ç –¥–Ω—è: {best_content['likes']} –ª–∞–π–∫—ñ–≤")
            
            return events
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –ø–æ–¥—ñ–π: {e}")
            return []
    
    async def check_system_health(self) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–∏—Å—Ç–µ–º–∏"""
        health = {
            'status': 'healthy',
            'issues': [],
            'performance': 'good'
        }
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ë–î
            from database.services import get_basic_stats
            stats = get_basic_stats()
            
            if stats.get('error'):
                health['status'] = 'warning'
                health['issues'].append('Database connectivity issues')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.stats['errors'] > 10:
                health['status'] = 'warning'
                health['issues'].append(f"High error count: {self.stats['errors']}")
            
            return health
            
        except Exception as e:
            return {
                'status': 'error',
                'issues': [str(e)],
                'performance': 'degraded'
            }
    
    async def send_admin_daily_report(self, stats: Dict[str, Any]):
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—É"""
        try:
            from config.settings import settings
            
            message = (
                f"üìä <b>–©–û–î–ï–ù–ù–ò–ô –ó–í–Ü–¢ –°–ò–°–¢–ï–ú–ò</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}\n\n"
                f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('active_today', 0)}\n"
                f"‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {stats.get('active_duels', 0)}\n"
                f"üìà –ó–∞–ª—É—á–µ–Ω—ñ—Å—Ç—å: {stats.get('engagement_rate', 0):.1f}%\n\n"
                f"üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {stats.get('system_health', {}).get('status', 'unknown')}\n"
                f"ü§ñ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {self.stats['jobs_executed']}\n"
                f"‚ùå –ü–æ–º–∏–ª–æ–∫: {self.stats['errors']}\n\n"
            )
            
            if stats.get('interesting_events'):
                message += "üéØ <b>–ü–æ–¥—ñ—ó –¥–Ω—è:</b>\n"
                for event in stats['interesting_events']:
                    message += f"‚Ä¢ {event}\n"
            
            await self.bot.send_message(settings.ADMIN_ID, message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—É –∞–¥–º—ñ–Ω—É: {e}")
    
    # ===== –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö–û–ú =====
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if not self.is_running:
                self.scheduler.start()
                self.is_running = True
                logger.info("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
                await self.send_startup_notification()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    
    async def stop(self):
        """–ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            if self.is_running:
                self.scheduler.shutdown()
                self.is_running = False
                logger.info("‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–≤—ñ—Ç –ø—Ä–æ —Ä–æ–±–æ—Ç—É
                await self.send_shutdown_report()
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
    
    async def send_startup_notification(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫"""
        try:
            from config.settings import settings
            
            message = (
                f"ü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê</b>\n\n"
                f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ\n"
                f"üìÖ –ó–∞–≤–¥–∞–Ω—å —É —á–µ—Ä–∑—ñ: {len(self.jobs_registry)}\n"
                f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è: {self.get_next_job_info()}\n\n"
                f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
                f"‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π\n"
                f"‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
                f"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è\n"
                f"‚Ä¢ –¢–∏–∂–Ω–µ–≤—ñ —Ç–∞ –º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏"
            )
            
            await self.bot.send_message(settings.ADMIN_ID, message)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫: {e}")
    
    def get_next_job_info(self) -> str:
        """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å—Ç—É–ø–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è"""
        try:
            jobs = self.scheduler.get_jobs()
            if jobs:
                next_job = min(jobs, key=lambda j: j.next_run_time)
                return f"{next_job.name} –æ {next_job.next_run_time.strftime('%H:%M')}"
            return "–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å"
        except:
            return "–ù–µ–≤—ñ–¥–æ–º–æ"
    
    def get_scheduler_status(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'total_jobs': len(self.jobs_registry),
            'stats': self.stats.copy(),
            'next_job': self.get_next_job_info(),
            'uptime': datetime.now() - self.stats.get('last_activity', datetime.now())
        }

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def create_automated_scheduler(bot: Bot) -> AutomatedScheduler:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    scheduler = AutomatedScheduler(bot)
    success = await scheduler.initialize()
    
    if success:
        return scheduler
    else:
        logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
        return None

async def test_automated_scheduler(scheduler: AutomatedScheduler):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
        status = scheduler.get_scheduler_status()
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {status}")
        
        # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
        if scheduler.broadcast_system:
            logger.info("‚úÖ Broadcast system —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è Broadcast system –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

# ===== –ï–ö–°–ü–û–†–¢ =====

__all__ = [
    'AutomatedScheduler',
    'create_automated_scheduler',
    'test_automated_scheduler'
]