#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¢ –°–ò–°–¢–ï–ú–ê –†–û–ó–°–ò–õ–û–ö –£–ö–†–ê–á–ù–°–¨–ö–û–ì–û TELEGRAM –ë–û–¢–ê üì¢

–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–∞—Å–æ–≤–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é:
‚úÖ Rate limiting —Ç–∞ –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
‚úÖ –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ä–æ–∑—Å–∏–ª–æ–∫ (—â–æ–¥–µ–Ω–Ω—ñ, —Ç–∏–∂–Ω–µ–≤—ñ, —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ)
‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
‚úÖ –†–µ–∑–µ—Ä–≤—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
"""

import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Callable, Union
import json
import random
from enum import Enum

logger = logging.getLogger(__name__)

class BroadcastType(Enum):
    """–¢–∏–ø–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    DAILY_CONTENT = "daily_content"          # –©–æ–¥–µ–Ω–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    EVENING_STATS = "evening_stats"          # –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    WEEKLY_DIGEST = "weekly_digest"          # –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
    TOURNAMENT_ANNOUNCE = "tournament"       # –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—ñ–≤
    ACHIEVEMENT_NOTIFY = "achievement"       # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    SYSTEM_ANNOUNCE = "system"               # –°–∏—Å—Ç–µ–º–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
    CUSTOM = "custom"                        # –ö–∞—Å—Ç–æ–º–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏

class BroadcastStatus(Enum):
    """–°—Ç–∞—Ç—É—Å–∏ —Ä–æ–∑—Å–∏–ª–∫–∏"""
    PENDING = "pending"                      # –û—á—ñ–∫—É—î –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    IN_PROGRESS = "in_progress"              # –í –ø—Ä–æ—Ü–µ—Å—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
    COMPLETED = "completed"                  # –ó–∞–≤–µ—Ä—à–µ–Ω–∞
    FAILED = "failed"                        # –ù–µ –≤–¥–∞–ª–∞—Å—å
    CANCELLED = "cancelled"                  # –°–∫–∞—Å–æ–≤–∞–Ω–∞

class BroadcastSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
    """
    
    def __init__(self, bot, db_available: bool = False):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
        
        Args:
            bot: Telegram Bot instance
            db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
        """
        self.bot = bot
        self.db_available = db_available
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        try:
            from config.settings import (
                BROADCAST_ENABLED, BROADCAST_RATE_LIMIT, BROADCAST_CHUNK_SIZE,
                ALL_ADMIN_IDS, DAILY_DIGEST_ENABLED, WEEKLY_DIGEST_ENABLED
            )
            self.enabled = BROADCAST_ENABLED
            self.rate_limit = BROADCAST_RATE_LIMIT
            self.chunk_size = BROADCAST_CHUNK_SIZE
            self.admin_ids = ALL_ADMIN_IDS
            self.daily_digest_enabled = DAILY_DIGEST_ENABLED
            self.weekly_digest_enabled = WEEKLY_DIGEST_ENABLED
        except ImportError:
            # Fallback –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            self.enabled = True
            self.rate_limit = 30  # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–∞ —Å–µ–∫—É–Ω–¥—É
            self.chunk_size = 100
            self.admin_ids = [603047391]
            self.daily_digest_enabled = True
            self.weekly_digest_enabled = True
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫
        self.stats = {
            'total_broadcasts': 0,
            'total_sent': 0,
            'total_failed': 0,
            'last_broadcast': None,
            'active_broadcasts': 0,
            'user_blocks': 0,  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —â–æ –∑–∞–±–ª–æ–∫—É–≤–∞–ª–∏ –±–æ—Ç–∞
            'delivery_rate': 0.0
        }
        
        # –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
        self.active_broadcasts: Dict[str, Dict] = {}
        
        # –®–∞–±–ª–æ–Ω–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        self.message_templates = self._load_message_templates()
        
        # –°–µ–º–∞—Ñ–æ—Ä –¥–ª—è rate limiting
        self.rate_semaphore = asyncio.Semaphore(self.rate_limit)
        
        logger.info(f"üì¢ BroadcastSystem —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (rate: {self.rate_limit}/sec, enabled: {self.enabled})")

    def _load_message_templates(self) -> Dict[str, Dict]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        return {
            "daily_content": {
                "emoji": "üåÖ",
                "title": "–†–∞–Ω–∫–æ–≤–∞ –ø–æ—Ä—Ü—ñ—è –≥—É–º–æ—Ä—É!",
                "format": "{emoji} <b>{title}</b>\n\n{content}\n\nüí´ <i>–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è, {name}!</i>"
            },
            "evening_stats": {
                "emoji": "üìä",
                "title": "–í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "format": "{emoji} <b>{title}</b>\n\nüìà –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\nüìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {total_content}\n‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {active_duels}\n\nüåô –ì–∞—Ä–Ω–æ—ó –Ω–æ—á—ñ!"
            },
            "weekly_digest": {
                "emoji": "üì∞",
                "title": "–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç",
                "format": "{emoji} <b>{title}</b>\n\nüî• –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç —Ç–∏–∂–Ω—è:\n{top_content}\n\nüèÜ –ü–µ—Ä–µ–º–æ–∂—Ü—ñ –¥—É–µ–ª–µ–π:\n{top_duelers}\n\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{weekly_stats}"
            },
            "tournament": {
                "emoji": "üèÜ",
                "title": "–¢—É—Ä–Ω—ñ—Ä —Ä–æ–∑–ø–æ—á–∞–≤—Å—è!",
                "format": "{emoji} <b>{title}</b>\n\n‚öîÔ∏è –¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä –∂–∞—Ä—Ç—ñ–≤ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤!\n\nüéØ –Ø–∫ –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å:\n‚Ä¢ –ü–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç\n‚Ä¢ –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö\n‚Ä¢ –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —É–ª—é–±–ª–µ–Ω—ñ –∂–∞—Ä—Ç–∏\n\nüèÖ –ü—Ä–∏–∑–∏ –¥–ª—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:\n{prizes}\n\nüöÄ –£–¥–∞—á—ñ!"
            },
            "achievement": {
                "emoji": "üéâ",
                "title": "–ù–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!",
                "format": "{emoji} <b>–í—ñ—Ç–∞—î–º–æ, {name}!</b>\n\nüèÜ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:\n<b>{achievement_name}</b>\n\nüìù {achievement_description}\n\nüí∞ –ù–∞–≥–æ—Ä–æ–¥–∞: +{reward_points} –±–∞–ª—ñ–≤"
            },
            "system": {
                "emoji": "üîî",
                "title": "–°–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è",
                "format": "{emoji} <b>{title}</b>\n\n{message}\n\nü§ñ –ö–æ–º–∞–Ω–¥–∞ –±–æ—Ç–∞"
            }
        }

    async def send_daily_content_broadcast(self) -> Dict[str, Any]:
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        if not self.enabled or not self.daily_digest_enabled:
            logger.info("üì¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–∞")
            return {"status": "disabled", "sent": 0}
        
        logger.info("üì¢ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
            content = await self._get_content_for_broadcast()
            if not content:
                logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
                return {"status": "no_content", "sent": 0}
            
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = await self._get_active_users_for_broadcast()
            if not users:
                logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
                return {"status": "no_users", "sent": 0}
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            template = self.message_templates["daily_content"]
            
            # –ó–∞–ø—É—Å–∫ —Ä–æ–∑—Å–∏–ª–∫–∏
            broadcast_id = f"daily_content_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            result = await self._execute_broadcast(
                broadcast_id=broadcast_id,
                broadcast_type=BroadcastType.DAILY_CONTENT,
                users=users,
                message_template=template,
                message_data={
                    "content": content.get("text", "ü§£ –ó–∞—Ä—è–¥ –ø–æ–∑–∏—Ç–∏–≤—É –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å!"),
                    "name": "{user_name}"  # –ë—É–¥–µ –∑–∞–º—ñ–Ω–µ–Ω–æ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                }
            )
            
            logger.info(f"üì¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['sent']}/{result['total']}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            return {"status": "error", "error": str(e), "sent": 0}

    async def send_evening_stats_broadcast(self) -> Dict[str, Any]:
        """–í–µ—á—ñ—Ä–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.enabled:
            return {"status": "disabled", "sent": 0}
        
        logger.info("üì¢ –ü–æ—á–∞—Ç–æ–∫ –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = await self._get_bot_statistics()
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤
            template = self.message_templates["evening_stats"]
            
            broadcast_id = f"evening_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            result = await self._execute_broadcast(
                broadcast_id=broadcast_id,
                broadcast_type=BroadcastType.EVENING_STATS,
                users=[{"id": admin_id, "first_name": "–ê–¥–º—ñ–Ω"} for admin_id in self.admin_ids],
                message_template=template,
                message_data=stats
            )
            
            logger.info(f"üì¢ –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω–∞–º")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—á—ñ—Ä–Ω—å–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"status": "error", "error": str(e), "sent": 0}

    async def send_weekly_digest_broadcast(self) -> Dict[str, Any]:
        """–¢–∏–∂–Ω–µ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –¥–∞–π–¥–∂–µ—Å—Ç—É"""
        if not self.enabled or not self.weekly_digest_enabled:
            return {"status": "disabled", "sent": 0}
        
        logger.info("üì¢ –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω–µ–≤–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–∞–π–¥–∂–µ—Å—Ç—É...")
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç—É
            digest_data = await self._generate_weekly_digest()
            users = await self._get_active_users_for_broadcast()
            
            if not users:
                return {"status": "no_users", "sent": 0}
            
            template = self.message_templates["weekly_digest"]
            
            broadcast_id = f"weekly_digest_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            result = await self._execute_broadcast(
                broadcast_id=broadcast_id,
                broadcast_type=BroadcastType.WEEKLY_DIGEST,
                users=users,
                message_template=template,
                message_data=digest_data
            )
            
            logger.info(f"üì¢ –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {result['sent']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É: {e}")
            return {"status": "error", "error": str(e), "sent": 0}

    async def send_tournament_announcement(self) -> Dict[str, Any]:
        """–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ —Ç—É—Ä–Ω—ñ—Ä"""
        if not self.enabled:
            return {"status": "disabled", "sent": 0}
        
        logger.info("üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É...")
        
        try:
            users = await self._get_active_users_for_broadcast()
            template = self.message_templates["tournament"]
            
            prizes_text = (
                "ü•á 1 –º—ñ—Å—Ü–µ: +100 –±–∞–ª—ñ–≤ —Ç–∞ —Ç–∏—Ç—É–ª '–ú–∞–π—Å—Ç–µ—Ä –ì—É–º–æ—Ä—É'\n"
                "ü•à 2 –º—ñ—Å—Ü–µ: +50 –±–∞–ª—ñ–≤\n"
                "ü•â 3 –º—ñ—Å—Ü–µ: +25 –±–∞–ª—ñ–≤"
            )
            
            broadcast_id = f"tournament_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            result = await self._execute_broadcast(
                broadcast_id=broadcast_id,
                broadcast_type=BroadcastType.TOURNAMENT_ANNOUNCE,
                users=users,
                message_template=template,
                message_data={"prizes": prizes_text}
            )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç—É—Ä–Ω—ñ—Ä—É: {e}")
            return {"status": "error", "error": str(e), "sent": 0}

    async def send_achievement_notification(self, user_id: int, achievement_data: Dict) -> bool:
        """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"""
        if not self.enabled:
            return False
        
        try:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_info = await self._get_user_info(user_id)
            if not user_info:
                return False
            
            template = self.message_templates["achievement"]
            message_data = {
                "name": user_info.get("first_name", "–î—Ä—É–∂–µ"),
                "achievement_name": achievement_data.get("name", "–ù–µ–≤—ñ–¥–æ–º–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"),
                "achievement_description": achievement_data.get("description", "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π"),
                "reward_points": achievement_data.get("reward_points", 0)
            }
            
            message = template["format"].format(**message_data)
            
            success = await self._send_message_to_user(user_id, message)
            if success:
                logger.info(f"üèÜ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {e}")
            return False

    async def send_custom_broadcast(self, message: str, target_users: List[int] = None, 
                                  broadcast_type: str = "custom") -> Dict[str, Any]:
        """–ö–∞—Å—Ç–æ–º–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"""
        if not self.enabled:
            return {"status": "disabled", "sent": 0}
        
        logger.info(f"üì¢ –ö–∞—Å—Ç–æ–º–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {len(target_users or [])} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
        try:
            # –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º
            if target_users is None:
                users = await self._get_active_users_for_broadcast()
            else:
                users = []
                for user_id in target_users:
                    user_info = await self._get_user_info(user_id)
                    if user_info:
                        users.append(user_info)
            
            if not users:
                return {"status": "no_users", "sent": 0}
            
            # –ü—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —à–∞–±–ª–æ–Ω—É
            broadcast_id = f"custom_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            result = await self._execute_simple_broadcast(
                broadcast_id=broadcast_id,
                users=users,
                message=message
            )
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
            return {"status": "error", "error": str(e), "sent": 0}

    async def _execute_broadcast(self, broadcast_id: str, broadcast_type: BroadcastType,
                               users: List[Dict], message_template: Dict, 
                               message_data: Dict) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∑ —à–∞–±–ª–æ–Ω–æ–º"""
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ä–æ–∑—Å–∏–ª–∫–∏
        self.active_broadcasts[broadcast_id] = {
            "type": broadcast_type,
            "status": BroadcastStatus.IN_PROGRESS,
            "total_users": len(users),
            "sent": 0,
            "failed": 0,
            "started_at": datetime.now(),
            "estimated_duration": len(users) / self.rate_limit
        }
        
        sent_count = 0
        failed_count = 0
        
        try:
            # –†–æ–∑—Å–∏–ª–∫–∞ –±–∞—Ç—á–∞–º–∏ –¥–ª—è rate limiting
            for i in range(0, len(users), self.chunk_size):
                batch = users[i:i + self.chunk_size]
                
                # –û–±—Ä–æ–±–∫–∞ –±–∞—Ç—á—É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ rate limiting
                tasks = []
                for user in batch:
                    task = self._send_templated_message_to_user(
                        user, message_template, message_data
                    )
                    tasks.append(task)
                
                # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –±–∞—Ç—á—É –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
                batch_results = await self._execute_batch_with_rate_limit(tasks)
                
                # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                for success in batch_results:
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                self.active_broadcasts[broadcast_id]["sent"] = sent_count
                self.active_broadcasts[broadcast_id]["failed"] = failed_count
                
                # –ü–∞—É–∑–∞ –º—ñ–∂ –±–∞—Ç—á–∞–º–∏ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if i + self.chunk_size < len(users):
                    await asyncio.sleep(1)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏
            self.active_broadcasts[broadcast_id]["status"] = BroadcastStatus.COMPLETED
            self.active_broadcasts[broadcast_id]["completed_at"] = datetime.now()
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats["total_broadcasts"] += 1
            self.stats["total_sent"] += sent_count
            self.stats["total_failed"] += failed_count
            self.stats["last_broadcast"] = datetime.now()
            self.stats["delivery_rate"] = (
                self.stats["total_sent"] / (self.stats["total_sent"] + self.stats["total_failed"])
                if (self.stats["total_sent"] + self.stats["total_failed"]) > 0 else 0
            )
            
            return {
                "status": "completed",
                "broadcast_id": broadcast_id,
                "total": len(users),
                "sent": sent_count,
                "failed": failed_count,
                "delivery_rate": (sent_count / len(users)) * 100 if len(users) > 0 else 0
            }
            
        except Exception as e:
            self.active_broadcasts[broadcast_id]["status"] = BroadcastStatus.FAILED
            self.active_broadcasts[broadcast_id]["error"] = str(e)
            raise

    async def _execute_simple_broadcast(self, broadcast_id: str, users: List[Dict], 
                                      message: str) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω—É"""
        
        self.active_broadcasts[broadcast_id] = {
            "type": BroadcastType.CUSTOM,
            "status": BroadcastStatus.IN_PROGRESS,
            "total_users": len(users),
            "sent": 0,
            "failed": 0,
            "started_at": datetime.now()
        }
        
        sent_count = 0
        failed_count = 0
        
        try:
            for i in range(0, len(users), self.chunk_size):
                batch = users[i:i + self.chunk_size]
                
                tasks = []
                for user in batch:
                    task = self._send_message_to_user(user["id"], message)
                    tasks.append(task)
                
                batch_results = await self._execute_batch_with_rate_limit(tasks)
                
                for success in batch_results:
                    if success:
                        sent_count += 1
                    else:
                        failed_count += 1
                
                if i + self.chunk_size < len(users):
                    await asyncio.sleep(1)
            
            self.active_broadcasts[broadcast_id]["status"] = BroadcastStatus.COMPLETED
            self.active_broadcasts[broadcast_id]["sent"] = sent_count
            self.active_broadcasts[broadcast_id]["failed"] = failed_count
            
            return {
                "status": "completed",
                "broadcast_id": broadcast_id,
                "total": len(users),
                "sent": sent_count,
                "failed": failed_count
            }
            
        except Exception as e:
            self.active_broadcasts[broadcast_id]["status"] = BroadcastStatus.FAILED
            raise

    async def _execute_batch_with_rate_limit(self, tasks: List) -> List[bool]:
        """–í–∏–∫–æ–Ω–∞–Ω–Ω—è –±–∞—Ç—á—É –∑ rate limiting"""
        async def rate_limited_task(task):
            async with self.rate_semaphore:
                return await task
        
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–¥–∞—á –∑ rate limiting
        results = await asyncio.gather(
            *[rate_limited_task(task) for task in tasks],
            return_exceptions=True
        )
        
        # –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ –≤–∏–Ω—è—Ç–∫—ñ–≤
        processed_results = []
        for result in results:
            if isinstance(result, Exception):
                processed_results.append(False)
            else:
                processed_results.append(result)
        
        return processed_results

    async def _send_templated_message_to_user(self, user: Dict, template: Dict, 
                                            data: Dict) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ —à–∞–±–ª–æ–Ω–æ–º"""
        try:
            # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            personalized_data = data.copy()
            personalized_data.update({
                "name": user.get("first_name", "–î—Ä—É–∂–µ"),
                "user_name": user.get("first_name", "–î—Ä—É–∂–µ")
            })
            personalized_data.update(template)
            
            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = template["format"].format(**personalized_data)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            return await self._send_message_to_user(user["id"], message)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —à–∞–±–ª–æ–Ω–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.get('id')}: {e}")
            return False

    async def _send_message_to_user(self, user_id: int, message: str) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É"""
        try:
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            return True
            
        except Exception as e:
            error_msg = str(e).lower()
            
            if "bot was blocked by the user" in error_msg:
                self.stats["user_blocks"] += 1
                logger.debug(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
            elif "chat not found" in error_msg:
                logger.debug(f"‚ùì –ß–∞—Ç {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}: {e}")
            
            return False

    async def _get_content_for_broadcast(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
        try:
            if self.db_available:
                from database import get_random_approved_content
                content = await get_random_approved_content()
                if content:
                    return {"text": content.text, "id": content.id}
            
            # Fallback –∫–æ–Ω—Ç–µ–Ω—Ç
            fallback_content = [
                "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –ß–∞—Å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –≥—É–º–æ—Ä—É!\n\nüòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –ö–∞–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean! ü§ì",
                "‚òÄÔ∏è –†–∞–Ω–∫–æ–≤–∞ –¥–æ–∑–∞ –ø–æ–∑–∏—Ç–∏–≤—É!\n\nüéØ –£–∫—Ä–∞—ó–Ω–µ—Ü—å –∫—É–ø—É—î iPhone:\n- –ù–µ –∑–∞–≥—É–±—ñ—Ç—å!\n- –£ –º–µ–Ω–µ —î Find My iPhone!\n- –ê —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ?\n- –ó–Ω–∞—á–∏—Ç—å –≤–∫—Ä–∞–ª–∏ –º–æ—Å–∫–∞–ª—ñ! üá∫üá¶",
                "üåû –ì–∞—Ä–Ω–æ–≥–æ —Ä–∞–Ω–∫—É –≤—Å—ñ–º!\n\nüöó –¢–∞–∫—Å–∏—Å—Ç:\n- –ö—É–¥–∏ —ó–¥–µ–º–æ?\n- –î–æ –ø–µ—Ä–µ–º–æ–≥–∏!\n- –ê–¥—Ä–µ—Å–∞?\n- –ö–∏—ó–≤, –ë–∞–Ω–∫–æ–≤–∞! üèõÔ∏è"
            ]
            
            return {"text": random.choice(fallback_content), "id": 0}
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É: {e}")
            return None

    async def _get_active_users_for_broadcast(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"""
        try:
            if self.db_available:
                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î
                # –¢—É—Ç –±—É–¥–µ —Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ –ë–î
                pass
            
            # Fallback: –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ–≤
            return [{"id": admin_id, "first_name": "–ê–¥–º—ñ–Ω"} for admin_id in self.admin_ids]
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []

    async def _get_user_info(self, user_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            if self.db_available:
                from database import get_user_by_id
                user = await get_user_by_id(user_id)
                if user:
                    return {
                        "id": user.id,
                        "first_name": user.first_name or "–î—Ä—É–∂–µ",
                        "username": user.username
                    }
            
            # Fallback
            return {"id": user_id, "first_name": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"}
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
            return None

    async def _get_bot_statistics(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞"""
        try:
            if self.db_available:
                from database import get_bot_statistics
                stats = await get_bot_statistics()
                return stats
            
            # Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            return {
                "total_users": "N/A",
                "total_content": "N/A",
                "active_duels": "N/A",
                "broadcasts_sent": self.stats["total_sent"]
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    async def _generate_weekly_digest(self) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É"""
        try:
            # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–π–¥–∂–µ—Å—Ç—É –∑ –ë–î
            # –ü–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞
            return {
                "top_content": "1. üòÇ –ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∂–∞—Ä—Ç —Ç–∏–∂–Ω—è\n2. üî• –ù–∞–π–∫—Ä–∞—â–∏–π –º–µ–º\n3. üéØ –ù–∞–π–∫—É–º–µ–¥–Ω—ñ—à–∏–π –∞–Ω–µ–∫–¥–æ—Ç",
                "top_duelers": "1. üëë @user1 - 15 –ø–µ—Ä–µ–º–æ–≥\n2. ü•à @user2 - 12 –ø–µ—Ä–µ–º–æ–≥\n3. ü•â @user3 - 10 –ø–µ—Ä–µ–º–æ–≥",
                "weekly_stats": "üìä –ó–∞–≥–∞–ª–æ–º –¥—É–µ–ª–µ–π: 45\nüìù –ù–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: 89\nüë• –ù–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: 23"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–π–¥–∂–µ—Å—Ç—É: {e}")
            return {}

    def get_broadcast_status(self, broadcast_id: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∫–∏"""
        return self.active_broadcasts.get(broadcast_id)

    def get_system_stats(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
        return {
            "enabled": self.enabled,
            "rate_limit": self.rate_limit,
            "chunk_size": self.chunk_size,
            "stats": self.stats.copy(),
            "active_broadcasts": len(self.active_broadcasts),
            "last_cleanup": getattr(self, "last_cleanup", None)
        }

    async def cleanup_old_broadcasts(self, days: int = 7):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —Ä–æ–∑—Å–∏–ª–æ–∫"""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        to_remove = []
        for broadcast_id, broadcast_data in self.active_broadcasts.items():
            if broadcast_data.get("started_at", datetime.now()) < cutoff_date:
                to_remove.append(broadcast_id)
        
        for broadcast_id in to_remove:
            del self.active_broadcasts[broadcast_id]
        
        self.last_cleanup = datetime.now()
        logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(to_remove)} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ —Ä–æ–∑—Å–∏–ª–æ–∫")

# ===== –§–ê–ë–†–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def create_broadcast_system(bot, db_available: bool = False) -> Optional[BroadcastSystem]:
    """
    –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
    
    Args:
        bot: Telegram Bot instance  
        db_available: –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö
    
    Returns:
        BroadcastSystem –∞–±–æ None –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    """
    try:
        broadcast_system = BroadcastSystem(bot, db_available)
        logger.info("‚úÖ BroadcastSystem —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return broadcast_system
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è BroadcastSystem: {e}")
        return None

# ===== –ï–ö–°–ü–û–†–¢ =====
__all__ = [
    'BroadcastSystem',
    'BroadcastType', 
    'BroadcastStatus',
    'create_broadcast_system'
]

logger.info("‚úÖ BroadcastSystem –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ")