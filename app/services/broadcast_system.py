#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¢ –°–ò–°–¢–ï–ú–ê –†–û–ó–£–ú–ù–ò–• –†–û–ó–°–ò–õ–û–ö

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
–¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
"""

import logging
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import asyncio

from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest

logger = logging.getLogger(__name__)

class BroadcastSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—É–º–Ω–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_broadcasts = {}
        self.daily_content_sent = False
        self.weekly_stats_sent = False
        
    # ===== –©–û–î–ï–ù–ù–Ü –†–û–ó–°–ò–õ–ö–ò =====
    
    async def send_daily_content(self):
        """–©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            logger.info("üì¢ –ü–æ—á–∞—Ç–æ–∫ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            active_users = await self.get_active_users(days=7)
            
            if not active_users:
                logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞ –¥–µ–Ω—å
            daily_content = await self.get_daily_best_content()
            
            if not daily_content:
                logger.info("–ù–µ–º–∞—î –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏")
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message_text, keyboard = self.create_daily_content_message(daily_content)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            success_count = await self.send_broadcast(
                active_users, 
                message_text, 
                keyboard,
                delay=0.1  # 100–º—Å –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            )
            
            logger.info(f"‚úÖ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success_count}/{len(active_users)}")
            self.daily_content_sent = True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
    
    async def send_duel_reminders(self):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ"""
        try:
            from database.services import get_active_duels, get_users_who_can_vote
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ —â–æ —Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à—É—é—Ç—å—Å—è
            active_duels = await get_active_duels(limit=5)
            expiring_duels = []
            
            for duel in active_duels:
                if duel.get('ends_at'):
                    time_left = duel['ends_at'] - datetime.utcnow()
                    if time_left.total_seconds() < 1800:  # –º–µ–Ω—à–µ 30 —Ö–≤–∏–ª–∏–Ω
                        expiring_duels.append(duel)
            
            if not expiring_duels:
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ —â–µ –Ω–µ –≥–æ–ª–æ—Å—É–≤–∞–ª–∏
            for duel in expiring_duels:
                users_to_notify = await get_users_who_can_vote(duel['id'])
                
                if users_to_notify:
                    message_text, keyboard = self.create_duel_reminder_message(duel)
                    
                    await self.send_broadcast(
                        users_to_notify,
                        message_text,
                        keyboard,
                        delay=0.05
                    )
            
            logger.info(f"üì¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ {len(expiring_duels)} –¥—É–µ–ª—ñ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ –¥—É–µ–ª—ñ: {e}")
    
    async def send_weekly_digest(self):
        """–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            logger.info("üìä –ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É...")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            all_users = await self.get_all_users()
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏–∂–Ω–µ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            weekly_stats = await self.generate_weekly_stats()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç—É
            message_text, keyboard = self.create_weekly_digest_message(weekly_stats)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            success_count = await self.send_broadcast(
                all_users,
                message_text,
                keyboard,
                delay=0.2
            )
            
            logger.info(f"‚úÖ –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {success_count}/{len(all_users)}")
            self.weekly_stats_sent = True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É: {e}")
    
    # ===== –°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –†–û–ó–°–ò–õ–ö–ò =====
    
    async def send_tournament_announcement(self, tournament_data: Dict):
        """–ê–Ω–æ–Ω—Å —Ç—É—Ä–Ω—ñ—Ä—É –¥—É–µ–ª—ñ–≤"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª—ñ—Å—Ç—ñ–≤
            duel_participants = await self.get_duel_participants()
            
            message_text = (
                f"üèÜ <b>–ê–ù–û–ù–° –¢–£–†–ù–Ü–†–£ –î–£–ï–õ–Ü–í!</b> üèÜ\n\n"
                f"üéØ <b>{tournament_data.get('name', '–í–µ–ª–∏–∫–∏–π —Ç—É—Ä–Ω—ñ—Ä')}</b>\n\n"
                f"üìÖ –ü–æ—á–∞—Ç–æ–∫: {tournament_data.get('start_date', '–ó–∞–≤—Ç—Ä–∞')}\n"
                f"‚è∞ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {tournament_data.get('duration', '7 –¥–Ω—ñ–≤')}\n"
                f"üèÜ –ü—Ä–∏–∑: {tournament_data.get('prize', '+500 –±–∞–ª—ñ–≤ –ø–µ—Ä–µ–º–æ–∂—Ü—é')}\n\n"
                f"üí° –£—á–∞—Å—Ç—å –±–µ—Ä—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—ñ –¥—É–µ–ª—ñ—Å—Ç–∏!\n"
                f"–°—Ç–≤–æ—Ä—é–π—Ç–µ –∂–∞—Ä—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–º–∞–≥–∞–π—Ç–µ —É –¥—É–µ–ª—è—Ö!"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤", callback_data="duel_menu")],
                [InlineKeyboardButton(text="üìä –ú—ñ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="duel_stats")]
            ])
            
            await self.send_broadcast(duel_participants, message_text, keyboard)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–æ–Ω—Å—É —Ç—É—Ä–Ω—ñ—Ä—É: {e}")
    
    async def send_maintenance_notification(self, maintenance_info: Dict):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏"""
        try:
            all_users = await self.get_all_users()
            
            message_text = (
                f"üîß <b>–¢–ï–•–ù–Ü–ß–ù–Ü –†–û–ë–û–¢–ò</b>\n\n"
                f"‚è∞ –ß–∞—Å: {maintenance_info.get('time', '–Ω–µ–∑–∞–±–∞—Ä–æ–º')}\n"
                f"‚åõ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {maintenance_info.get('duration', '~30 —Ö–≤–∏–ª–∏–Ω')}\n\n"
                f"üéØ <b>–©–æ –ø–æ–∫—Ä–∞—â–∏–º–æ:</b>\n"
                f"‚Ä¢ {maintenance_info.get('improvements', '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ä–æ–±–æ—Ç–∏ –¥—É–µ–ª—ñ–≤')}\n\n"
                f"üí° –ë–æ—Ç –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–±—ñ—Ç.\n"
                f"–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
            )
            
            await self.send_broadcast(all_users, message_text, None, delay=0.3)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¢–û: {e}")
    
    # ===== –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø =====
    
    async def send_achievement_notifications(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            from database.services import get_recent_achievements
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –∑–∞ –æ—Å—Ç–∞–Ω–Ω—é –¥–æ–±—É
            achievements = await get_recent_achievements(hours=24)
            
            for achievement in achievements:
                try:
                    message_text = (
                        f"üèÜ <b>–ù–û–í–ï –î–û–°–Ø–ì–ù–ï–ù–ù–Ø!</b>\n\n"
                        f"üéØ {achievement['title']}\n"
                        f"üìù {achievement['description']}\n"
                        f"üí∞ –ù–∞–≥–æ—Ä–æ–¥–∞: +{achievement['points']} –±–∞–ª—ñ–≤\n\n"
                        f"üéâ –í—ñ—Ç–∞—î–º–æ –∑ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è–º!"
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
                        [InlineKeyboardButton(text="üèÜ –í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data="achievements")]
                    ])
                    
                    await self.bot.send_message(
                        achievement['user_id'],
                        message_text,
                        reply_markup=keyboard
                    )
                    
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è {achievement['id']}: {e}")
            
            if achievements:
                logger.info(f"üì¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {len(achievements)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è: {e}")
    
    async def send_rank_up_notifications(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä–∞–Ω–≥—É"""
        try:
            from database.services import get_recent_rank_ups
            
            rank_ups = await get_recent_rank_ups(hours=24)
            
            for rank_up in rank_ups:
                try:
                    message_text = (
                        f"‚¨ÜÔ∏è <b>–ü–Ü–î–í–ò–©–ï–ù–ù–Ø –†–ê–ù–ì–£!</b> ‚¨ÜÔ∏è\n\n"
                        f"üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –¥–æ—Å—è–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —Ä–∞–Ω–≥—É:\n"
                        f"üëë <b>{rank_up['new_rank']}</b>\n\n"
                        f"üí∞ –ü–æ—Ç–æ—á–Ω—ñ –±–∞–ª–∏: {rank_up['total_points']}\n"
                        f"üéØ –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É: {rank_up['points_to_next']}\n\n"
                        f"üí° –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö —Ç–∞ –æ—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏!"
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ", callback_data="duel_menu")],
                        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")]
                    ])
                    
                    await self.bot.send_message(
                        rank_up['user_id'],
                        message_text,
                        reply_markup=keyboard
                    )
                    
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è rank up {rank_up['user_id']}: {e}")
            
            if rank_ups:
                logger.info(f"üì¢ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ {len(rank_ups)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Ä–∞–Ω–≥–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ —Ä–∞–Ω–≥–∏: {e}")
    
    # ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò =====
    
    async def send_broadcast(
        self, 
        users: List[Dict], 
        message: str, 
        keyboard: Optional[InlineKeyboardMarkup] = None,
        delay: float = 0.1
    ) -> int:
        """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —à–≤–∏–¥–∫–æ—Å—Ç—ñ"""
        success_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await self.bot.send_message(
                    user['id'],
                    message,
                    reply_markup=keyboard
                )
                success_count += 1
                
                # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
                if delay > 0:
                    await asyncio.sleep(delay)
                    
            except TelegramRetryAfter as e:
                # Rate limit - —á–µ–∫–∞—î–º–æ
                logger.warning(f"Rate limit: —á–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
                # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Å–ø—Ä–æ–±—É
                try:
                    await self.bot.send_message(user['id'], message, reply_markup=keyboard)
                    success_count += 1
                except:
                    failed_count += 1
                    
            except TelegramBadRequest as e:
                # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞ –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞
                if "chat not found" in str(e).lower() or "blocked" in str(e).lower():
                    logger.debug(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user['id']} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞")
                    await self.mark_user_inactive(user['id'])
                failed_count += 1
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['id']}: {e}")
                failed_count += 1
        
        logger.info(f"üìä –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ‚úÖ{success_count} ‚ùå{failed_count}")
        return success_count
    
    def create_daily_content_message(self, content: Dict) -> tuple:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        hour = datetime.now().hour
        if 6 <= hour < 12:
            greeting = "üåÖ –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
        elif 12 <= hour < 18:
            greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ–≥–æ –¥–Ω—è!"
        elif 18 <= hour < 23:
            greeting = "üåÜ –î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"
        else:
            greeting = "üåô –î–æ–±—Ä–æ—ó –Ω–æ—á—ñ!"
        
        message_text = f"{greeting}\n\n"
        message_text += f"üòÇ <b>–ñ–ê–†–¢ –î–ù–Ø</b> üòÇ\n\n"
        message_text += f"<i>{content.get('text', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')}</i>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if content.get('likes', 0) > 0:
            message_text += f"üëç {content['likes']} –≤–ø–æ–¥–æ–±–∞–Ω—å\n"
        
        message_text += f"\nüéØ –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –∂–∞—Ä—Ç —Ç–∞ –±–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö!"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤", callback_data="duel_menu")],
            [
                InlineKeyboardButton(text="üòÇ –©–µ –∂–∞—Ä—Ç", callback_data="get_joke"),
                InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")
            ],
            [InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_joke")]
        ])
        
        return message_text, keyboard
    
    def create_duel_reminder_message(self, duel: Dict) -> tuple:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—å"""
        
        time_left = duel['ends_at'] - datetime.utcnow()
        minutes_left = int(time_left.total_seconds() // 60)
        
        message_text = (
            f"‚è∞ <b>–î–£–ï–õ–¨ –°–ö–û–†–û –ó–ê–í–ï–†–®–£–Ñ–¢–¨–°–Ø!</b>\n\n"
            f"‚öîÔ∏è –î—É–µ–ª—å #{duel['id']}\n"
            f"‚è±Ô∏è –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {minutes_left} —Ö–≤–∏–ª–∏–Ω\n"
            f"üó≥Ô∏è –ì–æ–ª–æ—Å—ñ–≤: {duel.get('total_votes', 0)}\n\n"
            f"üí° –í—Å—Ç–∏–≥–Ω—ñ—Ç—å –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –ì–æ–ª–æ—Å—É–≤–∞—Ç–∏", callback_data=f"view_duel_{duel['id']}")],
            [InlineKeyboardButton(text="üéØ –í—Å—ñ –¥—É–µ–ª—ñ", callback_data="view_duels")]
        ])
        
        return message_text, keyboard
    
    def create_weekly_digest_message(self, stats: Dict) -> tuple:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É"""
        
        message_text = (
            f"üìä <b>–¢–ò–ñ–ù–ï–í–ò–ô –î–ê–ô–î–ñ–ï–°–¢</b>\n\n"
            f"üéØ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∂–Ω—è:</b>\n"
            f"‚öîÔ∏è –î—É–µ–ª–µ–π –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {stats.get('duels_completed', 0)}\n"
            f"üó≥Ô∏è –ì–æ–ª–æ—Å—ñ–≤ –ø–æ–¥–∞–Ω–æ: {stats.get('total_votes', 0)}\n"
            f"üòÇ –ù–æ–≤–∏—Ö –∂–∞—Ä—Ç—ñ–≤: {stats.get('new_content', 0)}\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('active_users', 0)}\n\n"
            
            f"üèÜ <b>–¢–æ–ø –¥—É–µ–ª—ñ—Å—Ç —Ç–∏–∂–Ω—è:</b>\n"
            f"üëë {stats.get('top_duelist', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            f"üéØ –ü–µ—Ä–µ–º–æ–≥: {stats.get('top_wins', 0)}\n\n"
            
            f"üòÇ <b>–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏–π –∂–∞—Ä—Ç:</b>\n"
            f"<i>{stats.get('top_content', '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...')[:100]}...</i>\n\n"
            
            f"üéä –î—è–∫—É—î–º–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö!"
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ", callback_data="duel_menu")],
            [
                InlineKeyboardButton(text="üèÜ –¢–æ–ø", callback_data="leaderboard"),
                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
            ]
        ])
        
        return message_text, keyboard
    
    # ===== –ú–ï–¢–û–î–ò –û–¢–†–ò–ú–ê–ù–ù–Ø –î–ê–ù–ò–• =====
    
    async def get_active_users(self, days: int = 7) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            from database.services import get_active_users_for_broadcast
            return await get_active_users_for_broadcast(days)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []
    
    async def get_all_users(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            from database.services import get_all_users_for_broadcast
            return await get_all_users_for_broadcast()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {e}")
            return []
    
    async def get_duel_participants(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–æ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö"""
        try:
            from database.services import get_duel_participants_for_broadcast
            return await get_duel_participants_for_broadcast()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥—É–µ–ª—ñ—Å—Ç—ñ–≤: {e}")
            return []
    
    async def get_daily_best_content(self) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—Ä–∞—â–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ –¥–µ–Ω—å"""
        try:
            from database.services import get_daily_best_content
            return await get_daily_best_content()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–Ω—è: {e}")
            return None
    
    async def generate_weekly_stats(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–∏–∂–Ω–µ–≤–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            from database.services import generate_weekly_stats
            return await generate_weekly_stats()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def mark_user_inactive(self, user_id: int):
        """–ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        try:
            from database.services import mark_user_inactive
            await mark_user_inactive(user_id)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º: {e}")
    
    # ===== –°–¢–ê–ù –°–ò–°–¢–ï–ú–ò =====
    
    def reset_daily_flags(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–∏—Ö –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤"""
        self.daily_content_sent = False
    
    def reset_weekly_flags(self):
        """–°–∫–∏–¥–∞–Ω–Ω—è —Ç–∏–∂–Ω–µ–≤–∏—Ö –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤"""
        self.weekly_stats_sent = False
    
    def get_broadcast_status(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–æ–∫"""
        return {
            "daily_content_sent": self.daily_content_sent,
            "weekly_stats_sent": self.weekly_stats_sent,
            "active_broadcasts": len(self.active_broadcasts),
            "last_check": datetime.now().isoformat()
        }

# ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á =====

async def create_broadcast_system(bot: Bot) -> BroadcastSystem:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    return BroadcastSystem(bot)

async def test_broadcast_system(broadcast_system: BroadcastSystem):
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    try:
        logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫...")
        
        # –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        active_users = await broadcast_system.get_active_users(days=30)
        logger.info(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(active_users)}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
        status = broadcast_system.get_broadcast_status()
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏: {status}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

# ===== –ï–ö–°–ü–û–†–¢ =====

__all__ = [
    'BroadcastSystem',
    'create_broadcast_system',
    'test_broadcast_system'
]