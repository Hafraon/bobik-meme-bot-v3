#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ üöÄ

–Ü–ù–¢–ï–ì–†–ê–¶–Ü–Ø –í–°–Ü–• –ö–û–ú–ü–û–ù–ï–ù–¢–Ü–í:
‚úÖ Config –∑–∞–≥—Ä—É–∑–∫–∞ –∑ fallback
‚úÖ Database —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
‚úÖ Handlers —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ fallback
‚úÖ Services –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π entry point –¥–ª—è Railway
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional, List, Dict, Any, Union
import traceback
import signal

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, BotCommand

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.automation_active = False
        self.scheduler = None
        self.broadcast_system = None
        self.shutdown_event = asyncio.Event()
        
        # –°–∏—Å—Ç–µ–º–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
        self.bot_token = os.getenv("BOT_TOKEN")
        self.admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            raise ValueError("BOT_TOKEN –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞")
        
        logger.info("ü§ñ AutomatedUkrainianTelegramBot —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from config.settings import ALL_ADMIN_IDS
            return user_id in ALL_ADMIN_IDS
        except ImportError:
            return user_id == self.admin_id

    async def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ fallback"""
        logger.info("üîß –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...")
        
        try:
            from config.settings import (
                BOT_TOKEN, ADMIN_ID, DATABASE_URL, DEBUG,
                WEBHOOK_URL, WEBHOOK_PORT
            )
            
            config = {
                'bot_token': BOT_TOKEN,
                'admin_id': ADMIN_ID,
                'database_url': DATABASE_URL,
                'debug': DEBUG,
                'webhook_url': WEBHOOK_URL,
                'webhook_port': WEBHOOK_PORT
            }
            
            logger.info("‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ config.settings")
            return config
            
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Fallback –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: {e}")
            
            # Fallback –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ environment variables
            config = {
                'bot_token': os.getenv('BOT_TOKEN'),
                'admin_id': int(os.getenv('ADMIN_ID', 0)),
                'database_url': os.getenv('DATABASE_URL', 'sqlite:///bot.db'),
                'debug': os.getenv('DEBUG', 'False').lower() == 'true',
                'webhook_url': os.getenv('WEBHOOK_URL'),
                'webhook_port': int(os.getenv('PORT', 8000))
            }
            
            logger.info("‚úÖ Fallback –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞")
            return config

    async def initialize_bot(self, config: Dict[str, Any]) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞...")
        
        try:
            self.bot = Bot(
                token=config['bot_token'],
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: @{bot_info.username} (ID: {bot_info.id})")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False

    async def initialize_database(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –ë–î
            from database import init_db, get_db_session
            
            success = await init_db()
            if success:
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                self.db_available = True
                return True
            else:
                logger.warning("‚ö†Ô∏è –ë–î –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –Ω–µ—ó")
                self.db_available = False
                return True
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ë–î –º–æ–¥—É–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ: {e}")
            self.db_available = False
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            self.db_available = False
            return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É –±–µ–∑ –ë–î

    async def register_handlers(self) -> bool:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö handlers"""
        logger.info("üéÆ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è handlers...")
        
        try:
            from handlers import register_handlers
            register_handlers(self.dp)
            logger.info("‚úÖ Handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
            return True
            
        except ImportError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É handlers: {e}")
            # –†–µ—î—Å—Ç—Ä—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ fallback handlers
            await self.register_fallback_handlers()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó handlers: {e}")
            await self.register_fallback_handlers()
            return True

    async def register_fallback_handlers(self):
        """–ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ fallback handlers"""
        logger.info("üÜò –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è fallback handlers...")
        
        @self.dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer(
                "üß†üòÇüî• <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                "üîß <i>–ü—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ</i>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                "‚Ä¢ /start - —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\n"
                "‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                "‚ú® –î–ª—è –ø–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ë–î —Ç–∞ handlers"
            )
        
        @self.dp.message(Command("help"))
        async def cmd_help(message: Message):
            await message.answer(
                "üìö <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
                "ü§ñ –¶–µ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram –±–æ—Ç\n"
                "üîß –ó–∞—Ä–∞–∑ –ø—Ä–∞—Ü—é—î –≤ –±–∞–∑–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ\n\n"
                "üí° –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:\n"
                "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è\n"
                "‚Ä¢ –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"
            )
        
        @self.dp.message(Command("status"))
        async def cmd_status(message: Message):
            if not self.is_admin(message.from_user.id):
                await message.answer("‚ùå –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤")
                return
            
            uptime = datetime.now() - self.startup_time
            status_text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                f"‚è∞ Uptime: {uptime.days}–¥ {uptime.seconds//3600}–≥ {(uptime.seconds//60)%60}–º\n"
                f"üíæ –ë–î: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.db_available else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
                f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                f"üëë –ê–¥–º—ñ–Ω: {message.from_user.id}\n"
                f"üöÄ –†–µ–∂–∏–º: Fallback"
            )
            await message.answer(status_text)
        
        logger.info("‚úÖ Fallback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def initialize_automation(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        
        try:
            # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            from services.automated_scheduler import create_automated_scheduler
            
            self.scheduler = await create_automated_scheduler(self.bot)
            if self.scheduler:
                logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                self.automation_active = True
            else:
                logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            
        try:
            # –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
            from services.broadcast_system import create_broadcast_system
            
            self.broadcast_system = await create_broadcast_system(self.bot)
            if self.broadcast_system:
                logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
        return True

    async def setup_bot_commands(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        logger.info("üìã –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥...")
        
        commands = [
            BotCommand(command="start", description="üöÄ –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
            BotCommand(command="help", description="üìö –î–æ–≤—ñ–¥–∫–∞ —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"),
            BotCommand(command="meme", description="üòÇ –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º"),
            BotCommand(command="anekdot", description="üé≠ –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç"),
            BotCommand(command="profile", description="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å —Ç–∞ –±–∞–ª–∏"),
            BotCommand(command="top", description="üèÜ –†–µ–π—Ç–∏–Ω–≥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"),
            BotCommand(command="duel", description="‚öîÔ∏è –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å"),
            BotCommand(command="submit", description="üìù –ü–æ–¥–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç"),
        ]
        
        try:
            await self.bot.set_my_commands(commands)
            logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –º–µ–Ω—é: {e}")

    def setup_signal_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è shutdown...")
            self.shutdown_event.set()
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        logger.info("‚úÖ Signal handlers –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        logger.info("üßπ –ü–æ—á–∞—Ç–æ–∫ cleanup...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler and hasattr(self.scheduler, 'stop'):
                await self.scheduler.stop()
                logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            if self.bot and hasattr(self.bot, 'session'):
                await self.bot.session.close()
                logger.info("‚úÖ Bot session –∑–∞–∫—Ä–∏—Ç–æ")
                
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ cleanup: {e}")
        
        logger.info("‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ AutomatedUkrainianTelegramBot...")
        
        try:
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è signal handlers
            self.setup_signal_handlers()
            
            # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            config = await self.load_config()
            
            # 2. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            if not await self.initialize_bot(config):
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
            
            # 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            await self.initialize_database()
            
            # 4. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è handlers
            await self.register_handlers()
            
            # 5. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            await self.initialize_automation()
            
            # 6. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
            await self.setup_bot_commands()
            
            # 7. –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–∏–π –∑–∞–ø—É—Å–∫
            logger.info("üéØ –ë–æ—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!")
            logger.info(f"üíæ –ë–î: {'‚úÖ' if self.db_available else '‚ùå'}")
            logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'‚úÖ' if self.automation_active else '‚ùå'}")
            
            # 8. –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler and hasattr(self.scheduler, 'start'):
                await self.scheduler.start()
                logger.info("üöÄ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
            
            # 9. –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É shutdown
            shutdown_task = asyncio.create_task(self.shutdown_event.wait())
            polling_task = asyncio.create_task(
                self.dp.start_polling(self.bot, skip_updates=True)
            )
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–¥–Ω–æ—ó –∑ –∑–∞–¥–∞—á
            done, pending = await asyncio.wait(
                [shutdown_task, polling_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –°–∫–∞—Å–æ–≤—É—î–º–æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–¥–∞—á—ñ
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
            logger.info("üõë Polling –∑—É–ø–∏–Ω–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            logger.error(traceback.format_exc())
            raise
        finally:
            await self.cleanup()

    async def main(self):
        """Entry point —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è Railway launcher"""
        try:
            await self.run()
        except KeyboardInterrupt:
            logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
        except Exception as e:
            logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø RAILWAY LAUNCHER =====

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Railway launcher"""
    logger.info("üéØ Railway launcher - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è bot instance...")
    
    try:
        bot_instance = AutomatedUkrainianTelegramBot()
        await bot_instance.main()
    except Exception as e:
        logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        raise

# ===== FALLBACK –§–£–ù–ö–¶–Ü–á =====

async def run_fallback_bot():
    """üÜò Fallback –±–æ—Ç —è–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–µ –ø—Ä–∞—Ü—é—î"""
    logger.info("üÜò –ó–∞–ø—É—Å–∫ fallback –±–æ—Ç–∞...")
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        from aiogram.filters import Command
        from aiogram.types import Message
        
        bot_token = os.getenv("BOT_TOKEN")
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            return False
        
        bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher()
        
        @dp.message(Command("start"))
        async def cmd_start(message: Message):
            await message.answer("üß†üòÇüî• Fallback —Ä–µ–∂–∏–º - –±–æ—Ç –ø—Ä–∞—Ü—é—î!")
        
        @dp.message(Command("status"))
        async def cmd_status(message: Message):
            await message.answer("‚úÖ –°—Ç–∞—Ç—É—Å: Fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π")
        
        logger.info("‚úÖ Fallback –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π")
        await dp.start_polling(bot, skip_updates=True)
        return True
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ fallback –±–æ—Ç–∞: {e}")
        return False

# ===== ENTRY POINT =====

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)