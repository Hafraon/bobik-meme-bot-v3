#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ü–û–í–ù–û–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ ü§ñ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –î–æ–¥–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ typing —ñ–º–ø–æ—Ä—Ç–∏
‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ aiohttp session cleanup
‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ë–î –ø–æ–º–∏–ª–æ–∫
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional, List, Dict, Any  # ‚úÖ –î–û–î–ê–ù–û: List –∑ typing
import signal

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.handlers_status = {}
        self.shutdown_event = asyncio.Event()
        
        # –°–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.scheduler = None
        self.broadcast_system = None
        self.automation_active = False
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from config.settings import settings
            admin_ids = [settings.ADMIN_ID]
            if hasattr(settings, 'ADDITIONAL_ADMINS'):
                admin_ids.extend(settings.ADDITIONAL_ADMINS)
            return user_id in admin_ids
        except ImportError:
            admin_id = int(os.getenv('ADMIN_ID', 0))
            return user_id == admin_id

    async def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        logger.info("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
        
        try:
            from config.settings import settings
            logger.info("‚úÖ Settings loaded from config.settings")
            return settings
        except ImportError:
            logger.warning("‚ö†Ô∏è Using fallback settings from environment")
            import types
            fallback_settings = types.SimpleNamespace()
            fallback_settings.BOT_TOKEN = os.getenv('BOT_TOKEN')
            fallback_settings.ADMIN_ID = int(os.getenv('ADMIN_ID', 0))
            fallback_settings.DATABASE_URL = os.getenv('DATABASE_URL', 'sqlite:///bot.db')
            fallback_settings.DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
            return fallback_settings

    async def initialize_bot(self, settings):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        logger.info("ü§ñ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞...")
        
        if not settings.BOT_TOKEN:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            return False
        
        try:
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            
            self.dp = Dispatcher()
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot creation failed: {e}")
            return False

    async def initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
        
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É database –º–æ–¥—É–ª—è
            import database
            logger.info("‚úÖ Database module imported successfully")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
            required_functions = ['init_db', 'get_db_session']
            missing_functions = []
            
            for func_name in required_functions:
                if not hasattr(database, func_name):
                    missing_functions.append(func_name)
            
            if missing_functions:
                logger.warning(f"‚ö†Ô∏è Missing database functions: {missing_functions}")
                return False
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            if hasattr(database, 'init_db'):
                db_result = await database.init_db()
                if db_result:
                    logger.info("‚úÖ Database initialized successfully")
                    self.db_available = True
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Database initialization returned False")
                    return False
            else:
                logger.warning("‚ö†Ô∏è init_db function not found")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Database module not available: {e}")
            logger.warning("‚ö†Ô∏è Working without full database support")
            return False
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}")
            return False

    async def initialize_automation(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        
        try:
            from services.automated_scheduler import AutomatedScheduler
            from services.broadcast_system import BroadcastSystem
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            self.scheduler = AutomatedScheduler(self.bot, self.db_available)
            logger.info("‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫
            self.broadcast_system = BroadcastSystem(self.bot, self.db_available)
            logger.info("‚úÖ Broadcast system —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            if await self.scheduler.start():
                self.automation_active = True
                logger.info("ü§ñ –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!")
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Automation services not available: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Automation initialization error: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ handlers/__init__.py
            from handlers import register_handlers
            register_handlers(self.dp)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
            await self.register_automation_handlers()
            
            logger.info("‚úÖ All handlers registered with automation support")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers registration failed: {e}")
            return False

    async def register_automation_handlers(self):
        """–•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        from aiogram import F
        from aiogram.filters import Command
        from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
        
        @self.dp.message(Command("start"))
        async def automated_start(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            user_id = message.from_user.id
            first_name = message.from_user.first_name or "–î—Ä—É–∂–µ"
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.db_available:
                try:
                    from database import get_or_create_user
                    await get_or_create_user(
                        telegram_id=user_id,
                        username=message.from_user.username,
                        first_name=first_name
                    )
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è User registration failed: {e}")
            
            # –û—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                    InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="moderation")
                ],
                [
                    InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="users"),
                    InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content")
                ],
                [
                    InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="trending"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
                ],
                [
                    InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="bulk_actions"),
                    InlineKeyboardButton(text="üì¶ –ë–µ–∫–∞–ø", callback_data="backup")
                ]
            ])
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω–∞
            if self.is_admin(user_id):
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è", callback_data="automation"),
                    InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∏", callback_data="broadcasts")
                ])
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é", callback_data="disable_admin_menu")
                ])
            
            text = (
                f"ü§ñ <b>–í—ñ—Ç–∞—é, {first_name}!</b>\n\n"
                f"üß†üòÇüî• <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê</b>\n\n"
                f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ\n"
                f"üìù –ó–∞–≤–¥–∞–Ω—å —É —á–µ—Ä–∑—ñ: {len(self.scheduler.get_jobs()) if self.scheduler else 0}\n\n"
                f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                f"‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π\n"
                f"‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è\n"
                f"‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è\n"
                f"‚Ä¢ –¢–∏–∂–Ω–µ–≤—ñ —Ç–∞ –º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏\n\n"
                f"üìã –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é:"
            )
            
            await message.answer(text, reply_markup=keyboard)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            if self.is_admin(user_id) and self.automation_active:
                admin_text = (
                    f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ!</b>\n\n"
                    f"ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:</b>\n"
                    f"üìÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤—Å—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n"
                    f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback'}\n"
                    f"üéØ –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: –ø—Ä–æ—Ñ—ñ–ª—å, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ç–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
                    f"üîß <b>–ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                    f"/automation_status - —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞\n"
                    f"/broadcast_now - —Ä—É—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n"
                    f"/scheduler_info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è"
                )
                await message.answer(admin_text)

        @self.dp.message(Command("automation_status"))
        async def automation_status(message: Message):
            """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó (—Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω)"""
            if not self.is_admin(message.from_user.id):
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤")
                return
            
            if self.scheduler:
                jobs = self.scheduler.get_jobs()
                status_text = (
                    f"ü§ñ <b>–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á</b>\n\n"
                    f"‚ö° –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
                    f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {len(jobs)}\n"
                    f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback'}\n"
                    f"‚è∞ –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%H:%M:%S')}\n\n"
                    f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
                )
                
                for job in jobs[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                    status_text += f"‚Ä¢ {job.name}\n"
                
                if len(jobs) > 5:
                    status_text += f"... —Ç–∞ —â–µ {len(jobs) - 5} –∑–∞–≤–¥–∞–Ω—å"
                    
            else:
                status_text = "‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
            
            await message.answer(status_text)

        # Callback –æ–±—Ä–æ–±–Ω–∏–∫
        @self.dp.callback_query(F.data.startswith(("stats", "moderation", "users", "content", "trending", "settings", "bulk_actions", "backup", "automation", "broadcasts", "disable_admin_menu")))
        async def enhanced_callback_handler(callback: CallbackQuery):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π callback –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            await callback.answer()
            
            data = callback.data
            user_id = callback.from_user.id
            
            if data == "automation" and self.is_admin(user_id):
                if self.scheduler:
                    jobs = self.scheduler.get_jobs()
                    text = (
                        f"ü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø</b>\n\n"
                        f"‚ö° –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                        f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {len(jobs)}\n"
                        f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
                    )
                    
                    for job in jobs:
                        next_run = job.next_run_time
                        if next_run:
                            text += f"‚Ä¢ {job.name}: {next_run.strftime('%H:%M')}\n"
                        else:
                            text += f"‚Ä¢ {job.name}: –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ\n"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data="restart_automation")],
                        [InlineKeyboardButton(text="‚è∏Ô∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏", callback_data="pause_automation")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard)
                else:
                    await callback.message.edit_text("‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π")
            
            elif data == "broadcasts" and self.is_admin(user_id):
                text = (
                    f"üì¢ <b>–°–ò–°–¢–ï–ú–ê –†–û–ó–°–ò–õ–û–ö</b>\n\n"
                    f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏:\n"
                    f"‚Ä¢ üåÖ –†–∞–Ω–∫–æ–≤–∞ (9:00) - –Ω–∞–π–∫—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                    f"‚Ä¢ üåÜ –í–µ—á—ñ—Ä–Ω—è (20:00) - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è\n"
                    f"‚Ä¢ üìä –¢–∏–∂–Ω–µ–≤–∞ (–Ω–µ–¥—ñ–ª—è 18:00) - –¥–∞–π–¥–∂–µ—Å—Ç\n"
                    f"‚Ä¢ üèÜ –ú—ñ—Å—è—á–Ω–∞ (1 —á–∏—Å–ª–æ) - –ø—ñ–¥—Å—É–º–∫–∏\n\n"
                    f"üìã –†—É—á–Ω—ñ –¥—ñ—ó:"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –†–æ–∑—ñ—Å–ª–∞—Ç–∏ –∑–∞—Ä–∞–∑", callback_data="broadcast_now")],
                    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫", callback_data="broadcast_stats")],
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
            
            elif data == "stats":
                stats_text = (
                    f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
                    f"‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {datetime.now() - self.startup_time}\n"
                    f"üíæ –ë–î: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
                    f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                    f"üìÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {len(self.scheduler.get_jobs()) if self.scheduler else 0} –∑–∞–≤–¥–∞–Ω—å\n\n"
                    f"üéØ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —ñ–Ω—à—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π!"
                )
                await callback.message.edit_text(stats_text)
            
            else:
                await callback.message.edit_text(f"üîß –§—É–Ω–∫—Ü—ñ—è '{data}' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!\n\nü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞ –ø—Ä–∞—Ü—é—î —É —Ñ–æ–Ω—ñ.")
        
        logger.info("‚úÖ Automation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        logger.info("üßπ Cleanup resources...")
        
        try:
            # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚úÖ Scheduler stopped")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó –±–æ—Ç–∞ (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ Unclosed client session)
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed")
            
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")

    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
        logger.info("ü§ñ Starting Automated Ukrainian Telegram Bot...")
        
        try:
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
            settings = await self.load_settings()
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            if not await self.initialize_bot(settings):
                logger.error("‚ùå Failed to initialize bot")
                return False
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            db_success = await self.initialize_database()
            if not db_success:
                logger.warning("‚ö†Ô∏è Working without full database support")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            automation_success = await self.initialize_automation()
            if automation_success:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
            if not await self.register_handlers():
                logger.error("‚ùå Failed to register handlers")
                return False
            
            logger.info("‚úÖ Bot fully initialized with automation support")
            
            # –û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
            def signal_handler():
                logger.info("üõë Received shutdown signal")
                self.shutdown_event.set()
            
            if sys.platform != 'win32':
                signal.signal(signal.SIGTERM, lambda s, f: signal_handler())
                signal.signal(signal.SIGINT, lambda s, f: signal_handler())
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            # Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)