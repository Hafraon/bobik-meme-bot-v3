async def launch_app_main():
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π –∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥—É –∑ app/main.py"""
    
    logger.info("üîÑ –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ç–∞ –∑–∞–ø—É—Å–∫ app/main.py...")
    print("üîÑ Adaptive import and launch app/main.py...", flush=True)
    
    try:
        # –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è app/main.py
        import main as app_module
        
        logger.info("‚úÖ app/main.py —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        print("‚úÖ app/main.py imported successfully", flush=True)
        
        # ===== –ê–î–ê–ü–¢–ò–í–ù–ò–ô –ó–ê–ü–£–°–ö - –°–ü–†–û–ë–£–Ñ–ú–û –í–°–Ü –í–ê–†–Ü–ê–ù–¢–ò =====
        
        # –í–∞—Ä—ñ–∞–Ω—Ç 1: –§—É–Ω–∫—Ü—ñ—è main()
        if hasattr(app_module, 'main') and callable(getattr(app_module, 'main')):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é main(), –∑–∞–ø—É—Å–∫–∞—î–º–æ...")
            print("üéØ Found main() function, launching...", flush=True)
            
            await app_module.main()
            return
        
        # –í–∞—Ä—ñ–∞–Ω—Ç 2: –ö–ª–∞—Å AutomatedUkrainianTelegramBot
        elif hasattr(app_module, 'AutomatedUkrainianTelegramBot'):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å AutomatedUkrainianTelegramBot, —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å...")
            print("üéØ Found AutomatedUkrainianTelegramBot class, creating instance...", flush=True)
            
            bot_instance = app_module.AutomatedUkrainianTelegramBot()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏ –∑–∞–ø—É—Å–∫—É
            if hasattr(bot_instance, 'run') and callable(getattr(bot_instance, 'run')):
                logger.info("‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ bot.run()...")
                print("‚úÖ Launching via bot.run()...", flush=True)
                await bot_instance.run()
            elif hasattr(bot_instance, 'main') and callable(getattr(bot_instance, 'main')):
                logger.info("‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ bot.main()...")  
                print("‚úÖ Launching via bot.main()...", flush=True)
                await bot_instance.main()
            else:
                logger.error("‚ùå –ö–ª–∞—Å –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É run() –∞–±–æ main()")
                raise Exception("Bot class has no run() or main() method")
            return
        
        # –í–∞—Ä—ñ–∞–Ω—Ç 3: –Ü–Ω—à–∏–π –∫–ª–∞—Å –±–æ—Ç–∞
        elif hasattr(app_module, 'UkrainianTelegramBot'):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å UkrainianTelegramBot, —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç–∞–Ω—Å...")
            print("üéØ Found UkrainianTelegramBot class, creating instance...", flush=True)
            
            bot_instance = app_module.UkrainianTelegramBot()
            
            if hasattr(bot_instance, 'run'):
                await bot_instance.run()
            elif hasattr(bot_instance, 'main'):
                await bot_instance.main()
            else:
                logger.error("‚ùå –ö–ª–∞—Å –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É run() –∞–±–æ main()")
                raise Exception("Bot class has no run() or main() method")
            return
        
        # –í–∞—Ä—ñ–∞–Ω—Ç 4: –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ bot –∞–±–æ dispatcher
        elif hasattr(app_module, 'bot') and hasattr(app_module, 'dp'):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ bot —Ç–∞ dp –∑–º—ñ–Ω–Ω—ñ, –∑–∞–ø—É—Å–∫–∞—î–º–æ polling...")
            print("üéØ Found bot and dp variables, starting polling...", flush=True)
            
            bot = getattr(app_module, 'bot')
            dp = getattr(app_module, 'dp')
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
            await dp.start_polling(bot, skip_updates=True)
            return
        
        # –í–∞—Ä—ñ–∞–Ω—Ç 5: –§—É–Ω–∫—Ü—ñ—è run_bot() –∞–±–æ start_bot()
        elif hasattr(app_module, 'run_bot') and callable(getattr(app_module, 'run_bot')):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é run_bot(), –∑–∞–ø—É—Å–∫–∞—î–º–æ...")
            print("üéØ Found run_bot() function, launching...", flush=True)
            
            await app_module.run_bot()
            return
        
        elif hasattr(app_module, 'start_bot') and callable(getattr(app_module, 'start_bot')):
            logger.info("üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü—ñ—é start_bot(), –∑–∞–ø—É—Å–∫–∞—î–º–æ...")
            print("üéØ Found start_bot() function, launching...", flush=True)
            
            await app_module.start_bot()
            return
        
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ - –∑–∞–ø—É—Å–∫–∞—î–º–æ fallback –±–æ—Ç
        else:
            logger.warning("‚ö†Ô∏è –ñ–æ–¥–µ–Ω entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ app/main.py")
            print("‚ö†Ô∏è No entry point found in app/main.py", flush=True)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            available_attrs = [attr for attr in dir(app_module) if not attr.startswith('_')]
            logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∞—Ç—Ä–∏–±—É—Ç–∏ –≤ app/main.py: {available_attrs}")
            print(f"üìã Available attributes in app/main.py: {available_attrs}", flush=True)
            
            logger.info("üÜò –ó–∞–ø—É—Å–∫–∞—î–º–æ fallback –±–æ—Ç...")
            print("üÜò Starting fallback bot...", flush=True)
            await run_fallback_bot()
        
    except ImportError as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É app/main.py: {e}")
        print(f"‚ùå Import error app/main.py: {e}", flush=True)
        logger.error(traceback.format_exc())
        
        logger.info("üÜò –ó–∞–ø—É—Å–∫–∞—î–º–æ fallback –±–æ—Ç —á–µ—Ä–µ–∑ import error...")
        print("üÜò Starting fallback bot due to import error...", flush=True)
        await run_fallback_bot()
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è app/main.py: {e}")
        print(f"‚ùå Execution error app/main.py: {e}", flush=True)
        logger.error(traceback.format_exc())
        
        logger.info("üÜò –ó–∞–ø—É—Å–∫–∞—î–º–æ fallback –±–æ—Ç —á–µ—Ä–µ–∑ execution error...")
        print("üÜò Starting fallback bot due to execution error...", flush=True)
        await run_fallback_bot()

async def run_fallback_bot():
    """Fallback –±–æ—Ç —è–∫–∏–π —Ç–æ—á–Ω–æ –ø—Ä–∞—Ü—é—î"""
    
    logger.info("üÜò –ó–∞–ø—É—Å–∫ fallback –±–æ—Ç–∞...")
    print("üÜò Starting fallback bot...", flush=True)
    
    try:
        from aiogram import Bot, Dispatcher
        from aiogram.enums import ParseMode
        from aiogram.client.default import DefaultBotProperties
        from aiogram.filters import Command
        from aiogram.types import Message
        
        bot_token = os.getenv("BOT_TOKEN")
        admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        if not bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è fallback –±–æ—Ç–∞!")
            print("‚ùå BOT_TOKEN not found for fallback bot!", flush=True)
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ fallback –±–æ—Ç–∞
        bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        dp = Dispatcher()
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ fallback –±–æ—Ç–∞
        @dp.message(Command("start"))
        async def fallback_start(message: Message):
            user_name = message.from_user.first_name or "–¥—Ä—É–∂–µ"
            await message.answer(
                f"üÜò <b>Fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π</b>\n\n"
                f"–ü—Ä–∏–≤—ñ—Ç, {user_name}! –Ø –ø—Ä–∞—Ü—é—é –≤ —Å–ø—Ä–æ—â–µ–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.\n\n"
                f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                f"‚Ä¢ /start - —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
                f"‚Ä¢ /status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                f"‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\n"
                f"‚Ä¢ /joke - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç\n\n"
                f"‚ö†Ô∏è <b>–ê–¥–º—ñ–Ω—É:</b> –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ Railway –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º."
            )
        
        @dp.message(Command("status"))
        async def fallback_status(message: Message):
            await message.answer(
                f"üÜò <b>–°–¢–ê–¢–£–° FALLBACK –ë–û–¢–ê</b>\n\n"
                f"ü§ñ –†–µ–∂–∏–º: –ê–≤–∞—Ä—ñ–π–Ω–∏–π\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n"
                f"‚è∞ –ß–∞—Å: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
                f"üì° Railway: –ê–∫—Ç–∏–≤–Ω–∏–π\n\n"
                f"‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n"
                f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ª–æ–≥–∏ Railway."
            )
        
        @dp.message(Command("help"))
        async def fallback_help(message: Message):
            await message.answer(
                f"üÜò <b>FALLBACK –ë–û–¢ - –î–û–í–Ü–î–ö–ê</b>\n\n"
                f"–Ø –ø—Ä–∞—Ü—é—é –≤ –∞–≤–∞—Ä—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –∫–æ–¥–æ–º.\n\n"
                f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
                f"‚Ä¢ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
                f"‚Ä¢ /status - –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å\n"
                f"‚Ä¢ /help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n"
                f"‚Ä¢ /joke - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –∂–∞—Ä—Ç\n\n"
                f"üîß <b>–î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
                f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Railway –ª–æ–≥–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.\n"
                f"–ü—Ä–æ–±–ª–µ–º–∞: entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ app/main.py"
            )
        
        @dp.message(Command("joke"))
        async def fallback_joke(message: Message):
            import random
            
            jokes = [
                "üòÇ –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ:\n- –ö–∞–≤—É, –±—É–¥—å –ª–∞—Å–∫–∞.\n- –¶—É–∫–æ—Ä?\n- –ù—ñ, boolean!",
                "ü§ñ –ß–æ–º—É –±–æ—Ç–∏ –Ω–µ –ø'—é—Ç—å –∫–∞–≤—É?\n–ë–æ –≤–æ–Ω–∏ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞ –µ–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞—Ö!",
                "üîß Fallback –∂–∞—Ä—Ç:\n–ú—ñ–π –∫–æ–¥ –Ω–µ –ø—Ä–∞—Ü—é—î.\n- –ê —á–æ–º—É?\n- –ë–æ —è –≤ fallback —Ä–µ–∂–∏–º—ñ!",
                "üöÄ Railway —Ä–æ–∑—Ä–æ–±–Ω–∏–∫:\n- –ß–æ–º—É –±–æ—Ç –∫—Ä–∞—à–∏—Ç—å—Å—è?\n- Import error.\n- –ê fallback?\n- –ü—Ä–∞—Ü—é—î!",
                "üß† AI –∂–∞—Ä—Ç:\n–Ø –± —Ä–æ–∑–ø–æ–≤—ñ–≤ –∂–∞—Ä—Ç –ø—Ä–æ –º–∞—à–∏–Ω–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è,\n–∞–ª–µ –≤–æ–Ω–æ –¥–æ—Å—ñ —Ç—Ä–µ–Ω—É—î—Ç—å—Å—è!"
            ]
            
            selected_joke = random.choice(jokes)
            await message.answer(f"üòÑ <b>Fallback –∂–∞—Ä—Ç:</b>\n\n{selected_joke}")
        
        # –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
        @dp.message(Command("admin"))
        async def fallback_admin(message: Message):
            if message.from_user.id != admin_id:
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
                return
            
            await message.answer(
                f"üëë <b>FALLBACK –ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨</b>\n\n"
                f"üÜò –ë–æ—Ç –ø—Ä–∞—Ü—é—î –≤ –∞–≤–∞—Ä—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ.\n\n"
                f"üîç <b>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ Entry point –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ app/main.py\n"
                f"‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—É\n"
                f"‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó main() –∞–±–æ –∫–ª–∞—Å—É\n\n"
                f"üìã <b>Railway –ª–æ–≥–∏:</b>\n"
                f"Dashboard ‚Üí Deployments ‚Üí Logs\n\n"
                f"üîß <b>–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è:</b>\n"
                f"1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ app/main.py\n"
                f"2. –î–æ–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü—ñ—é main() –∞–±–æ –∫–ª–∞—Å\n"
                f"3. Redeploy –ø—Ä–æ–µ–∫—Ç"
            )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–æ—Ç–∞
        bot_info = await bot.get_me()
        logger.info(f"‚úÖ Fallback –±–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
        print(f"‚úÖ Fallback bot connected: @{bot_info.username}", flush=True)
        
        # –ó–∞–ø—É—Å–∫ polling
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ fallback polling...")
        print("üöÄ Starting fallback polling...", flush=True)
        
        await dp.start_polling(
            bot, 
            skip_updates=True,
            allowed_updates=["message", "callback_query"]
        )
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ fallback –±–æ—Ç–∞: {e}")
        print(f"üí• Critical fallback bot error: {e}", flush=True)
        logger.error(traceback.format_exc())
        raise