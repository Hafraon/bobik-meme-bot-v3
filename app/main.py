#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

class UkrainianTelegramBot:
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.settings = None
        self.db_available = False
    
    def load_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ config.settings –∞–±–æ env"""
        try:
            from config.settings import settings
            self.settings = settings
            logger.info("‚úÖ Settings loaded from config.settings")
            return {
                'bot_token': settings.BOT_TOKEN,
                'admin_id': settings.ADMIN_ID,
                'database_url': settings.DATABASE_URL,
                'debug': settings.DEBUG
            }
        except ImportError:
            logger.warning("‚ö†Ô∏è config.settings not available, using env variables")
            return {
                'bot_token': os.getenv('BOT_TOKEN'),
                'admin_id': int(os.getenv('ADMIN_ID', 0)),
                'database_url': os.getenv('DATABASE_URL', 'sqlite:///bot.db'),
                'debug': os.getenv('DEBUG', 'False').lower() == 'true'
            }
    
    def validate_settings(self, settings):
        if not settings.get('bot_token'):
            logger.error("‚ùå BOT_TOKEN not found!")
            return False
        if not settings.get('admin_id'):
            logger.error("‚ùå ADMIN_ID not found!")
            return False
        return True
    
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            if self.settings:
                return self.settings.is_admin(user_id)
            else:
                admin_id = int(os.getenv('ADMIN_ID', 0))
                return user_id == admin_id
        except:
            return False
    
    async def init_database(self, database_url: str):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –Ω–æ–≤–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏"""
        try:
            from database.services import init_database, test_database_connection
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
            if init_database(database_url):
                # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è
                if test_database_connection():
                    self.db_available = True
                    logger.info("‚úÖ Database fully operational")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Database initialized but connection test failed")
                    return False
            else:
                logger.error("‚ùå Database initialization failed")
                return False
            
        except ImportError:
            logger.warning("‚ö†Ô∏è Database services not available, working without DB")
            return True
        except Exception as e:
            logger.error(f"‚ùå Database error: {e}")
            return False
    
    async def create_bot(self, settings):
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.enums import ParseMode
            from aiogram.client.default import DefaultBotProperties
            
            self.bot = Bot(
                token=settings['bot_token'],
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot creation error: {e}")
            return False
    
    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≤–∫–ª—é—á–Ω–æ –∑ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Ç–∞ –∞–¥–º—ñ–Ω–æ–º"""
        try:
            from aiogram.filters import Command
            from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ handlers/
            try:
                from handlers import register_all_handlers
                register_all_handlers(self.dp)
                logger.info("‚úÖ All handlers from handlers/ registered")
            except ImportError:
                logger.warning("‚ö†Ô∏è handlers/ package not available")
            except Exception as e:
                logger.error(f"‚ùå Error registering handlers: {e}")
            
            # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∑ –∞–¥–º—ñ–Ω –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
            @self.dp.message(Command("start"))
            async def cmd_start(message: Message):
                try:
                    user_id = message.from_user.id
                    is_admin = self.is_admin(user_id)
                    
                    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
                    if self.db_available:
                        from database.services import get_or_create_user
                        user_data = get_or_create_user(
                            user_id=user_id,
                            username=message.from_user.username,
                            first_name=message.from_user.first_name,
                            last_name=message.from_user.last_name
                        )
                        
                        if user_data:
                            logger.info(f"User registered/updated: {user_id} (Admin: {is_admin})")
                    
                    # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç—É –∑ –∞–¥–º—ñ–Ω —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
                    if self.settings:
                        from config.settings import TEXTS
                        text = TEXTS['start_message']
                        if is_admin:
                            text += f"\n\nüõ°Ô∏è <b>–ê–î–ú–Ü–ù –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ù–ò–ô</b>\nüìä –î–æ—Å—Ç—É–ø–Ω—ñ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏"
                    else:
                        text = (
                            f"üß†üòÇüî• <b>–ü—Ä–∏–≤—ñ—Ç! –Ø –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç!</b>\n\n"
                            f"üé≠ <b>–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π:</b>\n"
                            f"üòÇ /meme - –≤–∏–ø–∞–¥–∫–æ–≤—ñ –º–µ–º–∏\n"
                            f"ü§£ /joke - —Å–º—ñ—à–Ω—ñ –∂–∞—Ä—Ç–∏\n"
                            f"üß† /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∞–Ω–µ–∫–¥–æ—Ç–∏\n\n"
                            f"üìù <b>–ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏!</b>\n\n"
                            f"{'üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else '‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
                        )
                        
                        if is_admin:
                            text += (
                                f"\nüõ°Ô∏è <b>–ê–î–ú–Ü–ù –§–£–ù–ö–¶–Ü–á:</b>\n"
                                f"/admin_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                                f"/moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è\n"
                                f"/pending - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ\n"
                                f"/approve_ID - —à–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è\n"
                                f"/reject_ID - —à–≤–∏–¥–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è"
                            )
                    
                    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (—Ä—ñ–∑–Ω–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
                    if is_admin:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üòÇ –ú–µ–º", callback_data="get_meme"),
                                InlineKeyboardButton(text="ü§£ –ñ–∞—Ä—Ç", callback_data="get_joke"),
                                InlineKeyboardButton(text="üß† –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_anekdot")
                            ],
                            [
                                InlineKeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
                                InlineKeyboardButton(text="üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="top")
                            ],
                            [
                                InlineKeyboardButton(text="üìä –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
                                InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate")
                            ],
                            [
                                InlineKeyboardButton(text="üìã –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ", callback_data="admin_pending"),
                                InlineKeyboardButton(text="üë• –ê–¥–º—ñ–Ω —Ç–æ–ø", callback_data="admin_top_users")
                            ],
                            [
                                InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç–∏ –º–µ–º", callback_data="submit_demo_meme"),
                                InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
                            ]
                        ])
                    else:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üòÇ –ú–µ–º", callback_data="get_meme"),
                                InlineKeyboardButton(text="ü§£ –ñ–∞—Ä—Ç", callback_data="get_joke"),
                                InlineKeyboardButton(text="üß† –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_anekdot")
                            ],
                            [
                                InlineKeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
                                InlineKeyboardButton(text="üèÜ –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="top")
                            ],
                            [
                                InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç–∏ –º–µ–º", callback_data="submit_demo_meme"),
                                InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_demo_joke")
                            ],
                            [
                                InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                                InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
                            ]
                        ])
                    
                    await message.answer(text, reply_markup=keyboard)
                    
                except Exception as e:
                    logger.error(f"Error in start handler: {e}")
                    await message.answer("üß†üòÇüî• <b>–ë–æ—Ç –ø—Ä–∞—Ü—é—î!</b>\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /status –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É.")
            
            @self.dp.message(Command("status"))
            async def cmd_status(message: Message):
                uptime = datetime.now() - self.startup_time
                is_admin = self.is_admin(message.from_user.id)
                
                status_text = f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</b>\n\n"
                status_text += f"‚è± –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime}\n"
                status_text += f"üóì –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%H:%M:%S %d.%m.%Y')}\n"
                
                if self.settings:
                    status_text += f"‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: –ø–æ–≤–Ω–∞\n"
                    status_text += f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'‚úÖ –∞–∫—Ç–∏–≤–Ω–∞' if self.db_available else '‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
                    status_text += f"üé≠ –ö–æ–Ω—Ç–µ–Ω—Ç: –º–µ–º–∏, –∂–∞—Ä—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏\n"
                    status_text += f"üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: –∞–∫—Ç–∏–≤–Ω–∞\n"
                    status_text += f"üîß –†–µ–∂–∏–º: –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∑ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é\n"
                else:
                    status_text += f"‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: –±–∞–∑–æ–≤–∞\n"
                    status_text += f"üîß –†–µ–∂–∏–º: –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π\n"
                
                if is_admin:
                    status_text += f"\nüëë <b>–ê–¥–º—ñ–Ω —Å—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–Ω–∏–π</b>"
                
                await message.answer(status_text)
            
            # –Ü–Ω—à—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
            @self.dp.message(Command("profile"))
            async def cmd_profile(message: Message):
                if not self.db_available:
                    await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    return
                
                try:
                    from database.services import get_user_stats
                    
                    user_stats = get_user_stats(message.from_user.id)
                    if user_stats:
                        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
                        profile_text += f"üÜî ID: {user_stats['user_id']}\n"
                        profile_text += f"‚≠ê –ë–∞–ª–∏: {user_stats['points']}\n"
                        profile_text += f"üëë –†–∞–Ω–≥: {user_stats['rank']}\n"
                        profile_text += f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {user_stats['created_at'].strftime('%d.%m.%Y')}\n"
                        profile_text += f"üïê –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user_stats['last_activity'].strftime('%d.%m.%Y %H:%M')}\n\n"
                        profile_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                        profile_text += f"üëÄ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {user_stats['total_views']}\n"
                        profile_text += f"üëç –õ–∞–π–∫—ñ–≤: {user_stats['total_likes']}\n"
                        profile_text += f"üìù –ü–æ–¥–∞–Ω—å: {user_stats['total_submissions']}\n"
                        profile_text += f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω—å: {user_stats['total_approvals']}\n"
                        profile_text += f"‚öîÔ∏è –î—É–µ–ª–µ–π: {user_stats['total_duels']}"
                        
                        if self.is_admin(message.from_user.id):
                            profile_text += f"\n\nüëë <b>–°—Ç–∞—Ç—É—Å: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä</b>"
                        
                        await message.answer(profile_text)
                    else:
                        await message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        
                except Exception as e:
                    logger.error(f"Profile error: {e}")
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
            
            @self.dp.message(Command("stats"))
            async def cmd_stats(message: Message):
                if not self.db_available:
                    await message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    return
                
                try:
                    from database.services import get_basic_stats
                    
                    stats = get_basic_stats()
                    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                    stats_text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                    stats_text += f"üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {stats['total_content']}\n"
                    stats_text += f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ: {stats['approved_content']}\n"
                    stats_text += f"‚è≥ –ù–∞ —Ä–æ–∑–≥–ª—è–¥—ñ: {stats['pending_content']}\n"
                    stats_text += f"‚öîÔ∏è –î—É–µ–ª–µ–π: {stats['total_duels']}"
                    
                    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è –∞–¥–º—ñ–Ω–∞
                    if self.is_admin(message.from_user.id):
                        stats_text += f"\n\nüõ°Ô∏è <b>–ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏:</b>\n/admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/moderate - –ø–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é"
                    
                    await message.answer(stats_text)
                    
                except Exception as e:
                    logger.error(f"Stats error: {e}")
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
            @self.dp.message(Command("help"))
            async def cmd_help(message: Message):
                try:
                    is_admin = self.is_admin(message.from_user.id)
                    
                    help_text = (
                        "üìñ <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö</b>\n\n"
                        "üé≠ <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
                        "/meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                        "/joke - —Å–º—ñ—à–Ω–∏–π –∂–∞—Ä—Ç\n"
                        "/anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\n\n"
                        "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\n"
                        "/profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å\n"
                        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
                        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>\n"
                        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n"
                        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
                        "/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞\n\n"
                        "üìù <b>–ü–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é!</b>"
                    )
                    
                    if is_admin:
                        help_text += (
                            f"\n\nüõ°Ô∏è <b>–ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò:</b>\n"
                            f"/admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                            f"/moderate - –ø–æ—á–∞—Ç–∏ –º–æ–¥–µ—Ä–∞—Ü—ñ—é\n"
                            f"/pending - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ\n"
                            f"/approve_ID - —à–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è\n"
                            f"/reject_ID [–ø—Ä–∏—á–∏–Ω–∞] - –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è\n\n"
                            f"üí° <b>–ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
                            f"/approve_5 - —Å—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç ID 5\n"
                            f"/reject_3 –ù–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç"
                        )
                    
                    await message.answer(help_text)
                except Exception as e:
                    logger.error(f"Error in help handler: {e}")
                    await message.answer("üìñ <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /status, /profile, /stats, /help")
            
            # –†–æ–∑—à–∏—Ä–µ–Ω—ñ callback handlers –∑ –∞–¥–º—ñ–Ω –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
            @self.dp.callback_query()
            async def handle_main_callbacks(callback):
                """–û—Å–Ω–æ–≤–Ω—ñ callback'–∏ –∑ –∞–¥–º—ñ–Ω –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"""
                try:
                    data = callback.data
                    user_id = callback.from_user.id
                    is_admin = self.is_admin(user_id)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π callback
                    if any(data.startswith(prefix) for prefix in ["like_", "dislike_", "more_", "submit_", "admin_", "moderate_"]):
                        return  # –ù–µ—Ö–∞–π –æ–±—Ä–æ–±–ª—è—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
                    
                    if data == "get_meme":
                        from handlers.content_handlers import handle_meme_command
                        await handle_meme_command(callback.message)
                        await callback.answer()
                        
                    elif data == "get_joke":
                        from handlers.content_handlers import handle_joke_command
                        await handle_joke_command(callback.message)
                        await callback.answer()
                        
                    elif data == "get_anekdot":
                        from handlers.content_handlers import handle_anekdot_command
                        await handle_anekdot_command(callback.message)
                        await callback.answer()
                    
                    elif data == "profile":
                        if self.db_available:
                            from database.services import get_user_stats
                            user_stats = get_user_stats(user_id)
                            if user_stats:
                                profile_msg = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:</b>\n‚≠ê –ë–∞–ª–∏: {user_stats['points']}\nüëë –†–∞–Ω–≥: {user_stats['rank']}"
                                if is_admin:
                                    profile_msg += f"\nüëë –°—Ç–∞—Ç—É—Å: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
                                await callback.message.answer(profile_msg)
                            else:
                                await callback.message.answer("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            await callback.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        await callback.answer()
                        
                    elif data == "stats":
                        if self.db_available:
                            from database.services import get_basic_stats
                            stats = get_basic_stats()
                            stats_msg = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\nüë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\nüìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: {stats['total_content']}"
                            if is_admin:
                                stats_msg += f"\n‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó: {stats['pending_content']}"
                            await callback.message.answer(stats_msg)
                        else:
                            await callback.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        await callback.answer()
                        
                    elif data == "top":
                        if self.db_available:
                            from database.services import get_top_users
                            top_users = get_top_users(5)
                            if top_users:
                                top_text = "üèÜ <b>–¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b>\n\n"
                                for i, user in enumerate(top_users, 1):
                                    name = user['first_name'] or user['username'] or f"User{user['user_id']}"
                                    top_text += f"{i}. {name} - {user['points']} –±–∞–ª—ñ–≤\n"
                                await callback.message.answer(top_text)
                            else:
                                await callback.message.answer("üë• –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É")
                        else:
                            await callback.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        await callback.answer()
                        
                    elif data == "help":
                        help_msg = (
                            "üìñ <b>–î–æ–ø–æ–º–æ–≥–∞</b>\n\n"
                            "üé≠ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É!\n"
                            "üìù –ü–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–Ω–æ–ø–∫–∏\n"
                            "‚≠ê –ó–∞—Ä–æ–±–ª—è–π—Ç–µ –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
                            "üèÜ –ó–º–∞–≥–∞–π—Ç–µ—Å—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É!"
                        )
                        if is_admin:
                            help_msg += f"\n\nüõ°Ô∏è –í–∏ –º–∞—î—Ç–µ –∞–¥–º—ñ–Ω –ø—Ä–∞–≤–∞!\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∞–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó."
                        await callback.message.answer(help_msg)
                        await callback.answer()
                    else:
                        await callback.answer("üöß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
                        
                except Exception as e:
                    logger.error(f"Main callback error: {e}")
                    await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏!")
            
            logger.info("‚úÖ Enhanced handlers with admin integration registered")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers setup error: {e}")
            return False
    
    async def main(self):
        logger.info("üöÄ Starting Enhanced Ukrainian Telegram Bot with Admin System...")
        
        try:
            # Load settings
            settings = self.load_settings()
            
            if not self.validate_settings(settings):
                return False
            
            # Initialize database
            await self.init_database(settings['database_url'])
            
            # Create bot
            if not await self.create_bot(settings):
                return False
            
            # Setup handlers
            if not await self.setup_handlers():
                return False
            
            # Notify admin
            if settings.get('admin_id') and self.bot:
                try:
                    mode = "–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–º—É –∑ –º–æ–¥–µ—Ä–∞—Ü—ñ—î—é" if self.settings else "–±–∞–∑–æ–≤–æ–º—É"
                    db_status = "–ø—ñ–¥–∫–ª—é—á–µ–Ω–∞" if self.db_available else "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                    
                    await self.bot.send_message(
                        settings['admin_id'],
                        f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ {mode} —Ä–µ–∂–∏–º—ñ!</b>\n\n"
                        f"üïê –ß–∞—Å: {datetime.now().strftime('%H:%M:%S')}\n"
                        f"‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {'–ø–æ–≤–Ω—ñ' if self.settings else '–±–∞–∑–æ–≤—ñ'}\n"
                        f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {db_status}\n\n"
                        f"üé≠ <b>–ö–æ–Ω—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞:</b>\n"
                        f"üòÇ –ú–µ–º–∏ (/meme)\n"
                        f"ü§£ –ñ–∞—Ä—Ç–∏ (/joke)\n"
                        f"üß† –ê–Ω–µ–∫–¥–æ—Ç–∏ (/anekdot)\n"
                        f"üìù –ü–æ–¥–∞—á–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n\n"
                        f"üõ°Ô∏è <b>–ê–¥–º—ñ–Ω —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                        f"/admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                        f"/moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                        f"/pending - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ\n"
                        f"/approve_ID - —à–≤–∏–¥–∫–µ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è\n"
                        f"/reject_ID - —à–≤–∏–¥–∫–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è\n\n"
                        f"‚≠ê –°–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ —Ç–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω—ñ!"
                    )
                except Exception as e:
                    logger.warning(f"Could not notify admin: {e}")
            
            logger.info("üéØ Starting polling with admin system...")
            await self.dp.start_polling(self.bot, skip_updates=True)
            
            return True
            
        except Exception as e:
            logger.error(f"üí• Critical error: {e}")
            return False
        finally:
            if self.bot:
                await self.bot.session.close()

async def main():
    bot = UkrainianTelegramBot()
    try:
        result = await bot.main()
        return result
    except KeyboardInterrupt:
        logger.info("üõë Stopped by user")
        return True
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        sys.exit(1)