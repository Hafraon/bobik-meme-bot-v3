#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ü–û–í–ù–Ü–°–¢–Æ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ üöÄ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –î–æ–¥–∞–Ω–æ –≤—Å—ñ typing —ñ–º–ø–æ—Ä—Ç–∏ (List, Dict, Any)
‚úÖ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ AutomatedScheduler –∞—Ä–≥—É–º–µ–Ω—Ç–∏
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ–π
‚úÖ –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ë–î
‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
"""

import asyncio
import logging
import sys
import os
import signal
from datetime import datetime
from typing import Optional, List, Dict, Any, Union  # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –≤—Å—ñ typing —ñ–º–ø–æ—Ä—Ç–∏
import traceback

# –î–æ–¥–∞—î–º–æ app –¥–æ Python path
app_dir = os.path.dirname(os.path.abspath(__file__))
if app_dir not in sys.path:
    sys.path.insert(0, app_dir)

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import F

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.handlers_status = {}
        self.shutdown_event = asyncio.Event()
        
        # –°–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.scheduler = None
        self.broadcast_system = None
        self.automation_active = False
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ environment variables
        self.bot_token = os.getenv("BOT_TOKEN")
        self.admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment variables!")
            sys.exit(1)
        
        logger.info("üß†üòÇüî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")

    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_id

    async def initialize_bot(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
            self.bot = Bot(
                token=self.bot_token,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username} ({bot_info.full_name})")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            return False

    async def initialize_database(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
            try:
                from database import init_db
                self.db_available = await init_db()
                
                if self.db_available:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–∞—Ü—é—î–º–æ –≤ fallback —Ä–µ–∂–∏–º—ñ")
                    
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Database –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
                self.db_available = False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
                self.db_available = False
            
            return True  # –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ True - –±–æ—Ç –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –±–µ–∑ –ë–î
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ë–î: {e}")
            return False

    async def initialize_automation(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
        
        try:
            # –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            from services.automated_scheduler import create_automated_scheduler
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            
            if self.scheduler:
                logger.info("‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
                if await self.scheduler.start():
                    self.automation_active = True
                    logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
                    
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
                    status = self.scheduler.get_scheduler_status()
                    logger.info(f"üìÖ –ó–∞–ø—É—â–µ–Ω–æ {status['jobs_count']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å")
                    
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
                    return False
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Automation services –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: {e}")
            logger.info("üìÑ –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
            logger.error(traceback.format_exc())
            return False

    async def register_handlers(self) -> bool:
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
            
            # –û—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ handlers/__init__.py
            try:
                from handlers import register_handlers
                register_handlers(self.dp)
                logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤: {e}")
                # –†–µ—î—Å—Ç—Ä—É—î–º–æ fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏
                await self._register_fallback_handlers()
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            await self._register_automation_handlers()
            
            logger.info("‚úÖ All handlers registered with automation support")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers registration failed: {e}")
            logger.error(traceback.format_exc())
            return False

    async def _register_fallback_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è fallback —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä–æ–±–ª–µ–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏"""
        
        @self.dp.message(Command("start"))
        async def fallback_start(message: Message):
            """Fallback –∫–æ–º–∞–Ω–¥–∞ /start"""
            await message.answer(
                "ü§ñ <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π!</b>\n\n"
                "‚ö° –ë–∞–∑–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π\n"
                "üîß –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏"
            )
        
        @self.dp.message(Command("help"))
        async def fallback_help(message: Message):
            """Fallback –∫–æ–º–∞–Ω–¥–∞ /help"""
            await message.answer(
                "üìö <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
                "ü§ñ /start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
                "üìä /status - –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó\n"
                "üõ°Ô∏è /admin - –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"
            )
        
        logger.info("‚úÖ Fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def _register_automation_handlers(self):
        """–•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        
        @self.dp.message(Command("start"))
        async def automated_start(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            user_id = message.from_user.id
            first_name = message.from_user.first_name or "–î—Ä—É–∂–µ"
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if self.db_available:
                try:
                    from database import get_or_create_user
                    await get_or_create_user(
                        telegram_id=user_id,
                        username=message.from_user.username,
                        first_name=first_name,
                        last_name=message.from_user.last_name
                    )
                except Exception as e:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
                    InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="moderation")
                ],
                [
                    InlineKeyboardButton(text="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="users"),
                    InlineKeyboardButton(text="üìù –ö–æ–Ω—Ç–µ–Ω—Ç", callback_data="content")
                ],
                [
                    InlineKeyboardButton(text="üî• –¢—Ä–µ–Ω–¥–æ–≤–µ", callback_data="trending"),
                    InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")
                ],
                [
                    InlineKeyboardButton(text="üöÄ –ú–∞—Å–æ–≤—ñ –¥—ñ—ó", callback_data="bulk_actions"),
                    InlineKeyboardButton(text="üíæ –ë–µ–∫–∞–ø", callback_data="backup")
                ],
                [
                    InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è", callback_data="automation"),
                    InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∏", callback_data="broadcasts")
                ],
                [
                    InlineKeyboardButton(text="‚ùå –í–∏–º–∫–Ω—É—Ç–∏ –∞–¥–º—ñ–Ω –º–µ–Ω—é", callback_data="disable_admin_menu")
                ]
            ])
            
            automation_status = "–ê–∫—Ç–∏–≤–Ω–∞" if self.automation_active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            db_status = "–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞" if self.db_available else "Fallback —Ä–µ–∂–∏–º"
            
            welcome_text = (
                f"üß†üòÇüî• <b>–í—ñ—Ç–∞—é, {first_name}!</b>\n\n"
                f"ü§ñ <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é</b>\n\n"
                f"üìä <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:</b>\n"
                f"‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {automation_status}\n"
                f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {db_status}\n"
                f"üïê –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üéØ <b>–û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                f"‚Ä¢ üòÇ –ú–µ–º–∏ —Ç–∞ –∂–∞—Ä—Ç–∏\n"
                f"‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\n"
                f"‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n"
                f"‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                f"‚Ä¢ üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—ó\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
            )
            
            await message.answer(welcome_text, reply_markup=keyboard)

        @self.dp.message(Command("status"))
        async def automation_status(message: Message):
            """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
            if self.scheduler:
                status = self.scheduler.get_scheduler_status()
                jobs = self.scheduler.get_jobs_info()
                
                status_text = (
                    f"ü§ñ <b>–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á</b>\n\n"
                    f"‚ö° –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if status['is_running'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
                    f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–î–æ—Å—Ç—É–ø–Ω–∞' if status['db_available'] else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}\n"
                    f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {status['jobs_count']}\n"
                    f"‚è±Ô∏è –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {status['uptime_hours']:.1f} –≥–æ–¥\n\n"
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚Ä¢ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {status['stats']['jobs_executed']}\n"
                    f"‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {status['stats']['jobs_failed']}\n"
                    f"‚Ä¢ –†–æ–∑—Å–∏–ª–æ–∫: {status['stats']['broadcasts_sent']}\n\n"
                )
                
                if jobs:
                    status_text += f"üìã <b>–ù–∞—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
                    for job in jobs[:5]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 5
                        status_text += f"‚Ä¢ {job['name']}\n"
                    
                    if len(jobs) > 5:
                        status_text += f"... —Ç–∞ —â–µ {len(jobs) - 5} –∑–∞–≤–¥–∞–Ω—å"
                        
            else:
                status_text = "‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
            
            await message.answer(status_text)

        # Callback –æ–±—Ä–æ–±–Ω–∏–∫
        @self.dp.callback_query(F.data.startswith((
            "stats", "moderation", "users", "content", "trending", 
            "settings", "bulk_actions", "backup", "automation", 
            "broadcasts", "disable_admin_menu"
        )))
        async def enhanced_callback_handler(callback: CallbackQuery):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∏–π callback –æ–±—Ä–æ–±–Ω–∏–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            await callback.answer()
            
            data = callback.data
            user_id = callback.from_user.id
            
            if data == "automation" and self.is_admin(user_id):
                if self.scheduler:
                    status = self.scheduler.get_scheduler_status()
                    jobs = self.scheduler.get_jobs_info()
                    
                    text = (
                        f"ü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø</b>\n\n"
                        f"‚ö° –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                        f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {len(jobs)}\n"
                        f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:</b>\n"
                    )
                    
                    for job in jobs:
                        if job['next_run']:
                            next_run = datetime.fromisoformat(job['next_run']).strftime('%H:%M')
                            text += f"‚Ä¢ {job['name']}: {next_run}\n"
                        else:
                            text += f"‚Ä¢ {job['name']}: —ñ–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–µ\n"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏", callback_data="restart_automation")],
                        [InlineKeyboardButton(text="‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏", callback_data="stop_automation")],
                        [InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_stats")],
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard)
                else:
                    await callback.message.edit_text("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            elif data == "broadcasts" and self.is_admin(user_id):
                text = (
                    f"üì¢ <b>–°–ò–°–¢–ï–ú–ê –†–û–ó–°–ò–õ–û–ö</b>\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫:\n"
                    f"‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats.get('broadcasts_sent', 0) if hasattr(self, 'stats') else 'N/A'}\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤: N/A\n"
                    f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∞: N/A\n\n"
                    f"üïê –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏:\n"
                    f"‚Ä¢ 9:00 - –†–∞–Ω–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                    f"‚Ä¢ 20:00 - –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    f"‚Ä¢ –ü'—è—Ç–Ω–∏—Ü—è 19:00 - –¢–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä\n"
                    f"‚Ä¢ –ù–µ–¥—ñ–ª—è 18:00 - –¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç"
                )
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –¢–µ—Å—Ç–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data="test_broadcast")],
                    [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤", callback_data="subscribers_list")],
                    [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–æ–∫", callback_data="broadcast_settings")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
                ])
                
                await callback.message.edit_text(text, reply_markup=keyboard)
            
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö callback'—ñ–≤
                await callback.message.edit_text(f"üîß –§—É–Ω–∫—Ü—ñ—è '{data}' –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")

        logger.info("‚úÖ Automation handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º"""
        logger.info("üßπ Cleanup resources...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            if self.scheduler:
                await self.scheduler.stop()
                logger.info("‚èπÔ∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                if not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ cleanup: {e}")

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if not await self.initialize_bot():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
                return
            
            if not await self.initialize_database():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ë–î")
                return
            
            automation_success = await self.initialize_automation()
            if automation_success:
                logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            if not await self.register_handlers():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∏")
                return
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown
            def signal_handler():
                logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
                self.shutdown_event.set()
            
            if hasattr(signal, 'SIGINT'):
                signal.signal(signal.SIGINT, lambda s, f: signal_handler())
            if hasattr(signal, 'SIGTERM'):
                signal.signal(signal.SIGTERM, lambda s, f: signal_handler())
            
            # –ó–∞–ø—É—Å–∫ polling
            logger.info("üéØ Bot fully initialized with automation support")
            logger.info("üöÄ Starting polling...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è task –¥–ª—è polling
            polling_task = asyncio.create_task(
                self.dp.start_polling(self.bot, allowed_updates=["message", "callback_query"])
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è task –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è shutdown
            shutdown_task = asyncio.create_task(self.shutdown_event.wait())
            
            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ –∑ task'—ñ–≤
            done, pending = await asyncio.wait(
                [polling_task, shutdown_task],
                return_when=asyncio.FIRST_COMPLETED
            )
            
            # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—Ö task'—ñ–≤
            for task in pending:
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
            
            logger.info("üõë –ë–æ—Ç –∑–∞–≤–µ—Ä—à—É—î —Ä–æ–±–æ—Ç—É...")
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            logger.error(traceback.format_exc())
        finally:
            await self.cleanup()

# ===== –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø =====
async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        bot = AutomatedUkrainianTelegramBot()
        await bot.run()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(traceback.format_exc())

if __name__ == "__main__":
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ async —Ñ—É–Ω–∫—Ü—ñ—ó
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ü—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)