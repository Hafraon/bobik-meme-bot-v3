#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ (AIOGRAM 3.4+ –°–£–ú–Ü–°–ù–ò–ô) üöÄ

–í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:
‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ disable_web_page_preview –∑ DefaultBotProperties
‚úÖ –°—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ aiogram 3.4+
‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
‚úÖ –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional, List, Dict, Any, Union
import traceback

# Telegram Bot API
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

# Logging setup
logging.basicConfig(level=logging.INFO, format='%(asctime)s - **%(name)s** - %(levelname)s - %(message)s')
logger = logging.getLogger('main')

class AutomatedUkrainianTelegramBot:
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram –±–æ—Ç"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.automation_active = False
        self.scheduler = None
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.bot_token = os.getenv("BOT_TOKEN")
        self.admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
            sys.exit(1)
        
        logger.info("üß†üòÇüî• –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")

    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id == self.admin_id

    async def initialize_bot(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞...")
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–¥–∞–ª–µ–Ω–æ disable_web_page_preview
            self.bot = Bot(
                token=self.bot_token,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML
                    # ‚ùå –í–ò–î–ê–õ–ï–ù–û: disable_web_page_preview=True
                )
            )
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
            self.dp = Dispatcher()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username} ({bot_info.full_name})")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            return False

    async def initialize_database(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î
            try:
                from database import init_db
                self.db_available = await init_db()
                
                if self.db_available:
                    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–∞—Ü—é—î–º–æ –≤ fallback —Ä–µ–∂–∏–º—ñ")
                    
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Database –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
                self.db_available = False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
                self.db_available = False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ë–î: {e}")
            return False

    async def initialize_automation(self) -> bool:
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
            
            try:
                from services.automated_scheduler import AutomatedScheduler
                
                # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
                self.scheduler = AutomatedScheduler(self.bot, self.db_available)
                
                # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
                await self.scheduler.start()
                self.automation_active = True
                
                logger.info("‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
                
                return True
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Automation –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
                return False
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            logger.info("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤...")
            
            # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
            @self.dp.message(Command("start"))
            async def cmd_start(message: Message):
                user_mention = f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
                await message.answer(
                    f"üß†üòÇüî• –í—ñ—Ç–∞—é, {user_mention}!\n\n"
                    f"ü§ñ –Ø - –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é!\n\n"
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                    f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback —Ä–µ–∂–∏–º'}\n"
                    f"‚è∞ –ó–∞–ø—É—â–µ–Ω–æ: {self.startup_time.strftime('%H:%M %d.%m.%Y')}\n\n"
                    f"üéÆ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥!"
                )

            @self.dp.message(Command("help"))
            async def cmd_help(message: Message):
                help_text = """
üß†üòÇüî• <b>–ö–û–ú–ê–ù–î–ò –ë–û–¢–ê</b> üß†üòÇüî•

üë§ <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –∑–∞–ø—É—Å–∫ —Ç–∞ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - —Ü–µ–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

üéÆ <b>–†–æ–∑–≤–∞–≥–∏:</b>
/meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º
/joke - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∂–∞—Ä—Ç
/anekdot - —Å–º—ñ—à–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç

üèÜ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>
/profile - —Ç–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å
/top - —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤
/achievements - –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è

‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>
/duel - –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤
/duel_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª–µ–π

üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>
/submit - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∂–∞—Ä—Ç/–º–µ–º
/my_content - –º–æ—ó –ø–æ–¥–∞–Ω–Ω—è

üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:</b>
- üåÖ –†–∞–Ω–∫–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ (09:00)
- üìä –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (20:00)  
- üèÜ –¢–∏–∂–Ω–µ–≤—ñ —Ç—É—Ä–Ω—ñ—Ä–∏ (–ü'—è—Ç–Ω–∏—Ü—è)
- ‚öîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—É–µ–ª—ñ
- üéâ –°–≤—è—Ç–∫–æ–≤—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è

üí° <i>–ë–æ—Ç –ø—Ä–∞—Ü—é—î –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!</i>
                """
                await message.answer(help_text)

            @self.dp.message(Command("status"))
            async def cmd_status(message: Message):
                uptime = datetime.now() - self.startup_time
                uptime_str = f"{uptime.days}–¥ {uptime.seconds//3600}–≥ {(uptime.seconds//60)%60}—Ö–≤"
                
                status_text = f"""
üîß <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>

ü§ñ <b>–û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>
‚îú –°—Ç–∞—Ç—É—Å: ‚úÖ –û–Ω–ª–∞–π–Ω
‚îú –ß–∞—Å —Ä–æ–±–æ—Ç–∏: {uptime_str}
‚îú –ó–∞–ø—É—Å–∫: {self.startup_time.strftime('%H:%M %d.%m.%Y')}
‚îî –†–µ–∂–∏–º: Production

üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b>
‚îî –°—Ç–∞–Ω: {'‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else '‚ö†Ô∏è Fallback —Ä–µ–∂–∏–º'}

ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è:</b>
‚îú –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
‚îú –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'‚úÖ –ü—Ä–∞—Ü—é—î' if self.scheduler else '‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ'}
‚îî –ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è: {len(getattr(self.scheduler, 'jobs', [])) if self.scheduler else 0}

üéØ <b>–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:</b>
‚îú –ú–µ–Ω—é —Ç–∞ –∫–æ–º–∞–Ω–¥–∏: ‚úÖ –ü—Ä–∞—Ü—é—é—Ç—å
‚îú –ñ–∞—Ä—Ç–∏ —Ç–∞ –º–µ–º–∏: ‚úÖ –î–æ—Å—Ç—É–ø–Ω—ñ
‚îú –î—É–µ–ª—ñ: ‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ
‚îú –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ‚úÖ –ó–±–∏—Ä–∞—î—Ç—å—Å—è
‚îî –ú–æ–¥–µ—Ä–∞—Ü—ñ—è: ‚úÖ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞

üí° <i>–í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ!</i>
                """
                await message.answer(status_text)

            # –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
            if self.is_admin(message.from_user.id if hasattr(message, 'from_user') else 0):
                @self.dp.message(Command("admin"))
                async def cmd_admin(message: Message):
                    if not self.is_admin(message.from_user.id):
                        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
                        return
                    
                    admin_text = """
üëë <b>–ê–î–ú–Ü–ù –ü–ê–ù–ï–õ–¨</b>

üìä <b>–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
/admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/admin_users - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
/admin_content - –∫–æ–Ω—Ç–µ–Ω—Ç

üõ†Ô∏è <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:</b>
/restart_automation - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
/broadcast [—Ç–µ–∫—Å—Ç] - —Ä–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º
/maintenance_mode - —Ä–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è

üìù <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:</b>
/pending - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ  
/approve [ID] - —Å—Ö–≤–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
/reject [ID] - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç

üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>
/add_points [user_id] [points] - –¥–æ–¥–∞—Ç–∏ –±–∞–ª–∏
/create_tournament - —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—É—Ä–Ω—ñ—Ä
/force_duel - –ø—Ä–∏–º—É—Å–æ–≤–∞ –¥—É–µ–ª—å

‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–∞:</b>
/logs - –æ—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏
/health_check - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è
/database_status - —Å—Ç–∞–Ω –ë–î
                    """
                    await message.answer(admin_text)

            logger.info("‚úÖ –û–±—Ä–æ–±–Ω–∏–∫–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤: {e}")

    async def cleanup(self):
        """–û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ"""
        try:
            logger.info("üßπ Cleanup resources...")
            
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler:
                try:
                    await self.scheduler.shutdown()
                    logger.info("‚úÖ Scheduler stopped")
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è Scheduler cleanup error: {e}")
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session'):
                if self.bot.session and not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
            
            logger.info("‚úÖ Cleanup completed")
            
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Cleanup error: {e}")

    async def run(self):
        """–ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if not await self.initialize_bot():
                logger.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞")
                return False
            
            await self.initialize_database()
            await self.initialize_automation()
            await self.register_handlers()
            
            logger.info("üéØ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ polling...")
            await self.dp.start_polling(self.bot, skip_updates=True)
            
        except KeyboardInterrupt:
            logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏...")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            logger.error(traceback.format_exc())
            return False
        finally:
            await self.cleanup()
        
        return True

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
    
    try:
        bot = AutomatedUkrainianTelegramBot()
        await bot.run()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
    asyncio.run(main())