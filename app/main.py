#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê - –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô üöÄ
"""

import asyncio
import logging
import sys
from typing import Optional, List, Dict, Any, Union  # ‚úÖ –í–°–Ü TYPING –Ü–ú–ü–û–†–¢–ò

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """ü§ñ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.db_available = False

    async def setup_bot(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            import os
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                try:
                    from config.settings import BOT_TOKEN
                    bot_token = BOT_TOKEN
                except ImportError:
                    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    return False
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False

    async def setup_database(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î"""
        try:
            from database import init_db
            self.db_available = await init_db()
            
            if self.db_available:
                logger.info("‚úÖ Database initialized successfully")
            else:
                logger.warning("‚ö†Ô∏è Working without database")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database warning: {e}")
            return True

    async def setup_automation(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ç–∞ –≤–∏–∫–ª–∏–∫
            from services.automated_scheduler import create_automated_scheduler
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ (2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏)
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            
            if self.scheduler:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Automation warning: {e}")
            return True

    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            from handlers import register_all_handlers
            register_all_handlers(self.dp)
            logger.info("‚úÖ All handlers registered with automation support")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Handlers warning: {e}")
            # –ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ —è–∫ fallback
            await self._register_basic_handlers()

    async def _register_basic_handlers(self):
        """–ë–∞–∑–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
        from aiogram.types import Message
        from aiogram.filters import Command
        
        @self.dp.message(Command("start"))
        async def start_handler(message: Message):
            await message.answer("ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–µ–º-–±–æ—Ç!")

    async def cleanup(self):
        """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.scheduler:
                await self.scheduler.stop()
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –∑–∞–∫—Ä–∏—Ç—Ç—è aiohttp —Å–µ—Å—ñ—ó
            if self.bot and hasattr(self.bot, 'session') and self.bot.session:
                if not self.bot.session.closed:
                    await self.bot.session.close()
                    logger.info("‚úÖ Bot session closed")
                    
        except Exception as e:
            logger.error(f"‚ùå Cleanup error: {e}")

    async def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
        
        try:
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            if not await self.setup_bot():
                return False
            
            await self.setup_database()
            await self.setup_automation()
            await self.setup_handlers()
            
            logger.info("üéØ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: Cleanup —Ä–µ—Å—É—Ä—Å—ñ–≤
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)
