#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –î–£–ï–õ–Ø–ú–ò üß†üòÇüî•

–ù–û–í–ò–ù–ö–ò –í –ö–†–û–¶–Ü 5:
‚öîÔ∏è –ü–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –∂–∞—Ä—Ç—ñ–≤
üó≥Ô∏è –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç  
üèÜ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ—Å—Ç—ñ–≤
üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤
üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ —Ä–∞–Ω–≥–∏
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional
import signal

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class UkrainianTelegramBotWithDuels:
    """–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é –¥—É–µ–ª—ñ–≤"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.handlers_status = {}
        self.shutdown_event = asyncio.Event()
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from config.settings import settings
            admin_ids = [settings.ADMIN_ID]
            if hasattr(settings, 'ADDITIONAL_ADMINS'):
                admin_ids.extend(settings.ADDITIONAL_ADMINS)
            return user_id in admin_ids
        except:
            return user_id == 603047391  # Fallback admin ID

    async def initialize_bot(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤"""
        try:
            logger.info("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            try:
                from config.settings import settings
                bot_token = settings.BOT_TOKEN
                logger.info("‚úÖ Settings loaded from config.settings")
            except ImportError:
                bot_token = os.getenv('BOT_TOKEN')
                logger.warning("‚ö†Ô∏è Using environment BOT_TOKEN")
            
            if not bot_token:
                raise ValueError("BOT_TOKEN not found")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è aiogram
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            
            self.bot = Bot(
                token=bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot initialization failed: {e}")
            return False

    async def initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤...")
            
            from database.database import init_database
            success = await init_database()
            
            if success:
                logger.info("‚úÖ Database initialized successfully")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥—É–µ–ª—ñ–≤
                try:
                    from database.models import Duel, DuelVote
                    logger.info("‚úÖ Duel models loaded successfully")
                except ImportError as e:
                    logger.warning(f"‚ö†Ô∏è Duel models not available: {e}")
                
                self.db_available = True
                return True
            else:
                logger.warning("‚ö†Ô∏è Database initialization failed")
                return False
                
        except ImportError:
            logger.warning("‚ö†Ô∏è Database module not available - working without DB")
            return False
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≤–∫–ª—é—á–Ω–æ –∑ –¥—É–µ–ª—è–º–∏"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤...")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ handlers/__init__.py
            from handlers import register_handlers
            self.handlers_status = register_handlers(self.dp)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
            await self.register_core_handlers()
            
            # Callback —Ö–µ–Ω–¥–ª–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤
            await self.register_enhanced_callbacks()
            
            logger.info("‚úÖ All handlers registered with duel support")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers registration failed: {e}")
            return False

    async def register_core_handlers(self):
        """–û—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
        from aiogram import F
        from aiogram.filters import Command
        from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
        
        @self.dp.message(Command("start"))
        async def enhanced_start(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∑ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
            try:
                user_id = message.from_user.id
                is_admin = self.is_admin(user_id)
                
                # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if self.db_available:
                    try:
                        from database.services import get_or_create_user
                        await get_or_create_user(
                            user_id, 
                            message.from_user.username, 
                            message.from_user.full_name
                        )
                    except Exception as e:
                        logger.error(f"Error creating user: {e}")
                
                # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
                text = "üß†üòÇüî• <b>–£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô –ë–û–¢ –ó –î–£–ï–õ–Ø–ú–ò!</b> üß†üòÇüî•\n\n"
                
                if is_admin:
                    text += "üëë <b>–ê–¥–º—ñ–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π</b>\n\n"
                
                text += (
                    "üéØ <b>–ù–æ–≤–∏–Ω–∫–∞: –î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í!</b> ‚öîÔ∏è\n"
                    "–ó–º–∞–≥–∞–π—Ç–µ—Å—è –∑–∞ –∑–≤–∞–Ω–Ω—è –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –∫–æ–º—ñ–∫–∞!\n\n"
                    "üìã <b>–ì–æ–ª–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                    "‚Ä¢ ‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤ –∑ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º\n"
                    "‚Ä¢ üòÇ –ú–µ–º–∏ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–∏\n"
                    "‚Ä¢ üèÜ –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞\n"
                    "‚Ä¢ üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
                    "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
                )
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –¥—É–µ–ª—è–º–∏
                keyboard_rows = [
                    [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤", callback_data="duel_menu")],
                    [
                        InlineKeyboardButton(text="üòÇ –ú–µ–º", callback_data="get_meme"),
                        InlineKeyboardButton(text="ü§£ –ñ–∞—Ä—Ç", callback_data="get_joke")
                    ],
                    [
                        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
                        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
                    ]
                ]
                
                # –ê–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏
                if is_admin:
                    keyboard_rows.append([
                        InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate"),
                        InlineKeyboardButton(text="üìà –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç", callback_data="admin_stats")
                    ])
                
                keyboard_rows.append([
                    InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
                
                await message.answer(text, reply_markup=keyboard)
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∑ –¥—É–µ–ª—è–º–∏
                if is_admin:
                    try:
                        from config.settings import settings
                        uptime = datetime.now() - self.startup_time
                        admin_text = (
                            f"‚úÖ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ –∑ –¥—É–µ–ª—è–º–∏!</b>\n\n"
                            f"‚öîÔ∏è <b>–°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤:</b> –ê–∫—Ç–∏–≤–Ω–∞\n"
                            f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b> {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback'}\n"
                            f"üîß <b>–•–µ–Ω–¥–ª–µ—Ä–∏:</b> {self.handlers_status.get('total_registered', 0)}/4\n"
                            f"‚è∞ <b>Uptime:</b> {uptime.total_seconds():.1f}—Å\n\n"
                            f"üéØ <b>–ù–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                            f"‚Ä¢ /duel - —Å–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤\n"
                            f"‚Ä¢ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –∂–∞—Ä—Ç–∏\n"
                            f"‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–∏ –¥—É–µ–ª—ñ—Å—Ç—ñ–≤\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤"
                        )
                        
                        await self.bot.send_message(settings.ADMIN_ID, admin_text)
                    except Exception as e:
                        logger.error(f"Error sending admin notification: {e}")
                
            except Exception as e:
                logger.error(f"Error in start handler: {e}")
                await message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

        @self.dp.message(Command("help"))
        async def enhanced_help(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –∑ –¥—É–µ–ª—è–º–∏"""
            try:
                text = (
                    "üìñ <b>–î–û–í–Ü–î–ö–ê - –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ë–û–¢ –ó –î–£–ï–õ–Ø–ú–ò</b>\n\n"
                    
                    "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í (–ù–û–í–ò–ù–ö–ê!):</b>\n"
                    "‚Ä¢ /duel - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤\n"
                    "‚Ä¢ –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç\n"
                    "‚Ä¢ –ó–¥–æ–±—É–≤–∞–π—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ —Ä–∞–Ω–≥–∏\n"
                    "‚Ä¢ –û—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏ –∑–∞ –ø–µ—Ä–µ–º–æ–≥–∏\n\n"
                    
                    "üòÇ <b>–ö–û–ù–¢–ï–ù–¢:</b>\n"
                    "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                    "‚Ä¢ /joke - —Å–º—ñ—à–Ω–∏–π –∂–∞—Ä—Ç\n"
                    "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\n"
                    "‚Ä¢ –õ–∞–π–∫–∞–π—Ç–µ —Ç–∞ –¥—ñ–ª—ñ—Ç—å—Å—è\n\n"
                    
                    "üë§ <b>–ü–†–û–§–Ü–õ–¨:</b>\n"
                    "‚Ä¢ /profile - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–∞–ª—ñ–≤ —Ç–∞ —Ä–∞–Ω–≥—ñ–≤\n"
                    "‚Ä¢ –Ü—Å—Ç–æ—Ä—ñ—è –¥—É–µ–ª–µ–π\n"
                    "‚Ä¢ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
                    
                    "üéÆ <b>–°–ò–°–¢–ï–ú–ê –ë–ê–õ–Ü–í:</b>\n"
                    "‚Ä¢ +2 –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ\n"
                    "‚Ä¢ +10 –±–∞–ª—ñ–≤ –∑–∞ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—ñ\n"
                    "‚Ä¢ +25 –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É\n"
                    "‚Ä¢ +50 –±–∞–ª—ñ–≤ –∑–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É\n\n"
                    
                    "üèÜ <b>–†–ê–ù–ì–ò –î–£–ï–õ–Ü–°–¢–Ü–í:</b>\n"
                    "‚Ä¢ ü•â –°—Ç–∞–∂–µ—Ä (0-999)\n"
                    "‚Ä¢ üéØ –ù–æ–≤–∞—á–æ–∫ (1000-1199)\n"
                    "‚Ä¢ üî• –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π (1200-1399)\n"
                    "‚Ä¢ ‚ö° –ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª (1400-1599)\n"
                    "‚Ä¢ ‚≠ê –ï–∫—Å–ø–µ—Ä—Ç (1600-1799)\n"
                    "‚Ä¢ üèÜ –ú–∞–π—Å—Ç–µ—Ä (1800-1999)\n"
                    "‚Ä¢ üëë –ì—Ä–∞–Ω–¥-–º–∞–π—Å—Ç–µ—Ä (2000+)"
                )
                
                # –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
                if self.is_admin(message.from_user.id):
                    text += (
                        "\n\nüõ°Ô∏è <b>–ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò:</b>\n"
                        "‚Ä¢ /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                        "‚Ä¢ /moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                        "‚Ä¢ /pending - –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä–æ–∑–≥–ª—è–¥—ñ\n"
                        "‚Ä¢ /approve_ID - —Å—Ö–≤–∞–ª–∏—Ç–∏\n"
                        "‚Ä¢ /reject_ID –ø—Ä–∏—á–∏–Ω–∞ - –≤—ñ–¥—Ö–∏–ª–∏—Ç–∏"
                    )
                
                await message.answer(text)
                
            except Exception as e:
                logger.error(f"Error in help handler: {e}")
                await message.answer("üìñ <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n–ë–∞–∑–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /duel, /profile, /help")

    async def register_enhanced_callbacks(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω—ñ callback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤"""
        
        @self.dp.callback_query()
        async def handle_enhanced_callbacks(callback):
            """–ì–æ–ª–æ–≤–Ω–∏–π callback —Ö–µ–Ω–¥–ª–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤"""
            try:
                data = callback.data
                user_id = callback.from_user.id
                is_admin = self.is_admin(user_id)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ callback'–∏
                if any(data.startswith(prefix) for prefix in [
                    "like_", "dislike_", "more_", "submit_",  # content
                    "admin_", "moderate_",                    # admin
                    "vote_", "duel_", "create_duel", "view_duels"  # duels
                ]):
                    return  # –ù–µ—Ö–∞–π —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å
                
                # –û—Å–Ω–æ–≤–Ω—ñ callback'–∏
                if data == "duel_menu":
                    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤
                    try:
                        from handlers.duel_handlers import cmd_duel
                        await cmd_duel(callback.message)
                        await callback.answer("‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤!")
                    except ImportError:
                        await callback.message.edit_text(
                            "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í</b>\n\n"
                            "–°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /duel"
                        )
                        await callback.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
                        
                elif data == "get_meme":
                    try:
                        from handlers.content_handlers import handle_meme_command
                        await handle_meme_command(callback.message)
                        await callback.answer("üòÇ –ú–µ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                    except ImportError:
                        await callback.message.answer("üòÇ <i>–ö–æ–ª–∏ —Ç–≤—ñ–π –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É...\n–ó–Ω–∞—á–∏—Ç—å —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! ü§î</i>")
                        await callback.answer()
                        
                elif data == "get_joke":
                    try:
                        from handlers.content_handlers import handle_joke_command
                        await handle_joke_command(callback.message)
                        await callback.answer("ü§£ –ñ–∞—Ä—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                    except ImportError:
                        await callback.message.answer("ü§£ <i>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å —É –±–∞—Ä...\n–ë–∞—Ä–º–µ–Ω –∫–∞–∂–µ: '–Ø–∫ –∑–∞–≤–∂–¥–∏?' –ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–ù—ñ, —Ü—å–æ–≥–æ —Ä–∞–∑—É —è –ø—Ä–æ—Å—Ç–æ –≤–∏–ø–∏—Ç–∏ –ø—Ä–∏–π—à–æ–≤!'</i>")
                        await callback.answer()
                
                elif data == "profile":
                    if self.db_available:
                        try:
                            from database.services import get_user_by_id, get_user_duel_stats
                            
                            user = await get_user_by_id(user_id)
                            duel_stats = await get_user_duel_stats(user_id)
                            
                            if user:
                                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–Ω–≥
                                points = user.get('total_points', 0)
                                if points >= 5000:
                                    rank = "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
                                elif points >= 3000:
                                    rank = "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
                                elif points >= 1500:
                                    rank = "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
                                elif points >= 750:
                                    rank = "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
                                elif points >= 350:
                                    rank = "üé≠ –ö–æ–º—ñ–∫"
                                elif points >= 150:
                                    rank = "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
                                elif points >= 50:
                                    rank = "üòÑ –°–º—ñ—Ö—É–Ω"
                                else:
                                    rank = "ü§° –ù–æ–≤–∞—á–æ–∫"
                                
                                text = f"üë§ <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
                                text += f"üè∑Ô∏è –Ü–º'—è: {user.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                                text += f"üëë –†–∞–Ω–≥: {rank}\n"
                                text += f"üí∞ –ë–∞–ª–∏: {points}\n"
                                text += f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {user.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                                
                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª—ñ–≤
                                if duel_stats:
                                    wins = duel_stats.get('wins', 0)
                                    total = duel_stats.get('total_duels', 0)
                                    win_rate = (wins / total * 100) if total > 0 else 0
                                    duel_rating = duel_stats.get('rating', 1000)
                                    
                                    text += f"‚öîÔ∏è <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–Ü–í:</b>\n"
                                    text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {wins}/{total} ({win_rate:.1f}%)\n"
                                    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {duel_rating}\n"
                                    
                                    # –†–∞–Ω–≥ –¥—É–µ–ª—ñ—Å—Ç–∞
                                    if duel_rating >= 2000:
                                        duel_rank = "üëë –ì—Ä–∞–Ω–¥-–º–∞–π—Å—Ç–µ—Ä"
                                    elif duel_rating >= 1800:
                                        duel_rank = "üèÜ –ú–∞–π—Å—Ç–µ—Ä"
                                    elif duel_rating >= 1600:
                                        duel_rank = "‚≠ê –ï–∫—Å–ø–µ—Ä—Ç"
                                    elif duel_rating >= 1400:
                                        duel_rank = "‚ö° –ü—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª"
                                    elif duel_rating >= 1200:
                                        duel_rank = "üî• –î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π"
                                    elif duel_rating >= 1000:
                                        duel_rank = "üéØ –ù–æ–≤–∞—á–æ–∫"
                                    else:
                                        duel_rank = "ü•â –°—Ç–∞–∂–µ—Ä"
                                    
                                    text += f"üéØ –†–∞–Ω–≥ –¥—É–µ–ª—ñ—Å—Ç–∞: {duel_rank}\n"
                                    
                                    if duel_stats.get('best_win_streak', 0) > 0:
                                        text += f"üî• –ù–∞–π–∫—Ä–∞—â–∞ —Å–µ—Ä—ñ—è: {duel_stats['best_win_streak']}\n"
                                else:
                                    text += "‚öîÔ∏è <b>–©–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö</b>\n"
                                    text += "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /duel —â–æ–± –ø–æ—á–∞—Ç–∏!"
                                
                                await callback.message.edit_text(text)
                            else:
                                await callback.message.edit_text("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        except Exception as e:
                            logger.error(f"Error in profile callback: {e}")
                            await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
                    else:
                        await callback.message.edit_text(
                            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
                            "üéÆ –†–∞–Ω–≥: –ù–æ–≤–∞—á–æ–∫\n"
                            "üí∞ –ë–∞–ª–∏: 0\n"
                            "‚öîÔ∏è –î—É–µ–ª—ñ: 0/0\n\n"
                            "üìä –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                        )
                    
                    await callback.answer()
                    
                elif data == "stats":
                    try:
                        if self.db_available:
                            from database.services import get_basic_stats
                            stats = get_basic_stats()
                            
                            text = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
                            text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats.get('total_users', '?')}\n"
                            text += f"üòÇ –ö–æ–Ω—Ç–µ–Ω—Ç—É: {stats.get('total_content', '?')}\n"
                            text += f"‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ: {stats.get('approved_content', '?')}\n"
                            text += f"‚öîÔ∏è –î—É–µ–ª–µ–π: {stats.get('total_duels', '?')}\n"
                            text += f"üó≥Ô∏è –ì–æ–ª–æ—Å—ñ–≤: {stats.get('total_votes', '?')}\n"
                            text += f"üèÜ –ê–∫—Ç–∏–≤–Ω–∏—Ö –¥—É–µ–ª–µ–π: {stats.get('active_duels', '?')}\n\n"
                            text += f"üìà <b>–°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª–µ–π –ø—Ä–∞—Ü—é—î!</b>"
                        else:
                            text = (
                                "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b>\n\n"
                                "ü§ñ –°—Ç–∞—Ç—É—Å: –û–Ω–ª–∞–π–Ω\n"
                                "‚öîÔ∏è –î—É–µ–ª—ñ: –ê–∫—Ç–∏–≤–Ω—ñ\n"
                                "üíæ –ë–î: Fallback —Ä–µ–∂–∏–º\n"
                                "üîß –í–µ—Ä—Å—ñ—è: Professional –∑ –¥—É–µ–ª—è–º–∏"
                            )
                        
                        await callback.message.edit_text(text)
                    except Exception as e:
                        logger.error(f"Error in stats callback: {e}")
                        await callback.message.edit_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
                    await callback.answer()
                    
                elif data == "help":
                    await self.enhanced_help(callback.message)
                    await callback.answer()
                    
                # –ê–¥–º—ñ–Ω callback'–∏
                elif data == "admin_moderate" and is_admin:
                    try:
                        from handlers.admin_handlers import cmd_moderate
                        await cmd_moderate(callback.message)
                        await callback.answer("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è")
                    except ImportError:
                        await callback.message.edit_text("üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        await callback.answer()
                        
                elif data == "admin_stats" and is_admin:
                    try:
                        from handlers.admin_handlers import cmd_admin_stats
                        await cmd_admin_stats(callback.message)
                        await callback.answer("üìà –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                    except ImportError:
                        await callback.message.edit_text("üìà –ê–¥–º—ñ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                        await callback.answer()
                
                else:
                    await callback.answer("üîÑ –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
                    
            except Exception as e:
                logger.error(f"Error in callback handler: {e}")
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏")

    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª—ñ–≤"""
        try:
            logger.info("‚è∞ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –¥—É–µ–ª—ñ–≤...")
            
            from apscheduler.schedulers.asyncio import AsyncIOScheduler
            from apscheduler.triggers.interval import IntervalTrigger
            
            scheduler = AsyncIOScheduler()
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –¥—É–µ–ª—ñ–≤ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            if self.db_available:
                try:
                    from database.services import auto_finish_expired_duels, cleanup_old_duels
                    
                    scheduler.add_job(
                        auto_finish_expired_duels,
                        IntervalTrigger(minutes=1),
                        id='auto_finish_duels',
                        name='Auto finish expired duels'
                    )
                    
                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–∏—Ö –¥—É–µ–ª–µ–π —â–æ–¥–Ω—è –æ 03:00
                    scheduler.add_job(
                        cleanup_old_duels,
                        'cron',
                        hour=3,
                        minute=0,
                        id='cleanup_old_duels',
                        name='Cleanup old duels'
                    )
                    
                    logger.info("‚úÖ Duel scheduler configured")
                except ImportError:
                    logger.warning("‚ö†Ô∏è Duel services not available for scheduler")
            
            scheduler.start()
            logger.info("‚úÖ Scheduler started successfully")
            return scheduler
            
        except ImportError:
            logger.warning("‚ö†Ô∏è APScheduler not available")
            return None
        except Exception as e:
            logger.error(f"‚ùå Scheduler setup failed: {e}")
            return None

    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –¥—É–µ–ª—è–º–∏"""
        logger.info("üöÄ Starting Enhanced Ukrainian Telegram Bot with Duels...")
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if not await self.initialize_bot():
                return False
            
            if not await self.initialize_database():
                logger.warning("‚ö†Ô∏è Working without full database support")
            
            if not await self.register_handlers():
                return False
            
            # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
            scheduler = await self.setup_scheduler()
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è graceful shutdown
            def signal_handler():
                logger.info("üì∂ Shutdown signal received")
                self.shutdown_event.set()
            
            signal.signal(signal.SIGINT, lambda s, f: signal_handler())
            signal.signal(signal.SIGTERM, lambda s, f: signal_handler())
            
            logger.info("‚úÖ Bot fully initialized with duel system")
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                polling_task = asyncio.create_task(self.dp.start_polling(self.bot))
                shutdown_task = asyncio.create_task(self.shutdown_event.wait())
                
                logger.info("üéØ Bot started - Duels are active!")
                
                # –ß–µ–∫–∞—î–º–æ –∞–±–æ polling –∞–±–æ shutdown
                done, pending = await asyncio.wait(
                    [polling_task, shutdown_task],
                    return_when=asyncio.FIRST_COMPLETED
                )
                
                # –°–∫–∞—Å–æ–≤—É—î–º–æ pending –∑–∞–≤–¥–∞–Ω–Ω—è
                for task in pending:
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
                
            finally:
                # Graceful shutdown
                if scheduler:
                    scheduler.shutdown()
                    logger.info("‚úÖ Scheduler stopped")
                
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Critical error in main: {e}")
            return False

# ===== –ó–ê–ü–£–°–ö =====

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = UkrainianTelegramBotWithDuels()
    success = await bot.main()
    return success

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        sys.exit(1)