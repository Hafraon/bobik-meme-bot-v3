#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –ü–û–í–ù–û–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ ü§ñ

–ö–†–û–ö 6: –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –¢–ê –†–û–ó–£–ú–ù–Ü –†–û–ó–°–ò–õ–ö–ò
‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —â–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
ü§ñ –†–æ–∑—É–º–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏
üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏ —Ç–∞ –ø–æ–¥—ñ—ó
üßπ –°–∞–º–æ–æ—á–∏—â–µ–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from typing import Optional
import signal

# Logging setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –ø–æ–≤–Ω–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        self.db_available = False
        self.handlers_status = {}
        self.shutdown_event = asyncio.Event()
        
        # –°–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        self.scheduler = None
        self.broadcast_system = None
        self.automation_active = False
        
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        try:
            from config.settings import settings
            admin_ids = [settings.ADMIN_ID]
            if hasattr(settings, 'ADDITIONAL_ADMINS'):
                admin_ids.extend(settings.ADDITIONAL_ADMINS)
            return user_id in admin_ids
        except:
            return user_id == 603047391  # Fallback admin ID

    async def initialize_bot(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞"""
        try:
            logger.info("üîç –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
            try:
                from config.settings import settings
                bot_token = settings.BOT_TOKEN
                logger.info("‚úÖ Settings loaded from config.settings")
            except ImportError:
                bot_token = os.getenv('BOT_TOKEN')
                logger.warning("‚ö†Ô∏è Using environment BOT_TOKEN")
            
            if not bot_token:
                raise ValueError("BOT_TOKEN not found")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è aiogram
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            
            self.bot = Bot(
                token=bot_token,
                default=DefaultBotProperties(parse_mode=ParseMode.HTML)
            )
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Bot initialization failed: {e}")
            return False

    async def initialize_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
            
            from database.database import init_database
            success = await init_database()
            
            if success:
                logger.info("‚úÖ Database initialized successfully")
                self.db_available = True
                return True
            else:
                logger.warning("‚ö†Ô∏è Database initialization failed")
                return False
                
        except ImportError:
            logger.warning("‚ö†Ô∏è Database module not available - working without DB")
            return False
        except Exception as e:
            logger.error(f"‚ùå Database initialization error: {e}")
            return False

    async def initialize_automation(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó...")
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            from services.automated_scheduler import create_automated_scheduler
            self.scheduler = await create_automated_scheduler(self.bot)
            
            if self.scheduler:
                logger.info("‚úÖ Automated scheduler —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                
                # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
                await self.scheduler.start()
                self.automation_active = True
                
                # –û—Ç—Ä–∏–º—É—î–º–æ broadcast system –∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
                self.broadcast_system = self.scheduler.broadcast_system
                
                logger.info("ü§ñ –ü–æ–≤–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
                return False
                
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Automation services not available: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Automation initialization error: {e}")
            return False

    async def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
        try:
            logger.info("üîß –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é...")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —á–µ—Ä–µ–∑ handlers/__init__.py
            from handlers import register_handlers
            self.handlers_status = register_handlers(self.dp)
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
            await self.register_automation_handlers()
            
            # Callback —Ö–µ–Ω–¥–ª–µ—Ä –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
            await self.register_enhanced_callbacks()
            
            logger.info("‚úÖ All handlers registered with automation support")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Handlers registration failed: {e}")
            return False

    async def register_automation_handlers(self):
        """–•–µ–Ω–¥–ª–µ—Ä–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        from aiogram import F
        from aiogram.filters import Command
        from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
        
        @self.dp.message(Command("start"))
        async def automated_start(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            try:
                user_id = message.from_user.id
                is_admin = self.is_admin(user_id)
                
                # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                if self.db_available:
                    try:
                        from database.services import get_or_create_user
                        await get_or_create_user(
                            user_id, 
                            message.from_user.username, 
                            message.from_user.full_name
                        )
                    except Exception as e:
                        logger.error(f"Error creating user: {e}")
                
                # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
                text = "ü§ñ <b>–ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ!</b> ü§ñ\n\n"
                
                if is_admin:
                    text += "üëë <b>–ê–¥–º—ñ–Ω —Ä–µ–∂–∏–º + –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è</b>\n\n"
                
                text += (
                    "üéØ <b>–ù–û–í–ò–ù–ö–ê: –ü–û–í–ù–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø!</b> ‚ö°\n"
                    "–ë–æ—Ç —Ç–µ–ø–µ—Ä –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ 24/7!\n\n"
                    "ü§ñ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                    "‚Ä¢ üì¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                    "‚Ä¢ ‚öîÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—É–µ–ª—ñ —Ç–∞ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
                    "‚Ä¢ üìä –†–æ–∑—É–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏\n"
                    "‚Ä¢ üßπ –°–∞–º–æ–æ—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\n\n"
                    "üòÇ <b>–û—Å–Ω–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:</b>\n"
                    "‚Ä¢ –ú–µ–º–∏, –∂–∞—Ä—Ç–∏, –∞–Ω–µ–∫–¥–æ—Ç–∏\n"
                    "‚Ä¢ –î—É–µ–ª—ñ –∑ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è–º\n"
                    "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥—ñ–≤ —Ç–∞ –±–∞–ª—ñ–≤"
                )
                
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
                keyboard_rows = [
                    [InlineKeyboardButton(text="‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤", callback_data="duel_menu")],
                    [
                        InlineKeyboardButton(text="üòÇ –ú–µ–º", callback_data="get_meme"),
                        InlineKeyboardButton(text="ü§£ –ñ–∞—Ä—Ç", callback_data="get_joke")
                    ],
                    [
                        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile"),
                        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
                    ]
                ]
                
                # –ê–¥–º—ñ–Ω –∫–Ω–æ–ø–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
                if is_admin:
                    keyboard_rows.extend([
                        [
                            InlineKeyboardButton(text="üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü—ñ—è", callback_data="admin_moderate"),
                            InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
                        ],
                        [
                            InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è", callback_data="automation_status"),
                            InlineKeyboardButton(text="üì¢ –†–æ–∑—Å–∏–ª–∫–∏", callback_data="broadcast_control")
                        ]
                    ])
                
                keyboard_rows.append([
                    InlineKeyboardButton(text="‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")
                ])
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
                
                await message.answer(text, reply_markup=keyboard)
                
                # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –∑–∞–ø—É—Å–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
                if is_admin and self.automation_active:
                    try:
                        from config.settings import settings
                        uptime = datetime.now() - self.startup_time
                        
                        # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
                        automation_status = self.scheduler.get_scheduler_status() if self.scheduler else {}
                        
                        admin_text = (
                            f"ü§ñ <b>–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û –ó –ü–û–í–ù–û–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ!</b>\n\n"
                            f"‚ö° <b>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó:</b> {'–ê–∫—Ç–∏–≤–Ω–∞' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n"
                            f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b> {'–ü—ñ–¥–∫–ª—é—á–µ–Ω–∞' if self.db_available else 'Fallback'}\n"
                            f"üîß <b>–•–µ–Ω–¥–ª–µ—Ä–∏:</b> {self.handlers_status.get('total_registered', 0)}/4\n"
                            f"üìÖ <b>–ó–∞–≤–¥–∞–Ω—å —É —á–µ—Ä–∑—ñ:</b> {automation_status.get('total_jobs', 0)}\n"
                            f"‚è∞ <b>Uptime:</b> {uptime.total_seconds():.1f}—Å\n\n"
                            f"üéØ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\n"
                            f"‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É (9:00)\n"
                            f"‚Ä¢ –í–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (20:00)\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π\n"
                            f"‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ\n"
                            f"‚Ä¢ –¢–∏–∂–Ω–µ–≤—ñ —Ç—É—Ä–Ω—ñ—Ä–∏ (–ø'—è—Ç–Ω–∏—Ü—è)\n"
                            f"‚Ä¢ –ú—ñ—Å—è—á–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–∏—Ö\n\n"
                            f"üöÄ –ë–æ—Ç –ø—Ä–∞—Ü—é—î –ø–æ–≤–Ω—ñ—Å—Ç—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ!"
                        )
                        
                        await self.bot.send_message(settings.ADMIN_ID, admin_text)
                    except Exception as e:
                        logger.error(f"Error sending admin notification: {e}")
                
            except Exception as e:
                logger.error(f"Error in automated start handler: {e}")
                await message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

        @self.dp.message(Command("help"))
        async def automated_help(message: Message):
            """–†–æ–∑—à–∏—Ä–µ–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            try:
                text = (
                    "üìñ <b>–î–û–í–Ü–î–ö–ê - –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ</b>\n\n"
                    
                    "ü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø (–ù–û–í–ò–ù–ö–ê!):</b>\n"
                    "‚Ä¢ –ë–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ 24/7\n"
                    "‚Ä¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏ —Ç–∞ –ø–æ–¥—ñ—ó\n"
                    "‚Ä¢ –†–æ–∑—É–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ –°–∞–º–æ–æ—á–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\n\n"
                    
                    "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í:</b>\n"
                    "‚Ä¢ /duel - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥—É–µ–ª–µ–π\n"
                    "‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–º–∞–≥–∞–Ω–Ω—è\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏\n\n"
                    
                    "üòÇ <b>–ö–û–ù–¢–ï–ù–¢:</b>\n"
                    "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                    "‚Ä¢ /joke - —Å–º—ñ—à–Ω–∏–π –∂–∞—Ä—Ç\n"
                    "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\n"
                    "‚Ä¢ –©–æ–¥–µ–Ω–Ω–∏–π –∫—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
                    
                    "üë§ <b>–ü–†–û–§–Ü–õ–¨:</b>\n"
                    "‚Ä¢ /profile - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –Ω–∞–≥–æ—Ä–æ–¥–∏\n"
                    "‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n"
                    "‚Ä¢ –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä–∞–Ω–≥—ñ–≤\n\n"
                    
                    "üéÆ <b>–°–ò–°–¢–ï–ú–ê –ë–ê–õ–Ü–í:</b>\n"
                    "‚Ä¢ +2 –±–∞–ª–∏ –∑–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –≤ –¥—É–µ–ª—ñ\n"
                    "‚Ä¢ +10 –±–∞–ª—ñ–≤ –∑–∞ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—ñ\n"
                    "‚Ä¢ +25 –±–∞–ª—ñ–≤ –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É\n"
                    "‚Ä¢ +50 –±–∞–ª—ñ–≤ –∑–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É\n"
                    "‚Ä¢ –ë–æ–Ω—É—Å–∏ –∑–∞ —Ç—É—Ä–Ω—ñ—Ä–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n"
                    
                    "üìÖ <b>–ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –†–û–ó–ö–õ–ê–î:</b>\n"
                    "‚Ä¢ 9:00 - —Ä–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n"
                    "‚Ä¢ 20:00 - –≤–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                    "‚Ä¢ –ü'—è—Ç–Ω–∏—Ü—è 19:00 - —Ç–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä\n"
                    "‚Ä¢ –ù–µ–¥—ñ–ª—è 18:00 - —Ç–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n"
                    "‚Ä¢ 1 —á–∏—Å–ª–æ - –º—ñ—Å—è—á–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏"
                )
                
                # –ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏
                if self.is_admin(message.from_user.id):
                    text += (
                        "\n\nüõ°Ô∏è <b>–ê–î–ú–Ü–ù –ö–û–ú–ê–ù–î–ò:</b>\n"
                        "‚Ä¢ /admin_stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                        "‚Ä¢ /moderate - –º–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
                        "‚Ä¢ /automation_status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó\n"
                        "‚Ä¢ /broadcast_now - —Ä—É—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞\n"
                        "‚Ä¢ /scheduler_info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"
                    )
                
                await message.answer(text)
                
            except Exception as e:
                logger.error(f"Error in automated help handler: {e}")
                await message.answer("üìñ <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏: /start, /duel, /profile, /help")

        # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∞–¥–º—ñ–Ω–∞
        @self.dp.message(Command("automation_status"))
        async def automation_status_command(message: Message):
            """–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
            if not self.is_admin(message.from_user.id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
                return
                
            try:
                if self.scheduler:
                    status = self.scheduler.get_scheduler_status()
                    
                    text = (
                        f"ü§ñ <b>–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á</b>\n\n"
                        f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if status['is_running'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
                        f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {status['total_jobs']}\n"
                        f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ: {status['next_job']}\n\n"
                        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                        f"üéØ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–≤–¥–∞–Ω—å: {status['stats']['jobs_executed']}\n"
                        f"üì¢ –†–æ–∑—Å–∏–ª–æ–∫: {status['stats']['broadcasts_sent']}\n"
                        f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥—É–µ–ª–µ–π: {status['stats']['duels_finished']}\n"
                        f"üßπ –û—á–∏—â–µ–Ω–æ –¥–∞–Ω–∏—Ö: {status['stats']['data_cleaned']}\n"
                        f"‚ùå –ü–æ–º–∏–ª–æ–∫: {status['stats']['errors']}\n\n"
                        f"‚è±Ô∏è –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {status['stats'].get('last_activity', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
                    )
                else:
                    text = "‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
                
                await message.answer(text)
                
            except Exception as e:
                logger.error(f"Error in automation status: {e}")
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {e}")

        @self.dp.message(Command("broadcast_now"))
        async def manual_broadcast(message: Message):
            """–†—É—á–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞)"""
            if not self.is_admin(message.from_user.id):
                await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
                return
                
            try:
                if self.broadcast_system:
                    await message.answer("üì¢ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏...")
                    await self.broadcast_system.send_daily_content()
                    await message.answer("‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    await message.answer("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                    
            except Exception as e:
                logger.error(f"Error in manual broadcast: {e}")
                await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")

    async def register_enhanced_callbacks(self):
        """–†–æ–∑—à–∏—Ä–µ–Ω—ñ callback —Ö–µ–Ω–¥–ª–µ—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
        
        @self.dp.callback_query()
        async def handle_automated_callbacks(callback):
            """–ì–æ–ª–æ–≤–Ω–∏–π callback —Ö–µ–Ω–¥–ª–µ—Ä –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
            try:
                data = callback.data
                user_id = callback.from_user.id
                is_admin = self.is_admin(user_id)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ callback'–∏
                if any(data.startswith(prefix) for prefix in [
                    "like_", "dislike_", "more_", "submit_",  # content
                    "admin_", "moderate_",                    # admin
                    "vote_", "duel_", "create_duel", "view_duels"  # duels
                ]):
                    return  # –ù–µ—Ö–∞–π —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å
                
                # –ù–æ–≤—ñ callback'–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
                if data == "automation_status" and is_admin:
                    if self.scheduler:
                        status = self.scheduler.get_scheduler_status()
                        text = (
                            f"ü§ñ <b>–°–¢–ê–¢–£–° –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á</b>\n\n"
                            f"‚ö° –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {'–ê–∫—Ç–∏–≤–Ω–∏–π' if status['is_running'] else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
                            f"üìÖ –ó–∞–≤–¥–∞–Ω—å: {status['total_jobs']}\n"
                            f"‚è∞ –ù–∞—Å—Ç—É–ø–Ω–µ: {status['next_job']}\n"
                            f"üéØ –í–∏–∫–æ–Ω–∞–Ω–æ: {status['stats']['jobs_executed']}\n"
                            f"üì¢ –†–æ–∑—Å–∏–ª–æ–∫: {status['stats']['broadcasts_sent']}\n"
                            f"‚ùå –ü–æ–º–∏–ª–æ–∫: {status['stats']['errors']}"
                        )
                    else:
                        text = "‚ùå –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π"
                    
                    await callback.message.edit_text(text)
                    await callback.answer()
                    
                elif data == "broadcast_control" and is_admin:
                    text = (
                        f"üì¢ <b>–£–ü–†–ê–í–õ–Ü–ù–ù–Ø –†–û–ó–°–ò–õ–ö–ê–ú–ò</b>\n\n"
                        f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏:\n"
                        f"‚Ä¢ 9:00 - —Ä–∞–Ω–∫–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
                        f"‚Ä¢ 20:00 - –≤–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                        f"‚Ä¢ –ù–µ–¥—ñ–ª—è 18:00 - —Ç–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
                        f"‚ö° –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ñ' if self.automation_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ'}\n\n"
                        f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /broadcast_now –¥–ª—è —Ä—É—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"
                    )
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫", callback_data="broadcast_stats")],
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard)
                    await callback.answer()
                
                # –û—Å–Ω–æ–≤–Ω—ñ callback'–∏ (—è–∫ —Ä–∞–Ω—ñ—à–µ, –∞–ª–µ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é)
                elif data == "get_meme":
                    try:
                        from handlers.content_handlers import handle_meme_command
                        await handle_meme_command(callback.message)
                        await callback.answer("üòÇ –ú–µ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!")
                    except ImportError:
                        await callback.message.answer("üòÇ <i>–ö–æ–ª–∏ —Ç–≤—ñ–π –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É...\n–ó–Ω–∞—á–∏—Ç—å —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫! ü§î</i>")
                        await callback.answer()
                
                elif data == "duel_menu":
                    try:
                        from handlers.duel_handlers import cmd_duel
                        await cmd_duel(callback.message)
                        await callback.answer("‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤!")
                    except ImportError:
                        await callback.message.edit_text(
                            "‚öîÔ∏è <b>–î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í</b>\n\n"
                            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—É–µ–ª—ñ —Ç–∞ —Ç—É—Ä–Ω—ñ—Ä–∏!\n"
                            "–°–∏—Å—Ç–µ–º–∞ —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è..."
                        )
                        await callback.answer("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")
                
                elif data == "profile":
                    # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
                    if self.db_available:
                        try:
                            from database.services import get_user_by_id, get_user_duel_stats
                            
                            user = await get_user_by_id(user_id)
                            duel_stats = await get_user_duel_stats(user_id)
                            
                            if user:
                                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–∞–Ω–≥
                                points = user.get('total_points', 0)
                                rank = self.get_rank_by_points(points)
                                
                                text = f"üë§ <b>–ü–†–û–§–Ü–õ–¨ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ</b>\n\n"
                                text += f"üè∑Ô∏è –Ü–º'—è: {user.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                                text += f"üëë –†–∞–Ω–≥: {rank}\n"
                                text += f"üí∞ –ë–∞–ª–∏: {points}\n"
                                text += f"üìÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: {user.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n\n"
                                
                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª—ñ–≤
                                if duel_stats:
                                    wins = duel_stats.get('wins', 0)
                                    total = duel_stats.get('total_duels', 0)
                                    win_rate = (wins / total * 100) if total > 0 else 0
                                    duel_rating = duel_stats.get('rating', 1000)
                                    
                                    text += f"‚öîÔ∏è <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–Ü–í:</b>\n"
                                    text += f"üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: {wins}/{total} ({win_rate:.1f}%)\n"
                                    text += f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {duel_rating}\n"
                                else:
                                    text += "‚öîÔ∏è <b>–©–µ –Ω–µ –±—Ä–∞–ª–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö</b>\n"
                                    text += "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏ —â–æ–ø'—è—Ç–Ω–∏—Ü—ñ!"
                                
                                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é
                                text += f"\nü§ñ <b>–ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø:</b>\n"
                                text += f"üì¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ\n"
                                text += f"üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏\n"
                                text += f"‚≠ê –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"
                                
                                await callback.message.edit_text(text)
                            else:
                                await callback.message.edit_text("‚ùå –ü—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        except Exception as e:
                            logger.error(f"Error in profile callback: {e}")
                            await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é")
                    else:
                        await callback.message.edit_text(
                            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å</b>\n\n"
                            "üéÆ –†–∞–Ω–≥: –ù–æ–≤–∞—á–æ–∫\n"
                            "üí∞ –ë–∞–ª–∏: 0\n"
                            "‚öîÔ∏è –î—É–µ–ª—ñ: 0/0\n\n"
                            "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞!\n"
                            "üì¢ –©–æ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n"
                            "üèÜ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ç—É—Ä–Ω—ñ—Ä–∏"
                        )
                    
                    await callback.answer()
                
                else:
                    await callback.answer("üîÑ –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")
                    
            except Exception as e:
                logger.error(f"Error in automated callback handler: {e}")
                await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏")

    def get_rank_by_points(self, points: int) -> str:
        """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –∑–∞ –±–∞–ª–∞–º–∏"""
        if points >= 5000:
            return "üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π"
        elif points >= 3000:
            return "üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤"
        elif points >= 1500:
            return "üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É"
        elif points >= 750:
            return "üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É"
        elif points >= 350:
            return "üé≠ –ö–æ–º—ñ–∫"
        elif points >= 150:
            return "üòÇ –ì—É–º–æ—Ä–∏—Å—Ç"
        elif points >= 50:
            return "üòÑ –°–º—ñ—Ö—É–Ω"
        else:
            return "ü§° –ù–æ–≤–∞—á–æ–∫"

    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é"""
        logger.info("ü§ñ Starting Automated Ukrainian Telegram Bot...")
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
            if not await self.initialize_bot():
                return False
            
            if not await self.initialize_database():
                logger.warning("‚ö†Ô∏è Working without full database support")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó (–∫–ª—é—á–æ–≤–∞ –Ω–æ–≤–∏–Ω–∫–∞!)
            automation_success = await self.initialize_automation()
            if automation_success:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            if not await self.register_handlers():
                return False
            
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è graceful shutdown
            def signal_handler():
                logger.info("üì∂ Shutdown signal received")
                self.shutdown_event.set()
            
            signal.signal(signal.SIGINT, lambda s, f: signal_handler())
            signal.signal(signal.SIGTERM, lambda s, f: signal_handler())
            
            logger.info("‚úÖ Bot fully initialized with complete automation")
            
            # –ó–∞–ø—É—Å–∫ polling –∑ graceful shutdown
            try:
                polling_task = asyncio.create_task(self.dp.start_polling(self.bot))
                shutdown_task = asyncio.create_task(self.shutdown_event.wait())
                
                logger.info("üéØ Bot started - Full automation active!")
                
                # –ß–µ–∫–∞—î–º–æ –∞–±–æ polling –∞–±–æ shutdown
                done, pending = await asyncio.wait(
                    [polling_task, shutdown_task],
                    return_when=asyncio.FIRST_COMPLETED
                )
                
                # –°–∫–∞—Å–æ–≤—É—î–º–æ pending –∑–∞–≤–¥–∞–Ω–Ω—è
                for task in pending:
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
                
            finally:
                # Graceful shutdown
                if self.scheduler:
                    await self.scheduler.stop()
                    logger.info("‚úÖ Automated scheduler stopped")
                
                await self.bot.session.close()
                logger.info("‚úÖ Bot session closed")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Critical error in main: {e}")
            return False

# ===== –ó–ê–ü–£–°–ö =====

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    success = await bot.main()
    return success

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Automated bot stopped by user")
    except Exception as e:
        logger.error(f"üí• Fatal error: {e}")
        sys.exit(1)