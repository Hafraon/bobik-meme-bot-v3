#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê - –û–°–¢–ê–¢–û–ß–ù–û –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô üöÄ
"""

import asyncio
import logging
import sys
from typing import Optional, List, Dict, Any, Union

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """ü§ñ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.db_available = False

    async def setup_bot(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            import os
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                try:
                    from config.settings import BOT_TOKEN
                    bot_token = BOT_TOKEN
                except ImportError:
                    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    return False
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False

    async def setup_database(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î"""
        try:
            from database import init_db
            self.db_available = await init_db()
            
            if self.db_available:
                logger.info("‚úÖ Database initialized successfully")
            else:
                logger.warning("‚ö†Ô∏è Working without database")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database warning: {e}")
            return True

    async def setup_automation(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            from services.automated_scheduler import create_automated_scheduler
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            
            if self.scheduler:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Automation warning: {e}")
            return True

    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –æ—Å–Ω–æ–≤–Ω–∏—Ö handlers
            from handlers import register_all_handlers
            register_all_handlers(self.dp)
            logger.info("‚úÖ All handlers registered successfully")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Main handlers unavailable: {e}")
            await self._register_emergency_handlers()
        except Exception as e:
            logger.error(f"‚ùå Handlers error: {e}")
            await self._register_emergency_handlers()

    async def _register_emergency_handlers(self):
        """–ê–≤–∞—Ä—ñ–π–Ω—ñ handlers –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        from aiogram import F
        from aiogram.types import Message, CallbackQuery, InlineQuery
        from aiogram.filters import Command, CommandStart
        
        logger.info("üÜò –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–≤–∞—Ä—ñ–π–Ω–∏—Ö handlers...")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        @self.dp.message(CommandStart())
        async def start_handler(message: Message):
            await message.answer(
                "ü§ñ <b>–ü—Ä–∏–≤—ñ—Ç! –Ø —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–µ–º-–±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é!</b>\n\n"
                "üìã <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
                "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\n"
                "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\n"
                "‚Ä¢ /profile - –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\n"
                "‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        @self.dp.message(Command("help"))
        async def help_handler(message: Message):
            await message.answer(
                "‚ùì <b>–î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£</b>\n\n"
                "üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>\n"
                "‚Ä¢ –ó–∞—Ä–æ–±–ª—è–π—Ç–µ –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
                "‚Ä¢ –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä–∞–Ω–≥\n\n"
                "üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\n"
                "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\n"
                "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\n\n"
                "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\n"
                "‚Ä¢ /profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /meme
        @self.dp.message(Command("meme"))
        async def meme_handler(message: Message):
            memes = [
                "üòÇ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —ñ –∫–∞–≤–∞</b>\n\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ —ñ –∑–∞–º–æ–≤–ª—è—î –∫–∞–≤—É.\n–ë–∞—Ä–∏—Å—Ç–∞: 'Java —á–∏ Python?'\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–ó–≤–∏—á–∞–π–Ω—É!'",
                "ü§£ <b>–†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω</b>\n\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω?\n–ë–æ Oct 31 == Dec 25!",
                "üòÑ <b>–õ–∞–º–ø–æ—á–∫–∞</b>\n\n–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ —Ç—Ä–µ–±–∞ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É?\n–ñ–æ–¥–Ω–æ–≥–æ - —Ü–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!"
            ]
            import random
            await message.answer(f"üé≠ {random.choice(memes)}")
        
        # –ö–æ–º–∞–Ω–¥–∞ /anekdot
        @self.dp.message(Command("anekdot"))
        async def anekdot_handler(message: Message):
            anekdots = [
                "üá∫üá¶ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏</b>\n\n–£–∫—Ä–∞—ó–Ω–µ—Ü—å –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–¥.\n–ë—ñ–ª–æ—Ä—É—Å –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞–≤.\n–†–æ—Å—ñ—è–Ω–∏–Ω —Å–∫–æ–ø—ñ—é–≤–∞–≤ —ñ —Å–∫–∞–∑–∞–≤ —â–æ —Å–∞–º –ø—Ä–∏–¥—É–º–∞–≤.",
                "üòÇ <b>–£ –ª—ñ–∫–∞—Ä—è</b>\n\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–ë–æ–ª–∏—Ç—å —Å–ø–∏–Ω–∞!'\n–õ—ñ–∫–∞—Ä: '–ë–∞–≥–∞—Ç–æ —Å–∏–¥–∏—à?'\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–¢—ñ–ª—å–∫–∏ 18 –≥–æ–¥–∏–Ω!'\n–õ—ñ–∫–∞—Ä: '–ù–æ—Ä–º–∞–ª—å–Ω–æ!'",
                "ü§£ <b>–ü—Ä–∏—Ä–æ–¥–∞</b>\n\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É?\n–ë–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤ —ñ –Ω–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó!"
            ]
            import random
            await message.answer(f"üé≠ {random.choice(anekdots)}")
        
        # –ö–æ–º–∞–Ω–¥–∞ /profile
        @self.dp.message(Command("profile"))
        async def profile_handler(message: Message):
            user = message.from_user
            await message.answer(
                f"üë§ <b>–ü–†–û–§–Ü–õ–¨</b>\n\n"
                f"üÜî ID: <code>{user.id}</code>\n"
                f"üë§ –Ü–º'—è: {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–µ'}\n"
                f"üì± Username: @{user.username or '–ù–µ–º–∞—î'}\n"
                f"üìä –ë–∞–ª–∏: <b>0</b>\n"
                f"üèÜ –†–∞–Ω–≥: ü§° <b>–ù–æ–≤–∞—á–æ–∫</b>"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /admin
        @self.dp.message(Command("admin"))
        async def admin_handler(message: Message):
            try:
                import os
                admin_id = int(os.getenv("ADMIN_ID", 603047391))
                if message.from_user.id == admin_id:
                    await message.answer(
                        "üëë <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\n\n"
                        "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∏–π\n"
                        "üìä –§—É–Ω–∫—Ü—ñ—ó –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ..."
                    )
                else:
                    await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤")
        
        # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @self.dp.message(F.text)
        async def text_handler(message: Message):
            await message.answer(
                "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\n\n"
                "/start - –ø–æ—á–∞—Ç–∏\n"
                "/help - –¥–æ–≤—ñ–¥–∫–∞\n"
                "/meme - –º–µ–º\n"
                "/anekdot - –∞–Ω–µ–∫–¥–æ—Ç"
            )
        
        # –û–±—Ä–æ–±–∫–∞ callback queries
        @self.dp.callback_query()
        async def callback_handler(callback: CallbackQuery):
            await callback.answer("üîß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
        
        # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @self.dp.message()
        async def any_message_handler(message: Message):
            await message.answer("ü§ñ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help")
        
        # Error handler
        @self.dp.error()
        async def error_handler(event, exception):
            logger.error(f"‚ùå Error: {exception}")
            try:
                if hasattr(event, 'message') and event.message:
                    await event.message.answer("üòÖ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ /help")
            except:
                pass
        
        logger.info("‚úÖ –ê–≤–∞—Ä—ñ–π–Ω—ñ handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.scheduler:
                await self.scheduler.stop()
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ aiohttp —Å–µ—Å—ñ—ó
            if self.bot:
                try:
                    # –ù–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó –≤ aiogram 3.x
                    if hasattr(self.bot, 'session') and self.bot.session:
                        if not self.bot.session.closed():  # ‚úÖ –í–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É closed()
                            await self.bot.session.close()
                            logger.info("‚úÖ Bot session closed")
                except AttributeError:
                    # Fallback –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –≤–µ—Ä—Å—ñ–π
                    try:
                        await self.bot.close()
                        logger.info("‚úÖ Bot closed (fallback)")
                    except:
                        logger.warning("‚ö†Ô∏è Bot cleanup skipped")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Session cleanup warning: {e}")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cleanup warning: {e}")

    async def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
        
        try:
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            if not await self.setup_bot():
                return False
            
            await self.setup_database()
            await self.setup_automation()
            await self.setup_handlers()
            
            logger.info("üéØ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)
