#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó üß†üòÇüî•
"""

import logging
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from config.settings import EMOJI, settings
from database.database import get_user_stats, get_leaderboard, get_db_session
from database.models import User

logger = logging.getLogger(__name__)

async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    await show_profile(message, message.from_user.id)

async def show_profile(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    stats = await get_user_stats(user_id)
    
    if not stats:
        await message.answer(f"{EMOJI['warning']} –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!")
        return
    
    user = stats["user"]
    
    # –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É
    current_points = user.points
    next_rank_points = None
    next_rank_name = None
    
    for points, rank in sorted(settings.RANKS.items()):
        if points > current_points:
            next_rank_points = points
            next_rank_name = rank
            break
    
    progress_text = ""
    if next_rank_points:
        needed_points = next_rank_points - current_points
        progress_text = f"\n{EMOJI['rocket']} –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É: {needed_points} –±–∞–ª—ñ–≤ ({next_rank_name})"
    else:
        progress_text = f"\n{EMOJI['crown']} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∞–Ω–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ!"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    days_registered = (datetime.utcnow() - user.created_at).days + 1
    avg_points_per_day = round(user.points / days_registered, 1)
    
    profile_text = (
        f"{EMOJI['profile']} <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
        f"{EMOJI['star']} <b>–Ü–º'—è:</b> {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
        f"{EMOJI['crown']} <b>–†–∞–Ω–≥:</b> {user.rank}\n"
        f"{EMOJI['fire']} <b>–ë–∞–ª—ñ–≤:</b> {user.points}{progress_text}\n\n"
        
        f"{EMOJI['brain']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£:</b>\n"
        f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {user.jokes_submitted}\n"
        f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user.jokes_approved}\n"
        f"‚Ä¢ –ú–µ–º—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {user.memes_submitted}\n"
        f"‚Ä¢ –ú–µ–º—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user.memes_approved}\n"
        f"‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Å—Ö–≤–∞–ª–µ–Ω–Ω—è: {stats['approval_rate']}%\n\n"
        
        f"{EMOJI['vs']} <b>–î–£–ï–õ–Ü:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–æ–≥: {user.duels_won}\n"
        f"‚Ä¢ –ü–æ—Ä–∞–∑–æ–∫: {user.duels_lost}\n"
        f"‚Ä¢ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {round(user.duels_won / max(user.duels_lost, 1), 2)}\n\n"
        
        f"{EMOJI['calendar']} <b>–ê–ö–¢–ò–í–ù–Ü–°–¢–¨:</b>\n"
        f"‚Ä¢ –î–Ω—ñ–≤ –≤ –±–æ—Ç—ñ: {days_registered}\n"
        f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ –±–∞–ª—ñ–≤/–¥–µ–Ω—å: {avg_points_per_day}\n"
        f"‚Ä¢ –†–µ–∞–∫—Ü—ñ–π –¥–∞–Ω–æ: {user.reactions_given}\n"
        f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞' if user.daily_subscription else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∞'}\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user.last_active.strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥—ñ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['calendar']} {'–í–∏–º–∫–Ω—É—Ç–∏' if user.daily_subscription else '–£–≤—ñ–º–∫–Ω—É—Ç–∏'} —Ä–æ–∑—Å–∏–ª–∫—É",
                callback_data="toggle_daily"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['top']} –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="show_leaderboard"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ]
    ])
    
    await message.answer(profile_text, reply_markup=keyboard)
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –ø—Ä–æ—Ñ—ñ–ª—å")

async def cmd_top(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /top"""
    await show_leaderboard(message)

async def show_leaderboard(message: Message):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    leaders = await get_leaderboard(15)
    
    if not leaders:
        await message.answer(f"{EMOJI['thinking']} –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ª—ñ–¥–µ—Ä—ñ–≤!")
        return
    
    leaderboard_text = f"{EMOJI['trophy']} <b>–¢–û–ü –ì–£–ú–û–†–ò–°–¢–Ü–í</b> {EMOJI['trophy']}\n\n"
    
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, user in enumerate(leaders, 1):
        if i <= 3:
            medal = medals[i-1]
        elif i <= 10:
            medal = f"{EMOJI['star']}"
        else:
            medal = f"{i}."
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        total_approved = user.jokes_approved + user.memes_approved
        
        user_line = (
            f"{medal} <b>{user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b>\n"
            f"   {EMOJI['fire']} {user.points} –±–∞–ª—ñ–≤ | {user.rank}\n"
            f"   {EMOJI['check']} –°—Ö–≤–∞–ª–µ–Ω–æ: {total_approved} –∂–∞—Ä—Ç—ñ–≤\n"
        )
        
        leaderboard_text += user_line + "\n"
    
    # –ü–æ–∑–∏—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_user_id = message.from_user.id
    with get_db_session() as session:
        current_user = session.query(User).filter(User.id == current_user_id).first()
        
        if current_user:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            better_users = session.query(User).filter(User.points > current_user.points).count()
            user_position = better_users + 1
            
            leaderboard_text += (
                f"\n{EMOJI['profile']} <b>–¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è:</b> #{user_position}\n"
                f"{EMOJI['fire']} {current_user.points} –±–∞–ª—ñ–≤ | {current_user.rank}"
            )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏", callback_data="earn_points_info")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ]
    ])
    
    await message.answer(leaderboard_text, reply_markup=keyboard)
    logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {current_user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤")

async def cmd_daily(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /daily"""
    await toggle_daily_subscription(message, message.from_user.id)

async def toggle_daily_subscription(message: Message, user_id: int):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    with get_db_session() as session:
        user = session.query(User).filter(User.id == user_id).first()
        
        if user:
            user.daily_subscription = not user.daily_subscription
            session.commit()
            
            if user.daily_subscription:
                response_text = (
                    f"{EMOJI['check']} <b>–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ!</b>\n\n"
                    f"{EMOJI['calendar']} –©–æ–¥–Ω—è –æ {settings.DAILY_BROADCAST_HOUR}:00 —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à:\n"
                    f"{EMOJI['brain']} –ù–∞–π–∫—Ä–∞—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç –¥–Ω—è\n"
                    f"{EMOJI['laugh']} –¢–æ–ø–æ–≤–∏–π –º–µ–º\n"
                    f"{EMOJI['fire']} –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
                    f"{EMOJI['star']} –ó–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: +2 –±–∞–ª–∏!"
                )
            else:
                response_text = (
                    f"{EMOJI['cross']} <b>–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≤–∏–º–∫–Ω–µ–Ω–æ</b>\n\n"
                    f"{EMOJI['thinking']} –¢–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à —É–≤—ñ–º–∫–Ω—É—Ç–∏ —ó—ó –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /daily"
                )
            
            await message.answer(response_text)
            logger.info(f"üìÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} {'—É–≤—ñ–º–∫–Ω—É–≤' if user.daily_subscription else '–≤–∏–º–∫–Ω—É–≤'} —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_earn_points_info(callback_query):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø–æ—Å–æ–±–∏ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –±–∞–ª—ñ–≤"""
    info_text = (
        f"{EMOJI['fire']} <b>–Ø–ö –ó–ê–†–û–ë–ò–¢–ò –ë–ê–õ–ò:</b>\n\n"
        f"{EMOJI['like']} <b>+{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤</b> - –∑–∞ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"{EMOJI['brain']} <b>+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤</b> - –∑–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['check']} <b>+{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ\n"
        f"{EMOJI['trophy']} <b>+{settings.POINTS_FOR_TOP_JOKE} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —É –¢–û–ü—ñ\n"
        f"{EMOJI['vs']} <b>+15 –±–∞–ª—ñ–≤</b> - –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ\n"
        f"{EMOJI['calendar']} <b>+2 –±–∞–ª–∏</b> - –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        f"{EMOJI['star']} <b>+1 –±–∞–ª</b> - –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
        f"{EMOJI['rocket']} <b>–ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —ñ —Å—Ç–∞–≤–∞–π –ª–µ–≥–µ–Ω–¥–æ—é –≥—É–º–æ—Ä—É!</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ]
    ])
    
    await callback_query.message.answer(info_text, reply_markup=keyboard)
    await callback_query.answer()

async def callback_start_duel(callback_query):
    """–ü–æ—á–∞—Ç–æ–∫ –¥—É–µ–ª—ñ"""
    await callback_query.message.answer(
        f"{EMOJI['vs']} <b>–î—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤!</b>\n\n"
        f"{EMOJI['fire']} –©–æ–± –ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É:\n"
        f"<code>/duel</code>\n\n"
        f"{EMOJI['brain']} –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        f"1. –¢–∏ –Ω–∞–¥—Å–∏–ª–∞—î—à —Å–≤—ñ–π –∂–∞—Ä—Ç\n"
        f"2. –ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø–æ–Ω–µ–Ω—Ç–∞\n"
        f"3. –Ü–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≥–æ–ª–æ—Å—É—é—Ç—å\n"
        f"4. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +15 –±–∞–ª—ñ–≤!"
    )
    await callback_query.answer()

def register_gamification_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_top, Command("top"))
    dp.message.register(cmd_daily, Command("daily"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_earn_points_info, F.data == "earn_points_info")
    dp.callback_query.register(callback_start_duel, F.data == "start_duel")