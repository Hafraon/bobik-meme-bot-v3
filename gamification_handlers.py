#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –•–µ–Ω–¥–ª–µ—Ä–∏ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó üß†üòÇüî•
"""

import logging
from datetime import datetime, timedelta

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from settings import settings, EMOJI

logger = logging.getLogger(__name__)

# –¢–∏–º—á–∞—Å–æ–≤–∞ –±–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–æ–∫–∏ –ë–î –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞)
USERS_DB = {}

def get_or_create_user(user_id: int, username: str = None, first_name: str = None):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if user_id not in USERS_DB:
        USERS_DB[user_id] = {
            'id': user_id,
            'username': username,
            'first_name': first_name,
            'points': 0,
            'rank': settings.RANKS[0],
            'jokes_submitted': 0,
            'jokes_approved': 0,
            'memes_submitted': 0,
            'memes_approved': 0,
            'reactions_given': 0,
            'duels_won': 0,
            'duels_lost': 0,
            'daily_subscription': False,
            'created_at': datetime.now(),
            'last_active': datetime.now()
        }
    else:
        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        USERS_DB[user_id]['username'] = username
        USERS_DB[user_id]['first_name'] = first_name
        USERS_DB[user_id]['last_active'] = datetime.now()
    
    return USERS_DB[user_id]

def update_user_points(user_id: int, points: int, reason: str = ""):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = get_or_create_user(user_id)
    old_points = user['points']
    user['points'] += points
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–∞–Ω–≥—É
    new_rank = get_rank_by_points(user['points'])
    old_rank = user['rank']
    user['rank'] = new_rank
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ {points} –±–∞–ª—ñ–≤ –∑–∞: {reason}")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–∞–Ω–≥—É
    rank_changed = old_rank != new_rank
    return {
        'points_added': points,
        'total_points': user['points'],
        'old_rank': old_rank,
        'new_rank': new_rank,
        'rank_changed': rank_changed
    }

def get_rank_by_points(points: int) -> str:
    """–í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–∞–Ω–≥—É –ø–æ –±–∞–ª–∞—Ö"""
    for min_points in sorted(settings.RANKS.keys(), reverse=True):
        if points >= min_points:
            return settings.RANKS[min_points]
    return settings.RANKS[0]

def get_leaderboard(limit: int = 10):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    users_list = list(USERS_DB.values())
    users_list.sort(key=lambda x: x['points'], reverse=True)
    return users_list[:limit]

async def cmd_profile(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /profile"""
    await show_profile(message, message.from_user.id)

async def show_profile(message: Message, user_id: int):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user = get_or_create_user(
        user_id, 
        message.from_user.username, 
        message.from_user.first_name
    )
    
    # –ü—Ä–æ–≥—Ä–µ—Å –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É
    current_points = user['points']
    next_rank_points = None
    next_rank_name = None
    
    for points, rank in sorted(settings.RANKS.items()):
        if points > current_points:
            next_rank_points = points
            next_rank_name = rank
            break
    
    progress_text = ""
    if next_rank_points:
        needed_points = next_rank_points - current_points
        progress_text = f"\n{EMOJI['rocket']} –î–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É: {needed_points} –±–∞–ª—ñ–≤ ({next_rank_name})"
    else:
        progress_text = f"\n{EMOJI['crown']} –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–∞–Ω–≥ –¥–æ—Å—è–≥–Ω—É—Ç–æ!"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    days_registered = (datetime.now() - user['created_at']).days + 1
    avg_points_per_day = round(user['points'] / days_registered, 1)
    
    # –ü–æ–∑–∏—Ü—ñ—è –≤ —Ä–µ–π—Ç–∏–Ω–≥—É
    all_users = list(USERS_DB.values())
    all_users.sort(key=lambda x: x['points'], reverse=True)
    user_position = next((i for i, u in enumerate(all_users, 1) if u['id'] == user_id), 1)
    
    profile_text = (
        f"{EMOJI['profile']} <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\n\n"
        f"{EMOJI['star']} <b>–Ü–º'—è:</b> {user['first_name'] or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
        f"{EMOJI['crown']} <b>–†–∞–Ω–≥:</b> {user['rank']}\n"
        f"{EMOJI['fire']} <b>–ë–∞–ª—ñ–≤:</b> {user['points']}{progress_text}\n"
        f"{EMOJI['trophy']} <b>–ü–æ–∑–∏—Ü—ñ—è:</b> #{user_position} –∑ {len(all_users)}\n\n"
        
        f"{EMOJI['brain']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–£:</b>\n"
        f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {user['jokes_submitted']}\n"
        f"‚Ä¢ –ê–Ω–µ–∫–¥–æ—Ç—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user['jokes_approved']}\n"
        f"‚Ä¢ –ú–µ–º—ñ–≤ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {user['memes_submitted']}\n"
        f"‚Ä¢ –ú–µ–º—ñ–≤ —Å—Ö–≤–∞–ª–µ–Ω–æ: {user['memes_approved']}\n"
        f"‚Ä¢ –†–µ–∞–∫—Ü—ñ–π –¥–∞–Ω–æ: {user['reactions_given']}\n\n"
        
        f"{EMOJI['vs']} <b>–î–£–ï–õ–Ü:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ–º–æ–≥: {user['duels_won']}\n"
        f"‚Ä¢ –ü–æ—Ä–∞–∑–æ–∫: {user['duels_lost']}\n"
        f"‚Ä¢ –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è: {round(user['duels_won'] / max(user['duels_lost'], 1), 2)}\n\n"
        
        f"{EMOJI['calendar']} <b>–ê–ö–¢–ò–í–ù–Ü–°–¢–¨:</b>\n"
        f"‚Ä¢ –î–Ω—ñ–≤ –≤ –±–æ—Ç—ñ: {days_registered}\n"
        f"‚Ä¢ –°–µ—Ä–µ–¥–Ω—å–æ –±–∞–ª—ñ–≤/–¥–µ–Ω—å: {avg_points_per_day}\n"
        f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–∞' if user['daily_subscription'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∞'}\n"
        f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user['last_active'].strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥—ñ–π
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{EMOJI['calendar']} {'–í–∏–º–∫–Ω—É—Ç–∏' if user['daily_subscription'] else '–£–≤—ñ–º–∫–Ω—É—Ç–∏'} —Ä–æ–∑—Å–∏–ª–∫—É",
                callback_data="toggle_daily"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['top']} –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="show_leaderboard"),
            InlineKeyboardButton(text=f"{EMOJI['fire']} –Ø–∫ –∑–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏", callback_data="earn_points_info")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ]
    ])
    
    await message.answer(profile_text, reply_markup=keyboard)
    logger.info(f"üî• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –ø—Ä–æ—Ñ—ñ–ª—å")

async def cmd_top(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /top"""
    await show_leaderboard(message)

async def show_leaderboard(message: Message):
    """–ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    leaders = get_leaderboard(15)
    
    if not leaders:
        await message.answer(f"{EMOJI['thinking']} –ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ª—ñ–¥–µ—Ä—ñ–≤!")
        return
    
    leaderboard_text = f"{EMOJI['trophy']} <b>–¢–û–ü –ì–£–ú–û–†–ò–°–¢–Ü–í</b> {EMOJI['trophy']}\n\n"
    
    medals = ["ü•á", "ü•à", "ü•â"]
    
    for i, user in enumerate(leaders, 1):
        if i <= 3:
            medal = medals[i-1]
        elif i <= 10:
            medal = f"{EMOJI['star']}"
        else:
            medal = f"{i}."
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        total_approved = user['jokes_approved'] + user['memes_approved']
        
        user_line = (
            f"{medal} <b>{user['first_name'] or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}</b>\n"
            f"   {EMOJI['fire']} {user['points']} –±–∞–ª—ñ–≤ | {user['rank']}\n"
            f"   {EMOJI['check']} –°—Ö–≤–∞–ª–µ–Ω–æ: {total_approved} –∂–∞—Ä—Ç—ñ–≤\n"
        )
        
        leaderboard_text += user_line + "\n"
    
    # –ü–æ–∑–∏—Ü—ñ—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_user_id = message.from_user.id
    current_user = get_or_create_user(
        current_user_id,
        message.from_user.username,
        message.from_user.first_name
    )
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    all_users = list(USERS_DB.values())
    all_users.sort(key=lambda x: x['points'], reverse=True)
    user_position = next((i for i, u in enumerate(all_users, 1) if u['id'] == current_user_id), 1)
    
    leaderboard_text += (
        f"\n{EMOJI['profile']} <b>–¢–≤–æ—è –ø–æ–∑–∏—Ü—ñ—è:</b> #{user_position}\n"
        f"{EMOJI['fire']} {current_user['points']} –±–∞–ª—ñ–≤ | {current_user['rank']}"
    )
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ó–∞—Ä–æ–±–∏—Ç–∏ –±–∞–ª–∏", callback_data="earn_points_info")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke"),
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º", callback_data="get_meme")
        ]
    ])
    
    await message.answer(leaderboard_text, reply_markup=keyboard)
    logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {current_user_id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Ç–∞–±–ª–∏—Ü—é –ª—ñ–¥–µ—Ä—ñ–≤")

async def cmd_daily(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /daily"""
    await toggle_daily_subscription(message, message.from_user.id)

async def toggle_daily_subscription(message: Message, user_id: int):
    """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    user = get_or_create_user(
        user_id,
        message.from_user.username,
        message.from_user.first_name
    )
    
    user['daily_subscription'] = not user['daily_subscription']
    
    if user['daily_subscription']:
        response_text = (
            f"{EMOJI['check']} <b>–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ!</b>\n\n"
            f"{EMOJI['calendar']} –©–æ–¥–Ω—è –æ {settings.DAILY_BROADCAST_HOUR}:00 —Ç–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ—à:\n"
            f"{EMOJI['brain']} –ù–∞–π–∫—Ä–∞—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç –¥–Ω—è\n"
            f"{EMOJI['laugh']} –¢–æ–ø–æ–≤–∏–π –º–µ–º\n"
            f"{EMOJI['fire']} –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
            f"{EMOJI['star']} –ó–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: +2 –±–∞–ª–∏!"
        )
    else:
        response_text = (
            f"{EMOJI['cross']} <b>–©–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É –≤–∏–º–∫–Ω–µ–Ω–æ</b>\n\n"
            f"{EMOJI['thinking']} –¢–∏ –∑–∞–≤–∂–¥–∏ –º–æ–∂–µ—à —É–≤—ñ–º–∫–Ω—É—Ç–∏ —ó—ó –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ /daily"
        )
    
    await message.answer(response_text)
    logger.info(f"üìÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} {'—É–≤—ñ–º–∫–Ω—É–≤' if user['daily_subscription'] else '–≤–∏–º–∫–Ω—É–≤'} —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É")

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_show_profile(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    await show_profile(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_show_leaderboard(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    await show_leaderboard(callback_query.message)
    await callback_query.answer()

async def callback_toggle_daily(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    await toggle_daily_subscription(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_earn_points_info(callback_query: CallbackQuery):
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ø–æ—Å–æ–±–∏ –∑–∞—Ä–æ–±—ñ—Ç–∫—É –±–∞–ª—ñ–≤"""
    info_text = (
        f"{EMOJI['fire']} <b>–Ø–ö –ó–ê–†–û–ë–ò–¢–ò –ë–ê–õ–ò:</b>\n\n"
        f"{EMOJI['like']} <b>+{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤</b> - –∑–∞ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        f"{EMOJI['brain']} <b>+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤</b> - –∑–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['check']} <b>+{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ\n"
        f"{EMOJI['trophy']} <b>+{settings.POINTS_FOR_TOP_JOKE} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —É –¢–û–ü—ñ\n"
        f"{EMOJI['vs']} <b>+15 –±–∞–ª—ñ–≤</b> - –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ\n"
        f"{EMOJI['calendar']} <b>+2 –±–∞–ª–∏</b> - –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n"
        f"{EMOJI['star']} <b>+1 –±–∞–ª</b> - –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n\n"
        f"{EMOJI['crown']} <b>–†–ê–ù–ì–ò –ó–ê –ë–ê–õ–ê–ú–ò:</b>\n"
    )
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∞–Ω–≥–∏
    for points, rank in sorted(settings.RANKS.items()):
        info_text += f"‚Ä¢ {points}+ –±–∞–ª—ñ–≤ - {rank}\n"
    
    info_text += f"\n{EMOJI['rocket']} <b>–ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —ñ —Å—Ç–∞–≤–∞–π –ª–µ–≥–µ–Ω–¥–æ—é –≥—É–º–æ—Ä—É!</b>"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
        ]
    ])
    
    await callback_query.message.edit_text(info_text, reply_markup=keyboard)
    await callback_query.answer()

async def callback_get_content(callback_query: CallbackQuery):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ content_handlers
    try:
        if callback_query.data == "get_joke":
            from content_handlers import send_joke
            await send_joke(callback_query.message, from_callback=True)
        elif callback_query.data == "get_meme":
            from content_handlers import send_meme  
            await send_meme(callback_query.message, from_callback=True)
    except ImportError:
        await callback_query.message.answer(f"{EMOJI['cross']} –ú–æ–¥—É–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
    
    await callback_query.answer()

async def callback_submit_content(callback_query: CallbackQuery):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    await callback_query.message.answer(
        f"{EMOJI['fire']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
        f"{EMOJI['brain']} –î–ª—è –∞–Ω–µ–∫–¥–æ—Ç—É - –Ω–∞–ø–∏—à–∏ /submit —ñ –æ–¥—Ä–∞–∑—É —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n"
        f"{EMOJI['laugh']} –î–ª—è –º–µ–º—É - –Ω–∞–¥—ñ—à–ª–∏ /submit —ñ –ø—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n\n"
        f"{EMOJI['star']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è! {EMOJI['brain']}</code>"
    )
    await callback_query.answer()

# ===== –§–£–ù–ö–¶–Ü–á –î–õ–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó –Ü–ù–®–ò–ú–ò –ú–û–î–£–õ–Ø–ú–ò =====

async def award_points_for_action(user_id: int, action: str, bot=None):
    """–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤ –∑–∞ —Ä—ñ–∑–Ω—ñ –¥—ñ—ó (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö)"""
    points_map = {
        'view_content': 1,
        'like_content': settings.POINTS_FOR_REACTION,
        'dislike_content': 1,
        'submit_content': settings.POINTS_FOR_SUBMISSION,
        'approved_content': settings.POINTS_FOR_APPROVAL,
        'top_content': settings.POINTS_FOR_TOP_JOKE,
        'daily_activity': 2,
        'duel_win': 15,
        'duel_vote': 2
    }
    
    points = points_map.get(action, 0)
    if points > 0:
        result = update_user_points(user_id, points, action)
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Ä–∞–Ω–≥—É
        if result['rank_changed'] and bot:
            try:
                user = USERS_DB.get(user_id)
                if user:
                    await bot.send_message(
                        user_id,
                        f"{EMOJI['party']} <b>–í–Ü–¢–ê–Æ! –ù–æ–≤–∏–π —Ä–∞–Ω–≥!</b>\n\n"
                        f"{EMOJI['crown']} <b>–¢–≤—ñ–π –Ω–æ–≤–∏–π —Ä–∞–Ω–≥:</b> {result['new_rank']}\n"
                        f"{EMOJI['fire']} <b>–ë–∞–ª—ñ–≤:</b> {result['total_points']}\n\n"
                        f"{EMOJI['rocket']} –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
                    )
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–∞–Ω–≥: {e}")
        
        return result
    
    return None

def register_gamification_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_profile, Command("profile"))
    dp.message.register(cmd_top, Command("top"))
    dp.message.register(cmd_daily, Command("daily"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_show_profile, F.data == "show_profile")
    dp.callback_query.register(callback_show_leaderboard, F.data == "show_leaderboard")
    dp.callback_query.register(callback_toggle_daily, F.data == "toggle_daily")
    dp.callback_query.register(callback_earn_points_info, F.data == "earn_points_info")
    dp.callback_query.register(callback_submit_content, F.data == "submit_content")
    dp.callback_query.register(callback_get_content, F.data.in_(["get_joke", "get_meme"]))