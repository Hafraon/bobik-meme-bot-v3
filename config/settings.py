#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê üß†üòÇüî•
"""

import os
import logging
from typing import Dict, List, Any

logger = logging.getLogger(__name__)

class Settings:
    """–ö–ª–∞—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –±–æ—Ç–∞ –∑ fallback –º–µ—Ö–∞–Ω—ñ–∑–º–∞–º–∏"""
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        self._load_all_settings()
        self._validate_critical_settings()
        logger.info("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    
    def _load_all_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        # ===== –û–°–ù–û–í–ù–Ü –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø =====
        self.BOT_TOKEN = os.getenv("BOT_TOKEN", "")
        self.ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
        self.DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///ukrainian_bot.db")
        
        # ===== –î–û–î–ê–¢–ö–û–í–Ü –°–ï–†–í–Ü–°–ò =====
        self.CHANNEL_ID = os.getenv("CHANNEL_ID", "")
        self.OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
        self.WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
        self.WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
        
        # ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –°–ï–†–ï–î–û–í–ò–©–ê =====
        self.DEBUG = os.getenv("DEBUG", "False").lower() == "true"
        self.LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
        self.TIMEZONE = os.getenv("TIMEZONE", "Europe/Kiev")
        self.ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
        self.PORT = int(os.getenv("PORT", "8000"))
        
        # ===== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–• =====
        self.DB_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", "10"))
        self.DB_MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", "20"))
        self.DB_ECHO = os.getenv("DB_ECHO", "False").lower() == "true"
        
        # ===== –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ø =====
        self.POINTS_FOR_VIEW = int(os.getenv("POINTS_FOR_VIEW", "1"))
        self.POINTS_FOR_REACTION = int(os.getenv("POINTS_FOR_REACTION", "5"))
        self.POINTS_FOR_SUBMISSION = int(os.getenv("POINTS_FOR_SUBMISSION", "10"))
        self.POINTS_FOR_APPROVAL = int(os.getenv("POINTS_FOR_APPROVAL", "20"))
        self.POINTS_FOR_TOP_JOKE = int(os.getenv("POINTS_FOR_TOP_JOKE", "50"))
        self.POINTS_FOR_DUEL_WIN = int(os.getenv("POINTS_FOR_DUEL_WIN", "15"))
        self.POINTS_FOR_DUEL_PARTICIPATION = int(os.getenv("POINTS_FOR_DUEL_PARTICIPATION", "5"))
        self.POINTS_FOR_DAILY_ACTIVITY = int(os.getenv("POINTS_FOR_DAILY_ACTIVITY", "2"))
        self.POINTS_FOR_VOTING = int(os.getenv("POINTS_FOR_VOTING", "2"))
        
        # ===== –©–û–î–ï–ù–ù–ê –†–û–ó–°–ò–õ–ö–ê =====
        self.DAILY_BROADCAST_HOUR = int(os.getenv("DAILY_BROADCAST_HOUR", "9"))
        self.DAILY_BROADCAST_MINUTE = int(os.getenv("DAILY_BROADCAST_MINUTE", "0"))
        self.DAILY_BROADCAST_ENABLED = os.getenv("DAILY_BROADCAST_ENABLED", "True").lower() == "true"
        
        # ===== –î–£–ï–õ–Ü =====
        self.DUEL_VOTING_TIME = int(os.getenv("DUEL_VOTING_TIME", "300"))  # 5 —Ö–≤–∏–ª–∏–Ω
        self.MIN_VOTES_FOR_DUEL = int(os.getenv("MIN_VOTES_FOR_DUEL", "3"))
        self.MAX_ACTIVE_DUELS = int(os.getenv("MAX_ACTIVE_DUELS", "10"))
        
        # ===== –ú–û–î–ï–†–ê–¶–Ü–Ø =====
        self.AUTO_APPROVE_ADMIN_CONTENT = os.getenv("AUTO_APPROVE_ADMIN_CONTENT", "True").lower() == "true"
        self.MAX_PENDING_CONTENT_PER_USER = int(os.getenv("MAX_PENDING_CONTENT_PER_USER", "5"))
        self.CONTENT_MIN_LENGTH = int(os.getenv("CONTENT_MIN_LENGTH", "10"))
        self.CONTENT_MAX_LENGTH = int(os.getenv("CONTENT_MAX_LENGTH", "1000"))
        
        # ===== –ê–ù–¢–ò–°–ü–ê–ú =====
        self.RATE_LIMIT_MESSAGES = int(os.getenv("RATE_LIMIT_MESSAGES", "3"))
        self.RATE_LIMIT_CALLBACKS = int(os.getenv("RATE_LIMIT_CALLBACKS", "5"))
        self.SPAM_BAN_DURATION = int(os.getenv("SPAM_BAN_DURATION", "3600"))  # 1 –≥–æ–¥–∏–Ω–∞
        
        # ===== –ö–ï–®–£–í–ê–ù–ù–Ø =====
        self.REDIS_URL = os.getenv("REDIS_URL", "")
        self.CACHE_TTL = int(os.getenv("CACHE_TTL", "3600"))  # 1 –≥–æ–¥–∏–Ω–∞
        self.CACHE_ENABLED = os.getenv("CACHE_ENABLED", "True").lower() == "true"
        
        # ===== –ú–û–ù–Ü–¢–û–†–ò–ù–ì =====
        self.PROMETHEUS_ENABLED = os.getenv("PROMETHEUS_ENABLED", "False").lower() == "true"
        self.PROMETHEUS_PORT = int(os.getenv("PROMETHEUS_PORT", "8001"))
        self.HEALTH_CHECK_ENABLED = os.getenv("HEALTH_CHECK_ENABLED", "True").lower() == "true"
        
        # ===== –†–û–ó–°–ò–õ–ö–ê =====
        self.BROADCAST_DELAY = float(os.getenv("BROADCAST_DELAY", "0.1"))  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
        self.MAX_BROADCAST_USERS = int(os.getenv("MAX_BROADCAST_USERS", "10000"))
        
        # ===== BACKUP =====
        self.BACKUP_ENABLED = os.getenv("BACKUP_ENABLED", "True").lower() == "true"
        self.BACKUP_INTERVAL_HOURS = int(os.getenv("BACKUP_INTERVAL_HOURS", "24"))
        self.BACKUP_RETAIN_DAYS = int(os.getenv("BACKUP_RETAIN_DAYS", "7"))
        
        # ===== AI –ì–ï–ù–ï–†–ê–¶–Ü–Ø =====
        self.AI_GENERATION_ENABLED = os.getenv("AI_GENERATION_ENABLED", "False").lower() == "true"
        self.OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")
        self.AI_MAX_TOKENS = int(os.getenv("AI_MAX_TOKENS", "150"))
        self.AI_TEMPERATURE = float(os.getenv("AI_TEMPERATURE", "0.9"))
        
        # ===== –î–û–î–ê–¢–ö–û–í–Ü –ê–î–ú–Ü–ù–ò =====
        additional_admins_str = os.getenv("ADDITIONAL_ADMINS", "")
        self.ADDITIONAL_ADMINS = []
        if additional_admins_str:
            try:
                self.ADDITIONAL_ADMINS = [int(admin_id.strip()) for admin_id in additional_admins_str.split(",")]
            except ValueError:
                logger.warning("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ADDITIONAL_ADMINS")
        
        # ===== –ó–ê–ë–û–†–û–ù–ï–ù–Ü –°–õ–û–í–ê =====
        banned_words_str = os.getenv("BANNED_WORDS", "")
        self.BANNED_WORDS = []
        if banned_words_str:
            self.BANNED_WORDS = [word.strip().lower() for word in banned_words_str.split(",")]
    
    def _validate_critical_settings(self):
        """–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–ª–∏–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        errors = []
        
        if not self.BOT_TOKEN:
            errors.append("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if not self.ADMIN_ID:
            errors.append("ADMIN_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if not self.DATABASE_URL:
            errors.append("DATABASE_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if self.DUEL_VOTING_TIME < 60:
            errors.append("DUEL_VOTING_TIME –∑–∞–Ω–∞–¥—Ç–æ –º–∞–ª–∏–π (–º—ñ–Ω—ñ–º—É–º 60 —Å–µ–∫—É–Ω–¥)")
        
        if self.RATE_LIMIT_MESSAGES < 1:
            errors.append("RATE_LIMIT_MESSAGES –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ >= 1")
        
        if errors:
            error_text = "\n".join(f"‚ùå {error}" for error in errors)
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:\n{error_text}")
            raise ValueError(f"–ö—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {errors}")
    
    def get_all_admins(self) -> List[int]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
        admins = [self.ADMIN_ID] if self.ADMIN_ID else []
        admins.extend(self.ADDITIONAL_ADMINS)
        return list(set(admins))  # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return user_id in self.get_all_admins()
    
    def get_database_config(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ë–î"""
        return {
            "url": self.DATABASE_URL,
            "pool_size": self.DB_POOL_SIZE,
            "max_overflow": self.DB_MAX_OVERFLOW,
            "echo": self.DB_ECHO
        }
    
    def get_points_config(self) -> Dict[str, int]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –±–∞–ª—ñ–≤"""
        return {
            "view": self.POINTS_FOR_VIEW,
            "reaction": self.POINTS_FOR_REACTION,
            "submission": self.POINTS_FOR_SUBMISSION,
            "approval": self.POINTS_FOR_APPROVAL,
            "top_joke": self.POINTS_FOR_TOP_JOKE,
            "duel_win": self.POINTS_FOR_DUEL_WIN,
            "duel_participation": self.POINTS_FOR_DUEL_PARTICIPATION,
            "daily_activity": self.POINTS_FOR_DAILY_ACTIVITY,
            "voting": self.POINTS_FOR_VOTING
        }
    
    def get_duel_config(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –¥—É–µ–ª—ñ–≤"""
        return {
            "voting_time": self.DUEL_VOTING_TIME,
            "min_votes": self.MIN_VOTES_FOR_DUEL,
            "max_active": self.MAX_ACTIVE_DUELS
        }
    
    def get_moderation_config(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –º–æ–¥–µ—Ä–∞—Ü—ñ—ó"""
        return {
            "auto_approve_admin": self.AUTO_APPROVE_ADMIN_CONTENT,
            "max_pending_per_user": self.MAX_PENDING_CONTENT_PER_USER,
            "min_length": self.CONTENT_MIN_LENGTH,
            "max_length": self.CONTENT_MAX_LENGTH,
            "banned_words": self.BANNED_WORDS
        }
    
    def get_scheduler_config(self) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        return {
            "daily_broadcast_enabled": self.DAILY_BROADCAST_ENABLED,
            "broadcast_hour": self.DAILY_BROADCAST_HOUR,
            "broadcast_minute": self.DAILY_BROADCAST_MINUTE,
            "timezone": self.TIMEZONE
        }
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ —Å–ª–æ–≤–Ω–∏–∫ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤)"""
        safe_settings = {}
        
        for attr_name in dir(self):
            if not attr_name.startswith('_') and not callable(getattr(self, attr_name)):
                value = getattr(self, attr_name)
                
                # –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ñ –¥–∞–Ω—ñ
                if any(secret in attr_name.upper() for secret in ['TOKEN', 'KEY', 'SECRET', 'PASSWORD']):
                    if value:
                        safe_settings[attr_name] = f"{value[:8]}***"
                    else:
                        safe_settings[attr_name] = ""
                else:
                    safe_settings[attr_name] = value
        
        return safe_settings

# ===== –ï–ú–û–î–ó–Ü –¢–ê –¢–ï–ö–°–¢–ò =====

EMOJI = {
    # –û—Å–Ω–æ–≤–Ω—ñ –µ–º–æ–¥–∑—ñ
    "brain": "üß†",
    "laugh": "üòÇ", 
    "fire": "üî•",
    "star": "‚≠ê",
    "gem": "üíé",
    "rocket": "üöÄ",
    "heart": "‚ù§Ô∏è",
    
    # –°—Ç–∞—Ç—É—Å–∏
    "check": "‚úÖ",
    "cross": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è",
    "new": "üÜï",
    
    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ç–∞ —Ä–æ–ª—ñ
    "crown": "üëë",
    "profile": "üë§",
    "admin": "üõ°Ô∏è",
    "vip": "üíé",
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    "meme": "üñºÔ∏è",
    "joke": "üòÑ",
    "photo": "üì∏",
    "video": "üé¨",
    
    # –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
    "vs": "‚öîÔ∏è",
    "trophy": "üèÜ",
    "medal": "ü•á",
    "calendar": "üìÖ",
    "time": "‚è∞",
    "timer": "‚è≤Ô∏è",
    
    # –†–µ–∞–∫—Ü—ñ—ó
    "thumbs_up": "üëç",
    "thumbs_down": "üëé",
    "like": "‚ù§Ô∏è",
    "dislike": "üíî",
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    "stats": "üìä",
    "chart": "üìà",
    "graph": "üìâ",
    "percentage": "üìã",
    
    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    "home": "üè†",
    "back": "‚¨ÖÔ∏è",
    "next": "‚û°Ô∏è",
    "up": "‚¨ÜÔ∏è",
    "down": "‚¨áÔ∏è",
    
    # –ß–∞—Å –¥–æ–±–∏
    "morning": "üåÖ",
    "day": "‚òÄÔ∏è",
    "evening": "üåÜ",
    "night": "üåô",
    
    # –î—ñ—ó
    "send": "üì§",
    "receive": "üì•",
    "search": "üîç",
    "filter": "üîΩ",
    "refresh": "üîÑ",
    "settings": "‚öôÔ∏è",
    "edit": "‚úèÔ∏è",
    "delete": "üóëÔ∏è",
    
    # –ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è
    "level_up": "üìà",
    "achievement": "üèÖ",
    "badge": "üéñÔ∏è",
    "reward": "üéÅ",
    
    # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
    "approve": "‚úÖ",
    "reject": "‚ùå",
    "pending": "‚è≥",
    "review": "üëÅ‚Äçüó®",
    
    # –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ
    "bot": "ü§ñ",
    "user": "üë§",
    "group": "üë•",
    "channel": "üì¢",
    "link": "üîó",
    "file": "üìÑ",
    "folder": "üìÅ",
    "database": "üíæ",
    "cloud": "‚òÅÔ∏è",
    "shield": "üõ°Ô∏è",
    "key": "üîë",
    "lock": "üîí",
    "unlock": "üîì"
}

TEXTS = {
    # –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    "welcome": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –±–æ—Ç–∞ –º–µ–º—ñ–≤ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç—ñ–≤!",
    "welcome_back": "–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º!",
    "good_morning": "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É",
    "good_day": "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è", 
    "good_evening": "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞",
    "good_night": "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ",
    
    # –ü–æ–º–∏–ª–∫–∏
    "error_general": "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
    "error_network": "–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è.",
    "error_database": "–ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
    "error_permissions": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.",
    "error_not_found": "–ó–∞–ø–∏—Ç—É–≤–∞–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
    
    # –£—Å–ø—ñ—Ö
    "success_general": "–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!",
    "success_save": "–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
    "success_delete": "–í–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
    "success_update": "–û–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
    
    # –ú–æ–¥–µ—Ä–∞—Ü—ñ—è
    "moderation_approved": "–ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ!",
    "moderation_rejected": "–ö–æ–Ω—Ç–µ–Ω—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.",
    "moderation_pending": "–ö–æ–Ω—Ç–µ–Ω—Ç –æ—á—ñ–∫—É—î –º–æ–¥–µ—Ä–∞—Ü—ñ—ó.",
    
    # –î—É–µ–ª—ñ
    "duel_created": "–î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
    "duel_joined": "–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –¥—É–µ–ª—ñ!",
    "duel_won": "–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!",
    "duel_lost": "–ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
    
    # –ë–∞–ª–∏
    "points_awarded": "–ë–∞–ª–∏ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!",
    "points_insufficient": "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤.",
    "rank_up": "–í—ñ—Ç–∞—î–º–æ –∑ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è–º —Ä–∞–Ω–≥—É!",
    
    # –ó–∞–≥–∞–ª—å–Ω—ñ
    "loading": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
    "please_wait": "–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ...",
    "try_again": "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑",
    "contact_admin": "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    
    # –ö–æ–º–∞–Ω–¥–∏
    "command_not_found": "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help",
    "command_error": "–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏.",
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    "settings_updated": "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!",
    "subscription_enabled": "–ü—ñ–¥–ø–∏—Å–∫—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ!",
    "subscription_disabled": "–ü—ñ–¥–ø–∏—Å–∫—É –≤–∏–º–∫–Ω–µ–Ω–æ.",
    
    # –ö–æ–Ω—Ç–µ–Ω—Ç
    "content_too_short": "–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π.",
    "content_too_long": "–ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π.",
    "content_submitted": "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!",
    "no_content": "–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
}

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ñ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º –¥–Ω—è
TIME_GREETINGS = {
    "morning": ["–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É", "–ì–∞—Ä–Ω–æ–≥–æ —Ä–∞–Ω–∫—É", "–ß—É–¥–æ–≤–æ–≥–æ —Ä–∞–Ω–∫—É"],
    "day": ["–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è", "–ü—Ä–∏—î–º–Ω–æ–≥–æ –¥–Ω—è", "–ß—É–¥–æ–≤–æ–≥–æ –¥–Ω—è"],
    "evening": ["–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞", "–ü—Ä–∏—î–º–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞", "–ì–∞—Ä–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞"],
    "night": ["–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ", "–°–æ–ª–æ–¥–∫–∏—Ö —Å–Ω—ñ–≤", "–°–ø–æ–∫—ñ–π–Ω–æ—ó –Ω–æ—á—ñ"]
}

# –ú–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ —Ñ—Ä–∞–∑–∏
MOTIVATIONAL_PHRASES = [
    "–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ!",
    "–í–∏ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —à–ª—è—Ö—É!",
    "–ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞!",
    "–©–µ —Ç—Ä–æ—Ö–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–Ω–≥—É!",
    "–í–∏ —Å–ø—Ä–∞–≤–∂–Ω—è –ª–µ–≥–µ–Ω–¥–∞ –≥—É–º–æ—Ä—É!",
    "–í–∞—à—ñ –∂–∞—Ä—Ç–∏ –∑–∞–≤–∂–¥–∏ —Å–º—ñ—à–Ω—ñ!",
    "–î—è–∫—É—î–º–æ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å!",
    "–í–∏ —Ä–æ–±–∏—Ç–µ –±–æ—Ç–∞ –∫—Ä–∞—â–∏–º!"
]

# –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
settings = Settings()

# –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
__all__ = [
    'settings', 
    'Settings', 
    'EMOJI', 
    'TEXTS', 
    'TIME_GREETINGS', 
    'MOTIVATIONAL_PHRASES'
]