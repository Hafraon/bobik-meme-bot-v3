#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á

–ö–æ–º–ø–ª–µ–∫—Å–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó:
- –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–¥–∞–Ω—å
- –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –¥—É–µ–ª—ñ
- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å–∏
"""

import sys
import os
import asyncio
from pathlib import Path
from datetime import datetime, timedelta

def print_header():
    print("üß™" * 30)
    print("\nü§ñ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á")
    print("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –±–æ—Ç–∞")
    print("üß™" * 30)
    print()

def test_automation_imports():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ –º–æ–¥—É–ª—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    print("üì¶ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ú–ü–û–†–¢–Ü–í –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á:")
    
    # –î–æ–¥–∞—î–º–æ app/ –¥–æ path
    app_dir = Path("app")
    if app_dir.exists():
        sys.path.insert(0, str(app_dir))
        print("‚úÖ app/ –¥–æ–¥–∞–Ω–æ –¥–æ Python path")
    
    tests = [
        # –û—Å–Ω–æ–≤–Ω—ñ –º–æ–¥—É–ª—ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        ("services.automated_scheduler", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("services.automated_scheduler.AutomatedScheduler", "–ö–ª–∞—Å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"),
        ("services.automated_scheduler.create_automated_scheduler", "–§–∞–±—Ä–∏–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"),
        
        # –°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫
        ("services.broadcast_system", "–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"),
        ("services.broadcast_system.BroadcastSystem", "–ö–ª–∞—Å —Ä–æ–∑—Å–∏–ª–æ–∫"),
        ("services.broadcast_system.create_broadcast_system", "–§–∞–±—Ä–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"),
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ë–î
        ("database.services.get_active_users_for_broadcast", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏"),
        ("database.services.get_daily_best_content", "–ö—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è"),
        ("database.services.generate_weekly_stats", "–¢–∏–∂–Ω–µ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ("database.services.get_recent_achievements", "–ù–µ–¥–∞–≤–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"),
        ("database.services.get_broadcast_statistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"),
        
        # –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ APScheduler
        ("apscheduler.schedulers.asyncio.AsyncIOScheduler", "AsyncIO –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("apscheduler.triggers.cron.CronTrigger", "Cron —Ç—Ä–∏–≥–µ—Ä–∏"),
        ("apscheduler.triggers.interval.IntervalTrigger", "–Ü–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ñ —Ç—Ä–∏–≥–µ—Ä–∏"),
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—î—é
        ("main.AutomatedUkrainianTelegramBot", "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –±–æ—Ç"),
    ]
    
    success_count = 0
    for module_path, description in tests:
        try:
            if "." in module_path:
                # –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó/–∫–ª–∞—Å—É
                module_name, attr_name = module_path.rsplit(".", 1)
                module = __import__(module_name, fromlist=[attr_name])
                getattr(module, attr_name)
            else:
                # –Ü–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
                __import__(module_path)
            
            print(f"‚úÖ {description}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {description} - ImportError: {e}")
        except AttributeError as e:
            print(f"‚ùå {description} - AttributeError: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è {description} - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —ñ–º–ø–æ—Ä—Ç—ñ–≤: {success_count}/{len(tests)} –ø—Ä–æ–π–¥–µ–Ω–æ")
    return success_count

def test_scheduler_dependencies():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("\n‚è∞ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö–ê:")
    
    dependencies = [
        ("apscheduler", "APScheduler - –æ—Å–Ω–æ–≤–Ω–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("pytz", "PyTZ - —á–∞—Å–æ–≤—ñ –∑–æ–Ω–∏"),
        ("datetime", "DateTime - —Ä–æ–±–æ—Ç–∞ –∑ —á–∞—Å–æ–º"),
        ("asyncio", "AsyncIO - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ—Å—Ç—å")
    ]
    
    success_count = 0
    for dep, description in dependencies:
        try:
            __import__(dep)
            print(f"‚úÖ {description}")
            success_count += 1
        except ImportError as e:
            print(f"‚ùå {description} - {e}")
            if dep == "apscheduler":
                print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install APScheduler>=3.10.0")
            elif dep == "pytz":
                print("üí° –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: pip install pytz>=2023.3")
    
    print(f"\nüìä –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: {success_count}/{len(dependencies)} –¥–æ—Å—Ç—É–ø–Ω–æ")
    return success_count

async def test_scheduler_creation():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("\nü§ñ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ü–õ–ê–ù–£–í–ê–õ–¨–ù–ò–ö–ê:")
    
    try:
        # Mock bot –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        class MockBot:
            def __init__(self):
                self.token = "test_token"
            
            async def send_message(self, chat_id, text, **kwargs):
                print(f"üì§ Mock message to {chat_id}: {text[:50]}...")
                return True
        
        mock_bot = MockBot()
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        from services.automated_scheduler import create_automated_scheduler
        
        scheduler = await create_automated_scheduler(mock_bot)
        
        if scheduler:
            print("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
            status = scheduler.get_scheduler_status()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ: {status.get('total_jobs', 0)} –∑–∞–≤–¥–∞–Ω—å")
            
            # –¢–µ—Å—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
            if hasattr(scheduler, 'broadcast_system') and scheduler.broadcast_system:
                print("‚úÖ Broadcast —Å–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            else:
                print("‚ö†Ô∏è Broadcast —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
            
            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
        return False

async def test_broadcast_system():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Ä–æ–∑—Å–∏–ª–æ–∫"""
    print("\nüì¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò –†–û–ó–°–ò–õ–û–ö:")
    
    try:
        # Mock bot
        class MockBot:
            def __init__(self):
                self.messages_sent = []
            
            async def send_message(self, chat_id, text, **kwargs):
                self.messages_sent.append((chat_id, text))
                return True
        
        mock_bot = MockBot()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è broadcast —Å–∏—Å—Ç–µ–º–∏
        from services.broadcast_system import create_broadcast_system
        
        broadcast_system = await create_broadcast_system(mock_bot)
        
        if broadcast_system:
            print("‚úÖ Broadcast —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É
            status = broadcast_system.get_broadcast_status()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å broadcast: {status}")
            
            # –¢–µ—Å—Ç –º–µ—Ç–æ–¥—ñ–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (mock)
            try:
                # –¶—ñ –º–µ—Ç–æ–¥–∏ –º–æ–∂—É—Ç—å –ø–∞–¥–∞—Ç–∏ —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ë–î, —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                active_users = await broadcast_system.get_active_users(days=7)
                print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(active_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—á—ñ–∫—É—î—Ç—å—Å—è –±–µ–∑ –ë–î): {e}")
            
            return True
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ broadcast —Å–∏—Å—Ç–µ–º—É")
            return False
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è broadcast: {e}")
        return False

async def test_database_services():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ë–î –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    print("\nüíæ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ï–†–í–Ü–°–Ü–í –ë–î:")
    
    services_to_test = [
        ("get_active_users_for_broadcast", "–ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
        ("get_all_users_for_broadcast", "–í—Å—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"),
        ("get_daily_best_content", "–ö—Ä–∞—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–Ω—è"),
        ("generate_weekly_stats", "–¢–∏–∂–Ω–µ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ("get_recent_achievements", "–ù–µ–¥–∞–≤–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è"),
        ("get_broadcast_statistics", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"),
        ("mark_user_inactive", "–ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    ]
    
    success_count = 0
    
    try:
        from database import services
        
        for service_name, description in services_to_test:
            if hasattr(services, service_name):
                print(f"‚úÖ {description} - —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞")
                success_count += 1
                
                # –¢–µ—Å—Ç –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó (–º–æ–∂–µ –ø–∞–¥–∞—Ç–∏ –±–µ–∑ –ë–î)
                try:
                    func = getattr(services, service_name)
                    if service_name == "mark_user_inactive":
                        # –¶–µ–π —Å–µ—Ä–≤—ñ—Å –ø–æ—Ç—Ä–µ–±—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä
                        pass  # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
                    elif service_name in ["get_recent_achievements", "generate_weekly_stats"]:
                        # –¶—ñ –º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏—Å—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                        result = await func() if asyncio.iscoroutinefunction(func) else func()
                        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(result).__name__}")
                    else:
                        # –Ü–Ω—à—ñ —Å–µ—Ä–≤—ñ—Å–∏
                        result = await func() if asyncio.iscoroutinefunction(func) else func()
                        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result) if isinstance(result, list) else type(result).__name__}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó (–æ—á—ñ–∫—É—î—Ç—å—Å—è –±–µ–∑ –ë–î): {str(e)[:50]}...")
            else:
                print(f"‚ùå {description} - —Ñ—É–Ω–∫—Ü—ñ—è –≤—ñ–¥—Å—É—Ç–Ω—è")
        
        print(f"\nüìä –°–µ—Ä–≤—ñ—Å–∏ –ë–î: {success_count}/{len(services_to_test)} –¥–æ—Å—Ç—É–ø–Ω–æ")
        return success_count >= len(services_to_test) * 0.8  # 80% –º–∞—î –±—É—Ç–∏
        
    except ImportError as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Å–µ—Ä–≤—ñ—Å–∏ –ë–î: {e}")
        return False

async def test_main_app_integration():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –¥–æ–¥–∞—Ç–∫–æ–º"""
    print("\nüéÆ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó –î–û–î–ê–¢–ö–û–ú:")
    
    try:
        from main import AutomatedUkrainianTelegramBot
        print("‚úÖ –ö–ª–∞—Å AutomatedUkrainianTelegramBot –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó
        bot_class = AutomatedUkrainianTelegramBot
        automation_methods = [
            'initialize_automation', 'register_automation_handlers',
            'get_rank_by_points'
        ]
        
        missing_methods = []
        for method in automation_methods:
            if not hasattr(bot_class, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ –º–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó: {missing_methods}")
        else:
            print("‚úÖ –í—Å—ñ –º–µ—Ç–æ–¥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –ø—Ä–∏—Å—É—Ç–Ω—ñ")
        
        # –¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞
        try:
            bot_instance = AutomatedUkrainianTelegramBot()
            print("‚úÖ –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å
            if hasattr(bot_instance, 'automation_active'):
                print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞: {bot_instance.automation_active}")
            
            if hasattr(bot_instance, 'scheduler'):
                print(f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫: {bot_instance.scheduler is not None}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä–∞: {e}")
            return False
        
    except ImportError as e:
        print(f"‚ùå –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        return False

def test_configuration_files():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("\nüìÅ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–ô–ù–ò–• –§–ê–ô–õ–Ü–í:")
    
    required_files = [
        ("app/services/automated_scheduler.py", "–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫"),
        ("app/services/broadcast_system.py", "–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫"),
        ("app/main.py", "–û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫"),
        ("requirements.txt", "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ"),
        ("app/database/services.py", "–°–µ—Ä–≤—ñ—Å–∏ –ë–î")
    ]
    
    optional_files = [
        ("app/services/__init__.py", "Services –ø–∞–∫–µ—Ç"),
        ("app/config/settings.py", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"),
        (".env", "–ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    ]
    
    success_count = 0
    
    print("üìã –û–ë–û–í'–Ø–ó–ö–û–í–Ü –§–ê–ô–õ–ò:")
    for file_path, description in required_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} ({description})")
            success_count += 1
        else:
            print(f"‚ùå {file_path} ({description}) - –ö–†–ò–¢–ò–ß–ù–ò–ô")
    
    print("\nüìã –û–ü–¶–Ü–û–ù–ê–õ–¨–ù–Ü –§–ê–ô–õ–ò:")
    for file_path, description in optional_files:
        if Path(file_path).exists():
            print(f"‚úÖ {file_path} ({description})")
        else:
            print(f"‚ö†Ô∏è {file_path} ({description}) - —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è")
    
    return success_count == len(required_files)

async def test_scheduler_jobs():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑–∞–≤–¥–∞–Ω—å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
    print("\nüìÖ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á –ó–ê–í–î–ê–ù–¨:")
    
    try:
        from apscheduler.schedulers.asyncio import AsyncIOScheduler
        from apscheduler.triggers.cron import CronTrigger
        from apscheduler.triggers.interval import IntervalTrigger
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        test_scheduler = AsyncIOScheduler()
        
        # –¢–µ—Å—Ç—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ —Ç—Ä–∏–≥–µ—Ä—ñ–≤
        test_jobs = [
            ("daily_morning", CronTrigger(hour=9, minute=0), "–©–æ–¥–µ–Ω–Ω–∞ —Ä–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞"),
            ("check_duels", IntervalTrigger(minutes=1), "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π"),
            ("weekly_digest", CronTrigger(day_of_week=6, hour=18, minute=0), "–¢–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç")
        ]
        
        success_count = 0
        for job_id, trigger, description in test_jobs:
            try:
                # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
                async def dummy_job():
                    pass
                
                job = test_scheduler.add_job(
                    dummy_job,
                    trigger,
                    id=job_id,
                    name=description
                )
                
                print(f"‚úÖ {description} - —Ç—Ä–∏–≥–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
                print(f"   ‚è∞ –ù–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø—É—Å–∫: {job.next_run_time}")
                success_count += 1
                
            except Exception as e:
                print(f"‚ùå {description} - –ø–æ–º–∏–ª–∫–∞: {e}")
        
        print(f"\nüìä –¢—Ä–∏–≥–µ—Ä–∏: {success_count}/{len(test_jobs)} –ø—Ä–∞—Ü—é—é—Ç—å")
        
        # –û—á–∏—â—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫
        test_scheduler.shutdown()
        
        return success_count == len(test_jobs)
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≥–µ—Ä—ñ–≤: {e}")
        return False

async def run_comprehensive_automation_test():
    """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
    print_header()
    
    tests = [
        ("–Ü–º–ø–æ—Ä—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó", test_automation_imports),
        ("–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", test_scheduler_dependencies),
        ("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞", test_scheduler_creation),
        ("–°–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—Å–∏–ª–æ–∫", test_broadcast_system),
        ("–°–µ—Ä–≤—ñ—Å–∏ –ë–î", test_database_services),
        ("–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É", test_main_app_integration),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ —Ñ–∞–π–ª–∏", test_configuration_files),
        ("–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–¥–∞–Ω—å", test_scheduler_jobs)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_function in tests:
        print(f"\n{'='*60}")
        print(f"üß™ –¢–ï–°–¢: {test_name}")
        print('='*60)
        
        try:
            if asyncio.iscoroutinefunction(test_function):
                result = await test_function()
            else:
                result = test_function()
            
            if result:
                passed_tests += 1
                print(f"‚úÖ –¢–ï–°–¢ '{test_name}' –ü–†–û–ô–î–ï–ù–û")
            else:
                print(f"‚ùå –¢–ï–°–¢ '{test_name}' –ù–ï –ü–†–û–ô–î–ï–ù–û")
        except Exception as e:
            print(f"üí• –¢–ï–°–¢ '{test_name}' –ó–ê–í–ï–†–®–ò–í–°–Ø –ü–û–ú–ò–õ–ö–û–Æ: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print(f"\n{'üèÜ'*30}")
    print(f"üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á")
    print(f"{'üèÜ'*30}")
    
    success_rate = (passed_tests / total_tests) * 100
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–á –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!")
        return True
    elif passed_tests >= total_tests * 0.8:  # 80%
        print("üî∂ –ë–Ü–õ–¨–®–Ü–°–¢–¨ –¢–ï–°–¢–Ü–í –ü–†–û–ô–®–õ–ò!")
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≥–æ—Ç–æ–≤–∞ –∑ –¥–µ—è–∫–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏")
        return True
    else:
        print("‚ùå –ó–ê–ù–ê–î–¢–û –ë–ê–ì–ê–¢–û –ü–û–ú–ò–õ–û–ö!")
        print("üîß –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    try:
        success = await run_comprehensive_automation_test()
        
        if success:
            print(f"\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á –î–õ–Ø –ó–ê–ü–£–°–ö–£:")
            print(f"1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
            print(f"2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN, ADMIN_ID")
            print(f"3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞: python main.py")
            print(f"4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é: /automation_status")
            print(f"5. –¢–µ—Å—Ç —Ä—É—á–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏: /broadcast_now")
            print(f"6. –ú–æ–Ω—ñ—Ç–æ—Ä—Ç–µ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏")
            
            print(f"\nüìÖ –û–ß–Ü–ö–£–í–ê–ù–Ü –ê–í–¢–û–ú–ê–¢–ò–ß–ù–Ü –§–£–ù–ö–¶–Ü–á:")
            print(f"‚Ä¢ 9:00 —â–æ–¥–Ω—è - —Ä–∞–Ω–∫–æ–≤–∞ —Ä–æ–∑—Å–∏–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
            print(f"‚Ä¢ 20:00 —â–æ–¥–Ω—è - –≤–µ—á—ñ—Ä–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            print(f"‚Ä¢ –ö–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π")
            print(f"‚Ä¢ –ö–æ–∂–Ω—ñ 15 —Ö–≤–∏–ª–∏–Ω - –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥—É–µ–ª—ñ")
            print(f"‚Ä¢ –ü'—è—Ç–Ω–∏—Ü—è 19:00 - —Ç–∏–∂–Ω–µ–≤–∏–π —Ç—É—Ä–Ω—ñ—Ä")
            print(f"‚Ä¢ –ù–µ–¥—ñ–ª—è 18:00 - —Ç–∏–∂–Ω–µ–≤–∏–π –¥–∞–π–¥–∂–µ—Å—Ç")
            print(f"‚Ä¢ 1 —á–∏—Å–ª–æ 12:00 - –º—ñ—Å—è—á–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏")
            print(f"‚Ä¢ 3:00 —â–æ–¥–Ω—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –æ—á–∏—Å—Ç–∫–∞")
            
        else:
            print(f"\nüîß –ù–ï–û–ë–•–Ü–î–ù–Ü –î–Ü–á:")
            print(f"1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ:")
            print(f"   pip install APScheduler>=3.10.0 pytz>=2023.3")
            print(f"2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É")
            print(f"3. –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —ñ–º–ø–æ—Ä—Ç—É")
            print(f"4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç –∑–Ω–æ–≤—É")
        
        return success
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return False
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)