#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –®–í–ò–î–ö–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –ö–†–û–ö–£ 5: –î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –¥—É–µ–ª—ñ–≤
"""

import os
import shutil
from pathlib import Path

def print_header():
    print("üöÄ" * 25)
    print("\n‚öîÔ∏è –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –°–ò–°–¢–ï–ú–ò –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –ö—Ä–æ–∫—É 5")
    print("üöÄ" * 25)
    print()

def backup_existing_files():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–∏—Ö –∫–æ–ø—ñ–π —ñ—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤"""
    print("üíæ –°–¢–í–û–†–ï–ù–ù–Ø –†–ï–ó–ï–†–í–ù–ò–• –ö–û–ü–Ü–ô:")
    
    backup_dir = Path("backup_before_step5")
    backup_dir.mkdir(exist_ok=True)
    
    files_to_backup = [
        "app/main.py",
        "app/handlers/__init__.py", 
        "requirements.txt"
    ]
    
    for file_path in files_to_backup:
        if Path(file_path).exists():
            backup_path = backup_dir / Path(file_path).name
            shutil.copy2(file_path, backup_path)
            print(f"‚úÖ {file_path} ‚Üí {backup_path}")
    
    print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {backup_dir}/")

def ensure_directories():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞–ø–æ–∫"""
    print("\nüìÅ –°–¢–í–û–†–ï–ù–ù–Ø –ù–ï–û–ë–•–Ü–î–ù–ò–• –ü–ê–ü–û–ö:")
    
    directories = [
        "app",
        "app/handlers",
        "app/database", 
        "app/config"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True, parents=True)
        print(f"‚úÖ {directory}/")

def create_duel_handlers():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É duel_handlers.py"""
    print("\n‚öîÔ∏è –°–¢–í–û–†–ï–ù–ù–Ø DUEL HANDLERS:")
    
    duel_handlers_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í - –•–µ–Ω–¥–ª–µ—Ä–∏ ‚öîÔ∏è
"""

import logging
from aiogram import Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

async def cmd_duel(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /duel - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥—É–µ–ª—ñ–≤"""
    text = (
        "‚öîÔ∏è <b>–ê–†–ï–ù–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í!</b> ‚öîÔ∏è\\n\\n"
        "üéØ –¢—É—Ç –Ω–∞–π–∫—Ä–∞—â—ñ –∂–∞—Ä—Ç—É–Ω–∏ –∑–º–∞–≥–∞—é—Ç—å—Å—è –∑–∞ –∑–≤–∞–Ω–Ω—è –∫–æ—Ä–æ–ª—è –≥—É–º–æ—Ä—É!\\n\\n"
        "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n"
        "üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: 0/0 (0.0%)\\n"
        "‚≠ê –†–µ–π—Ç–∏–Ω–≥: 1000\\n\\n"
        "üî• <b>–ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ:</b> –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\\n\\n"
        "üí° –°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –±–æ—é!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî• –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥—É–µ–ª—å", callback_data="create_duel")],
        [InlineKeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω—ñ –¥—É–µ–ª—ñ", callback_data="view_duels")],
        [InlineKeyboardButton(text="üèÜ –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="duel_stats")],
        [InlineKeyboardButton(text="‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data="duel_rules")],
        [InlineKeyboardButton(text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    await message.answer(text, reply_markup=keyboard)

async def handle_duel_callbacks(callback):
    """–û–±—Ä–æ–±–∫–∞ callback'—ñ–≤ –¥—É–µ–ª—ñ–≤"""
    data = callback.data
    
    if data == "create_duel":
        await callback.message.edit_text(
            "üî• <b>–î–£–ï–õ–¨ –°–¢–í–û–†–ï–ù–û!</b>\\n\\n"
            "üòÇ <b>–ñ–∞—Ä—Ç A:</b>\\n"
            "<i>–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ó–Ω —ñ –†—ñ–∑–¥–≤–æ?\\n"
            "–¢–æ–º—É —â–æ 31 OCT = 25 DEC!</i>\\n\\n"
            "ü§£ <b>–ñ–∞—Ä—Ç B:</b>\\n" 
            "<i>–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É?\\n"
            "–ñ–æ–¥–Ω–æ–≥–æ. –¶–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!</i>\\n\\n"
            "üó≥Ô∏è –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –∂–∞—Ä—Ç!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üÖ∞Ô∏è –ì–æ–ª–æ—Å—É—é –∑–∞ A", callback_data="vote_1_A"),
                    InlineKeyboardButton(text="üÖ±Ô∏è –ì–æ–ª–æ—Å—É—é –∑–∞ B", callback_data="vote_1_B")
                ],
                [InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_duel")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="duel_menu")]
            ])
        )
        await callback.answer("üî• –î—É–µ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        
    elif data == "view_duels":
        await callback.message.edit_text(
            "üéØ <b>–ê–ö–¢–ò–í–ù–Ü –î–£–ï–õ–Ü</b>\\n\\n"
            "1. –î—É–µ–ª—å #1 (2 –≥–æ–ª–æ—Å–∏)\\n"
            "   ‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: 4—Ö–≤ 23—Å\\n\\n"
            "2. –î—É–µ–ª—å #2 (5 –≥–æ–ª–æ—Å—ñ–≤)\\n"
            "   ‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: 2—Ö–≤ 10—Å\\n\\n"
            "3. –î—É–µ–ª—å #3 (1 –≥–æ–ª–æ—Å)\\n"
            "   ‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: 6—Ö–≤ 45—Å\\n\\n"
            "üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –¥—É–µ–ª—å —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î—É–µ–ª—å #1 (2 –≥–æ–ª–æ—Å–∏)", callback_data="view_duel_1")],
                [InlineKeyboardButton(text="üî• –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É", callback_data="create_duel")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="duel_menu")]
            ])
        )
        await callback.answer()
        
    elif data == "duel_stats":
        await callback.message.edit_text(
            "üèÜ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–£–ï–õ–Ü–í</b>\\n\\n"
            "üèÜ –ü–µ—Ä–µ–º–æ–≥–∏: 0\\n"
            "üíî –ü–æ—Ä–∞–∑–∫–∏: 0\\n"
            "üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –ø–µ—Ä–µ–º–æ–≥: 0.0%\\n"
            "‚≠ê –†–µ–π—Ç–∏–Ω–≥: 1000\\n"
            "üëë –†–∞–Ω–≥: üéØ –ù–æ–≤–∞—á–æ–∫\\n\\n"
            "üí° –ü–æ—á–Ω—ñ—Ç—å –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –¥—É–µ–ª—è—Ö —â–æ–± –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –¥—É–µ–ª—ñ–≤", callback_data="duel_menu")]
            ])
        )
        await callback.answer()
        
    elif data == "duel_rules":
        await callback.message.edit_text(
            "‚öîÔ∏è <b>–ü–†–ê–í–ò–õ–ê –î–£–ï–õ–Ü–í –ñ–ê–†–¢–Ü–í</b>\\n\\n"
            "üéØ <b>–Ø–∫ –ø—Ä–∞—Ü—é—Ç—å –¥—É–µ–ª—ñ:</b>\\n"
            "‚Ä¢ –î–≤–∞ –∂–∞—Ä—Ç–∏ –∑–º–∞–≥–∞—é—Ç—å—Å—è –∑–∞ –≥–æ–ª–æ—Å–∏\\n"
            "‚Ä¢ –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑\\n"
            "‚Ä¢ –î—É–µ–ª—å —Ç—Ä–∏–≤–∞—î 5 —Ö–≤–∏–ª–∏–Ω\\n"
            "‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 3 –≥–æ–ª–æ—Å–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è\\n\\n"
            "üèÜ <b>–ù–∞–≥–æ—Ä–æ–¥–∏:</b>\\n"
            "‚Ä¢ –ó–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è: +2 –±–∞–ª–∏\\n"
            "‚Ä¢ –ó–∞ —É—á–∞—Å—Ç—å: +10 –±–∞–ª—ñ–≤\\n"
            "‚Ä¢ –ó–∞ –ø–µ—Ä–µ–º–æ–≥—É: +25 –±–∞–ª—ñ–≤\\n"
            "‚Ä¢ –ó–∞ —Ä–æ–∑–≥—Ä–æ–º–Ω—É –ø–µ—Ä–µ–º–æ–≥—É: +50 –±–∞–ª—ñ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –¥—É–µ–ª—ñ–≤", callback_data="duel_menu")]
            ])
        )
        await callback.answer()
        
    elif data.startswith("vote_"):
        await callback.answer("‚úÖ –í–∞—à –≥–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!", show_alert=True)
        
    else:
        await callback.answer("üîÑ –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...")

def register_duel_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –¥—É–µ–ª—å–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_duel, Command("duel"))
    
    # Callback'–∏
    dp.callback_query.register(
        handle_duel_callbacks,
        lambda c: c.data and (
            c.data.startswith("duel_") or
            c.data.startswith("vote_") or
            c.data in ["create_duel", "view_duels", "duel_stats", "duel_rules"]
        )
    )
    
    logger.info("‚úÖ Duel handlers registered")

__all__ = ['register_duel_handlers', 'cmd_duel']
'''
    
    with open("app/handlers/duel_handlers.py", "w", encoding="utf-8") as f:
        f.write(duel_handlers_content)
    
    print("‚úÖ app/handlers/duel_handlers.py")

def update_handlers_init():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è handlers/__init__.py"""
    print("\nüì¶ –û–ù–û–í–õ–ï–ù–ù–Ø HANDLERS INIT:")
    
    init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

def register_handlers(dp: Dispatcher) -> dict:
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥—É–µ–ª—ñ–≤"""
    
    handlers_status = {
        'content': False,
        'admin': False, 
        'duel': False,
        'fallback': True,
        'total_registered': 0
    }
    
    logger.info("üîß –ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –¥—É–µ–ª—è–º–∏...")
    
    # Content handlers
    try:
        from .content_handlers import register_content_handlers
        register_content_handlers(dp)
        handlers_status['content'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Content handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError:
        logger.warning("‚ö†Ô∏è Content handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")
    
    # Admin handlers
    try:
        from .admin_handlers import register_admin_handlers
        register_admin_handlers(dp)
        handlers_status['admin'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Admin handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")
    except ImportError:
        logger.warning("‚ö†Ô∏è Admin handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")
    
    # Duel handlers (–ù–û–í–ò–ù–ö–ê!)
    try:
        from .duel_handlers import register_duel_handlers
        register_duel_handlers(dp)
        handlers_status['duel'] = True
        handlers_status['total_registered'] += 1
        logger.info("‚úÖ Duel handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ - –î–£–ï–õ–Ü –ê–ö–¢–ò–í–ù–Ü!")
    except ImportError:
        logger.warning("‚ö†Ô∏è Duel handlers –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ")
    
    # Fallback handlers
    register_fallback_handlers(dp)
    handlers_status['total_registered'] += 1
    
    logger.info(f"üìä –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {handlers_status['total_registered']}/4")
    
    return handlers_status

def register_fallback_handlers(dp: Dispatcher):
    """–ë–∞–∑–æ–≤—ñ fallback —Ö–µ–Ω–¥–ª–µ—Ä–∏"""
    from aiogram.filters import Command
    from aiogram.types import Message
    
    @dp.message(Command("start"))
    async def fallback_start(message: Message):
        text = (
            "üß†üòÇüî• <b>–£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –¥—É–µ–ª—è–º–∏!</b>\\n\\n"
            "‚öîÔ∏è –ù–æ–≤–∏–Ω–∫–∞: –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤!\\n\\n"
            "üìã –ö–æ–º–∞–Ω–¥–∏:\\n"
            "‚Ä¢ /duel - –¥—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤\\n"
            "‚Ä¢ /start - –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\\n"
            "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞"
        )
        await message.answer(text)
    
    logger.info("‚úÖ Fallback handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

__all__ = ['register_handlers']
'''
    
    with open("app/handlers/__init__.py", "w", encoding="utf-8") as f:
        f.write(init_content)
    
    print("‚úÖ app/handlers/__init__.py")

def update_main_app():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è app/main.py"""
    print("\nüéÆ –û–ù–û–í–õ–ï–ù–ù–Ø –ì–û–õ–û–í–ù–û–ì–û –î–û–î–ê–¢–ö–£:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü–†–û–§–ï–°–Ü–ô–ù–ò–ô –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó –î–£–ï–õ–Ø–ú–ò üß†üòÇüî•
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class UkrainianTelegramBotWithDuels:
    def __init__(self):
        self.bot = None
        self.dp = None
        self.startup_time = datetime.now()
        
    async def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –¥—É–µ–ª—è–º–∏"""
        logger.info("üöÄ Starting Ukrainian Telegram Bot with Duels...")
        
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
            bot_token = os.getenv('BOT_TOKEN')
            if not bot_token:
                raise ValueError("BOT_TOKEN not found")
            
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ Bot created: @{bot_info.username}")
            
            # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –∑ –¥—É–µ–ª—è–º–∏
            from handlers import register_handlers
            handlers_status = register_handlers(self.dp)
            
            if handlers_status.get('duel'):
                logger.info("‚öîÔ∏è –î–£–ï–õ–Ü –ñ–ê–†–¢–Ü–í –ê–ö–¢–ò–í–ù–Ü!")
            
            # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏
            @self.dp.message()
            async def echo_handler(message):
                if message.text == "/duel":
                    try:
                        from handlers.duel_handlers import cmd_duel
                        await cmd_duel(message)
                    except:
                        await message.answer("‚öîÔ∏è –î—É–µ–ª—ñ –∂–∞—Ä—Ç—ñ–≤ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ")
                else:
                    await message.answer("ü§ñ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –∞–±–æ /duel")
            
            # –ó–∞–ø—É—Å–∫
            logger.info("‚úÖ Bot fully initialized with duel system")
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False

async def main():
    bot = UkrainianTelegramBotWithDuels()
    await bot.main()

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.write(main_content)
    
    print("‚úÖ app/main.py")

def update_requirements():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è requirements.txt"""
    print("\nüì¶ –û–ù–û–í–õ–ï–ù–ù–Ø REQUIREMENTS:")
    
    requirements_content = '''# –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π –±–æ—Ç –∑ –¥—É–µ–ª—è–º–∏

# –û—Å–Ω–æ–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
aiogram>=3.4.0,<4.0.0
SQLAlchemy>=2.0.0,<3.0.0
asyncpg>=0.29.0
psycopg2-binary>=2.9.0
aiohttp>=3.9.0

# –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –¥—É–µ–ª—ñ–≤
APScheduler>=3.10.0,<4.0.0
pytz>=2023.3

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
python-dotenv>=1.0.0
pydantic>=2.5.0

# –§–∞–π–ª–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞
aiofiles>=23.0.0
alembic>=1.13.0

# –£—Ç–∏–ª—ñ—Ç–∏
emoji>=2.8.0
orjson>=3.9.0
psutil>=5.9.0
httpx>=0.25.0

# –ë–µ–∑–ø–µ–∫–∞
cryptography>=42.0.0

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# AI (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
openai>=1.6.0
'''
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements_content)
    
    print("‚úÖ requirements.txt")

def create_database_extensions():
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥—É–µ–ª—ñ–≤ –¥–æ database/services.py"""
    print("\nüóÑÔ∏è –†–û–ó–®–ò–†–ï–ù–ù–Ø DATABASE SERVICES:")
    
    services_extension = '''

# ===== –î–£–ï–õ–Ü (–ë–ê–ó–û–í–ò–ô –§–£–ù–ö–¶–Ü–û–ù–ê–õ) =====

async def create_simple_duel():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ—ó –¥–µ–º–æ –¥—É–µ–ª—ñ"""
    # –ë–∞–∑–æ–≤–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è –¥–µ–º–æ
    return {
        'id': 1,
        'content1': {'text': '–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –•–µ–ª–ª–æ—É—ó–Ω —ñ –†—ñ–∑–¥–≤–æ? –¢–æ–º—É —â–æ 31 OCT = 25 DEC!'},
        'content2': {'text': '–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É? –ñ–æ–¥–Ω–æ–≥–æ. –¶–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!'},
        'content1_votes': 2,
        'content2_votes': 1,
        'status': 'active'
    }

async def get_user_duel_stats(user_id: int):
    """–ë–∞–∑–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–µ–ª—ñ–≤"""
    return {
        'wins': 0,
        'losses': 0,
        'total_duels': 0,
        'rating': 1000,
        'win_rate': 0.0
    }
'''
    
    services_file = Path("app/database/services.py")
    if services_file.exists():
        with open(services_file, "a", encoding="utf-8") as f:
            f.write(services_extension)
        print("‚úÖ –†–æ–∑—à–∏—Ä–µ–Ω–æ app/database/services.py")
    else:
        print("‚ö†Ô∏è app/database/services.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–∞–∑–æ–≤–∏–π —Ñ–∞–π–ª")

def run_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–∏—Ö —Ç–µ—Å—Ç—ñ–≤"""
    print("\nüß™ –®–í–ò–î–ö–Ü –¢–ï–°–¢–ò:")
    
    try:
        # –¢–µ—Å—Ç —ñ–º–ø–æ—Ä—Ç—É duel_handlers
        sys.path.insert(0, str(Path("app").absolute()))
        from handlers.duel_handlers import register_duel_handlers, cmd_duel
        print("‚úÖ Duel handlers —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è")
        
        # –¢–µ—Å—Ç handlers init
        from handlers import register_handlers
        print("‚úÖ Handlers init –ø—Ä–∞—Ü—é—î")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
        from main import UkrainianTelegramBotWithDuels
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫ –≥–æ—Ç–æ–≤–∏–π")
        
        print("üéâ –í—Å—ñ —à–≤–∏–¥–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    try:
        # –ö—Ä–æ–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        backup_existing_files()
        ensure_directories()
        create_duel_handlers()
        update_handlers_init()
        update_main_app()
        update_requirements()
        create_database_extensions()
        
        # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        tests_passed = run_tests()
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        print(f"\n{'üéâ'*25}")
        print(f"üìä –û–ù–û–í–õ–ï–ù–ù–Ø –î–û –ö–†–û–ö–£ 5 –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"{'üéâ'*25}")
        
        if tests_passed:
            print("‚úÖ –í—Å—ñ —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ")
            print("‚öîÔ∏è –°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É!")
            
            print(f"\nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
            print(f"1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install -r requirements.txt")
            print(f"2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞: python main.py")
            print(f"3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /duel")
            print(f"4. –°—Ç–≤–æ—Ä—ñ—Ç—å –¥—É–µ–ª—å —Ç–∞ –ø—Ä–æ–≥–æ–ª–æ—Å—É–π—Ç–µ")
            print(f"5. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: python test_duels.py")
            
        else:
            print("‚ö†Ô∏è –Ñ –¥–µ—è–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ")
            print("üîß –í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç –∑–Ω–æ–≤—É")
        
        return tests_passed
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéä –í–Ü–¢–ê–Ñ–ú–û! –°–∏—Å—Ç–µ–º–∞ –¥—É–µ–ª—ñ–≤ –∂–∞—Ä—Ç—ñ–≤ –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\nüîß –ü–æ—Ç—Ä—ñ–±–Ω—ñ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")