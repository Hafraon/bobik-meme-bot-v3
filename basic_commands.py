#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –∑ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó üß†üòÇüî•
"""

import logging
from datetime import datetime

from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from config.settings import TEXTS, EMOJI, settings
from database.database import get_or_create_user, update_user_points, get_user_stats

logger = logging.getLogger(__name__)

async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –∑ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –ø—Ä–æ—Ñ—ñ–ª—é"""
    user = message.from_user
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_stats = await get_user_stats(user.id)
    user_data = user_stats.get("user") if user_stats else None
    
    # –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    if user_data and user_data.points > 0:
        greeting_extra = (
            f"\n\n{EMOJI['star']} <b>–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å:</b>\n"
            f"{EMOJI['fire']} –ë–∞–ª—ñ–≤: {user_data.points}\n"
            f"{EMOJI['crown']} –†–∞–Ω–≥: {user_data.rank}"
        )
    else:
        greeting_extra = f"\n\n{EMOJI['party']} <b>–í–ø–µ—Ä—à–µ —Ç—É—Ç? –û—Ç—Ä–∏–º—É–π –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —ñ —Å—Ç–∞–≤–∞–π –ª–µ–≥–µ–Ω–¥–æ—é –≥—É–º–æ—Ä—É!</b>"
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π –∑ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –±–∞–ª–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –ú–µ–º (+1 –±–∞–ª)", callback_data="get_meme"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –ê–Ω–µ–∫–¥–æ—Ç (+1 –±–∞–ª)", callback_data="get_joke")
        ],
        [
            InlineKeyboardButton(
                text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç (+{settings.POINTS_FOR_SUBMISSION})", 
                callback_data="submit_content"
            )
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['top']} –¢–û–ü –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="show_leaderboard")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['calendar']} –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞", callback_data="toggle_daily"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –î—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤", callback_data="start_duel")
        ]
    ])
    
    await message.answer(
        TEXTS["start"] + greeting_extra,
        reply_markup=keyboard
    )
    
    logger.info(f"üß† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

async def cmd_help(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /help –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–ª–∏"""
    user = message.from_user
    
    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–æ—Ä–∏—Å–Ω–∏–º–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['laugh']} –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –º–µ–º", callback_data="get_meme"),
            InlineKeyboardButton(text=f"{EMOJI['brain']} –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç", callback_data="get_joke")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ü–æ—á–∞—Ç–∏ –∑–∞—Ä–æ–±–ª—è—Ç–∏ –±–∞–ª–∏", callback_data="submit_content")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text=f"{EMOJI['top']} –¢–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤", callback_data="show_leaderboard")
        ]
    ])
    
    await message.answer(
        TEXTS["help"],
        reply_markup=keyboard
    )
    
    logger.info(f"üòÇ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –ø–æ–¥–∏–≤–∏–≤—Å—è –¥–æ–≤—ñ–¥–∫—É")

async def cmd_stats(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats - –∑–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    from database.database import get_db_session
    from database.models import User, Content, Duel
    
    with get_db_session() as session:
        total_users = session.query(User).count()
        total_content = session.query(Content).count()
        total_duels = session.query(Duel).count()
        
        # –¢–æ–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        top_user = session.query(User).order_by(User.points.desc()).first()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–ª—ñ–≤
        total_points = session.query(User.points).filter(User.points > 0).scalar_subquery()
        avg_points = session.query(User.points).filter(User.points > 0).scalar_subquery()
        
        stats_text = (
            f"{EMOJI['stats']} <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê</b> {EMOJI['stats']}\n\n"
            f"{EMOJI['profile']} <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:</b> {total_users}\n"
            f"{EMOJI['brain']}{EMOJI['laugh']} <b>–ö–æ–Ω—Ç–µ–Ω—Ç—É:</b> {total_content}\n"
            f"{EMOJI['vs']} <b>–î—É–µ–ª–µ–π:</b> {total_duels}\n\n"
        )
        
        if top_user:
            stats_text += (
                f"{EMOJI['crown']} <b>–õ—ñ–¥–µ—Ä –≥—É–º–æ—Ä—É:</b>\n"
                f"üë§ {top_user.first_name or '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n"
                f"{EMOJI['fire']} –ë–∞–ª—ñ–≤: {top_user.points}\n"
                f"{EMOJI['star']} –†–∞–Ω–≥: {top_user.rank}\n\n"
                f"{EMOJI['thinking']} <b>–•–æ—á–µ—à –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ —Ç–æ–ø—É?</b>\n"
                f"–ù–∞–¥—Å–∏–ª–∞–π –∂–∞—Ä—Ç–∏ —Ç–∞ –±—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º!"
            )
        
        # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"{EMOJI['fire']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile"),
                InlineKeyboardButton(text=f"{EMOJI['top']} –ü–æ–≤–Ω–∏–π –¢–û–ü", callback_data="show_leaderboard")
            ]
        ])
        
        await message.answer(stats_text, reply_markup=keyboard)

# ===== CALLBACK –û–ë–†–û–ë–ù–ò–ö–ò =====

async def callback_get_meme(callback_query):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–º—É"""
    from handlers.content_handlers import send_meme
    await send_meme(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_get_joke(callback_query):
    """Callback –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–Ω–µ–∫–¥–æ—Ç—É"""
    from handlers.content_handlers import send_joke
    await send_joke(callback_query.message, from_callback=True)
    await callback_query.answer()

async def callback_show_profile(callback_query):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É –ø—Ä–æ—Ñ—ñ–ª—é"""
    from handlers.gamification_handlers import show_profile
    await show_profile(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_show_leaderboard(callback_query):
    """Callback –¥–ª—è –ø–æ–∫–∞–∑—É —Ç–∞–±–ª–∏—Ü—ñ –ª—ñ–¥–µ—Ä—ñ–≤"""
    from handlers.gamification_handlers import show_leaderboard
    await show_leaderboard(callback_query.message)
    await callback_query.answer()

async def callback_toggle_daily(callback_query):
    """Callback –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏"""
    from handlers.gamification_handlers import toggle_daily_subscription
    await toggle_daily_subscription(callback_query.message, callback_query.from_user.id)
    await callback_query.answer()

async def callback_start_duel(callback_query):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –¥—É–µ–ª—ñ"""
    await callback_query.message.answer(
        f"{EMOJI['vs']} <b>–î—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤!</b>\n\n"
        f"{EMOJI['fire']} –©–æ–± –ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É:\n"
        f"<code>/duel</code>\n\n"
        f"{EMOJI['brain']} –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î:\n"
        f"1. –¢–∏ –Ω–∞–¥—Å–∏–ª–∞—î—à —Å–≤—ñ–π –∂–∞—Ä—Ç\n"
        f"2. –ë–æ—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø–æ–Ω–µ–Ω—Ç–∞\n"
        f"3. –Ü–Ω—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≥–æ–ª–æ—Å—É—é—Ç—å\n"
        f"4. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ—Ç—Ä–∏–º—É—î +15 –±–∞–ª—ñ–≤!\n\n"
        f"{EMOJI['thinking']} <b>–ì–æ—Ç–æ–≤–∏–π –¥–æ –±–∞—Ç–ª—É?</b>"
    )
    await callback_query.answer()

async def callback_submit_content(callback_query):
    """Callback –¥–ª—è –ø–æ—á–∞—Ç–∫—É –ø–æ–¥–∞—á—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –±–∞–ª–∏"""
    await callback_query.message.answer(
        f"{EMOJI['fire']} <b>–Ø–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
        f"{EMOJI['brain']} <b>–î–ª—è –∞–Ω–µ–∫–¥–æ—Ç—É:</b>\n"
        f"–ù–∞–ø–∏—à–∏ /submit —ñ –æ–¥—Ä–∞–∑—É —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç—É\n\n"
        f"{EMOJI['laugh']} <b>–î–ª—è –º–µ–º—É:</b>\n"
        f"–ù–∞–¥—ñ—à–ª–∏ /submit —ñ –ø—Ä–∏–∫—Ä—ñ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∑ –ø—ñ–¥–ø–∏—Å–æ–º\n\n"
        f"{EMOJI['star']} <b>–ù–∞–≥–æ—Ä–æ–¥–∏:</b>\n"
        f"‚Ä¢ +{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤ –∑–∞ –ø–æ–¥–∞—á—É\n"
        f"‚Ä¢ +{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤ –ø—Ä–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—ñ\n"
        f"‚Ä¢ +{settings.POINTS_FOR_TOP_JOKE} –±–∞–ª—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä–∞–ø–∏—à –¥–æ –¢–û–ü—É!\n\n"
        f"{EMOJI['thinking']} <b>–ü—Ä–∏–∫–ª–∞–¥:</b>\n"
        f"<code>/submit –ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø'—é—Ç—å –∫–∞–≤—É? –ë–æ –±–µ–∑ –Ω–µ—ó –∫–æ–¥ –Ω–µ –∫–æ–º–ø—ñ–ª—é—î—Ç—å—Å—è! {EMOJI['brain']}</code>"
    )
    await callback_query.answer()

async def callback_earn_points_info(callback_query):
    """Callback –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞—Ä–æ–±—ñ—Ç–æ–∫ –±–∞–ª—ñ–≤"""
    info_text = (
        f"{EMOJI['fire']} <b>–Ø–ö –ó–ê–†–û–ë–ò–¢–ò –ë–ê–õ–ò:</b>\n\n"
        f"{EMOJI['eye']} <b>+1 –±–∞–ª</b> - –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥ –º–µ–º—É/–∞–Ω–µ–∫–¥–æ—Ç—É\n"
        f"{EMOJI['like']} <b>+{settings.POINTS_FOR_REACTION} –±–∞–ª—ñ–≤</b> - –∑–∞ –ª–∞–π–∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É\n"
        f"{EMOJI['fire']} <b>+{settings.POINTS_FOR_SUBMISSION} –±–∞–ª—ñ–≤</b> - –∑–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π –∂–∞—Ä—Ç\n"
        f"{EMOJI['check']} <b>+{settings.POINTS_FOR_APPROVAL} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ\n"
        f"{EMOJI['trophy']} <b>+{settings.POINTS_FOR_TOP_JOKE} –±–∞–ª—ñ–≤</b> - —è–∫—â–æ –∂–∞—Ä—Ç —É –¢–û–ü—ñ\n"
        f"{EMOJI['vs']} <b>+15 –±–∞–ª—ñ–≤</b> - –∑–∞ –ø–µ—Ä–µ–º–æ–≥—É –≤ –¥—É–µ–ª—ñ\n"
        f"{EMOJI['calendar']} <b>+2 –±–∞–ª–∏</b> - –∑–∞ —â–æ–¥–µ–Ω–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n\n"
        f"{EMOJI['rocket']} <b>–†–∞–Ω–≥–∏ –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ –±–∞–ª—ñ–≤:</b>\n"
        f"ü§° –ù–æ–≤–∞—á–æ–∫ (0+) ‚Üí üòÑ –°–º—ñ—Ö—É–Ω (50+) ‚Üí üòÇ –ì—É–º–æ—Ä–∏—Å—Ç (150+)\n"
        f"üé≠ –ö–æ–º—ñ–∫ (350+) ‚Üí üëë –ú–∞—Å—Ç–µ—Ä –†–æ—Ñ–ª—É (750+) ‚Üí üèÜ –ö–æ—Ä–æ–ª—å –ì—É–º–æ—Ä—É (1500+)\n"
        f"üåü –õ–µ–≥–µ–Ω–¥–∞ –ú–µ–º—ñ–≤ (3000+) ‚Üí üöÄ –ì—É–º–æ—Ä–∏—Å—Ç–∏—á–Ω–∏–π –ì–µ–Ω—ñ–π (5000+)\n\n"
        f"{EMOJI['party']} <b>–ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —ñ —Å—Ç–∞–≤–∞–π –ª–µ–≥–µ–Ω–¥–æ—é –≥—É–º–æ—Ä—É!</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=f"{EMOJI['fire']} –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∂–∞—Ä—Ç", callback_data="submit_content"),
            InlineKeyboardButton(text=f"{EMOJI['vs']} –ü–æ—á–∞—Ç–∏ –¥—É–µ–ª—å", callback_data="start_duel")
        ],
        [
            InlineKeyboardButton(text=f"{EMOJI['profile']} –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="show_profile")
        ]
    ])
    
    await callback_query.message.answer(info_text, reply_markup=keyboard)
    await callback_query.answer()

def register_basic_handlers(dp: Dispatcher):
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
    
    # –ö–æ–º–∞–Ω–¥–∏
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_stats, Command("stats"))
    
    # Callback –∑–∞–ø–∏—Ç–∏
    dp.callback_query.register(callback_get_meme, F.data == "get_meme")
    dp.callback_query.register(callback_get_joke, F.data == "get_joke")
    dp.callback_query.register(callback_show_profile, F.data == "show_profile")
    dp.callback_query.register(callback_show_leaderboard, F.data == "show_leaderboard")
    dp.callback_query.register(callback_toggle_daily, F.data == "toggle_daily")
    dp.callback_query.register(callback_start_duel, F.data == "start_duel")
    dp.callback_query.register(callback_submit_content, F.data == "submit_content")
    dp.callback_query.register(callback_earn_points_info, F.data == "earn_points_info")