#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ì–æ–ª–æ–≤–Ω–∏–π —Ñ–∞–π–ª —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞ üß†üòÇüî•
"""

import asyncio
import logging
import sys
import os
from datetime import datetime

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config.settings import settings, EMOJI

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
from database.database import init_db
from handlers import register_handlers
from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware
from services.scheduler import SchedulerService
from services.content_generator import auto_generate_content_if_needed

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class UkrainianTelegramBot:
    """–ö–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler_service = None
    
    async def create_bot(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞"""
        try:
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML
                )
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            bot_info = await self.bot.get_me()
            logger.info(f"ü§ñ –ë–æ—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: @{bot_info.username}")
            
            return self.bot
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            raise
    
    async def setup_dispatcher(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        self.dp = Dispatcher()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è middleware
        self.dp.message.middleware(AuthMiddleware())
        self.dp.callback_query.middleware(AuthMiddleware())
        self.dp.message.middleware(AntiSpamMiddleware(rate_limit=3))
        self.dp.callback_query.middleware(AntiSpamMiddleware(rate_limit=5))
        self.dp.message.middleware(LoggingMiddleware())
        self.dp.callback_query.middleware(LoggingMiddleware())
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        register_handlers(self.dp)
        
        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    async def setup_database(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            await init_db()
            logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            raise
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            self.scheduler_service = SchedulerService(self.bot)
            await self.scheduler_service.start()
            logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    
    async def setup_ai_content(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        try:
            if settings.OPENAI_API_KEY:
                await auto_generate_content_if_needed()
                logger.info("ü§ñ AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∞–∫—Ç–∏–≤–Ω–∞")
            else:
                logger.info("‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - AI –≤–∏–º–∫–Ω–µ–Ω–∏–π")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ AI: {e}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling"""
        try:
            logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º—ñ polling")
            logger.info(f"üá∫üá¶ –í—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é")
            logger.info(f"üë§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {settings.ADMIN_ID}")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫
            try:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"{EMOJI['fire']} <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\n"
                    f"{EMOJI['rocket']} –£—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–∞—Ü—é—é—Ç—å\n"
                    f"{EMOJI['brain']} AI {'–∞–∫—Ç–∏–≤–Ω–∏–π' if settings.OPENAI_API_KEY else '–≤–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                    f"{EMOJI['calendar']} –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ {'–∞–∫—Ç–∏–≤–Ω–∏–π' if self.scheduler_service else '–≤–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                    f"{EMOJI['star']} –ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!"
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            
            # –ó–∞–ø—É—Å–∫ polling
            await self.dp.start_polling(self.bot)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å polling: {e}")
            raise
    
    async def shutdown(self):
        """–ö–æ—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler_service:
                await self.scheduler_service.stop()
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
            
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
    print("üß†üòÇüî•" * 20)
    print("üöÄ –ó–ê–ü–£–°–ö –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û TELEGRAM-–ë–û–¢–ê üöÄ")
    print("üß†üòÇüî•" * 20)
    print()
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
    ukrainian_bot = UkrainianTelegramBot()
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        await ukrainian_bot.create_bot()
        await ukrainian_bot.setup_database()
        await ukrainian_bot.setup_dispatcher()
        await ukrainian_bot.setup_scheduler()
        await ukrainian_bot.setup_ai_content()
        
        # –ó–∞–ø—É—Å–∫ polling
        await ukrainian_bot.start_polling()
        
    except KeyboardInterrupt:
        logger.info("üëã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (Ctrl+C)")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
    finally:
        await ukrainian_bot.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
    except Exception as e:
        print(f"üí• –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        sys.exit(1)