import requests
import asyncio
import random
import logging
import json
import time
import hashlib
import os
from datetime import datetime, timedelta
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from typing import Dict, List, Optional, Tuple
import threading
import re

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
from aiohttp import web, ClientSession
from aiohttp.web import Response, json_response

# –î–ª—è ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
try:
    from openai import OpenAI
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False
    print("‚ö†Ô∏è OpenAI –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Railway –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
PORT = int(os.getenv("PORT", 8000))
ENVIRONMENT = os.getenv("ENVIRONMENT", "production")

class QualityContentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    def __init__(self, openai_client=None):
        self.openai_client = openai_client
        
        # –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω—ñ Reddit –¥–∂–µ—Ä–µ–ª–∞ –∑ –∂–æ—Ä—Å—Ç–∫–∏–º–∏ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
        self.reddit_sources = [
            {
                'name': 'Programming Humor Hot',
                'url': 'https://www.reddit.com/r/ProgrammerHumor/hot.json?limit=50',
                'min_upvotes': 800,  # –ú—ñ–Ω—ñ–º—É–º 800 upvotes
                'max_age_hours': 24,  # –ù–µ —Å—Ç–∞—Ä—à–µ –¥–æ–±–∏  
                'min_upvote_ratio': 0.85,  # –•–æ—Ä–æ—à–∏–π ratio
                'min_comments': 30,  # –ê–∫—Ç–∏–≤–Ω–µ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è
                'weight': 5,
                'category': 'it_humor'
            },
            {
                'name': 'Memes Top Daily',
                'url': 'https://www.reddit.com/r/memes/top.json?t=day&limit=50',
                'min_upvotes': 3000,  # –¢–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç
                'max_age_hours': 24,
                'min_upvote_ratio': 0.80,
                'min_comments': 50,
                'weight': 4,
                'category': 'general_humor'
            },
            {
                'name': 'Dank Memes Hot',
                'url': 'https://www.reddit.com/r/dankmemes/hot.json?limit=50',
                'min_upvotes': 1500,
                'max_age_hours': 18,
                'min_upvote_ratio': 0.82,
                'min_comments': 40,
                'weight': 4,
                'category': 'dank_humor'
            },
            {
                'name': 'Coding Humor',
                'url': 'https://www.reddit.com/r/coding/hot.json?limit=30',
                'min_upvotes': 200,  # –ú–µ–Ω—à–µ upvotes, –∞–ª–µ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                'max_age_hours': 48,
                'min_upvote_ratio': 0.85,
                'min_comments': 15,
                'weight': 3,
                'category': 'it_humor'
            }
        ]
        
        # –ö—É—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—ñ–≤ –¥–Ω—è
        self.curated_content = {
            'morning': [
                {
                    'title': '–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É! –ß–∞—Å –¥–∏–≤–∏—Ç–∏—Å—è —á–æ–º—É prod –≤–ø–∞–≤ –≤–Ω–æ—á—ñ ‚òï',
                    'url': 'https://i.imgflip.com/1bij.jpg',
                    'source': 'Curated',
                    'quality_score': 95,
                    'ukrainian_context': True
                },
                {
                    'title': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 9 —Ä–∞–Ω–∫—É, –ø–ª–∞–Ω–µ—Ä–∫–∞... –Ü —Ç–∏ —â–µ –Ω–µ –≤—Å—Ç–∏–≥ –∫–∞–≤–∏ ‚òïüòµ',
                    'url': 'https://i.imgflip.com/30b1gx.jpg', 
                    'source': 'Curated',
                    'quality_score': 92,
                    'ukrainian_context': True
                }
            ],
            'work_day': [
                {
                    'title': '–ö–æ–ª–∏ PM –∫–∞–∂–µ "—Ü–µ –º–∞—î –±—É—Ç–∏ —à–≤–∏–¥–∫–∞ –∑–º—ñ–Ω–∞" ü§°',
                    'url': 'https://i.imgflip.com/1g8my4.jpg',
                    'source': 'Curated', 
                    'quality_score': 98,
                    'ukrainian_context': True
                }
            ],
            'evening': [
                {
                    'title': '–ó–∞–≤–µ—Ä—à—É—î–º–æ –¥–µ–Ω—å. –ó–∞–≤—Ç—Ä–∞ —Ç–æ—á–Ω–æ –ø–æ—Ñ—ñ–∫—Å–∏–º–æ –≤—Å—ñ bugs üåÖ',
                    'url': 'https://i.imgflip.com/26am.jpg',
                    'source': 'Curated',
                    'quality_score': 90,
                    'ukrainian_context': True
                }
            ]
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.content_performance = {}
        self.posted_content_ids = set()
        
    async def get_reddit_posts(self, source: dict) -> List[dict]:
        """–û—Ç—Ä–∏–º—É—î –ø–æ—Å—Ç–∏ –∑ Reddit API –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –ø–æ —è–∫–æ—Å—Ç—ñ"""
        try:
            logger.info(f"üîç –ó–∞–ø–∏—Ç —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ {source['name']}")
            
            async with ClientSession() as session:
                # –î–æ–¥–∞—î–º–æ User-Agent –¥–ª—è Reddit API
                headers = {
                    'User-Agent': 'BobikBot/2.0 (Ukrainian Meme Bot)'
                }
                
                async with session.get(source['url'], headers=headers, timeout=15) as response:
                    if response.status == 200:
                        data = await response.json()
                        
                        if 'data' in data and 'children' in data['data']:
                            posts = data['data']['children']
                            filtered_posts = self.filter_quality_posts(posts, source)
                            
                            logger.info(f"‚úÖ {source['name']}: {len(filtered_posts)} —è–∫—ñ—Å–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∑ {len(posts)}")
                            return filtered_posts
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥ {source['name']}")
                    else:
                        logger.error(f"‚ùå HTTP {response.status} –≤—ñ–¥ {source['name']}")
                        
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑ {source['name']}: {e}")
            
        return []
    
    def filter_quality_posts(self, posts: List[dict], source: dict) -> List[dict]:
        """–ñ–æ—Ä—Å—Ç–∫–æ —Ñ—ñ–ª—å—Ç—Ä—É—î –ø–æ—Å—Ç–∏ –∑–∞ —è–∫—ñ—Å—Ç—é"""
        filtered = []
        
        for post_wrapper in posts:
            post = post_wrapper['data']
            
            try:
                # –ë–∞–∑–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if post.get('stickied', False):  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω—ñ –ø–æ—Å—Ç–∏
                    continue
                    
                if post.get('over_18', False):  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ NSFW
                    continue
                    
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                url = post.get('url', '')
                if not self.is_image_url(url):
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ upvotes
                upvotes = post.get('ups', 0)
                if upvotes < source['min_upvotes']:
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ ratio –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –≥–æ–ª–æ—Å—ñ–≤
                upvote_ratio = post.get('upvote_ratio', 0)
                if upvote_ratio < source['min_upvote_ratio']:
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ (–ø–æ–∫–∞–∑–Ω–∏–∫ engagement)
                comments = post.get('num_comments', 0)
                if comments < source['min_comments']:
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ –≤—ñ–∫—É –ø–æ—Å—Ç–∞
                created_utc = post.get('created_utc', 0)
                age_hours = (time.time() - created_utc) / 3600
                if age_hours > source['max_age_hours']:
                    continue
                
                # –§—ñ–ª—å—Ç—Ä –ø–æ –¥–æ–≤–∂–∏–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –≤–∞–∂–∫–æ –ª–æ–∫–∞–ª—ñ–∑—É–≤–∞—Ç–∏)
                title = post.get('title', '')
                if len(title) > 200:
                    continue
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                post_id = post.get('id', '')
                if post_id in self.posted_content_ids:
                    continue
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —è–∫–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –º–µ—Ç—Ä–∏–∫
                quality_score = self.calculate_quality_score(post)
                
                # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                if quality_score >= 70:  # –ú—ñ–Ω—ñ–º—É–º 70% —è–∫–æ—Å—Ç—ñ
                    filtered_post = {
                        'id': post_id,
                        'title': title,
                        'url': url,
                        'ups': upvotes,
                        'upvote_ratio': upvote_ratio,
                        'num_comments': comments,
                        'created_utc': created_utc,
                        'subreddit': post.get('subreddit', ''),
                        'author': post.get('author', ''),
                        'quality_score': quality_score,
                        'source': source['name'],
                        'category': source['category'],
                        'weight': source['weight']
                    }
                    filtered.append(filtered_post)
                    
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Å—Ç–∞: {e}")
                continue
                
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —è–∫—ñ—Å—Ç—é
        filtered.sort(key=lambda x: x['quality_score'], reverse=True)
        return filtered[:10]  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–æ–ø-10 –Ω–∞–π—è–∫—ñ—Å–Ω—ñ—à–∏—Ö
    
    def is_image_url(self, url: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ URL –≤–µ–¥–µ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not url:
            return False
            
        # –ü—Ä—è–º—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image_extensions = ('.jpg', '.jpeg', '.png', '.gif', '.webp')
        if url.lower().endswith(image_extensions):
            return True
            
        # Reddit hosted images
        if 'i.redd.it' in url or 'i.reddit.com' in url:
            return True
            
        # Imgur images
        if 'imgur.com' in url and ('/a/' not in url and '/gallery/' not in url):
            return True
            
        return False
    
    def calculate_quality_score(self, post: dict) -> int:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î score —è–∫–æ—Å—Ç—ñ –ø–æ—Å—Ç–∞ (0-100)"""
        score = 0
        
        # –ë–∞–∑–æ–≤–∏–π score –∑–∞ upvotes (–º–∞–∫—Å–∏–º—É–º 40 –±–∞–ª—ñ–≤)
        upvotes = post.get('ups', 0)
        if upvotes >= 10000:
            score += 40
        elif upvotes >= 5000:
            score += 35
        elif upvotes >= 2000:
            score += 30
        elif upvotes >= 1000:
            score += 25
        elif upvotes >= 500:
            score += 20
        else:
            score += max(0, upvotes // 50)  # –ü–æ 1 –±–∞–ª—É –∑–∞ –∫–æ–∂–Ω—ñ 50 upvotes
        
        # –ë–∞–ª–∏ –∑–∞ upvote ratio (–º–∞–∫—Å–∏–º—É–º 20 –±–∞–ª—ñ–≤)
        ratio = post.get('upvote_ratio', 0)
        score += int(ratio * 20)
        
        # –ë–∞–ª–∏ –∑–∞ engagement (–∫–æ–º–µ–Ω—Ç–∞—Ä—ñ) (–º–∞–∫—Å–∏–º—É–º 20 –±–∞–ª—ñ–≤)
        comments = post.get('num_comments', 0)
        if comments >= 500:
            score += 20
        elif comments >= 200:
            score += 15
        elif comments >= 100:
            score += 12
        elif comments >= 50:
            score += 10
        else:
            score += min(10, comments // 5)
        
        # –ë–∞–ª–∏ –∑–∞ —Å–≤—ñ–∂—ñ—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 10 –±–∞–ª—ñ–≤)
        age_hours = (time.time() - post.get('created_utc', 0)) / 3600
        if age_hours <= 6:
            score += 10
        elif age_hours <= 12:
            score += 8
        elif age_hours <= 24:
            score += 6
        else:
            score += max(0, 6 - int(age_hours // 12))
        
        # –ë–∞–ª–∏ –∑–∞ –¥–æ–≤–∂–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–º–∞–∫—Å–∏–º—É–º 10 –±–∞–ª—ñ–≤)
        title_len = len(post.get('title', ''))
        if 20 <= title_len <= 100:  # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞
            score += 10
        elif 10 <= title_len <= 150:
            score += 7
        else:
            score += 3
        
        return min(100, score)  # –ú–∞–∫—Å–∏–º—É–º 100 –±–∞–ª—ñ–≤
    
    async def get_curated_content(self, time_context: str) -> Optional[dict]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –∫—É—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        curated_list = self.curated_content.get(time_context, [])
        
        if not curated_list:
            return None
            
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –Ω–µ–æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ
        unposted = [item for item in curated_list 
                   if item.get('url') not in self.posted_content_ids]
        
        if unposted:
            selected = random.choice(unposted)
            self.posted_content_ids.add(selected['url'])
            return selected
            
        return None
    
    async def get_best_quality_meme(self) -> Optional[dict]:
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º –∑ —É—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª"""
        all_posts = []
        
        # –ó–±–∏—Ä–∞—î–º–æ –ø–æ—Å—Ç–∏ –∑ —É—Å—ñ—Ö Reddit –¥–∂–µ—Ä–µ–ª
        for source in self.reddit_sources:
            posts = await self.get_reddit_posts(source)
            all_posts.extend(posts)
        
        if not all_posts:
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —è–∫—ñ—Å–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤ –∑ Reddit")
            # Fallback –Ω–∞ –∫—É—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            time_context = self.get_time_context()
            return await self.get_curated_content(time_context)
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ score —è–∫–æ—Å—Ç—ñ —Ç–∞ weight –¥–∂–µ—Ä–µ–ª–∞
        all_posts.sort(key=lambda x: (x['quality_score'], x['weight']), reverse=True)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π
        best_post = all_posts[0]
        self.posted_content_ids.add(best_post['id'])
        
        logger.info(f"üèÜ –û–±—Ä–∞–Ω–æ —Ç–æ–ø –º–µ–º: {best_post['title'][:50]}... (score: {best_post['quality_score']})")
        return best_post
    
    def get_time_context(self) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Å—É"""
        hour = datetime.now().hour
        
        if 6 <= hour <= 10:
            return 'morning'
        elif 11 <= hour <= 17:
            return 'work_day'
        elif 18 <= hour <= 23:
            return 'evening'
        else:
            return 'work_day'  # –î–µ—Ñ–æ–ª—Ç
    
    async def localize_with_advanced_ai(self, meme_data: dict) -> dict:
        """–†–æ–∑—É–º–Ω–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ IT –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        if not self.openai_client:
            # Fallback –±–µ–∑ AI
            meme_data['localized_title'] = f"{meme_data['title']} üòÑ"
            return meme_data
        
        try:
            time_context = self.get_time_context()
            
            # –î–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —è–∫—ñ—Å–Ω–æ—ó –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
            prompt = f'''
–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó –∑–∞—Ö—ñ–¥–Ω–∏—Ö –º–µ–º—ñ–≤ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö IT —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤. 

–ö–û–ù–¢–ï–ö–°–¢ –ú–ï–ú–£:
- –û—Ä–∏–≥—ñ–Ω–∞–ª: "{meme_data['title']}"
- Upvotes: {meme_data.get('ups', 0)} (–ø–æ–∫–∞–∑–Ω–∏–∫ —è–∫–æ—Å—Ç—ñ)
- –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤: {meme_data.get('num_comments', 0)}
- Subreddit: r/{meme_data.get('subreddit', '')}
- Score —è–∫–æ—Å—Ç—ñ: {meme_data.get('quality_score', 0)}/100
- –ß–∞—Å –¥–Ω—è: {time_context}

–£–ö–†–ê–á–ù–°–¨–ö–Ü IT –†–ï–ê–õ–Ü–á:
- –ó–∞–º—ñ—Å—Ç—å "manager" ‚Üí "—Ç—ñ–º–ª—ñ–¥", "PM", "–º–µ–Ω–µ–¥–∂–µ—Ä"
- –ó–∞–º—ñ—Å—Ç—å "coffee" ‚Üí "–∫–∞–≤–∞", "–µ—Å–ø—Ä–µ—Å–æ –≤ –æ—Ñ—ñ—Å—ñ"
- –ó–∞–º—ñ—Å—Ç—å "salary" ‚Üí "–∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö", "–æ–∫–ª–∞–¥"
- –ó–∞–º—ñ—Å—Ç—å "deadline" ‚Üí "–¥–µ–¥–ª–∞–π–Ω", "—Ç–µ—Ä–º—ñ–Ω–∏"
- –ó–∞–º—ñ—Å—Ç—å "bug" ‚Üí "–±–∞–≥", "–ø–æ–º–∏–ª–∫–∞"
- –ó–∞–º—ñ—Å—Ç—å "production" ‚Üí "–ø—Ä–æ–¥", "–ø—Ä–æ–¥–∞–∫—à–Ω"

–ü–†–ê–í–ò–õ–ê –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–á:
1. –ù–ï –¢–Ü–õ–¨–ö–ò –ü–ï–†–ï–ö–õ–ê–î–ò - –∞–¥–∞–ø—Ç—É–π —Å—É—Ç—å –≥—É–º–æ—Ä—É
2. –ó–±–µ—Ä—ñ–≥–∞–π –º–µ–º–Ω–∏–π —Å—Ç–∏–ª—å - –∫–æ—Ä–æ—Ç–∫–æ, –≤–ª—É—á–Ω–æ
3. –î–æ–¥–∞–≤–∞–π –µ–º–æ–¥–∂—ñ (1-2, –Ω–µ –±—ñ–ª—å—à–µ)
4. –Ø–∫—â–æ –∑–∞—Ö—ñ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏–π - –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–∞–ª–æ–≥
5. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—É—á–∞—Å–Ω—É —É–∫—Ä–∞—ó–Ω—Å—å–∫—É IT –º–æ–≤—É
6. –ú–∞–∫—Å–∏–º—É–º 90 —Å–∏–º–≤–æ–ª—ñ–≤

–ü–†–ò–ö–õ–ê–î–ò –Ø–ö–Ü–°–ù–û–á –õ–û–ö–ê–õ–Ü–ó–ê–¶–Ü–á:
‚ùå –ü–æ–≥–∞–Ω–æ: "When your code works on first try" ‚Üí "–ö–æ–ª–∏ —Ç–≤—ñ–π –∫–æ–¥ –ø—Ä–∞—Ü—é—î –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É"
‚úÖ –î–æ–±—Ä–µ: "–ö–æ–ª–∏ –∫–æ–¥ –∑–∞–ø—Ä–∞—Ü—é–≤–∞–≤ –∑ –ø–µ—Ä—à–æ–≥–æ —Ä–∞–∑—É —ñ —Ç–∏ –ø—ñ–¥–æ–∑—Ä—é—î—à –ø—ñ–¥–≤–æ—Ö ü§î"

‚ùå –ü–æ–≥–∞–Ω–æ: "Monday morning standup" ‚Üí "–ü–æ–Ω–µ–¥—ñ–ª–∫–æ–≤–∞ —Ä–∞–Ω–∫–æ–≤–∞ –ø–ª–∞–Ω–µ—Ä–∫–∞"  
‚úÖ –î–æ–±—Ä–µ: "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 9 —Ä–∞–Ω–∫—É, —Å—Ç–µ–Ω–¥–∞–ø... –ê —Ç–∏ —â–µ –Ω–∞–≤—ñ—Ç—å –∫–∞–≤–∏ –Ω–µ –≤—Å—Ç–∏–≥ ‚òï"

–ó–ê–í–î–ê–ù–ù–Ø: –°—Ç–≤–æ—Ä–∏ –Ü–î–ï–ê–õ–¨–ù–£ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –≤–µ—Ä—Å—ñ—é –º–µ–º—É.

–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è (–ª–∏—à–µ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω—å):
'''
            
            response = await asyncio.to_thread(
                self.openai_client.chat.completions.create,
                model="gpt-4",  # GPT-4 –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ
                messages=[{"role": "user", "content": prompt}],
                max_tokens=120,
                temperature=0.4,  # –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —Ç–æ—á–Ω–æ—Å—Ç—ñ
                presence_penalty=0.1,
                frequency_penalty=0.1
            )
            
            localized_title = response.choices[0].message.content.strip()
            
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if len(localized_title) > 100:
                localized_title = localized_title[:97] + "..."
            
            if len(localized_title) < 10:
                # Fallback —è–∫—â–æ AI –¥–∞–≤ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                localized_title = f"{meme_data['title']} üòÑ"
            
            meme_data['localized_title'] = localized_title
            meme_data['localized'] = True
            meme_data['ai_quality'] = 'high'
            
            logger.info(f"ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è (GPT-4): '{localized_title}'")
            
        except Exception as e:
            logger.error(f"ü§ñ –ü–æ–º–∏–ª–∫–∞ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
            meme_data['localized_title'] = f"{meme_data['title']} üòÑ"
            meme_data['localized'] = False
            meme_data['ai_quality'] = 'fallback'
        
        return meme_data

class AdvancedBobikBot:
    def __init__(self):
        # –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ Railway
        self.bot_token = os.getenv("TELEGRAM_BOT_TOKEN", "7882259321:AAGGqql6LD6bzLHTODlHdKUYs2IJBZqsd6E")
        self.channel_id = os.getenv("TELEGRAM_CHANNEL_ID", "1002889574159")  # –¢–≤—ñ–π –∫–∞–Ω–∞–ª ID
        self.admin_id = int(os.getenv("ADMIN_ID", "603047391"))
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º—ñ: {ENVIRONMENT}")
        logger.info(f"üì± –ö–∞–Ω–∞–ª ID: {self.channel_id}")
        logger.info(f"üë§ –ê–¥–º—ñ–Ω ID: {self.admin_id}")
        logger.info(f"üåê HTTP –ø–æ—Ä—Ç: {PORT}")
        
        # OpenAI –∫–ª—ñ—î–Ω—Ç (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
        self.openai_client = None
        if OPENAI_AVAILABLE:
            openai_key = os.getenv('OPENAI_API_KEY')
            if openai_key and openai_key.startswith('sk-'):
                try:
                    self.openai_client = OpenAI(api_key=openai_key)
                    logger.info("ü§ñ ChatGPT —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ (GPT-4)")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó OpenAI: {e}")
            else:
                logger.info("üîë OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –ü—Ä–∞—Ü—é—î–º–æ –±–µ–∑ AI.")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        self.content_manager = QualityContentManager(self.openai_client)
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'posts_today': 0,
            'total_posts': 0,
            'last_post_time': None,
            'successful_posts': 0,
            'failed_posts': 0,
            'high_quality_posts': 0,  # –ü–æ—Å—Ç–∏ –∑ score > 80
            'ai_localized_posts': 0,
            'curated_posts': 0,
            'reddit_posts': 0,
            'average_quality_score': 0,
            'daily_stats': {},
            'posted_hashes': set(),
            'hourly_posts': {},
            'content_sources': {},
            'server_start_time': datetime.now()
        }
        
        # –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó (11 –ø–æ—Å—Ç—ñ–≤)
        self.posting_schedule = [
            "06:00",  # 08:00 –ö–∏—ó–≤ - –†–∞–Ω–∫–æ–≤–∞ –∫–∞–≤–∞ ‚òï
            "08:00",  # 10:00 –ö–∏—ó–≤ - –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è üíº
            "10:00",  # 12:00 –ö–∏—ó–≤ - –ü–µ—Ä–µ–¥ –æ–±—ñ–¥–æ–º
            "12:00",  # 14:00 –ö–∏—ó–≤ - –û–±—ñ–¥–Ω—è –ø–µ—Ä–µ—Ä–≤–∞ üçΩÔ∏è
            "14:00",  # 16:00 –ö–∏—ó–≤ - –ü—ñ—Å–ª—è –æ–±—ñ–¥—É ‚ö°
            "16:00",  # 18:00 –ö–∏—ó–≤ - –ö—ñ–Ω–µ—Ü—å —Ä–æ–±–æ—á–æ–≥–æ –¥–Ω—è
            "18:00",  # 20:00 –ö–∏—ó–≤ - –í–µ—á–µ—Ä–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å üè†
            "20:00",  # 22:00 –ö–∏—ó–≤ - –ü—Ä–∞–π–º-—Ç–∞–π–º üì∫
            "22:00",  # 00:00 –ö–∏—ó–≤ - –ü—ñ–∑–Ω—ñ–π –≤–µ—á—ñ—Ä üåô
            "00:00",  # 02:00 –ö–∏—ó–≤ - –ù—ñ—á–Ω—ñ —Å–æ–≤–∏ ü¶â
            "03:00"   # 05:00 –ö–∏—ó–≤ - –†–∞–Ω–Ω—è –ø—Ç–∞—à–∫–∞
        ]
        
        self.bot = None
        self.telegram_app = None
        logger.info("üêï –ë–æ–±—ñ–∫ 2.0 –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")

    def get_meme_hash(self, url: str) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —Ö–µ—à –¥–ª—è –º–µ–º—É –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤"""
        return hashlib.md5(url.encode()).hexdigest()

    async def get_smart_meme(self) -> Optional[dict]:
        """–û—Ç—Ä–∏–º—É—î –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º –∑ —Å–∏—Å—Ç–µ–º–∏ —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
        return await self.content_manager.get_best_quality_meme()

    def get_ukrainian_caption(self, meme_data: dict) -> str:
        """–ì–µ–Ω–µ—Ä—É—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –ø—ñ–¥–ø–∏—Å—å –¥–ª—è –º–µ–º—É"""
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
        if meme_data.get('localized_title'):
            return meme_data['localized_title']
        
        # Fallback
        return f"{meme_data['title']} üòÑ"

    async def post_meme_to_channel(self, meme_data: dict) -> bool:
        """–ü—É–±–ª—ñ–∫—É—î –º–µ–º —É –∫–∞–Ω–∞–ª Telegram"""
        try:
            caption = self.get_ukrainian_caption(meme_data)
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —è–∫—ñ—Å—Ç—å —Ç–∞ –¥–∂–µ—Ä–µ–ª–æ
            footer_parts = []
            
            # –î–∂–µ—Ä–µ–ª–æ
            footer_parts.append(f"üîó {meme_data.get('source', 'Unknown')}")
            
            # AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
            if meme_data.get('localized'):
                footer_parts.append("ü§ñ AI")
            
            # –Ø–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É
            quality_score = meme_data.get('quality_score', 0)
            if quality_score >= 90:
                footer_parts.append("üèÜ TOP")
            elif quality_score >= 80:
                footer_parts.append("‚≠ê HIGH")
            
            # Reddit –º–µ—Ç—Ä–∏–∫–∏ (—è–∫—â–æ —î)
            if meme_data.get('ups'):
                if meme_data['ups'] >= 10000:
                    footer_parts.append(f"üî• {meme_data['ups']//1000}K")
                elif meme_data['ups'] >= 1000:
                    footer_parts.append(f"üëç {meme_data['ups']//1000}K")
            
            footer = "\n\n" + " | ".join(footer_parts) if footer_parts else ""
            full_caption = caption + footer
            
            logger.info(f"üì§ –ü—É–±–ª—ñ–∫—É—î–º–æ —è–∫—ñ—Å–Ω–∏–π –º–µ–º: {caption[:50]}...")
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–µ–º
            message = await self.bot.send_photo(
                chat_id=self.channel_id,
                photo=meme_data['url'],
                caption=full_caption,
                parse_mode='HTML'
            )
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.stats['successful_posts'] += 1
            self.stats['total_posts'] += 1
            self.stats['posts_today'] += 1
            self.stats['last_post_time'] = datetime.now()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∫–æ—Å—Ç—ñ
            quality_score = meme_data.get('quality_score', 0)
            if quality_score >= 80:
                self.stats['high_quality_posts'] += 1
            
            if meme_data.get('localized'):
                self.stats['ai_localized_posts'] += 1
            
            if meme_data.get('source') == 'Curated':
                self.stats['curated_posts'] += 1
            else:
                self.stats['reddit_posts'] += 1
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π score —è–∫–æ—Å—Ç—ñ
            if self.stats['total_posts'] > 0:
                current_avg = self.stats.get('average_quality_score', 0)
                self.stats['average_quality_score'] = (
                    (current_avg * (self.stats['total_posts'] - 1) + quality_score) / 
                    self.stats['total_posts']
                )
            
            # –î–æ–¥–∞—î–º–æ —Ö–µ—à
            meme_hash = self.get_meme_hash(meme_data['url'])
            self.stats['posted_hashes'].add(meme_hash)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ
            source = meme_data.get('source', 'Unknown')
            if source not in self.stats['content_sources']:
                self.stats['content_sources'][source] = 0
            self.stats['content_sources'][source] += 1
            
            # –ì–æ–¥–∏–Ω–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            current_hour = datetime.now().hour
            if current_hour not in self.stats['hourly_posts']:
                self.stats['hourly_posts'][current_hour] = 0
            self.stats['hourly_posts'][current_hour] += 1
            
            logger.info(f"‚úÖ –Ø–∫—ñ—Å–Ω–∏–π –º–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ! ID: {message.message_id}, Score: {quality_score}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –º–µ–º—É: {e}")
            self.stats['failed_posts'] += 1
            return False

    async def scheduled_posting(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º"""
        logger.info("‚è∞ –†–æ–∑–ø–æ—á–∞—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—É–±–ª—ñ–∫—É–≤–∞–Ω–Ω—è —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
        
        while True:
            try:
                current_time = datetime.now().strftime("%H:%M")
                
                if current_time in self.posting_schedule:
                    logger.info(f"üéØ –ß–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {current_time}")
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º
                    meme = await self.get_smart_meme()
                    if meme:
                        # –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI
                        meme = await self.content_manager.localize_with_advanced_ai(meme)
                        
                        # –ü—É–±–ª—ñ–∫—É—î–º–æ
                        success = await self.post_meme_to_channel(meme)
                        if success:
                            logger.info(f"üéâ –Ø–∫—ñ—Å–Ω–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π –æ {current_time}")
                        else:
                            logger.error(f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç –Ω–µ–≤–¥–∞–ª–∏–π –æ {current_time}")
                    else:
                        logger.error(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—ñ—Å–Ω–∏–π –º–µ–º –æ {current_time}")
                    
                    # –ß–µ–∫–∞—î–º–æ —Ö–≤–∏–ª–∏–Ω—É —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏
                    await asyncio.sleep(70)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫—É–≤–∞–Ω–Ω—ñ: {e}")
                await asyncio.sleep(60)

    # HTTP endpoints –¥–ª—è Railway
    async def health_endpoint(self, request):
        """HTTP Health check endpoint –¥–ª—è Railway"""
        try:
            uptime = datetime.now() - self.stats['server_start_time']
            uptime_seconds = int(uptime.total_seconds())
            
            health_data = {
                "status": "healthy",
                "environment": ENVIRONMENT,
                "timestamp": datetime.now().isoformat(),
                "uptime_seconds": uptime_seconds,
                "total_posts": self.stats['total_posts'],
                "posts_today": self.stats['posts_today'],
                "high_quality_posts": self.stats['high_quality_posts'],
                "average_quality_score": round(self.stats['average_quality_score'], 1),
                "ai_enabled": self.openai_client is not None,
                "ai_localized_posts": self.stats['ai_localized_posts'],
                "last_post": self.stats['last_post_time'].isoformat() if self.stats['last_post_time'] else None,
                "bot_status": "running" if self.bot else "initializing"
            }
            
            logger.info(f"‚úÖ Health check OK: {self.stats['posts_today']} –ø–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ, avg quality: {self.stats['average_quality_score']:.1f}")
            return json_response(health_data, status=200)
            
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {e}")
            return json_response({
                "status": "unhealthy", 
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }, status=503)

    async def stats_endpoint(self, request):
        """HTTP Stats endpoint"""
        try:
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
            total_attempts = self.stats['successful_posts'] + self.stats['failed_posts']
            success_rate = (self.stats['successful_posts'] / total_attempts * 100) if total_attempts > 0 else 0
            
            # –¢–æ–ø –¥–∂–µ—Ä–µ–ª–∞
            top_sources = sorted(self.stats['content_sources'].items(), key=lambda x: x[1], reverse=True)[:5]
            
            stats_data = {
                "status": "ok",
                "environment": ENVIRONMENT,
                "timestamp": datetime.now().isoformat(),
                "posts": {
                    "today": self.stats['posts_today'],
                    "total": self.stats['total_posts'],
                    "successful": self.stats['successful_posts'],
                    "failed": self.stats['failed_posts'],
                    "success_rate": round(success_rate, 1)
                },
                "quality": {
                    "high_quality_posts": self.stats['high_quality_posts'],
                    "average_score": round(self.stats['average_quality_score'], 1),
                    "quality_percentage": round((self.stats['high_quality_posts'] / max(1, self.stats['total_posts'])) * 100, 1)
                },
                "ai": {
                    "enabled": self.openai_client is not None,
                    "localized_posts": self.stats['ai_localized_posts'],
                    "localization_rate": round((self.stats['ai_localized_posts'] / max(1, self.stats['total_posts'])) * 100, 1)
                },
                "content_sources": dict(top_sources),
                "schedule": {
                    "posts_per_day": len(self.posting_schedule),
                    "next_post_time": self.get_next_post_time()
                },
                "uptime": int((datetime.now() - self.stats['server_start_time']).total_seconds())
            }
            
            return json_response(stats_data, status=200)
            
        except Exception as e:
            logger.error(f"‚ùå Stats endpoint failed: {e}")
            return json_response({"error": str(e)}, status=500)

    async def manual_post_endpoint(self, request):
        """HTTP endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥—É"""
        try:
            logger.info("üì§ Manual high-quality post requested via HTTP")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π –º–µ–º
            meme = await self.get_smart_meme()
            if meme:
                # –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI
                meme = await self.content_manager.localize_with_advanced_ai(meme)
                
                # –ü—É–±–ª—ñ–∫—É—î–º–æ
                success = await self.post_meme_to_channel(meme)
                if success:
                    return json_response({
                        "status": "success",
                        "message": "–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –º–µ–º –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π",
                        "meme_title": meme.get('localized_title', meme.get('title', 'N/A')),
                        "source": meme.get('source', 'N/A'),
                        "quality_score": meme.get('quality_score', 0),
                        "localized": meme.get('localized', False)
                    }, status=200)
                else:
                    return json_response({
                        "status": "error",
                        "message": "–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"
                    }, status=500)
            else:
                return json_response({
                    "status": "error",
                    "message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—ñ—Å–Ω–∏–π –º–µ–º"
                }, status=404)
                
        except Exception as e:
            logger.error(f"‚ùå Manual post failed: {e}")
            return json_response({"error": str(e)}, status=500)

    def get_next_post_time(self) -> str:
        """–í–∏–∑–Ω–∞—á–∞—î —á–∞—Å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            current_time = datetime.now().strftime("%H:%M")
            current_minutes = datetime.now().hour * 60 + datetime.now().minute
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ —É —Ö–≤–∏–ª–∏–Ω–∏
            schedule_minutes = []
            for time_str in self.posting_schedule:
                hour, minute = map(int, time_str.split(':'))
                schedule_minutes.append(hour * 60 + minute)
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —á–∞—Å
            for schedule_time in sorted(schedule_minutes):
                if schedule_time > current_minutes:
                    hour = schedule_time // 60
                    minute = schedule_time % 60
                    return f"{hour:02d}:{minute:02d}"
            
            # –Ø–∫—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ —á–∞—Å—É –Ω–µ–º–∞—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à–∏–π —á–∞—Å –∑–∞–≤—Ç—Ä–∞
            first_time = min(schedule_minutes)
            hour = first_time // 60
            minute = first_time % 60
            return f"{hour:02d}:{minute:02d} (–∑–∞–≤—Ç—Ä–∞)"
            
        except Exception:
            return "N/A"

    async def create_http_server(self):
        """–°—Ç–≤–æ—Ä—é—î HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway"""
        app = web.Application()
        
        # –î–æ–¥–∞—î–º–æ –º–∞—Ä—à—Ä—É—Ç–∏
        app.router.add_get('/health', self.health_endpoint)
        app.router.add_get('/stats', self.stats_endpoint)
        app.router.add_post('/post', self.manual_post_endpoint)
        app.router.add_get('/', self.health_endpoint)  # Root endpoint
        
        logger.info(f"üåê –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', PORT)
        await site.start()
        
        logger.info(f"‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://0.0.0.0:{PORT}")
        return runner

    # Telegram –∫–æ–º–∞–Ω–¥–∏
    async def health_check_handler(self, update, context):
        """Health check handler –¥–ª—è Telegram –∫–æ–º–∞–Ω–¥"""
        try:
            bot_info = await context.bot.get_me()
            
            health_text = f"""
üü¢ **–ë–æ—Ç –∑–¥–æ—Ä–æ–≤–∏–π!**

ü§ñ **Bot:** @{bot_info.username}
üåç **–°–µ—Ä–µ–¥–æ–≤–∏—â–µ:** {ENVIRONMENT}
üìä **–ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ:** {self.stats['posts_today']}
üìà **–í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤:** {self.stats['total_posts']}
üèÜ **–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö:** {self.stats['high_quality_posts']}
‚≠ê **–°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å:** {self.stats['average_quality_score']:.1f}/100
üß† **AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó:** {self.stats['ai_localized_posts']}
ü§ñ **AI —Å—Ç–∞—Ç—É—Å:** {'‚úÖ GPT-4 –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
‚è∞ **–ß–∞—Å:** {datetime.now().strftime('%H:%M:%S')}
            """
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=health_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"‚úÖ Health check OK via Telegram")
            
        except Exception as e:
            logger.error(f"‚ùå Health check failed: {e}")
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üî¥ –ü–æ–º–∏–ª–∫–∞ health check: {str(e)}"
            )

    async def stats_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if update.effective_user.id != self.admin_id:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —É—Å–ø—ñ—à–Ω–æ—Å—Ç—ñ
        total_attempts = self.stats['successful_posts'] + self.stats['failed_posts']
        success_rate = (self.stats['successful_posts'] / total_attempts * 100) if total_attempts > 0 else 0
        
        # –¢–æ–ø –¥–∂–µ—Ä–µ–ª–∞
        top_sources = sorted(self.stats['content_sources'].items(), key=lambda x: x[1], reverse=True)[:3]
        sources_text = "\n".join([f"‚Ä¢ {name}: {count}" for name, count in top_sources]) if top_sources else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
        
        # –ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≥–æ–¥–∏–Ω–∏
        top_hours = sorted(self.stats['hourly_posts'].items(), key=lambda x: x[1], reverse=True)[:3]
        hours_text = "\n".join([f"‚Ä¢ {hour:02d}:00: {count} –ø–æ—Å—Ç—ñ–≤" for hour, count in top_hours]) if top_hours else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ–±—ñ–∫ 2.0 - –Ø–∫—ñ—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç**

üìà **–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:**
‚Ä¢ –ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['total_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω–∏—Ö: {self.stats['successful_posts']}
‚Ä¢ –ü–æ–º–∏–ª–æ–∫: {self.stats['failed_posts']}
‚Ä¢ –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å: {success_rate:.1f}%

üèÜ **–Ø–∫—ñ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç—É:**
‚Ä¢ –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏—Ö –ø–æ—Å—Ç—ñ–≤: {self.stats['high_quality_posts']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {self.stats['average_quality_score']:.1f}/100
‚Ä¢ % —è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É: {(self.stats['high_quality_posts'] / max(1, self.stats['total_posts'])) * 100:.1f}%

ü§ñ **AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['ai_localized_posts']}
‚Ä¢ AI —Å—Ç–∞—Ç—É—Å: {'‚úÖ GPT-4 –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}
‚Ä¢ % AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó: {(self.stats['ai_localized_posts'] / max(1, self.stats['total_posts'])) * 100:.1f}%

üìä **–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç—É:**
‚Ä¢ Reddit –ø–æ—Å—Ç—ñ–≤: {self.stats['reddit_posts']}
‚Ä¢ –ö—É—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö –ø–æ—Å—Ç—ñ–≤: {self.stats['curated_posts']}

üîó **–¢–æ–ø –¥–∂–µ—Ä–µ–ª–∞:**
{sources_text}

‚è∞ **–ù–∞–π–∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≥–æ–¥–∏–Ω–∏:**
{hours_text}

üïê **–û—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ—Å—Ç:** {self.stats['last_post_time'].strftime('%H:%M:%S') if self.stats['last_post_time'] else '–©–µ –Ω–µ –±—É–ª–æ'}

üåç **–°–µ—Ä–µ–¥–æ–≤–∏—â–µ:** {ENVIRONMENT}
        """
        
        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def test_post_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ—ó –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó"""
        if update.effective_user.id != self.admin_id:
            await update.message.reply_text("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É")
            return
        
        await update.message.reply_text("üß™ –ì–æ—Ç—É—é —Ç–µ—Å—Ç–æ–≤–∏–π –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –ø–æ—Å—Ç...")
        
        meme = await self.get_smart_meme()
        if meme:
            meme = await self.content_manager.localize_with_advanced_ai(meme)
            success = await self.post_meme_to_channel(meme)
            
            if success:
                result_text = f"""
‚úÖ **–¢–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∏–π!**

üîó **–î–∂–µ—Ä–µ–ª–æ:** {meme.get('source', 'N/A')}
‚≠ê **–Ø–∫—ñ—Å—Ç—å:** {meme.get('quality_score', 0)}/100
ü§ñ **AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è:** {'‚úÖ –¢–∞–∫' if meme.get('localized') else '‚ùå –ù—ñ'}
"""
                if meme.get('ups'):
                    result_text += f"üëç **Reddit upvotes:** {meme['ups']}\n"
                
                await update.message.reply_text(result_text, parse_mode='Markdown')
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —è–∫—ñ—Å–Ω–∏–π –º–µ–º –¥–ª—è —Ç–µ—Å—Ç—É")

    async def start_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        welcome_text = f"""
üêï **–í—ñ—Ç–∞—é –≤ –ë–æ–±—ñ–∫ 2.0!**

üß†üòÇüî• –£–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π AI –º–µ–º-–±–æ—Ç –∑ **–≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ü–æ—Å—Ç—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ: {self.stats['posts_today']}
‚Ä¢ –í—Å—å–æ–≥–æ –ø–æ—Å—Ç—ñ–≤: {self.stats['total_posts']}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—è —è–∫—ñ—Å—Ç—å: {self.stats['average_quality_score']:.1f}/100
‚Ä¢ AI —Å—Ç–∞—Ç—É—Å: {'ü§ñ GPT-4 –ê–∫—Ç–∏–≤–Ω–∏–π' if self.openai_client else 'üîß –ë–∞–∑–æ–≤–∏–π —Ä–µ–∂–∏–º'}

üèÜ **–û—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ:**
‚Ä¢ –¢—ñ–ª—å–∫–∏ —Ç–æ–ø –∫–æ–Ω—Ç–µ–Ω—Ç –∑ Reddit (1000+ upvotes)
‚Ä¢ –†–æ–∑—É–º–Ω–∞ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é  
‚Ä¢ –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —è–∫–æ—Å—Ç—ñ —Ç–∞ engagement
‚Ä¢ –ö—É—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π –≤—ñ–¥–±—ñ—Ä –º–µ–º—ñ–≤

‚è∞ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏:** 11 —Ä–∞–∑—ñ–≤ –Ω–∞ –¥–µ–Ω—å
üá∫üá¶ **–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ:** –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó IT –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
üåç **–°–µ—Ä–µ–¥–æ–≤–∏—â–µ:** {ENVIRONMENT}

–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ –∫–∞–Ω–∞–ª—É: @BobikFun
        """
        
        if update.effective_user.id == self.admin_id:
            welcome_text += "\n\nüîß **–ê–¥–º—ñ–Ω –∫–æ–º–∞–Ω–¥–∏:**\n/stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/test - —Ç–µ—Å—Ç–æ–≤–∏–π –ø–æ—Å—Ç\n/health - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"
        
        await update.message.reply_text(welcome_text, parse_mode='Markdown')

    def main(self):
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ë–æ–±—ñ–∫ 2.0 –∑ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        self.telegram_app = Application.builder().token(self.bot_token).build()
        self.bot = self.telegram_app.bot
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.telegram_app.add_handler(CommandHandler("start", self.start_command))
        self.telegram_app.add_handler(CommandHandler("stats", self.stats_command))
        self.telegram_app.add_handler(CommandHandler("test", self.test_post_command))
        self.telegram_app.add_handler(CommandHandler("health", self.health_check_handler))
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ —Ç–∞ HTTP —Å–µ—Ä–≤–µ—Ä
        async def start_bot():
            try:
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
                http_runner = await self.create_http_server()
                
                # –í–ê–ñ–õ–ò–í–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Application
                await self.telegram_app.initialize()
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞
                await self.telegram_app.start()
                await self.telegram_app.updater.start_polling()
                
                logger.info("üéâ –ë–æ–±—ñ–∫ 2.0 —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")
                logger.info(f"üì± –ü—É–±–ª—ñ–∫—É–≤–∞–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {self.channel_id}")
                logger.info(f"‚è∞ –†–æ–∑–∫–ª–∞–¥: {len(self.posting_schedule)} –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π –Ω–∞ –¥–µ–Ω—å")
                logger.info(f"üåê HTTP —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—ñ {PORT}")
                logger.info(f"üèÜ –°–∏—Å—Ç–µ–º–∞ –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∞–∫—Ç–∏–≤–Ω–∞")
                logger.info(f"ü§ñ AI –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è: {'‚úÖ GPT-4' if self.openai_client else '‚ùå –í—ñ–¥–∫–ª—é—á–µ–Ω–∞'}")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –ø–æ—Å—Ç—ñ–≤ –ü–Ü–°–õ–Ø —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
                posting_task = asyncio.create_task(self.scheduled_posting())
                
                # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                try:
                    await posting_task
                except KeyboardInterrupt:
                    logger.info("üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏")
                finally:
                    logger.info("üîÑ –ó—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞...")
                    await self.telegram_app.stop()
                    await self.telegram_app.shutdown()
                    await http_runner.cleanup()
                    logger.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")
                    
            except Exception as e:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
                raise
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–æ–¥
        try:
            asyncio.run(start_bot())
        except KeyboardInterrupt:
            logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    bot = AdvancedBobikBot()
    bot.main()