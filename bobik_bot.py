#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–∏–π Telegram-–±–æ—Ç –∑ –º–µ–º–∞–º–∏ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏ üß†üòÇüî•
–í–µ—Ä—Å—ñ—è: 2.0 Production
–ê–≤—Ç–æ—Ä: AI Assistant
–õ—ñ—Ü–µ–Ω–∑—ñ—è: MIT
"""

import asyncio
import logging
import sys
import os
import signal
import traceback
from datetime import datetime
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–∞–ø–∫—É –¥–æ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
from config.settings import settings, EMOJI, TEXTS

# –Ü–º–ø–æ—Ä—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
from database.database import init_db
from handlers import register_handlers
from middlewares.auth import AuthMiddleware, AntiSpamMiddleware, LoggingMiddleware
from services.scheduler import SchedulerService
from services.content_generator import auto_generate_content_if_needed

# –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
def setup_logging():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è"""
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –ª–æ–≥—ñ–≤
    os.makedirs('logs', exist_ok=True)
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    log_format = '%(asctime)s | %(name)-15s | %(levelname)-8s | %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è root logger
    logging.basicConfig(
        level=getattr(logging, settings.LOG_LEVEL.upper(), logging.INFO),
        format=log_format,
        datefmt=date_format,
        handlers=[
            # –§–∞–π–ª –¥–ª—è –≤—Å—ñ—Ö –ª–æ–≥—ñ–≤
            logging.FileHandler('logs/bot.log', encoding='utf-8'),
            # –§–∞–π–ª —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø–æ–º–∏–ª–æ–∫
            logging.FileHandler('logs/errors.log', encoding='utf-8', mode='a'),
            # –ö–æ–Ω—Å–æ–ª—å
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–≥–µ—Ä–∞ –ø–æ–º–∏–ª–æ–∫
    error_handler = logging.FileHandler('logs/errors.log', encoding='utf-8')
    error_handler.setLevel(logging.ERROR)
    error_handler.setFormatter(logging.Formatter(log_format, date_format))
    
    # –û—Ç–∫–ª—é—á–µ–Ω–Ω—è —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ debug —Ä–µ–∂–∏–º—ñ
    if not settings.DEBUG:
        logging.getLogger('aiogram').setLevel(logging.WARNING)
        logging.getLogger('aiohttp').setLevel(logging.WARNING)
        logging.getLogger('asyncio').setLevel(logging.WARNING)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
setup_logging()
logger = logging.getLogger(__name__)

class UkrainianTelegramBot:
    """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∫–ª–∞—Å —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞"""
    
    def __init__(self):
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.scheduler_service: Optional[SchedulerService] = None
        self.is_running = False
        self.startup_time = datetime.now()
        
        # –û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–æ–±–∫–∞ —Å–∏–≥–Ω–∞–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""
        logger.info(f"üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ä–æ–±–æ—Ç—É...")
        self.is_running = False
    
    async def create_bot(self) -> Bot:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞...")
            
            self.bot = Bot(
                token=settings.BOT_TOKEN,
                default=DefaultBotProperties(
                    parse_mode=ParseMode.HTML,
                    disable_web_page_preview=True
                )
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            logger.info(f"   üìã –Ü–º'—è: {bot_info.first_name}")
            logger.info(f"   üÜî ID: {bot_info.id}")
            logger.info(f"   üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: https://t.me/{bot_info.username}")
            
            return self.bot
            
        except TelegramNetworkError as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ Telegram: {e}")
            raise
        except TelegramBadRequest as e:
            logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞: {e}")
            raise
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞: {e}")
            raise
    
    async def setup_dispatcher(self):
        """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
        logger.info("üìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞...")
        
        self.dp = Dispatcher()
        
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        middlewares = [
            AuthMiddleware(),
            AntiSpamMiddleware(rate_limit=settings.RATE_LIMIT_MESSAGES),
            LoggingMiddleware()
        ]
        
        for middleware in middlewares:
            self.dp.message.middleware(middleware)
            self.dp.callback_query.middleware(middleware)
        
        # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤—Å—ñ—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
        register_handlers(self.dp)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
        self.dp.error.register(self._global_error_handler)
        
        logger.info("‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∑ middleware —Ç–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏")
    
    async def _global_error_handler(self, update, exception):
        """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
        logger.error(f"üö® –ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {exception}")
        logger.error(f"üìÑ Update: {update}")
        logger.error(f"üìä Traceback: {traceback.format_exc()}")
        
        # –°–ø—Ä–æ–±–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –∫—Ä–∏—Ç–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
        try:
            if self.bot and hasattr(update, 'message') and update.message:
                await self.bot.send_message(
                    settings.ADMIN_ID,
                    f"üö® <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –í –ë–û–¢–Ü</b>\n\n"
                    f"<b>–ü–æ–º–∏–ª–∫–∞:</b> <code>{str(exception)[:500]}</code>\n"
                    f"<b>–ß–∞—Å:</b> {datetime.now().strftime('%H:%M:%S')}\n"
                    f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b> {update.message.from_user.id}"
                )
        except:
            pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        
        return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ–±—Ä–æ–±–∫—É
    
    async def setup_database(self):
        """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        try:
            logger.info("üíæ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            await init_db()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è
            from database.database import get_db_session
            with get_db_session() as session:
                # –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è
                result = session.execute("SELECT 1").scalar()
                if result == 1:
                    logger.info("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î")
                else:
                    raise Exception("–¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è")
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {e}")
            raise
    
    async def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑—É–º–Ω–æ–≥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""
        try:
            logger.info("‚è∞ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á...")
            self.scheduler_service = SchedulerService(self.bot)
            await self.scheduler_service.start()
            
            logger.info("‚úÖ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–∫—Ç–∏–≤–Ω–∏–π:")
            logger.info(f"   üìÖ –©–æ–¥–µ–Ω–Ω–∞ —Ä–æ–∑—Å–∏–ª–∫–∞: {settings.DAILY_BROADCAST_HOUR}:00")
            logger.info(f"   ‚öîÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–µ–ª–µ–π: –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω")
            logger.info(f"   üßπ –û—á–∏—â–µ–Ω–Ω—è: —â–æ—Ç–∏–∂–Ω—è")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±–µ–∑ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    
    async def setup_ai_content(self):
        """–†–æ–∑—É–º–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è AI –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó"""
        try:
            if settings.OPENAI_API_KEY:
                logger.info("üß† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
                await auto_generate_content_if_needed()
                logger.info(f"‚úÖ AI –∞–∫—Ç–∏–≤–Ω–∏–π (–º–æ–¥–µ–ª—å: {settings.OPENAI_MODEL})")
            else:
                logger.info("‚ö†Ô∏è AI –≤–∏–º–∫–Ω–µ–Ω–∏–π: –Ω–µ–º–∞—î OpenAI API –∫–ª—é—á–∞")
                logger.info("   üí° –î–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –¥–æ–¥–∞–π—Ç–µ OPENAI_API_KEY")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
    
    async def notify_admin_startup(self):
        """–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑–∞–ø—É—Å–∫"""
        try:
            startup_message = (
                f"{EMOJI['rocket']} <b>–ë–û–¢ –£–°–ü–Ü–®–ù–û –ó–ê–ü–£–©–ï–ù–û!</b>\n\n"
                f"{EMOJI['time']} <b>–ß–∞—Å –∑–∞–ø—É—Å–∫—É:</b> {self.startup_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
                f"{EMOJI['brain']} <b>AI:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if settings.OPENAI_API_KEY else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                f"{EMOJI['calendar']} <b>–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫:</b> {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' if self.scheduler_service else '‚ùå –í–∏–º–∫–Ω–µ–Ω–∏–π'}\n"
                f"{EMOJI['shield']} <b>–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö:</b> {'PostgreSQL' if 'postgresql' in settings.DATABASE_URL else 'SQLite'}\n"
                f"{EMOJI['target']} <b>–ö–∞–Ω–∞–ª:</b> {settings.CHANNEL_ID}\n\n"
                f"{EMOJI['check']} <b>–í—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ —Ä–æ–±–æ—Ç–∏!</b>\n"
                f"{EMOJI['fire']} <b>–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!</b> üá∫üá¶"
            )
            
            await self.bot.send_message(settings.ADMIN_ID, startup_message)
            logger.info("üì± –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    async def start_polling(self):
        """–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∑–∞–ø—É—Å–∫ polling –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
        try:
            self.is_running = True
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—É—Å–∫—É
            logger.info("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û")
            logger.info("=" * 50)
            logger.info(f"üåç –°–µ—Ä–µ–¥–æ–≤–∏—â–µ: {'Railway' if os.getenv('RAILWAY_ENVIRONMENT') else '–õ–æ–∫–∞–ª—å–Ω–µ'}")
            logger.info(f"üá∫üá¶ –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
            logger.info(f"üë§ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: {settings.ADMIN_ID}")
            logger.info(f"üì∫ –ö–∞–Ω–∞–ª: {settings.CHANNEL_ID}")
            logger.info(f"üîß Debug —Ä–µ–∂–∏–º: {'–£–≤—ñ–º–∫–Ω–µ–Ω–∏–π' if settings.DEBUG else '–í–∏–º–∫–Ω–µ–Ω–∏–π'}")
            logger.info("=" * 50)
            
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await self.notify_admin_startup()
            
            # –ó–∞–ø—É—Å–∫ polling –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
            while self.is_running:
                try:
                    logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
                    await self.dp.start_polling(
                        self.bot,
                        allowed_updates=['message', 'callback_query', 'inline_query']
                    )
                except TelegramNetworkError as e:
                    logger.error(f"üåê –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: {e}")
                    logger.info("‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(10)
                except Exception as e:
                    logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ polling: {e}")
                    if self.is_running:
                        logger.info("‚è≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(30)
                    else:
                        break
                        
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è –û—Ç—Ä–∏–º–∞–Ω–æ Ctrl+C")
        except Exception as e:
            logger.error(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
            raise
        finally:
            self.is_running = False
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        logger.info("üõë –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞...")
        
        try:
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –∑—É–ø–∏–Ω–∫—É
            if self.bot:
                try:
                    uptime = datetime.now() - self.startup_time
                    shutdown_message = (
                        f"{EMOJI['warning']} <b>–ë–û–¢ –ó–£–ü–ò–ù–ï–ù–û</b>\n\n"
                        f"{EMOJI['time']} <b>–ß–∞—Å —Ä–æ–±–æ—Ç–∏:</b> {uptime}\n"
                        f"{EMOJI['calendar']} <b>–ó—É–ø–∏–Ω–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
                        f"{EMOJI['info']} –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                    )
                    await self.bot.send_message(settings.ADMIN_ID, shutdown_message)
                except:
                    pass
            
            # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
            if self.scheduler_service:
                await self.scheduler_service.stop()
                logger.info("‚è∞ –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑—É–ø–∏–Ω–µ–Ω–æ")
            
            # –ó–∞–∫—Ä–∏—Ç—Ç—è —Å–µ—Å—ñ—ó –±–æ—Ç–∞
            if self.bot:
                await self.bot.session.close()
                logger.info("ü§ñ –°–µ—Å—ñ—è –±–æ—Ç–∞ –∑–∞–∫—Ä–∏—Ç–∞")
            
            logger.info("‚úÖ –ë–æ—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –∑ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    
    # –ö—Ä–∞—Å–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    print("\n" + "üß†üòÇüî•" * 20)
    print("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–û–¢ v2.0 üöÄ")
    print("üá∫üá¶ –ü–†–û–§–ï–°–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø –ó –ü–û–í–ù–û–Æ –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü–°–¢–Æ üá∫üá¶")
    print("üß†üòÇüî•" * 20 + "\n")
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—É –±–æ—Ç–∞
    ukrainian_bot = UkrainianTelegramBot()
    
    try:
        # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
        logger.info("üîÑ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤...")
        
        await ukrainian_bot.create_bot()
        await ukrainian_bot.setup_database()
        await ukrainian_bot.setup_dispatcher()
        await ukrainian_bot.setup_scheduler()
        await ukrainian_bot.setup_ai_content()
        
        logger.info("‚úÖ –í—Å—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª—É
        await ukrainian_bot.start_polling()
        
    except KeyboardInterrupt:
        logger.info("üëã –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
        logger.error(f"üìä –î–µ—Ç–∞–ª—å–Ω–∏–π traceback:\n{traceback.format_exc()}")
        
        # –°–ø—Ä–æ–±–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑–∞–ø—É—Å–∫—É
        if ukrainian_bot.bot:
            try:
                await ukrainian_bot.bot.send_message(
                    settings.ADMIN_ID,
                    f"üö® <b>–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ó–ê–ü–£–°–ö–£</b>\n\n"
                    f"<code>{str(e)[:500]}</code>\n\n"
                    f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
                )
            except:
                pass
        
        sys.exit(1)
    finally:
        await ukrainian_bot.shutdown()

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ asyncio
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! –î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞!")
    except Exception as e:
        print(f"\nüí• –§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        print("üìù –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤ –ø–∞–ø—Ü—ñ logs/ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        sys.exit(1)