#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß†üòÇüî• Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ üß†üòÇüî•
"""

import logging
from datetime import datetime
from typing import Callable, Dict, Any, Awaitable

from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, User, Message, CallbackQuery

from database.database import get_or_create_user, get_db_session
from database.models import User as DBUser

logger = logging.getLogger(__name__)

class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó"""
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–æ–¥—ñ—ó
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        
        if user and not user.is_bot:
            try:
                # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
                db_user = await get_or_create_user(
                    user_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                
                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                await self.update_last_activity(user.id)
                
                # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–∞
                data["db_user"] = db_user
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ AuthMiddleware: {e}")
                # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        return await handler(event, data)
    
    async def update_last_activity(self, user_id: int):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            with get_db_session() as session:
                user = session.query(DBUser).filter(DBUser.id == user_id).first()
                if user:
                    user.last_active = datetime.utcnow()
                    session.commit()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")

class AntiSpamMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ —Å–ø–∞–º—É"""
    
    def __init__(self, rate_limit: int = 3):
        """
        rate_limit: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞ —Å–µ–∫—É–Ω–¥—É
        """
        self.rate_limit = rate_limit
        self.user_requests = {}  # {user_id: [timestamp1, timestamp2, ...]}
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ —Å–ø–∞–º"""
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        
        if user and not user.is_bot:
            current_time = datetime.now().timestamp()
            user_id = user.id
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            if user_id not in self.user_requests:
                self.user_requests[user_id] = []
            
            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥–∏)
            self.user_requests[user_id] = [
                req_time for req_time in self.user_requests[user_id]
                if current_time - req_time < 1.0
            ]
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤
            if len(self.user_requests[user_id]) >= self.rate_limit:
                logger.warning(f"Rate limit exceeded for user {user_id}")
                
                # –Ø–∫—â–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
                if isinstance(event, Message):
                    try:
                        await event.answer(
                            "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤! –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é."
                        )
                    except:
                        pass
                elif isinstance(event, CallbackQuery):
                    try:
                        await event.answer(
                            "‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –¥—ñ–π! –ó–∞—á–µ–∫–∞–π —Ç—Ä–æ—Ö–∏.",
                            show_alert=True
                        )
                    except:
                        pass
                
                return  # –ë–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä–∞
            
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            self.user_requests[user_id].append(current_time)
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        return await handler(event, data)

class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó"""
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        if isinstance(event, Message):
            user = event.from_user
            logger.info(
                f"üì® Message from {user.id} (@{user.username}): "
                f"{event.text[:50] if event.text else '[Media]'}..."
            )
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è callback –∑–∞–ø–∏—Ç—ñ–≤
        elif isinstance(event, CallbackQuery):
            user = event.from_user
            logger.info(
                f"üîò Callback from {user.id} (@{user.username}): {event.data}"
            )
        
        # –í–∏–∫–ª–∏–∫ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞
        result = await handler(event, data)
        
        return result

class MaintenanceMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è —Ä–µ–∂–∏–º—É —Ç–µ—Ö–Ω—ñ—á–Ω–æ–≥–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
    
    def __init__(self, maintenance_mode: bool = False, admin_id: int = None):
        self.maintenance_mode = maintenance_mode
        self.admin_id = admin_id
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∂–∏–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è"""
        
        if not self.maintenance_mode:
            return await handler(event, data)
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = None
        if isinstance(event, Message):
            user = event.from_user
        elif isinstance(event, CallbackQuery):
            user = event.from_user
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user and user.id == self.admin_id:
            return await handler(event, data)
        
        # –ë–ª–æ–∫—É—î–º–æ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö
        maintenance_text = (
            "üîß <b>–¢–µ—Ö–Ω—ñ—á–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è</b>\n\n"
            "‚è∞ –ë–æ—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π\n"
            "üîÑ –û—á—ñ–∫—É—î—Ç—å—Å—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ –Ω–µ–∑–∞–±–∞—Ä–æ–º\n"
            "üí¨ –î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
        )
        
        if isinstance(event, Message):
            try:
                await event.answer(maintenance_text)
            except:
                pass
        elif isinstance(event, CallbackQuery):
            try:
                await event.answer(
                    "üîß –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—ñ",
                    show_alert=True
                )
            except:
                pass
        
        return  # –ë–ª–æ–∫—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä–∞