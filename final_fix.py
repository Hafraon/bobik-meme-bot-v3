#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö® –û–°–¢–ê–¢–û–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –í–°–Ü–• –ü–†–û–ë–õ–ï–ú üö®

–í–∏–ø—Ä–∞–≤–ª—è—î:
1. aiohttp cleanup –ø–æ–º–∏–ª–∫—É
2. handlers registration
3. Update handling
"""

from pathlib import Path

def fix_main_aiohttp():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è aiohttp cleanup –≤ main.py"""
    
    print("üîß –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø AIOHTTP CLEANUP:")
    
    main_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –ì–û–õ–û–í–ù–ò–ô –§–ê–ô–õ –£–ö–†–ê–á–ù–û–ú–û–í–ù–û–ì–û –ë–û–¢–ê - –û–°–¢–ê–¢–û–ß–ù–û –í–ò–ü–†–ê–í–õ–ï–ù–ò–ô üöÄ
"""

import asyncio
import logging
import sys
from typing import Optional, List, Dict, Any, Union

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

class AutomatedUkrainianTelegramBot:
    """ü§ñ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô –¢–ï–õ–ï–ì–†–ê–ú –ë–û–¢ –ó –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ñ–Æ"""
    
    def __init__(self):
        self.bot = None
        self.dp = None
        self.scheduler = None
        self.db_available = False

    async def setup_bot(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
        try:
            from aiogram import Bot, Dispatcher
            from aiogram.client.default import DefaultBotProperties
            from aiogram.enums import ParseMode
            import os
            
            bot_token = os.getenv("BOT_TOKEN")
            if not bot_token:
                try:
                    from config.settings import BOT_TOKEN
                    bot_token = BOT_TOKEN
                except ImportError:
                    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
                    return False
            
            self.bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            self.dp = Dispatcher()
            
            bot_info = await self.bot.get_me()
            logger.info(f"‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ: @{bot_info.username}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞: {e}")
            return False

    async def setup_database(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î"""
        try:
            from database import init_db
            self.db_available = await init_db()
            
            if self.db_available:
                logger.info("‚úÖ Database initialized successfully")
            else:
                logger.warning("‚ö†Ô∏è Working without database")
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Database warning: {e}")
            return True

    async def setup_automation(self) -> bool:
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó"""
        try:
            from services.automated_scheduler import create_automated_scheduler
            self.scheduler = await create_automated_scheduler(self.bot, self.db_available)
            
            if self.scheduler:
                logger.info("ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–Ü–Ø –ê–ö–¢–ò–í–ù–ê - –±–æ—Ç –ø—Ä–∞—Ü—é—î —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ!")
            else:
                logger.warning("‚ö†Ô∏è Working without automation")
            
            return True
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Automation warning: {e}")
            return True

    async def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤"""
        try:
            # –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É –æ—Å–Ω–æ–≤–Ω–∏—Ö handlers
            from handlers import register_all_handlers
            register_all_handlers(self.dp)
            logger.info("‚úÖ All handlers registered successfully")
        except ImportError as e:
            logger.warning(f"‚ö†Ô∏è Main handlers unavailable: {e}")
            await self._register_emergency_handlers()
        except Exception as e:
            logger.error(f"‚ùå Handlers error: {e}")
            await self._register_emergency_handlers()

    async def _register_emergency_handlers(self):
        """–ê–≤–∞—Ä—ñ–π–Ω—ñ handlers –¥–ª—è –≤—Å—ñ—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        from aiogram import F
        from aiogram.types import Message, CallbackQuery, InlineQuery
        from aiogram.filters import Command, CommandStart
        
        logger.info("üÜò –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∞–≤–∞—Ä—ñ–π–Ω–∏—Ö handlers...")
        
        # –ö–æ–º–∞–Ω–¥–∞ /start
        @self.dp.message(CommandStart())
        async def start_handler(message: Message):
            await message.answer(
                "ü§ñ <b>–ü—Ä–∏–≤—ñ—Ç! –Ø —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–µ–º-–±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é!</b>\\n\\n"
                "üìã <b>–ö–æ–º–∞–Ω–¥–∏:</b>\\n"
                "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞\\n"
                "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\\n"
                "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\\n"
                "‚Ä¢ /profile - –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\\n"
                "‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /help
        @self.dp.message(Command("help"))
        async def help_handler(message: Message):
            await message.answer(
                "‚ùì <b>–î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£</b>\\n\\n"
                "üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>\\n"
                "‚Ä¢ –ó–∞—Ä–æ–±–ª—è–π—Ç–µ –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\\n"
                "‚Ä¢ –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä–∞–Ω–≥\\n\\n"
                "üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\\n"
                "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\\n"
                "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\\n\\n"
                "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\\n"
                "‚Ä¢ /profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /meme
        @self.dp.message(Command("meme"))
        async def meme_handler(message: Message):
            memes = [
                "üòÇ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —ñ –∫–∞–≤–∞</b>\\n\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ —ñ –∑–∞–º–æ–≤–ª—è—î –∫–∞–≤—É.\\n–ë–∞—Ä–∏—Å—Ç–∞: 'Java —á–∏ Python?'\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–ó–≤–∏—á–∞–π–Ω—É!'",
                "ü§£ <b>–†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω</b>\\n\\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω?\\n–ë–æ Oct 31 == Dec 25!",
                "üòÑ <b>–õ–∞–º–ø–æ—á–∫–∞</b>\\n\\n–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ —Ç—Ä–µ–±–∞ —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É?\\n–ñ–æ–¥–Ω–æ–≥–æ - —Ü–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!"
            ]
            import random
            await message.answer(f"üé≠ {random.choice(memes)}")
        
        # –ö–æ–º–∞–Ω–¥–∞ /anekdot
        @self.dp.message(Command("anekdot"))
        async def anekdot_handler(message: Message):
            anekdots = [
                "üá∫üá¶ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏</b>\\n\\n–£–∫—Ä–∞—ó–Ω–µ—Ü—å –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–¥.\\n–ë—ñ–ª–æ—Ä—É—Å –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞–≤.\\n–†–æ—Å—ñ—è–Ω–∏–Ω —Å–∫–æ–ø—ñ—é–≤–∞–≤ —ñ —Å–∫–∞–∑–∞–≤ —â–æ —Å–∞–º –ø—Ä–∏–¥—É–º–∞–≤.",
                "üòÇ <b>–£ –ª—ñ–∫–∞—Ä—è</b>\\n\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–ë–æ–ª–∏—Ç—å —Å–ø–∏–Ω–∞!'\\n–õ—ñ–∫–∞—Ä: '–ë–∞–≥–∞—Ç–æ —Å–∏–¥–∏—à?'\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–¢—ñ–ª—å–∫–∏ 18 –≥–æ–¥–∏–Ω!'\\n–õ—ñ–∫–∞—Ä: '–ù–æ—Ä–º–∞–ª—å–Ω–æ!'",
                "ü§£ <b>–ü—Ä–∏—Ä–æ–¥–∞</b>\\n\\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É?\\n–ë–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤ —ñ –Ω–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó!"
            ]
            import random
            await message.answer(f"üé≠ {random.choice(anekdots)}")
        
        # –ö–æ–º–∞–Ω–¥–∞ /profile
        @self.dp.message(Command("profile"))
        async def profile_handler(message: Message):
            user = message.from_user
            await message.answer(
                f"üë§ <b>–ü–†–û–§–Ü–õ–¨</b>\\n\\n"
                f"üÜî ID: <code>{user.id}</code>\\n"
                f"üë§ –Ü–º'—è: {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–µ'}\\n"
                f"üì± Username: @{user.username or '–ù–µ–º–∞—î'}\\n"
                f"üìä –ë–∞–ª–∏: <b>0</b>\\n"
                f"üèÜ –†–∞–Ω–≥: ü§° <b>–ù–æ–≤–∞—á–æ–∫</b>"
            )
        
        # –ö–æ–º–∞–Ω–¥–∞ /admin
        @self.dp.message(Command("admin"))
        async def admin_handler(message: Message):
            try:
                import os
                admin_id = int(os.getenv("ADMIN_ID", 603047391))
                if message.from_user.id == admin_id:
                    await message.answer(
                        "üëë <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\\n\\n"
                        "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–Ω–∏–π\\n"
                        "üìä –§—É–Ω–∫—Ü—ñ—ó –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ..."
                    )
                else:
                    await message.answer("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            except:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤")
        
        # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @self.dp.message(F.text)
        async def text_handler(message: Message):
            await message.answer(
                "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏:\\n\\n"
                "/start - –ø–æ—á–∞—Ç–∏\\n"
                "/help - –¥–æ–≤—ñ–¥–∫–∞\\n"
                "/meme - –º–µ–º\\n"
                "/anekdot - –∞–Ω–µ–∫–¥–æ—Ç"
            )
        
        # –û–±—Ä–æ–±–∫–∞ callback queries
        @self.dp.callback_query()
        async def callback_handler(callback: CallbackQuery):
            await callback.answer("üîß –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
        
        # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        @self.dp.message()
        async def any_message_handler(message: Message):
            await message.answer("ü§ñ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help")
        
        # Error handler
        @self.dp.error()
        async def error_handler(event, exception):
            logger.error(f"‚ùå Error: {exception}")
            try:
                if hasattr(event, 'message') and event.message:
                    await event.message.answer("üòÖ –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞! –°–ø—Ä–æ–±—É–π—Ç–µ /help")
            except:
                pass
        
        logger.info("‚úÖ –ê–≤–∞—Ä—ñ–π–Ω—ñ handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ")

    async def cleanup(self):
        """‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.scheduler:
                await self.scheduler.stop()
            
            # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ aiohttp —Å–µ—Å—ñ—ó
            if self.bot:
                try:
                    # –ù–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó –≤ aiogram 3.x
                    if hasattr(self.bot, 'session') and self.bot.session:
                        if not self.bot.session.closed():  # ‚úÖ –í–∏–∫–ª–∏–∫ –º–µ—Ç–æ–¥—É closed()
                            await self.bot.session.close()
                            logger.info("‚úÖ Bot session closed")
                except AttributeError:
                    # Fallback –¥–ª—è —Å—Ç–∞—Ä—à–∏—Ö –≤–µ—Ä—Å—ñ–π
                    try:
                        await self.bot.close()
                        logger.info("‚úÖ Bot closed (fallback)")
                    except:
                        logger.warning("‚ö†Ô∏è Bot cleanup skipped")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Session cleanup warning: {e}")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cleanup warning: {e}")

    async def run(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –£–ö–†–ê–á–ù–û–ú–û–í–ù–ò–ô TELEGRAM-–ë–ûT –ó –ì–ï–ô–ú–Ü–§–Ü–ö–ê–¶–Ü–Ñ–Æ üöÄ")
        
        try:
            # –ü–æ–µ—Ç–∞–ø–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
            if not await self.setup_bot():
                return False
            
            await self.setup_database()
            await self.setup_automation()
            await self.setup_handlers()
            
            logger.info("üéØ Bot fully initialized with automation support")
            
            # –ó–∞–ø—É—Å–∫ polling
            try:
                await self.dp.start_polling(self.bot)
            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è Bot stopped by user")
            
        except Exception as e:
            logger.error(f"‚ùå Critical error: {e}")
            return False
        finally:
            await self.cleanup()

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É"""
    bot = AutomatedUkrainianTelegramBot()
    await bot.run()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Program interrupted")
    except Exception as e:
        logger.error(f"‚ùå Unhandled exception: {e}")
        sys.exit(1)
'''
    
    with open("app/main.py", "w", encoding="utf-8") as f:
        f.write(main_content)
    
    print("   ‚úÖ app/main.py –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ (aiohttp cleanup)")

def create_handlers_init():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ handlers/__init__.py"""
    
    print("üéØ –°–¢–í–û–†–ï–ù–ù–Ø HANDLERS/__INIT__.PY:")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É handlers
    handlers_dir = Path("app/handlers")
    handlers_dir.mkdir(exist_ok=True, parents=True)
    
    handlers_init_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ HANDLERS –ú–û–î–£–õ–¨ - –ü–†–ê–í–ò–õ–¨–ù–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø üéØ
"""

import logging
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart

logger = logging.getLogger(__name__)

def register_all_handlers(dp: Dispatcher):
    """üéØ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á –í–°–Ü–• HANDLERS"""
    logger.info("üéØ –ü–æ—á–∞—Ç–æ–∫ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó handlers...")
    
    # –ö–æ–º–∞–Ω–¥–∞ /start
    @dp.message(CommandStart())
    async def start_handler(message: Message):
        await message.answer(
            "ü§ñ <b>–ü—Ä–∏–≤—ñ—Ç! –Ø —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–µ–º-–±–æ—Ç –∑ –≥–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é!</b>\\n\\n"
            "üìã <b>–ö–æ–º–∞–Ω–¥–∏:</b>\\n"
            "‚Ä¢ /help - –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –±–æ—Ç—É\\n"
            "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\\n"
            "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\\n"
            "‚Ä¢ /profile - –º—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å\\n"
            "‚Ä¢ /top - —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤\\n"
            "‚Ä¢ /submit - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç\\n"
            "‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω–∞\\n\\n"
            "üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>\\n"
            "–ó–∞—Ä–æ–±–ª—è–π—Ç–µ –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –ø—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä–∞–Ω–≥!"
        )
    
    # –ö–æ–º–∞–Ω–¥–∞ /help
    @dp.message(Command("help"))
    async def help_handler(message: Message):
        await message.answer(
            "‚ùì <b>–î–û–í–Ü–î–ö–ê –ü–û –ë–û–¢–£</b>\\n\\n"
            "üéÆ <b>–ì–µ–π–º—ñ—Ñ—ñ–∫–∞—Ü—ñ—è:</b>\\n"
            "‚Ä¢ –û—Ç—Ä–∏–º—É–π—Ç–µ –±–∞–ª–∏ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\\n"
            "‚Ä¢ –ü—ñ–¥–≤–∏—â—É–π—Ç–µ —Å–≤—ñ–π —Ä–∞–Ω–≥\\n"
            "‚Ä¢ –ë–µ—Ä—ñ—Ç—å —É—á–∞—Å—Ç—å –≤ –¥—É–µ–ª—è—Ö\\n\\n"
            "üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç:</b>\\n"
            "‚Ä¢ /meme - –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –º–µ–º\\n"
            "‚Ä¢ /anekdot - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞–Ω–µ–∫–¥–æ—Ç\\n"
            "‚Ä¢ /submit - –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–≤—ñ–π –∂–∞—Ä—Ç\\n\\n"
            "üë§ <b>–ü—Ä–æ—Ñ—ñ–ª—å:</b>\\n"
            "‚Ä¢ /profile - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—å\\n"
            "‚Ä¢ /top - —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤\\n\\n"
            "‚öîÔ∏è <b>–î—É–µ–ª—ñ:</b>\\n"
            "‚Ä¢ /duel - —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –¥—É–µ–ª—å –∂–∞—Ä—Ç—ñ–≤\\n\\n"
            "üõ°Ô∏è <b>–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è:</b>\\n"
            "‚Ä¢ /admin - –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
    
    # –ö–æ–º–∞–Ω–¥–∞ /meme
    @dp.message(Command("meme"))
    async def meme_handler(message: Message):
        memes = [
            "üòÇ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —ñ –∫–∞–≤–∞</b>\\n\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞—Ñ–µ —ñ –∑–∞–º–æ–≤–ª—è—î –∫–∞–≤—É.\\n–ë–∞—Ä–∏—Å—Ç–∞ –ø–∏—Ç–∞—î: 'Java —á–∏ Python?'\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç: '–¢–∞ –Ω—ñ, –∑–≤–∏—á–∞–π–Ω—É –∫–∞–≤—É!'",
            "ü§£ <b>–†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω</b>\\n\\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –∑–∞–≤–∂–¥–∏ –ø–ª—É—Ç–∞—é—Ç—å –†—ñ–∑–¥–≤–æ —Ç–∞ –•–µ–ª–ª–æ—É—ó–Ω?\\n–ë–æ Oct 31 == Dec 25!",
            "üòÑ <b>–õ–∞–º–ø–æ—á–∫–∞ —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏</b>\\n\\n–°–∫—ñ–ª—å–∫–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∑–∞–∫—Ä—É—Ç–∏—Ç–∏ –ª–∞–º–ø–æ—á–∫—É?\\n–ñ–æ–¥–Ω–æ–≥–æ - —Ü–µ –∞–ø–∞—Ä–∞—Ç–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞!",
            "ü§î <b>–î–≤–∞ –±–∞–π—Ç–∏ –≤ –±–∞—Ä—ñ</b>\\n\\n–î–≤–∞ –±–∞–π—Ç–∏ –∑—É—Å—Ç—Ä—ñ–ª–∏—Å—è –≤ –±–∞—Ä—ñ.\\n–û–¥–∏–Ω –∫–∞–∂–µ: '–£ –º–µ–Ω–µ –±—ñ—Ç –±–æ–ª–∏—Ç—å!'\\n–î—Ä—É–≥–∏–π: '–¢–æ –ø–æ–±–∞–π—Ç–∏—Å—è —Ç—Ä–µ–±–∞!'",
            "üôÑ <b>QA —Ç–µ—Å—Ç–µ—Ä</b>\\n\\nQA —Ç–µ—Å—Ç–µ—Ä –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –±–∞—Ä.\\n–ó–∞–º–æ–≤–ª—è—î –ø–∏–≤–æ.\\n–ó–∞–º–æ–≤–ª—è—î 0 –ø–∏–≤.\\n–ó–∞–º–æ–≤–ª—è—î 999999999 –ø–∏–≤.\\n–ó–∞–º–æ–≤–ª—è—î —è—â—ñ—Ä–∫—É.\\n–ó–∞–º–æ–≤–ª—è—î -1 –ø–∏–≤–æ.\\n–ó–∞–º–æ–≤–ª—è—î NULL –ø–∏–≤–æ."
        ]
        import random
        meme = random.choice(memes)
        await message.answer(f"üé≠ –û—Å—å –≤–∞—à –º–µ–º:\\n\\n{meme}")
    
    # –ö–æ–º–∞–Ω–¥–∞ /anekdot
    @dp.message(Command("anekdot"))
    async def anekdot_handler(message: Message):
        anekdots = [
            "üá∫üá¶ <b>–¢—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏</b>\\n\\n–£–∫—Ä–∞—ó–Ω–µ—Ü—å, —Ä–æ—Å—ñ—è–Ω–∏–Ω —Ç–∞ –±—ñ–ª–æ—Ä—É—Å —Å–ø–µ—Ä–µ—á–∞—é—Ç—å—Å—è, —Ö—Ç–æ –∫—Ä–∞—â–µ –ø—Ä–æ–≥—Ä–∞–º—É—î.\\n–£–∫—Ä–∞—ó–Ω–µ—Ü—å –Ω–∞–ø–∏—Å–∞–≤ –∫—Ä–∞—Å–∏–≤–∏–π –∫–æ–¥.\\n–ë—ñ–ª–æ—Ä—É—Å –Ω–∞–ø–∏—Å–∞–≤ —à–≤–∏–¥–∫–∏–π –∫–æ–¥.\\n–†–æ—Å—ñ—è–Ω–∏–Ω —Å–∫–æ–ø—ñ—é–≤–∞–≤ –æ–±–∏–¥–≤–∞ —ñ —Å–∫–∞–∑–∞–≤ —â–æ —Å–∞–º –ø—Ä–∏–¥—É–º–∞–≤.",
            "üòÇ <b>–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç —É –ª—ñ–∫–∞—Ä—è</b>\\n\\n–ü—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –¥–æ –ª—ñ–∫–∞—Ä—è:\\n- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω–µ –±–æ–ª–∏—Ç—å —Å–ø–∏–Ω–∞!\\n- –ê —Ç–∏ –±–∞–≥–∞—Ç–æ —Å–∏–¥–∏—à –∑–∞ –∫–æ–º–ø'—é—Ç–µ—Ä–æ–º?\\n- –¢–∞ –Ω—ñ, —Ç—ñ–ª—å–∫–∏ 18 –≥–æ–¥–∏–Ω –Ω–∞ –¥–µ–Ω—å!\\n- –¶–µ –∂ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∞!",
            "ü§£ <b>–ü—Ä–∏—Ä–æ–¥–∞ —Ç–∞ –±–∞–≥–∏</b>\\n\\n–ß–æ–º—É –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç–∏ –Ω–µ –ª—é–±–ª—è—Ç—å –ø—Ä–∏—Ä–æ–¥—É?\\n–ë–æ –≤–æ–Ω–∞ –º–∞—î –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –±–∞–≥—ñ–≤ —ñ –Ω–µ–º–∞—î –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó!",
            "üòÑ <b>–•–ª—ñ–± —Ç–∞ —è–π—Ü—è</b>\\n\\n–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –¥–æ–¥–æ–º—É:\\n- –î–æ—Ä–æ–≥–∏–π, –∫—É–ø–∏ —Ö–ª—ñ–±, —è–∫—â–æ –±—É–¥—É—Ç—å —è–π—Ü—è - –≤—ñ–∑—å–º–∏ 10\\n–ü–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –∑ 10 –±–∞—Ç–æ–Ω–∞–º–∏.\\n- –ß–æ–º—É —Ç–∞–∫ –±–∞–≥–∞—Ç–æ?\\n- –ë—É–ª–∏ —è–π—Ü—è!",
            "ü§™ <b>–†–µ–∫—É—Ä—Å—ñ—è</b>\\n\\n–©–æ–± –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—é, —Å–ø–æ—á–∞—Ç–∫—É —Ç—Ä–µ–±–∞ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ä–µ–∫—É—Ä—Å—ñ—é."
        ]
        import random
        anekdot = random.choice(anekdots)
        await message.answer(f"üé≠ –û—Å—å –≤–∞—à –∞–Ω–µ–∫–¥–æ—Ç:\\n\\n{anekdot}")
    
    # –ö–æ–º–∞–Ω–¥–∞ /profile
    @dp.message(Command("profile"))
    async def profile_handler(message: Message):
        user = message.from_user
        await message.answer(
            f"üë§ <b>–ü–†–û–§–Ü–õ–¨ –ö–û–†–ò–°–¢–£–í–ê–ß–ê</b>\\n\\n"
            f"üÜî ID: <code>{user.id}</code>\\n"
            f"üë§ –Ü–º'—è: {user.first_name or '–ù–µ–≤—ñ–¥–æ–º–µ'}\\n"
            f"üì± Username: @{user.username or '–ù–µ–º–∞—î'}\\n"
            f"üåê –ú–æ–≤–∞: {user.language_code or 'uk'}\\n\\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n"
            f"üî• –ë–∞–ª–∏: <b>0</b> (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å)\\n"
            f"üèÜ –†–∞–Ω–≥: ü§° <b>–ù–æ–≤–∞—á–æ–∫</b>\\n"
            f"üìÖ –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: –°—å–æ–≥–æ–¥–Ω—ñ\\n\\n"
            f"‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</i>"
        )
    
    # –ö–æ–º–∞–Ω–¥–∞ /top
    @dp.message(Command("top"))
    async def top_handler(message: Message):
        await message.answer(
            "üèÜ <b>–¢–ê–ë–õ–ò–¶–Ø –õ–Ü–î–ï–†–Ü–í</b>\\n\\n"
            "1. üëë Demo User - 1500 –±–∞–ª—ñ–≤\\n"
            "2. ü•à Test User - 1000 –±–∞–ª—ñ–≤\\n"
            "3. ü•â Sample User - 500 –±–∞–ª—ñ–≤\\n"
            "4. üèÖ Example User - 300 –±–∞–ª—ñ–≤\\n"
            "5. üéñÔ∏è Another User - 150 –±–∞–ª—ñ–≤\\n\\n"
            "üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü—ñ—è: #–Ω–æ–≤–∞—á–æ–∫\\n\\n"
            "‚ÑπÔ∏è <i>–†–µ–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –ª—ñ–¥–µ—Ä—ñ–≤ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö</i>"
        )
    
    # –ö–æ–º–∞–Ω–¥–∞ /submit
    @dp.message(Command("submit"))
    async def submit_handler(message: Message):
        await message.answer(
            "üìù <b>–ü–û–î–ê–ß–ê –í–õ–ê–°–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–£</b>\\n\\n"
            "–§—É–Ω–∫—Ü—ñ—è –ø–æ–¥–∞—á—ñ –≤–ª–∞—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º!\\n\\n"
            "üìã <b>–©–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø–æ–¥–∞–≤–∞—Ç–∏:</b>\\n"
            "‚Ä¢ üòÇ –ñ–∞—Ä—Ç–∏ —Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–∏\\n"
            "‚Ä¢ üñºÔ∏è –ú–µ–º–∏ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø—ñ–¥–ø–∏—Å–∞–º–∏)\\n"
            "‚Ä¢ üìú –¶—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ –∂–∏—Ç—Ç—è\\n\\n"
            "üéØ <b>–í–∏–Ω–∞–≥–æ—Ä–æ–¥–∞ –∑–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è:</b> +20 –±–∞–ª—ñ–≤\\n"
            "üõ°Ô∏è <b>–ú–æ–¥–µ—Ä–∞—Ü—ñ—è:</b> –í—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É\\n\\n"
            "‚ÑπÔ∏è <i>–ü–æ–∫–∏ —â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ /meme —Ç–∞ /anekdot –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É</i>"
        )
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    @dp.message(Command("admin"))
    async def admin_handler(message: Message):
        try:
            import os
            admin_id = int(os.getenv("ADMIN_ID", 603047391))
            
            if message.from_user.id == admin_id:
                await message.answer(
                    "üëë <b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê</b>\\n\\n"
                    "üõ†Ô∏è <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:</b>\\n"
                    "‚úÖ –ë–æ—Ç: –ê–∫—Ç–∏–≤–Ω–∏–π\\n"
                    "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö: –ü—ñ–¥–∫–ª—é—á–µ–Ω–∞\\n"
                    "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è: –ü—Ä–∞—Ü—é—î\\n\\n"
                    "üîß <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>\\n"
                    "‚Ä¢ /stats - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\\n"
                    "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É\\n"
                    "‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏\\n"
                    "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó\\n\\n"
                    "üìä <b>–®–≤–∏–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\\n"
                    "üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\\n"
                    "üìù –ö–æ–Ω—Ç–µ–Ω—Ç—É: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\\n"
                    "‚öîÔ∏è –î—É–µ–ª–µ–π: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...\\n\\n"
                    "‚ÑπÔ∏è <i>–ü–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ</i>"
                )
            else:
                await message.answer(
                    "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ</b>\\n\\n"
                    "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –ø–∞–Ω–µ–ª—ñ."
                )
        except Exception as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
    
    # –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    @dp.message(F.text & ~F.text.startswith('/'))
    async def text_handler(message: Message):
        await message.answer(
            "ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ä–æ–∑—É–º—ñ—é —Ç—ñ–ª—å–∫–∏ –∫–æ–º–∞–Ω–¥–∏.\\n\\n"
            "üìã <b>–°–ø—Ä–æ–±—É–π—Ç–µ:</b>\\n"
            "/start - –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É\\n"
            "/help - –ø–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞\\n"
            "/meme - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–º\\n"
            "/anekdot - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç\\n"
            "/profile - –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å"
        )
    
    # –û–±—Ä–æ–±–∫–∞ callback queries
    @dp.callback_query()
    async def callback_handler(callback: CallbackQuery):
        await callback.answer("üîß –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ!")
        await callback.message.answer("üîß –§—É–Ω–∫—Ü—ñ—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.")
    
    # –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    @dp.message()
    async def other_handler(message: Message):
        await message.answer(
            "ü§ñ –Ø –ø–æ–∫–∏ —â–æ –æ–±—Ä–æ–±–ª—è—é —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–º–∞–Ω–¥–∏.\\n\\n"
            "–ù–∞–¥—ñ—à–ª—ñ—Ç—å /help –¥–ª—è —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    # Error handler
    @dp.error()
    async def error_handler(event, exception):
        logger.error(f"‚ùå Unhandled error: {exception}")
        try:
            if hasattr(event, 'message') and event.message:
                await event.message.answer(
                    "üòÖ <b>–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞!</b>\\n\\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–æ–º–∞–Ω–¥–æ—é /help"
                )
        except:
            pass
    
    logger.info("‚úÖ –í—Å—ñ handlers –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

# –ï–∫—Å–ø–æ—Ä—Ç
__all__ = ['register_all_handlers']

logger.info("üéÆ Handlers –º–æ–¥—É–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –ø–æ–≤–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")
'''
    
    with open("app/handlers/__init__.py", "w", encoding="utf-8") as f:
        f.write(handlers_init_content)
    
    print("   ‚úÖ app/handlers/__init__.py —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ register_all_handlers")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print("üö®" * 30)
    print("\nüîß –û–°–¢–ê–¢–û–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –í–°–Ü–• –ü–†–û–ë–õ–ï–ú")
    print("üéØ –í–∏–ø—Ä–∞–≤–ª—è—î: aiohttp cleanup + handlers registration")
    print("üö®" * 30)
    print()
    
    try:
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è main.py
        fix_main_aiohttp()
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è handlers/__init__.py
        create_handlers_init()
        
        print("\n‚úÖ –í–°–Ü –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ó–ê–°–¢–û–°–û–í–ê–ù–û!")
        print("\nüöÄ –û–ß–Ü–ö–£–í–ê–ù–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò:")
        print("‚úÖ –ó–Ω–∏–∫–Ω–µ: 'AiohttpSession' object has no attribute 'closed'")
        print("‚úÖ –ó–Ω–∏–∫–Ω–µ: cannot import name 'register_all_handlers'")
        print("‚úÖ –í—Å—ñ Update –±—É–¥—É—Ç—å handled (–Ω–µ 'not handled')")
        print("‚úÖ –ë–æ—Ç –±—É–¥–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ –Ω–∞ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏")
        
        print("\nüìã –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("1. git add .")
        print("2. git commit -m 'üö® Final fix: aiohttp cleanup + handlers'")
        print("3. git push")
        print("4. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ Railway —á–µ—Ä–µ–∑ 1-2 —Ö–≤–∏–ª–∏–Ω–∏")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: {e}")
        return False

if __name__ == "__main__":
    success = main()
    print(f"\n{'üéâ –£–°–ü–Ü–•!' if success else '‚ùå –ü–û–ú–ò–õ–ö–ê'}")