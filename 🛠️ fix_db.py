#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ†Ô∏è –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•

–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ë–î —É–∫—Ä–∞—ó–Ω–æ–º–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–¥–∞—î–º–æ app/ –¥–æ path
app_dir = Path(__file__).parent / "app"
if app_dir.exists():
    sys.path.insert(0, str(app_dir))

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def print_header():
    print("üõ†Ô∏è" * 25)
    print("\nüíæ –®–í–ò–î–ö–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –ë–î")
    print("üõ†Ô∏è" * 25)
    print()

def check_prerequisites():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–¥—É–º–æ–≤"""
    print("üîç –ü–ï–†–ï–í–Ü–†–ö–ê –ü–ï–†–ï–î–£–ú–û–í:")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö
    required_vars = ['BOT_TOKEN', 'ADMIN_ID', 'DATABASE_URL']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        print(f"‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ: {', '.join(missing_vars)}")
        return False
    
    print("‚úÖ –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ OK")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    if not app_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ app/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É OK")
    return True

def backup_database():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)"""
    print("\nüíæ –†–ï–ó–ï–†–í–ù–ï –ö–û–ü–Ü–Æ–í–ê–ù–ù–Ø:")
    
    try:
        database_url = os.getenv('DATABASE_URL', '')
        
        if 'sqlite' in database_url.lower():
            # –î–ª—è SQLite –º–æ–∂–µ–º–æ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–ø—ñ—é —Ñ–∞–π–ª—É
            if '///' in database_url:
                db_path = database_url.split(':///')[-1]
                if Path(db_path).exists():
                    backup_path = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                    import shutil
                    shutil.copy2(db_path, backup_path)
                    print(f"‚úÖ SQLite backup: {backup_path}")
                    return True
        
        print("‚ö†Ô∏è PostgreSQL - —Ä–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ backup: {e}")
        return True  # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ backup –Ω–µ –≤–¥–∞–≤—Å—è

async def fix_database_imports():
    """–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—ñ–≤ database"""
    print("\nüì¶ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –Ü–ú–ü–û–†–¢–Ü–í:")
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤
        from config.settings import settings
        print("‚úÖ Settings —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        from database.models import Base, User, Content
        print("‚úÖ Models —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π database
        from database.database import (
            init_db, get_db_session, 
            check_if_migration_needed, migrate_database
        )
        print("‚úÖ Database —Ñ—É–Ω–∫—Ü—ñ—ó —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
        return False

async def initialize_database():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î"""
    print("\nüöÄ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–ê–ó–ò –î–ê–ù–ò–•:")
    
    try:
        from database.database import (
            init_db, check_if_migration_needed, 
            migrate_database, verify_database_integrity
        )
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ –º—ñ–≥—Ä–∞—Ü—ñ—ó
        print("  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
        migration_needed = await check_if_migration_needed()
        
        if migration_needed:
            print("  üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è –º—ñ–≥—Ä–∞—Ü—ñ—ó...")
            await migrate_database()
            print("  ‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("  ‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        print("  üîß –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î...")
        init_result = await init_db()
        
        if init_result:
            print("  ‚úÖ –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
        else:
            print("  ‚ö†Ô∏è –ë–î —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –∑ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è–º–∏")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ
        print("  üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ...")
        integrity = await verify_database_integrity()
        
        if integrity:
            print("  ‚úÖ –¶—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—å –ë–î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")
        else:
            print("  ‚ö†Ô∏è –í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Ü—ñ–ª—ñ—Å–Ω—ñ—Å—Ç—é")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
        return False

async def test_basic_operations():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–æ–≤–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –ë–î"""
    print("\nüß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ë–ê–ó–û–í–ò–• –û–ü–ï–†–ê–¶–Ü–ô:")
    
    try:
        from database.database import (
            get_or_create_user, update_user_points, 
            get_random_approved_content, ContentType
        )
        
        # –¢–µ—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("  üë§ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        test_user = await get_or_create_user(
            telegram_id=999999999,
            username="test_fix_user",
            first_name="Test Fix"
        )
        
        if test_user:
            print("  ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π/–∑–Ω–∞–π–¥–µ–Ω–∏–π")
            
            # –¢–µ—Å—Ç –±–∞–ª—ñ–≤
            print("  üí∞ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–ª—ñ–≤...")
            points_result = await update_user_points(999999999, 5)
            if points_result:
                print("  ‚úÖ –ë–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("  ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª—ñ–≤")
        else:
            print("  ‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É
        print("  üìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É...")
        content = await get_random_approved_content(ContentType.JOKE)
        if content:
            print("  ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            print("  ‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ, —â–µ –Ω–µ –¥–æ–¥–∞–Ω–æ)")
        
        print("‚úÖ –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

async def create_admin_user():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    print("\nüëë –°–¢–í–û–†–ï–ù–ù–Ø –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–û–†–ê:")
    
    try:
        from database.database import ensure_admin_exists
        
        await ensure_admin_exists()
        print("‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω–∞: {e}")
        return False

def update_main_py():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è app/main.py –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏ –∑ –ë–î"""
    print("\nüîß –ü–ï–†–ï–í–Ü–†–ö–ê –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á –ó app/main.py:")
    
    main_py_path = app_dir / "main.py"
    
    if not main_py_path.exists():
        print("‚ö†Ô∏è app/main.py –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return True
    
    try:
        with open(main_py_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –ë–î
        if 'from database import' in content or 'import database' in content:
            print("‚úÖ Database —ñ–º–ø–æ—Ä—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ app/main.py")
        else:
            print("‚ö†Ô∏è Database —ñ–º–ø–æ—Ä—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –≤ app/main.py")
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ app/main.py: {e}")
        return True

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è"""
    print_header()
    
    success_steps = 0
    total_steps = 6
    
    try:
        # –ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–¥—É–º–æ–≤–∏
        if check_prerequisites():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 1/6: –ü–µ—Ä–µ–¥—É–º–æ–≤–∏")
        else:
            print("‚ùå –ö—Ä–æ–∫ 1/6: –ü–µ—Ä–µ–¥—É–º–æ–≤–∏ –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω—ñ")
            return False
        
        # –ö—Ä–æ–∫ 2: Backup
        if backup_database():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 2/6: Backup")
        
        # –ö—Ä–æ–∫ 3: –Ü–º–ø–æ—Ä—Ç–∏
        if await fix_database_imports():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 3/6: –Ü–º–ø–æ—Ä—Ç–∏")
        else:
            print("‚ùå –ö—Ä–æ–∫ 3/6: –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–º–ø–æ—Ä—Ç–∞–º–∏")
        
        # –ö—Ä–æ–∫ 4: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
        if await initialize_database():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 4/6: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î")
        else:
            print("‚ùå –ö—Ä–æ–∫ 4/6: –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é")
        
        # –ö—Ä–æ–∫ 5: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        if await test_basic_operations():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 5/6: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        
        # –ö—Ä–æ–∫ 6: –ê–¥–º—ñ–Ω
        if await create_admin_user():
            success_steps += 1
            print("‚úÖ –ö—Ä–æ–∫ 6/6: –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–æ: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
        update_main_py()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\nüìä –ü–Ü–î–°–£–ú–û–ö –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø:")
    print("=" * 50)
    
    if success_steps >= total_steps - 1:  # –î–æ–∑–≤–æ–ª—è—î–º–æ 1 –Ω–µ–≤–¥–∞—á—É
        print("üéâ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–î –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û!")
        print(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ {success_steps}/{total_steps} –∫—Ä–æ–∫—ñ–≤")
        print("\nüöÄ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç–∞: python main.py")
        print("2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —â–æ –ë–î –ø—Ä–∞—Ü—é—î –≤ –ª–æ–≥–∞—Ö")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–∏ –≤ Telegram")
        return True
    else:
        print("‚ö†Ô∏è –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –ë–î –ß–ê–°–¢–ö–û–í–ï")
        print(f"‚ö†Ô∏è –í–∏–∫–æ–Ω–∞–Ω–æ –ª–∏—à–µ {success_steps}/{total_steps} –∫—Ä–æ–∫—ñ–≤")
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:")
        print("1. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
        print("2. –ú–æ–∂–ª–∏–≤–æ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —Ñ–∞–π–ª app/database/database.py")
        print("3. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –∑–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)